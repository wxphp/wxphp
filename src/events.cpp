/*
 * @author Mário Soares
 * @contributors Jefferson González
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "appmanagement.h"
#include "aui.h"
#include "bookctrl.h"
#include "cfg.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "dnd.h"
#include "docview.h"
#include "dvc.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "help.h"
#include "html.h"
#include "logging.h"
#include "managedwnd.h"
#include "media.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "net.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "webview.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "others.h"


BEGIN_EXTERN_C()
void php_wxEventFilter_free(void *object TSRMLS_DC) 
{
    zo_wxEventFilter* custom_object = (zo_wxEventFilter*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEventFilter_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxEventFilter done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxEventFilter_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEventFilter_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxEventFilter* custom_object;
    custom_object = (zo_wxEventFilter*) emalloc(sizeof(zo_wxEventFilter));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxEventFilter_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXEVENTFILTER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxEventFilter::FilterEvent(wxEvent &event)
   Override this method to implement event pre-processing. */
int wxEventFilter_php::FilterEvent(wxEvent& event)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxEventFilter::FilterEvent\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "FilterEvent", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxEvent_entry);
	((zo_wxEvent*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxEvent_php*) &event;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "FilterEvent", 11, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxEventFilter::FilterEvent'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return (int) Z_LVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto  wxEventFilter::wxEventFilter()
   Default constructor. */
PHP_METHOD(php_wxEventFilter, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEventFilter::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEventFilter* current_object;
	wxEventFilter_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxEventFilter_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxEventFilter*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxEventFilter::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxKeyboardState_free(void *object TSRMLS_DC) 
{
    zo_wxKeyboardState* custom_object = (zo_wxKeyboardState*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxKeyboardState_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxKeyboardState done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxKeyboardState_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxKeyboardState_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxKeyboardState* custom_object;
    custom_object = (zo_wxKeyboardState*) emalloc(sizeof(zo_wxKeyboardState));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxKeyboardState_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXKEYBOARDSTATE_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxKeyboardState::AltDown()
   Returns true if the Alt key is pressed. */
PHP_METHOD(php_wxKeyboardState, AltDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::AltDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::AltDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::AltDown())\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyEvent_php*)native_object)->AltDown());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseState_php*)native_object)->AltDown());
				}
				else if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->AltDown());
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyboardState_php*)native_object)->AltDown());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::AltDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxKeyboardState::CmdDown()
   Returns true if the key used for command accelerators is pressed. */
PHP_METHOD(php_wxKeyboardState, CmdDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::CmdDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::CmdDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::CmdDown())\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyEvent_php*)native_object)->CmdDown());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseState_php*)native_object)->CmdDown());
				}
				else if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->CmdDown());
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyboardState_php*)native_object)->CmdDown());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::CmdDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxKeyboardState::ControlDown()
   Returns true if the Control key or Apple/Command key under OS X is pressed. */
PHP_METHOD(php_wxKeyboardState, ControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::ControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::ControlDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::ControlDown())\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyEvent_php*)native_object)->ControlDown());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseState_php*)native_object)->ControlDown());
				}
				else if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->ControlDown());
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyboardState_php*)native_object)->ControlDown());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::ControlDown\n");
	}
}
/* }}} */

/* {{{ proto int wxKeyboardState::GetModifiers()
   Return the bit mask of all pressed modifier keys. */
PHP_METHOD(php_wxKeyboardState, GetModifiers)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::GetModifiers\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::GetModifiers call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxKeyboardState::GetModifiers())\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					ZVAL_LONG(return_value, ((wxKeyEvent_php*)native_object)->GetModifiers());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_LONG(return_value, ((wxMouseState_php*)native_object)->GetModifiers());
				}
				else if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_LONG(return_value, ((wxMouseEvent_php*)native_object)->GetModifiers());
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					ZVAL_LONG(return_value, ((wxKeyboardState_php*)native_object)->GetModifiers());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::GetModifiers\n");
	}
}
/* }}} */

/* {{{ proto bool wxKeyboardState::HasModifiers()
   Returns true if Control or Alt are pressed. */
PHP_METHOD(php_wxKeyboardState, HasModifiers)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::HasModifiers\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::HasModifiers call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::HasModifiers())\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyEvent_php*)native_object)->HasModifiers());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseState_php*)native_object)->HasModifiers());
				}
				else if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->HasModifiers());
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyboardState_php*)native_object)->HasModifiers());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::HasModifiers\n");
	}
}
/* }}} */

/* {{{ proto bool wxKeyboardState::MetaDown()
   Returns true if the Meta/Windows/Apple key is pressed. */
PHP_METHOD(php_wxKeyboardState, MetaDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::MetaDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::MetaDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::MetaDown())\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyEvent_php*)native_object)->MetaDown());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseState_php*)native_object)->MetaDown());
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyboardState_php*)native_object)->MetaDown());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::MetaDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxKeyboardState::RawControlDown()
   Returns true if the Control key (also under OS X). */
PHP_METHOD(php_wxKeyboardState, RawControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::RawControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::RawControlDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::RawControlDown())\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyEvent_php*)native_object)->RawControlDown());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseState_php*)native_object)->RawControlDown());
				}
				else if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->RawControlDown());
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyboardState_php*)native_object)->RawControlDown());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::RawControlDown\n");
	}
}
/* }}} */

/* {{{ proto  wxKeyboardState::SetAltDown(bool down) */
PHP_METHOD(php_wxKeyboardState, SetAltDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::SetAltDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::SetAltDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyboardState::SetAltDown(down0)\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					((wxKeyEvent_php*)native_object)->SetAltDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetAltDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetAltDown(down0);
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					((wxKeyboardState_php*)native_object)->SetAltDown(down0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::SetAltDown\n");
	}
}
/* }}} */

/* {{{ proto  wxKeyboardState::SetControlDown(bool down) */
PHP_METHOD(php_wxKeyboardState, SetControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::SetControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::SetControlDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyboardState::SetControlDown(down0)\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					((wxKeyEvent_php*)native_object)->SetControlDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetControlDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetControlDown(down0);
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					((wxKeyboardState_php*)native_object)->SetControlDown(down0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::SetControlDown\n");
	}
}
/* }}} */

/* {{{ proto  wxKeyboardState::SetMetaDown(bool down) */
PHP_METHOD(php_wxKeyboardState, SetMetaDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::SetMetaDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::SetMetaDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyboardState::SetMetaDown(down0)\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					((wxKeyEvent_php*)native_object)->SetMetaDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetMetaDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetMetaDown(down0);
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					((wxKeyboardState_php*)native_object)->SetMetaDown(down0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::SetMetaDown\n");
	}
}
/* }}} */

/* {{{ proto  wxKeyboardState::SetRawControlDown(bool down) */
PHP_METHOD(php_wxKeyboardState, SetRawControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::SetRawControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::SetRawControlDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyboardState::SetRawControlDown(down0)\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					((wxKeyEvent_php*)native_object)->SetRawControlDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetRawControlDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetRawControlDown(down0);
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					((wxKeyboardState_php*)native_object)->SetRawControlDown(down0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::SetRawControlDown\n");
	}
}
/* }}} */

/* {{{ proto  wxKeyboardState::SetShiftDown(bool down) */
PHP_METHOD(php_wxKeyboardState, SetShiftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::SetShiftDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::SetShiftDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyboardState::SetShiftDown(down0)\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					((wxKeyEvent_php*)native_object)->SetShiftDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetShiftDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetShiftDown(down0);
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					((wxKeyboardState_php*)native_object)->SetShiftDown(down0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::SetShiftDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxKeyboardState::ShiftDown()
   Returns true if the Shift key is pressed. */
PHP_METHOD(php_wxKeyboardState, ShiftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::ShiftDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxphp_object_type current_object_type;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyboardState::ShiftDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE){
				references = &((wxKeyboardState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSESTATE_TYPE) && (!reference_type_found)){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyboardState::ShiftDown())\n\n");
				#endif

				if(current_object_type == PHP_WXKEYEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyEvent_php*)native_object)->ShiftDown());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseState_php*)native_object)->ShiftDown());
				}
				else if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->ShiftDown());
				}
				else if(current_object_type == PHP_WXKEYBOARDSTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxKeyboardState_php*)native_object)->ShiftDown());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyboardState::ShiftDown\n");
	}
}
/* }}} */

/* {{{ proto  wxKeyboardState::wxKeyboardState(bool controlDown, bool shiftDown, bool altDown, bool metaDown)
   Constructor initializes the modifier key settings. */
PHP_METHOD(php_wxKeyboardState, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyboardState::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyboardState* current_object;
	wxKeyboardState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool controlDown0;
	bool shiftDown0;
	bool altDown0;
	bool metaDown0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|bbbb' (&controlDown0, &shiftDown0, &altDown0, &metaDown0)\n");
		#endif

		char parse_parameters_string[] = "|bbbb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &controlDown0, &shiftDown0, &altDown0, &metaDown0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxKeyboardState_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(controlDown0)\n");
				#endif

				native_object = new wxKeyboardState_php(controlDown0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(controlDown0, shiftDown0)\n");
				#endif

				native_object = new wxKeyboardState_php(controlDown0, shiftDown0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(controlDown0, shiftDown0, altDown0)\n");
				#endif

				native_object = new wxKeyboardState_php(controlDown0, shiftDown0, altDown0);

				native_object->references.Initialize();
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(controlDown0, shiftDown0, altDown0, metaDown0)\n");
				#endif

				native_object = new wxKeyboardState_php(controlDown0, shiftDown0, altDown0, metaDown0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxKeyboardState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxKeyboardState::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxCalendarEvent_free(void *object TSRMLS_DC) 
{
    zo_wxCalendarEvent* custom_object = (zo_wxCalendarEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCalendarEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxCalendarEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxCalendarEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCalendarEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxCalendarEvent* custom_object;
    custom_object = (zo_wxCalendarEvent*) emalloc(sizeof(zo_wxCalendarEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxCalendarEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXCALENDAREVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxDateTime::WeekDay wxCalendarEvent::GetWeekDay()
   Returns the week day on which the user clicked in EVT_CALENDAR_WEEKDAY_CLICKED handler. */
PHP_METHOD(php_wxCalendarEvent, GetWeekDay)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalendarEvent::GetWeekDay\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCalendarEvent* current_object;
	wxphp_object_type current_object_type;
	wxCalendarEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCalendarEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCalendarEvent::GetWeekDay call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCALENDAREVENT_TYPE){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxCalendarEvent::GetWeekDay())\n\n");
				#endif

				if(current_object_type == PHP_WXCALENDAREVENT_TYPE)
				{
					ZVAL_LONG(return_value, ((wxCalendarEvent_php*)native_object)->GetWeekDay());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCalendarEvent::GetWeekDay\n");
	}
}
/* }}} */

/* {{{ proto  wxCalendarEvent::SetWeekDay(wxDateTime::WeekDay day)
   Sets the week day carried by the event, normally only used by the library internally. */
PHP_METHOD(php_wxCalendarEvent, SetWeekDay)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalendarEvent::SetWeekDay\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCalendarEvent* current_object;
	wxphp_object_type current_object_type;
	wxCalendarEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCalendarEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCalendarEvent::SetWeekDay call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCALENDAREVENT_TYPE){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long day0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&day0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &day0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCalendarEvent::SetWeekDay((const wxDateTime::WeekDay) day0)\n\n");
				#endif

				if(current_object_type == PHP_WXCALENDAREVENT_TYPE)
				{
					((wxCalendarEvent_php*)native_object)->SetWeekDay((const wxDateTime::WeekDay) day0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCalendarEvent::SetWeekDay\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxColourPickerEvent_free(void *object TSRMLS_DC) 
{
    zo_wxColourPickerEvent* custom_object = (zo_wxColourPickerEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxColourPickerEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxColourPickerEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxColourPickerEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxColourPickerEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxColourPickerEvent* custom_object;
    custom_object = (zo_wxColourPickerEvent*) emalloc(sizeof(zo_wxColourPickerEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxColourPickerEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXCOLOURPICKEREVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxColour wxColourPickerEvent::GetColour()
   Retrieve the colour the user has just selected. */
PHP_METHOD(php_wxColourPickerEvent, GetColour)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxColourPickerEvent::GetColour\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxColourPickerEvent* current_object;
	wxphp_object_type current_object_type;
	wxColourPickerEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxColourPickerEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxColourPickerEvent::GetColour call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxColourPickerEvent::GetColour() to return new object\n\n");
				#endif

				wxColour value_to_return0;
				value_to_return0 = ((wxColourPickerEvent_php*)native_object)->GetColour();
				((wxRefCounter *) value_to_return0.GetRefData())->IncRef();
				void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxColour));
				object_init_ex(return_value, php_wxColour_entry);
				((wxColour_php*)ptr)->phpObj = return_value;
				zo_wxColour* zo0 = (zo_wxColour*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxColour_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxColourPickerEvent::GetColour\n");
	}
}
/* }}} */

/* {{{ proto  wxColourPickerEvent::SetColour(wxColour pos)
   Set the colour associated with the event. */
PHP_METHOD(php_wxColourPickerEvent, SetColour)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxColourPickerEvent::SetColour\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxColourPickerEvent* current_object;
	wxphp_object_type current_object_type;
	wxColourPickerEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxColourPickerEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxColourPickerEvent::SetColour call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* pos0 = 0;
	wxColour* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pos0, php_wxColour_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxColour*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxColourPickerEvent::SetColour(*(wxColour*) object_pointer0_0)\n\n");
				#endif

				((wxColourPickerEvent_php*)native_object)->SetColour(*(wxColour*) object_pointer0_0);

				references->AddReference(pos0, "wxColourPickerEvent::SetColour at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxColourPickerEvent::SetColour\n");
	}
}
/* }}} */

/* {{{ proto  wxColourPickerEvent::wxColourPickerEvent(wxObject &generator, int id, wxColour colour)
   The constructor is not normally used by the user code. */
PHP_METHOD(php_wxColourPickerEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxColourPickerEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxColourPickerEvent* current_object;
	wxColourPickerEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* generator0 = 0;
	wxObject* object_pointer0_0 = 0;
	long id0;
	zval* colour0 = 0;
	wxColour* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zlO' (&generator0, &id0, &colour0, php_wxColour_entry)\n");
		#endif

		char parse_parameters_string[] = "zlO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &generator0, &id0, &colour0, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(generator0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxObject*) zend_object_store_get_object(generator0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxObject*) zend_object_store_get_object(generator0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxObject*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXOBJECT_TYPE && argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE && argument_type != PHP_WXBITMAPHANDLER_TYPE && argument_type != PHP_WXIMAGE_TYPE && argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE && argument_type != PHP_WXSIZERITEM_TYPE && argument_type != PHP_WXGBSIZERITEM_TYPE && argument_type != PHP_WXIMAGELIST_TYPE && argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE && argument_type != PHP_WXCOLOUR_TYPE && argument_type != PHP_WXMENUITEM_TYPE && argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE && argument_type != PHP_WXACCELERATORTABLE_TYPE && argument_type != PHP_WXGDIOBJECT_TYPE && argument_type != PHP_WXBITMAP_TYPE && argument_type != PHP_WXPALETTE_TYPE && argument_type != PHP_WXICON_TYPE && argument_type != PHP_WXFONT_TYPE && argument_type != PHP_WXANIMATION_TYPE && argument_type != PHP_WXICONBUNDLE_TYPE && argument_type != PHP_WXCURSOR_TYPE && argument_type != PHP_WXREGION_TYPE && argument_type != PHP_WXPEN_TYPE && argument_type != PHP_WXBRUSH_TYPE && argument_type != PHP_WXARTPROVIDER_TYPE && argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE && argument_type != PHP_WXHTMLEASYPRINTING_TYPE && argument_type != PHP_WXHTMLLINKINFO_TYPE && argument_type != PHP_WXFINDREPLACEDATA_TYPE && argument_type != PHP_WXSOUND_TYPE && argument_type != PHP_WXFILESYSTEM_TYPE && argument_type != PHP_WXFILESYSTEMHANDLER_TYPE && argument_type != PHP_WXMASK_TYPE && argument_type != PHP_WXTOOLTIP_TYPE && argument_type != PHP_WXGRAPHICSRENDERER_TYPE && argument_type != PHP_WXLAYOUTCONSTRAINTS_TYPE && argument_type != PHP_WXFSFILE_TYPE && argument_type != PHP_WXCOLOURDATA_TYPE && argument_type != PHP_WXFONTDATA_TYPE && argument_type != PHP_WXGRIDTABLEBASE_TYPE && argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXT_TYPE && argument_type != PHP_WXVARIANT_TYPE && argument_type != PHP_WXCLIPBOARD_TYPE && argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE && argument_type != PHP_WXXMLRESOURCE_TYPE && argument_type != PHP_WXPAGESETUPDIALOG_TYPE && argument_type != PHP_WXPAGESETUPDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDIALOG_TYPE && argument_type != PHP_WXPRINTDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDATA_TYPE && argument_type != PHP_WXPRINTPREVIEW_TYPE && argument_type != PHP_WXPRINTER_TYPE && argument_type != PHP_WXPRINTOUT_TYPE && argument_type != PHP_WXHTMLPRINTOUT_TYPE && argument_type != PHP_WXHTMLDCRENDERER_TYPE && argument_type != PHP_WXHTMLFILTER_TYPE && argument_type != PHP_WXHTMLHELPDATA_TYPE && argument_type != PHP_WXHTMLTAGHANDLER_TYPE && argument_type != PHP_WXHTMLWINTAGHANDLER_TYPE && argument_type != PHP_WXMODULE_TYPE && argument_type != PHP_WXHTMLTAGSMODULE_TYPE && argument_type != PHP_WXIMAGEHANDLER_TYPE && argument_type != PHP_WXXMLRESOURCEHANDLER_TYPE && argument_type != PHP_WXXMLDOCUMENT_TYPE && argument_type != PHP_WXLAYOUTALGORITHM_TYPE && argument_type != PHP_WXFILEHISTORY_TYPE && argument_type != PHP_WXTOOLBARTOOLBASE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'generator' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(generator0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'generator' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(colour0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(colour0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(colour0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxColour*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'colour' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'colour' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxObject*) object_pointer0_0, (int) id0, *(wxColour*) object_pointer0_2)\n");
				#endif

				native_object = new wxColourPickerEvent_php((wxObject*) object_pointer0_0, (int) id0, *(wxColour*) object_pointer0_2);

				native_object->references.Initialize();
				((wxColourPickerEvent_php*) native_object)->references.AddReference(generator0, "wxColourPickerEvent::wxColourPickerEvent at call with 3 argument(s)");
				((wxColourPickerEvent_php*) native_object)->references.AddReference(colour0, "wxColourPickerEvent::wxColourPickerEvent at call with 3 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxColourPickerEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxColourPickerEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxCollapsiblePaneEvent_free(void *object TSRMLS_DC) 
{
    zo_wxCollapsiblePaneEvent* custom_object = (zo_wxCollapsiblePaneEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCollapsiblePaneEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxCollapsiblePaneEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxCollapsiblePaneEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCollapsiblePaneEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxCollapsiblePaneEvent* custom_object;
    custom_object = (zo_wxCollapsiblePaneEvent*) emalloc(sizeof(zo_wxCollapsiblePaneEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxCollapsiblePaneEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXCOLLAPSIBLEPANEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxCollapsiblePaneEvent::GetCollapsed()
   Returns true if the pane has been collapsed. */
PHP_METHOD(php_wxCollapsiblePaneEvent, GetCollapsed)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCollapsiblePaneEvent::GetCollapsed\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCollapsiblePaneEvent* current_object;
	wxphp_object_type current_object_type;
	wxCollapsiblePaneEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCollapsiblePaneEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCollapsiblePaneEvent::GetCollapsed call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxCollapsiblePaneEvent::GetCollapsed())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxCollapsiblePaneEvent_php*)native_object)->GetCollapsed());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCollapsiblePaneEvent::GetCollapsed\n");
	}
}
/* }}} */

/* {{{ proto  wxCollapsiblePaneEvent::SetCollapsed(bool collapsed)
   Sets this as a collapsed pane event (if collapsed is true) or as an expanded pane event (if collapsed is false). */
PHP_METHOD(php_wxCollapsiblePaneEvent, SetCollapsed)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCollapsiblePaneEvent::SetCollapsed\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCollapsiblePaneEvent* current_object;
	wxphp_object_type current_object_type;
	wxCollapsiblePaneEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCollapsiblePaneEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCollapsiblePaneEvent::SetCollapsed call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool collapsed0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&collapsed0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &collapsed0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCollapsiblePaneEvent::SetCollapsed(collapsed0)\n\n");
				#endif

				((wxCollapsiblePaneEvent_php*)native_object)->SetCollapsed(collapsed0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCollapsiblePaneEvent::SetCollapsed\n");
	}
}
/* }}} */

/* {{{ proto  wxCollapsiblePaneEvent::wxCollapsiblePaneEvent(wxObject &generator, int id, bool collapsed)
   The constructor is not normally used by the user code. */
PHP_METHOD(php_wxCollapsiblePaneEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCollapsiblePaneEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCollapsiblePaneEvent* current_object;
	wxCollapsiblePaneEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* generator0 = 0;
	wxObject* object_pointer0_0 = 0;
	long id0;
	bool collapsed0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zlb' (&generator0, &id0, &collapsed0)\n");
		#endif

		char parse_parameters_string[] = "zlb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &generator0, &id0, &collapsed0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(generator0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxObject*) zend_object_store_get_object(generator0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxObject*) zend_object_store_get_object(generator0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxObject*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXOBJECT_TYPE && argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE && argument_type != PHP_WXBITMAPHANDLER_TYPE && argument_type != PHP_WXIMAGE_TYPE && argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE && argument_type != PHP_WXSIZERITEM_TYPE && argument_type != PHP_WXGBSIZERITEM_TYPE && argument_type != PHP_WXIMAGELIST_TYPE && argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE && argument_type != PHP_WXCOLOUR_TYPE && argument_type != PHP_WXMENUITEM_TYPE && argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE && argument_type != PHP_WXACCELERATORTABLE_TYPE && argument_type != PHP_WXGDIOBJECT_TYPE && argument_type != PHP_WXBITMAP_TYPE && argument_type != PHP_WXPALETTE_TYPE && argument_type != PHP_WXICON_TYPE && argument_type != PHP_WXFONT_TYPE && argument_type != PHP_WXANIMATION_TYPE && argument_type != PHP_WXICONBUNDLE_TYPE && argument_type != PHP_WXCURSOR_TYPE && argument_type != PHP_WXREGION_TYPE && argument_type != PHP_WXPEN_TYPE && argument_type != PHP_WXBRUSH_TYPE && argument_type != PHP_WXARTPROVIDER_TYPE && argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE && argument_type != PHP_WXHTMLEASYPRINTING_TYPE && argument_type != PHP_WXHTMLLINKINFO_TYPE && argument_type != PHP_WXFINDREPLACEDATA_TYPE && argument_type != PHP_WXSOUND_TYPE && argument_type != PHP_WXFILESYSTEM_TYPE && argument_type != PHP_WXFILESYSTEMHANDLER_TYPE && argument_type != PHP_WXMASK_TYPE && argument_type != PHP_WXTOOLTIP_TYPE && argument_type != PHP_WXGRAPHICSRENDERER_TYPE && argument_type != PHP_WXLAYOUTCONSTRAINTS_TYPE && argument_type != PHP_WXFSFILE_TYPE && argument_type != PHP_WXCOLOURDATA_TYPE && argument_type != PHP_WXFONTDATA_TYPE && argument_type != PHP_WXGRIDTABLEBASE_TYPE && argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXT_TYPE && argument_type != PHP_WXVARIANT_TYPE && argument_type != PHP_WXCLIPBOARD_TYPE && argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE && argument_type != PHP_WXXMLRESOURCE_TYPE && argument_type != PHP_WXPAGESETUPDIALOG_TYPE && argument_type != PHP_WXPAGESETUPDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDIALOG_TYPE && argument_type != PHP_WXPRINTDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDATA_TYPE && argument_type != PHP_WXPRINTPREVIEW_TYPE && argument_type != PHP_WXPRINTER_TYPE && argument_type != PHP_WXPRINTOUT_TYPE && argument_type != PHP_WXHTMLPRINTOUT_TYPE && argument_type != PHP_WXHTMLDCRENDERER_TYPE && argument_type != PHP_WXHTMLFILTER_TYPE && argument_type != PHP_WXHTMLHELPDATA_TYPE && argument_type != PHP_WXHTMLTAGHANDLER_TYPE && argument_type != PHP_WXHTMLWINTAGHANDLER_TYPE && argument_type != PHP_WXMODULE_TYPE && argument_type != PHP_WXHTMLTAGSMODULE_TYPE && argument_type != PHP_WXIMAGEHANDLER_TYPE && argument_type != PHP_WXXMLRESOURCEHANDLER_TYPE && argument_type != PHP_WXXMLDOCUMENT_TYPE && argument_type != PHP_WXLAYOUTALGORITHM_TYPE && argument_type != PHP_WXFILEHISTORY_TYPE && argument_type != PHP_WXTOOLBARTOOLBASE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'generator' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(generator0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'generator' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxObject*) object_pointer0_0, (int) id0, collapsed0)\n");
				#endif

				native_object = new wxCollapsiblePaneEvent_php((wxObject*) object_pointer0_0, (int) id0, collapsed0);

				native_object->references.Initialize();
				((wxCollapsiblePaneEvent_php*) native_object)->references.AddReference(generator0, "wxCollapsiblePaneEvent::wxCollapsiblePaneEvent at call with 3 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxCollapsiblePaneEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxCollapsiblePaneEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDateEvent_free(void *object TSRMLS_DC) 
{
    zo_wxDateEvent* custom_object = (zo_wxDateEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDateEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDateEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDateEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDateEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDateEvent* custom_object;
    custom_object = (zo_wxDateEvent*) emalloc(sizeof(zo_wxDateEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDateEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto timestamp wxDateEvent::GetDate()
   Returns the date. */
PHP_METHOD(php_wxDateEvent, GetDate)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDateEvent::GetDate\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDateEvent* current_object;
	wxphp_object_type current_object_type;
	wxDateEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDateEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDateEvent::GetDate call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATEEVENT_TYPE){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDateEvent::GetDate() to return timestamp\n\n");
				#endif

				time_t value_to_return0;
				if(current_object_type == PHP_WXCALENDAREVENT_TYPE)
				{
					value_to_return0 = ((wxCalendarEvent_php*)native_object)->GetDate().GetTicks();
				}
				else if(current_object_type == PHP_WXDATEEVENT_TYPE)
				{
					value_to_return0 = ((wxDateEvent_php*)native_object)->GetDate().GetTicks();
				}
				ZVAL_LONG(return_value, value_to_return0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDateEvent::GetDate\n");
	}
}
/* }}} */

/* {{{ proto  wxDateEvent::SetDate(timestamp date)
   Sets the date carried by the event, normally only used by the library internally. */
PHP_METHOD(php_wxDateEvent, SetDate)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDateEvent::SetDate\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDateEvent* current_object;
	wxphp_object_type current_object_type;
	wxDateEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDateEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDateEvent::SetDate call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATEEVENT_TYPE){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	time_t date0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&date0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &date0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDateEvent::SetDate(wxDateTime(date0))\n\n");
				#endif

				if(current_object_type == PHP_WXCALENDAREVENT_TYPE)
				{
					((wxCalendarEvent_php*)native_object)->SetDate(wxDateTime(date0));
				}
				else if(current_object_type == PHP_WXDATEEVENT_TYPE)
				{
					((wxDateEvent_php*)native_object)->SetDate(wxDateTime(date0));
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDateEvent::SetDate\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxEvent_free(void *object TSRMLS_DC) 
{
    zo_wxEvent* custom_object = (zo_wxEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			custom_object->native_object->UninitProperties();
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxEvent* custom_object;
    custom_object = (zo_wxEvent*) emalloc(sizeof(zo_wxEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxEventCategory wxEvent::GetEventCategory()
   Returns a generic category for this event. */
PHP_METHOD(php_wxEvent, GetEventCategory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::GetEventCategory\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::GetEventCategory call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxEvent::GetEventCategory())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxEvent_php*)native_object)->GetEventCategory());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::GetEventCategory\n");
	}
}
/* }}} */

/* {{{ proto wxObject wxEvent::GetEventObject()
   Returns the object (usually a window) associated with the event, if any. */
PHP_METHOD(php_wxEvent, GetEventObject)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::GetEventObject\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::GetEventObject call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::GetEventObject() to return object pointer\n\n");
				#endif

				wxObject_php* value_to_return0;
				value_to_return0 = (wxObject_php*) ((wxEvent_php*)native_object)->GetEventObject();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxObject_entry);
					((zo_wxObject*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxObject_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxEvent::GetEventObject at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::GetEventObject\n");
	}
}
/* }}} */

/* {{{ proto int wxEvent::GetEventType()
   Returns the identifier of the given event type, such as wxEVT_BUTTON. */
PHP_METHOD(php_wxEvent, GetEventType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::GetEventType\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::GetEventType call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxEvent::GetEventType())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxEvent_php*)native_object)->GetEventType());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::GetEventType\n");
	}
}
/* }}} */

/* {{{ proto int wxEvent::GetId()
   Returns the identifier associated with this event, such as a button command id. */
PHP_METHOD(php_wxEvent, GetId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::GetId\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::GetId call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxEvent::GetId())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxEvent_php*)native_object)->GetId());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::GetId\n");
	}
}
/* }}} */

/* {{{ proto bool wxEvent::GetSkipped()
   Returns true if the event handler should be skipped, false otherwise. */
PHP_METHOD(php_wxEvent, GetSkipped)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::GetSkipped\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::GetSkipped call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvent::GetSkipped())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxEvent_php*)native_object)->GetSkipped());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::GetSkipped\n");
	}
}
/* }}} */

/* {{{ proto int wxEvent::GetTimestamp()
   Gets the timestamp for the event. */
PHP_METHOD(php_wxEvent, GetTimestamp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::GetTimestamp\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::GetTimestamp call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxEvent::GetTimestamp())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxEvent_php*)native_object)->GetTimestamp());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::GetTimestamp\n");
	}
}
/* }}} */

/* {{{ proto bool wxEvent::IsCommandEvent()
   Returns true if the event is or is derived from wxCommandEvent else it returns false. */
PHP_METHOD(php_wxEvent, IsCommandEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::IsCommandEvent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::IsCommandEvent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvent::IsCommandEvent())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxEvent_php*)native_object)->IsCommandEvent());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::IsCommandEvent\n");
	}
}
/* }}} */

/* {{{ proto  wxEvent::ResumePropagation(int propagationLevel)
   Sets the propagation level to the given value (for example returned from an earlier call to wxEvent::StopPropagation). */
PHP_METHOD(php_wxEvent, ResumePropagation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::ResumePropagation\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::ResumePropagation call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long propagationLevel0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&propagationLevel0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &propagationLevel0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::ResumePropagation((int) propagationLevel0)\n\n");
				#endif

				((wxEvent_php*)native_object)->ResumePropagation((int) propagationLevel0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::ResumePropagation\n");
	}
}
/* }}} */

/* {{{ proto  wxEvent::SetEventObject(wxObject &object)
   Sets the originating object. */
PHP_METHOD(php_wxEvent, SetEventObject)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::SetEventObject\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::SetEventObject call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* object0 = 0;
	wxObject* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&object0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &object0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(object0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxObject*) zend_object_store_get_object(object0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxObject*) zend_object_store_get_object(object0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxObject*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXOBJECT_TYPE && argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE && argument_type != PHP_WXBITMAPHANDLER_TYPE && argument_type != PHP_WXIMAGE_TYPE && argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE && argument_type != PHP_WXSIZERITEM_TYPE && argument_type != PHP_WXGBSIZERITEM_TYPE && argument_type != PHP_WXIMAGELIST_TYPE && argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE && argument_type != PHP_WXCOLOUR_TYPE && argument_type != PHP_WXMENUITEM_TYPE && argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE && argument_type != PHP_WXACCELERATORTABLE_TYPE && argument_type != PHP_WXGDIOBJECT_TYPE && argument_type != PHP_WXBITMAP_TYPE && argument_type != PHP_WXPALETTE_TYPE && argument_type != PHP_WXICON_TYPE && argument_type != PHP_WXFONT_TYPE && argument_type != PHP_WXANIMATION_TYPE && argument_type != PHP_WXICONBUNDLE_TYPE && argument_type != PHP_WXCURSOR_TYPE && argument_type != PHP_WXREGION_TYPE && argument_type != PHP_WXPEN_TYPE && argument_type != PHP_WXBRUSH_TYPE && argument_type != PHP_WXARTPROVIDER_TYPE && argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE && argument_type != PHP_WXHTMLEASYPRINTING_TYPE && argument_type != PHP_WXHTMLLINKINFO_TYPE && argument_type != PHP_WXFINDREPLACEDATA_TYPE && argument_type != PHP_WXSOUND_TYPE && argument_type != PHP_WXFILESYSTEM_TYPE && argument_type != PHP_WXFILESYSTEMHANDLER_TYPE && argument_type != PHP_WXMASK_TYPE && argument_type != PHP_WXTOOLTIP_TYPE && argument_type != PHP_WXGRAPHICSRENDERER_TYPE && argument_type != PHP_WXLAYOUTCONSTRAINTS_TYPE && argument_type != PHP_WXFSFILE_TYPE && argument_type != PHP_WXCOLOURDATA_TYPE && argument_type != PHP_WXFONTDATA_TYPE && argument_type != PHP_WXGRIDTABLEBASE_TYPE && argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXT_TYPE && argument_type != PHP_WXVARIANT_TYPE && argument_type != PHP_WXCLIPBOARD_TYPE && argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE && argument_type != PHP_WXXMLRESOURCE_TYPE && argument_type != PHP_WXPAGESETUPDIALOG_TYPE && argument_type != PHP_WXPAGESETUPDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDIALOG_TYPE && argument_type != PHP_WXPRINTDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDATA_TYPE && argument_type != PHP_WXPRINTPREVIEW_TYPE && argument_type != PHP_WXPRINTER_TYPE && argument_type != PHP_WXPRINTOUT_TYPE && argument_type != PHP_WXHTMLPRINTOUT_TYPE && argument_type != PHP_WXHTMLDCRENDERER_TYPE && argument_type != PHP_WXHTMLFILTER_TYPE && argument_type != PHP_WXHTMLHELPDATA_TYPE && argument_type != PHP_WXHTMLTAGHANDLER_TYPE && argument_type != PHP_WXHTMLWINTAGHANDLER_TYPE && argument_type != PHP_WXMODULE_TYPE && argument_type != PHP_WXHTMLTAGSMODULE_TYPE && argument_type != PHP_WXIMAGEHANDLER_TYPE && argument_type != PHP_WXXMLRESOURCEHANDLER_TYPE && argument_type != PHP_WXXMLDOCUMENT_TYPE && argument_type != PHP_WXLAYOUTALGORITHM_TYPE && argument_type != PHP_WXFILEHISTORY_TYPE && argument_type != PHP_WXTOOLBARTOOLBASE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'object' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(object0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'object' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::SetEventObject((wxObject*) object_pointer0_0)\n\n");
				#endif

				((wxEvent_php*)native_object)->SetEventObject((wxObject*) object_pointer0_0);

				references->AddReference(object0, "wxEvent::SetEventObject at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::SetEventObject\n");
	}
}
/* }}} */

/* {{{ proto  wxEvent::SetEventType(int type)
   Sets the event type. */
PHP_METHOD(php_wxEvent, SetEventType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::SetEventType\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::SetEventType call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long type0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&type0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::SetEventType((wxEventType) type0)\n\n");
				#endif

				((wxEvent_php*)native_object)->SetEventType((wxEventType) type0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::SetEventType\n");
	}
}
/* }}} */

/* {{{ proto  wxEvent::SetId(int id)
   Sets the identifier associated with this event, such as a button command id. */
PHP_METHOD(php_wxEvent, SetId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::SetId\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::SetId call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&id0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::SetId((int) id0)\n\n");
				#endif

				((wxEvent_php*)native_object)->SetId((int) id0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::SetId\n");
	}
}
/* }}} */

/* {{{ proto  wxEvent::SetTimestamp(int timeStamp)
   Sets the timestamp for the event. */
PHP_METHOD(php_wxEvent, SetTimestamp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::SetTimestamp\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::SetTimestamp call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long timeStamp0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&timeStamp0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &timeStamp0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::SetTimestamp()\n\n");
				#endif

				((wxEvent_php*)native_object)->SetTimestamp();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::SetTimestamp((long) timeStamp0)\n\n");
				#endif

				((wxEvent_php*)native_object)->SetTimestamp((long) timeStamp0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::SetTimestamp\n");
	}
}
/* }}} */

/* {{{ proto bool wxEvent::ShouldPropagate()
   Test if this event should be propagated or not, i.e. if the propagation level is currently greater than 0. */
PHP_METHOD(php_wxEvent, ShouldPropagate)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::ShouldPropagate\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::ShouldPropagate call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvent::ShouldPropagate())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxEvent_php*)native_object)->ShouldPropagate());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::ShouldPropagate\n");
	}
}
/* }}} */

/* {{{ proto  wxEvent::Skip(bool skip)
   This method can be used inside an event handler to control whether further event handlers bound to this event will be called after the current one returns. */
PHP_METHOD(php_wxEvent, Skip)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::Skip\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::Skip call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool skip0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&skip0)\n");
		#endif

		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &skip0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::Skip()\n\n");
				#endif

				((wxEvent_php*)native_object)->Skip();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvent::Skip(skip0)\n\n");
				#endif

				((wxEvent_php*)native_object)->Skip(skip0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::Skip\n");
	}
}
/* }}} */

/* {{{ proto int wxEvent::StopPropagation()
   Stop the event from propagating to its parent window. */
PHP_METHOD(php_wxEvent, StopPropagation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::StopPropagation\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxphp_object_type current_object_type;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::StopPropagation call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENT_TYPE){
				references = &((wxEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMMANDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLOSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXACTIVATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiManagerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOVEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTHREADEVENT_TYPE) && (!reference_type_found)){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLWINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYSCOLOURCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSysColourChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXERASEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSETCURSOREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXIDLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPAINTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaintEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPALETTECHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxPaletteChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINITDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxInitDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMAXIMIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMaximizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDISPLAYCHANGEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDisplayChangedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE) && (!reference_type_found)){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICONEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIconEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxEvent::StopPropagation())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxEvent_php*)native_object)->StopPropagation());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvent::StopPropagation\n");
	}
}
/* }}} */

/* {{{ proto  wxEvent::wxEvent(int id, int eventType)
   Constructor. */
PHP_METHOD(php_wxEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvent* current_object;
	wxEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long id0;
	long eventType0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&id0, &eventType0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0, &eventType0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif

				native_object = new wxEvent_php((int) id0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0, (wxEventType) eventType0)\n");
				#endif

				native_object = new wxEvent_php((int) id0, (wxEventType) eventType0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		
		native_object->InitProperties();

		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

PHP_METHOD(php_wxEvent, __get)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvent::__get\n");
	php_printf("===========================================\n");
	#endif
	
	int arguments_received = ZEND_NUM_ARGS();
	zo_wxEvent* current_object;
	wxEvent_php* native_object;
	
	char* name;
	int name_len;
	
	//Get native object of the php object that called the method
	if (getThis() != NULL) 
	{
		current_object = (zo_wxEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvent::wxEvent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
		}
	}
	else
	{
		zend_error(E_ERROR, "Could not process __get call as static\n");
	}
	
	char parse_parameters_string[] = "s";
	
	if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &name, &name_len ) == FAILURE)
	{
		RETVAL_NULL();
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Property to get: %s\n", name);
	php_printf("===========================================\n\n");
	#endif
	
	if(false){}
	else if(strcmp("m_propagationLevel", name) == 0)
	{
		RETVAL_LONG(*((int*) native_object->properties[0]));
	}
	else
	{
		RETVAL_NULL();
	}
}
/* {{{ proto wxEvent wxEvent::Clone()
   Returns a copy of the event. */
wxEvent* wxEvent_php::Clone()const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxEvent::Clone\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval* arguments[1];
	arguments[0] = NULL;
	params[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "Clone", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
		

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "Clone", 5, &return_value, 0, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxEvent::Clone'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	if(Z_TYPE_P(return_value) == IS_OBJECT)
	{
		return_object = (void*) ((zo_wxEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object;
	}

	//Threat it as a normal object on the calling function and not a php user space intiialized one
	((zo_wxEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->is_user_initialized = 0;
	wxEvent_php* var = (wxEvent_php*) return_object;
	var->references.UnInitialize();

	return (wxEvent*) return_object;
	
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxEventBlocker_free(void *object TSRMLS_DC) 
{
    zo_wxEventBlocker* custom_object = (zo_wxEventBlocker*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEventBlocker_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxEventBlocker done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxEventBlocker_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEventBlocker_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxEventBlocker* custom_object;
    custom_object = (zo_wxEventBlocker*) emalloc(sizeof(zo_wxEventBlocker));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxEventBlocker_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXEVENTBLOCKER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxEventBlocker::Block(int eventType)
   Adds to the list of event types which should be blocked the given eventType. */
PHP_METHOD(php_wxEventBlocker, Block)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEventBlocker::Block\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEventBlocker* current_object;
	wxphp_object_type current_object_type;
	wxEventBlocker_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEventBlocker*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEventBlocker::Block call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVENTBLOCKER_TYPE){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long eventType0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&eventType0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &eventType0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEventBlocker::Block((wxEventType) eventType0)\n\n");
				#endif

				((wxEventBlocker_php*)native_object)->Block((wxEventType) eventType0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEventBlocker::Block\n");
	}
}
/* }}} */

/* {{{ proto  wxEventBlocker::wxEventBlocker(wxWindow &win, int type)
   Constructs the blocker for the given window and for the given event type. */
PHP_METHOD(php_wxEventBlocker, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEventBlocker::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEventBlocker* current_object;
	wxEventBlocker_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* win0 = 0;
	wxWindow* object_pointer0_0 = 0;
	long type0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&win0, &type0)\n");
		#endif

		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0, &type0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'win' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'win' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif

				native_object = new wxEventBlocker_php((wxWindow*) object_pointer0_0);

				native_object->references.Initialize();
				((wxEventBlocker_php*) native_object)->references.AddReference(win0, "wxEventBlocker::wxEventBlocker at call with 1 argument(s)");
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxEventType) type0)\n");
				#endif

				native_object = new wxEventBlocker_php((wxWindow*) object_pointer0_0, (wxEventType) type0);

				native_object->references.Initialize();
				((wxEventBlocker_php*) native_object)->references.AddReference(win0, "wxEventBlocker::wxEventBlocker at call with 2 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxEventBlocker*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxEventBlocker::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxEvtHandler_free(void *object TSRMLS_DC) 
{
    zo_wxEvtHandler* custom_object = (zo_wxEvtHandler*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEvtHandler_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxEvtHandler done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxEvtHandler_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEvtHandler_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxEvtHandler* custom_object;
    custom_object = (zo_wxEvtHandler*) emalloc(sizeof(zo_wxEvtHandler));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxEvtHandler_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXEVTHANDLER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxEvtHandler::wxEvtHandler()
   Constructor. */
PHP_METHOD(php_wxEvtHandler, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxEvtHandler_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxEvtHandler::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxEvtHandler::Connect(int id, int lastId, int eventType, , wxObject &userData, wxEvtHandler &eventSink)
   Connects the given function dynamically with the event handler, id and event type. */
void wxEvtHandler_php::onEvent(wxEvent& evnt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxEvtHandler::onEvent\n");
	php_printf("===========================================\n");
	#endif
	
	zval *arg[1];
	MAKE_STD_ZVAL(arg[0]);
	TSRMLS_FETCH();

	if(0)
	{}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxMenuEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxMenuEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxMenuEvent_entry);
		((zo_wxMenuEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxMenuEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxKeyEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxKeyEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxKeyEvent_entry);
		((zo_wxKeyEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxKeyEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxCommandEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxCommandEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxCommandEvent_entry);
		((zo_wxCommandEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxCommandEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxNotifyEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxNotifyEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxNotifyEvent_entry);
		((zo_wxNotifyEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxNotifyEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxTreeEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxTreeEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxTreeEvent_entry);
		((zo_wxTreeEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxTreeEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxBookCtrlEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxBookCtrlEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxBookCtrlEvent_entry);
		((zo_wxBookCtrlEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxBookCtrlEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxAuiNotebookEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxAuiNotebookEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxAuiNotebookEvent_entry);
		((zo_wxAuiNotebookEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxAuiNotebookEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxAuiToolBarEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxAuiToolBarEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxAuiToolBarEvent_entry);
		((zo_wxAuiToolBarEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxAuiToolBarEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxListEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxListEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxListEvent_entry);
		((zo_wxListEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxListEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSpinEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSpinEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSpinEvent_entry);
		((zo_wxSpinEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxSpinEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSplitterEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSplitterEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSplitterEvent_entry);
		((zo_wxSplitterEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxSplitterEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSpinDoubleEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSpinDoubleEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSpinDoubleEvent_entry);
		((zo_wxSpinDoubleEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxSpinDoubleEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxGridSizeEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxGridSizeEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxGridSizeEvent_entry);
		((zo_wxGridSizeEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxGridSizeEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxWizardEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxWizardEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxWizardEvent_entry);
		((zo_wxWizardEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxWizardEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxGridEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxGridEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxGridEvent_entry);
		((zo_wxGridEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxGridEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxGridRangeSelectEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxGridRangeSelectEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxGridRangeSelectEvent_entry);
		((zo_wxGridRangeSelectEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxGridRangeSelectEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxDataViewEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxDataViewEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxDataViewEvent_entry);
		((zo_wxDataViewEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxDataViewEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxHeaderCtrlEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxHeaderCtrlEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxHeaderCtrlEvent_entry);
		((zo_wxHeaderCtrlEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxHeaderCtrlEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxRibbonBarEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxRibbonBarEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxRibbonBarEvent_entry);
		((zo_wxRibbonBarEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxRibbonBarEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxWebViewEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxWebViewEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxWebViewEvent_entry);
		((zo_wxWebViewEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxWebViewEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxMediaEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxMediaEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxMediaEvent_entry);
		((zo_wxMediaEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxMediaEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxStyledTextEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxStyledTextEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxStyledTextEvent_entry);
		((zo_wxStyledTextEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxStyledTextEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxChildFocusEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxChildFocusEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxChildFocusEvent_entry);
		((zo_wxChildFocusEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxChildFocusEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxHtmlCellEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxHtmlCellEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxHtmlCellEvent_entry);
		((zo_wxHtmlCellEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxHtmlCellEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxHtmlLinkEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxHtmlLinkEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxHtmlLinkEvent_entry);
		((zo_wxHtmlLinkEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxHtmlLinkEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxHyperlinkEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxHyperlinkEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxHyperlinkEvent_entry);
		((zo_wxHyperlinkEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxHyperlinkEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxColourPickerEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxColourPickerEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxColourPickerEvent_entry);
		((zo_wxColourPickerEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxColourPickerEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxFontPickerEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxFontPickerEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxFontPickerEvent_entry);
		((zo_wxFontPickerEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxFontPickerEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxScrollEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxScrollEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxScrollEvent_entry);
		((zo_wxScrollEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxScrollEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxWindowModalDialogEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxWindowModalDialogEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxWindowModalDialogEvent_entry);
		((zo_wxWindowModalDialogEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxWindowModalDialogEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxDateEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxDateEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxDateEvent_entry);
		((zo_wxDateEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxDateEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxCalendarEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxCalendarEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxCalendarEvent_entry);
		((zo_wxCalendarEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxCalendarEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxWindowCreateEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxWindowCreateEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxWindowCreateEvent_entry);
		((zo_wxWindowCreateEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxWindowCreateEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxWindowDestroyEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxWindowDestroyEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxWindowDestroyEvent_entry);
		((zo_wxWindowDestroyEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxWindowDestroyEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxUpdateUIEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxUpdateUIEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxUpdateUIEvent_entry);
		((zo_wxUpdateUIEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxUpdateUIEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxHelpEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxHelpEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxHelpEvent_entry);
		((zo_wxHelpEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxHelpEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxGridEditorCreatedEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxGridEditorCreatedEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxGridEditorCreatedEvent_entry);
		((zo_wxGridEditorCreatedEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxGridEditorCreatedEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxCollapsiblePaneEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxCollapsiblePaneEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxCollapsiblePaneEvent_entry);
		((zo_wxCollapsiblePaneEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxCollapsiblePaneEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxClipboardTextEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxClipboardTextEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxClipboardTextEvent_entry);
		((zo_wxClipboardTextEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxClipboardTextEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxFileCtrlEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxFileCtrlEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxFileCtrlEvent_entry);
		((zo_wxFileCtrlEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxFileCtrlEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSashEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSashEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSashEvent_entry);
		((zo_wxSashEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxSashEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxFileDirPickerEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxFileDirPickerEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxFileDirPickerEvent_entry);
		((zo_wxFileDirPickerEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxFileDirPickerEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxContextMenuEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxContextMenuEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxContextMenuEvent_entry);
		((zo_wxContextMenuEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxContextMenuEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxRibbonButtonBarEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxRibbonButtonBarEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxRibbonButtonBarEvent_entry);
		((zo_wxRibbonButtonBarEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxRibbonButtonBarEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxRibbonGalleryEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxRibbonGalleryEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxRibbonGalleryEvent_entry);
		((zo_wxRibbonGalleryEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxRibbonGalleryEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxCloseEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxCloseEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxCloseEvent_entry);
		((zo_wxCloseEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxCloseEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxActivateEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxActivateEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxActivateEvent_entry);
		((zo_wxActivateEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxActivateEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxAuiManagerEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxAuiManagerEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxAuiManagerEvent_entry);
		((zo_wxAuiManagerEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxAuiManagerEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSizeEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSizeEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSizeEvent_entry);
		((zo_wxSizeEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxSizeEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxMouseEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxMouseEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxMouseEvent_entry);
		((zo_wxMouseEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxMouseEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxMoveEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxMoveEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxMoveEvent_entry);
		((zo_wxMoveEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxMoveEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxTimerEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxTimerEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxTimerEvent_entry);
		((zo_wxTimerEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxTimerEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxThreadEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxThreadEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxThreadEvent_entry);
		((zo_wxThreadEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxThreadEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxScrollWinEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxScrollWinEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxScrollWinEvent_entry);
		((zo_wxScrollWinEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxScrollWinEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSysColourChangedEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSysColourChangedEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSysColourChangedEvent_entry);
		((zo_wxSysColourChangedEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxSysColourChangedEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxProcessEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxProcessEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxProcessEvent_entry);
		((zo_wxProcessEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxProcessEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxEraseEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxEraseEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxEraseEvent_entry);
		((zo_wxEraseEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxEraseEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxSetCursorEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxSetCursorEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxSetCursorEvent_entry);
		((zo_wxSetCursorEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxSetCursorEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxIdleEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxIdleEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxIdleEvent_entry);
		((zo_wxIdleEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxIdleEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxPaintEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxPaintEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxPaintEvent_entry);
		((zo_wxPaintEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxPaintEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxPaletteChangedEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxPaletteChangedEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxPaletteChangedEvent_entry);
		((zo_wxPaletteChangedEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxPaletteChangedEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxInitDialogEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxInitDialogEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxInitDialogEvent_entry);
		((zo_wxInitDialogEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxInitDialogEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxMaximizeEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxMaximizeEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxMaximizeEvent_entry);
		((zo_wxMaximizeEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxMaximizeEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxNavigationKeyEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxNavigationKeyEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxNavigationKeyEvent_entry);
		((zo_wxNavigationKeyEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxNavigationKeyEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxFocusEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxFocusEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxFocusEvent_entry);
		((zo_wxFocusEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxFocusEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxFileSystemWatcherEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxFileSystemWatcherEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxFileSystemWatcherEvent_entry);
		((zo_wxFileSystemWatcherEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxFileSystemWatcherEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxDisplayChangedEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxDisplayChangedEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxDisplayChangedEvent_entry);
		((zo_wxDisplayChangedEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxDisplayChangedEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxCalculateLayoutEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxCalculateLayoutEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxCalculateLayoutEvent_entry);
		((zo_wxCalculateLayoutEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxCalculateLayoutEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxQueryLayoutInfoEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxQueryLayoutInfoEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxQueryLayoutInfoEvent_entry);
		((zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxQueryLayoutInfoEvent_php*) &evnt;
	}
		
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxTaskBarIconEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxTaskBarIconEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxTaskBarIconEvent_entry);
		((zo_wxTaskBarIconEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxTaskBarIconEvent_php*) &evnt;
	}
		else if(!tcscmp(evnt.GetClassInfo()->GetClassName(), wxT("wxEvent")))
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Converting event type 'wxEvent' to zval to call user function.\n\n");
		#endif
		
		object_init_ex(arg[0], php_wxEvent_entry);
		((zo_wxEvent*) zend_object_store_get_object(arg[0] TSRMLS_CC))->native_object = (wxEvent_php*) &evnt;
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Event type not declared\n\n");
		#endif
		
		wxString errorMsg;
		errorMsg += "Failed to pass as argument event of type: ";
		errorMsg += evnt.GetClassInfo()->GetClassName();
		wxMessageBox(errorMsg, "Error", wxOK|wxICON_ERROR);
	}

	char* wxname;
	zval dummy;
	zval* fc_name;
	wxCommandEvent* ce;
	wxPhpClientData* co;

	ce = (wxCommandEvent*) evnt.m_callbackUserData;
	co = (wxPhpClientData*) ce->GetClientObject();

	MAKE_STD_ZVAL(fc_name);
	
	wxname = (char*)emalloc(sizeof(wxChar)*(ce->GetString().size()+1));
	strcpy(wxname, (const char *) ce->GetString().char_str());
	
	ZVAL_STRING(fc_name, wxname, 1);

	if(call_user_function(NULL, &(co->phpObj), fc_name, &dummy, 1, arg TSRMLS_CC) == FAILURE)
	{
		wxString errorMessage = "Failed to call method: '";
		errorMessage += ce->GetString().char_str();
		errorMessage += "'";
		
		wxMessageBox(errorMessage, "Error", wxOK|wxICON_ERROR);
	}
	
	zval_ptr_dtor(&arg[0]);
	efree(wxname);
	zval_ptr_dtor(&fc_name);
}

PHP_METHOD(php_wxEvtHandler, Connect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::Connect\n");
	php_printf("===========================================\n");
	php_printf("Parameters received: %d\n", ZEND_NUM_ARGS());
	#endif
	
	zo_wxEvtHandler* current_object;
	wxEvtHandler* native_object;
	
	//Get native object of the php object that called the method
	if (getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::Connect call\n");
			
			return;
		}
		else
		{
			native_object = (wxEvtHandler*) current_object->native_object;
		}
	}
	else
	{
		zend_error(E_ERROR, "Could not process Connect call as static\n");
	}

	zval* fc;
	long flag, id0 = 0, id1 = 0;

	zval** fc_obj;
	zval** fc_name;
	char* ct;
	int args = ZEND_NUM_ARGS();
	
	//To supress some warnings due to passing a string directly
	char parse_parameters_4[] = "lllz";
	char parse_parameters_3[] = "llz";
	char parse_parameters_2[] = "lz";

	switch(args)
	{
		case 4:
			#ifdef USE_WXPHP_DEBUG
			php_printf("Parsing parameters with \"lllz\"\n");
			#endif
			if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, args TSRMLS_CC, parse_parameters_4, &id0, &id1, &flag , (void**)&fc) == FAILURE)
			{
				zend_error(E_ERROR, "Incorrect type of parameters");
				return;
			}
			break;
		case 3:
			#ifdef USE_WXPHP_DEBUG
			php_printf("Parsing parameters with \"llz\"\n");
			#endif
			if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, args TSRMLS_CC, parse_parameters_3, &id0, &flag , (void**)&fc) == FAILURE)
			{
				zend_error(E_ERROR, "Incorrect type of parameters");
				return;
			}
			break;
		case 2:
			#ifdef USE_WXPHP_DEBUG
			php_printf("Parsing parameters with \"lz\"\n");
			#endif
			if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, args TSRMLS_CC, parse_parameters_2, &flag , (void**)&fc) == FAILURE)
			{
				zend_error(E_ERROR, "Incorrect type of parameters");
				return;
			}
			break;
		default:
			zend_error(E_ERROR, "Wrong amount of parameters");
	}
	
	zend_hash_index_find(Z_ARRVAL_P(fc), 0, (void**)&fc_obj);
	zend_hash_index_find(Z_ARRVAL_P(fc), 1, (void**)&fc_name);
	Z_ADDREF_P(*fc_obj);
	
	ct = Z_STRVAL_PP(fc_name);

	wxCommandEvent* ce = new wxCommandEvent();
	ce->SetString(wxString::Format(wxT("%s"), ct));
	ce->SetClientObject(new wxPhpClientData(*fc_obj));
	
	switch(args)
	{
		case 4:
			#ifdef USE_WXPHP_DEBUG
			php_printf("Executing: native_object->Connect(id0, id1, flag, wxEventHandler(wxEvtHandler_php::onEvent), ce);\n");
			php_printf("Object id: %d Object last id: %d Event type: %d\n", (int)id0, (int)id1, (int)flag);
			#endif
			
			native_object->Connect(id0, id1, flag, wxEventHandler(wxEvtHandler_php::onEvent), ce);
			break;
		case 3:
			#ifdef USE_WXPHP_DEBUG
			php_printf("Executing: native_object->Connect(id0, flag, wxEventHandler(wxEvtHandler_php::onEvent), ce);\n");
			php_printf("Object id: %d Event type: %d\n", (int)id0, (int)flag);
			#endif
			
			native_object->Connect(id0, flag, wxEventHandler(wxEvtHandler_php::onEvent), ce);
			break;
		case 2:
			#ifdef USE_WXPHP_DEBUG
			php_printf("Executing: native_object->Connect(flag, wxEventHandler(wxEvtHandler_php::onEvent), ce);\n");
			php_printf("Event type: %d\n", (int)flag);
			#endif
			
			native_object->Connect(flag, wxEventHandler(wxEvtHandler_php::onEvent), ce);
			break;
		default:
			wxMessageBox("Failed to create event", "Error", wxOK|wxICON_ERROR);
			break;
	}	
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxEvtHandler::AddFilter(wxEventFilter &filter)
   Add an event filter whose FilterEvent() method will be called for each and every event processed by wxWidgets. */
PHP_METHOD(php_wxEvtHandler, AddFilter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::AddFilter\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::AddFilter call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* filter0 = 0;
	wxEventFilter* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&filter0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &filter0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(filter0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEventFilter*) zend_object_store_get_object(filter0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEventFilter*) zend_object_store_get_object(filter0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxEventFilter*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXEVENTFILTER_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'filter' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(filter0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'filter' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxEvtHandler::AddFilter((wxEventFilter*) object_pointer0_0)\n\n");
				#endif

				wxEvtHandler::AddFilter((wxEventFilter*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::AddFilter\n");
	}
}
/* }}} */

/* {{{ proto  wxEvtHandler::AddPendingEvent(wxEvent event)
   Post an event to be processed later. */
PHP_METHOD(php_wxEvtHandler, AddPendingEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::AddPendingEvent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::AddPendingEvent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* event0 = 0;
	wxEvent* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'o' (&event0)\n");
		#endif

		char parse_parameters_string[] = "o";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxEvent*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'event' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'event' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::AddPendingEvent(*(wxEvent*) object_pointer0_0)\n\n");
				#endif

				((wxEvtHandler_php*)native_object)->AddPendingEvent(*(wxEvent*) object_pointer0_0);

				references->AddReference(event0, "wxEvtHandler::AddPendingEvent at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::AddPendingEvent\n");
	}
}
/* }}} */

/* {{{ proto  wxEvtHandler::DeletePendingEvents()
   Deletes all events queued on this event handler using QueueEvent() or AddPendingEvent(). */
PHP_METHOD(php_wxEvtHandler, DeletePendingEvents)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::DeletePendingEvents\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::DeletePendingEvents call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::DeletePendingEvents()\n\n");
				#endif

				((wxEvtHandler_php*)native_object)->DeletePendingEvents();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::DeletePendingEvents\n");
	}
}
/* }}} */

/* {{{ proto bool wxEvtHandler::GetEvtHandlerEnabled()
   Returns true if the event handler is enabled, false otherwise. */
PHP_METHOD(php_wxEvtHandler, GetEvtHandlerEnabled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::GetEvtHandlerEnabled\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::GetEvtHandlerEnabled call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvtHandler::GetEvtHandlerEnabled())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxEvtHandler_php*)native_object)->GetEvtHandlerEnabled());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::GetEvtHandlerEnabled\n");
	}
}
/* }}} */

/* {{{ proto wxEvtHandler wxEvtHandler::GetNextHandler()
   Returns the pointer to the next handler in the chain. */
PHP_METHOD(php_wxEvtHandler, GetNextHandler)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::GetNextHandler\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::GetNextHandler call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::GetNextHandler() to return object pointer\n\n");
				#endif

				wxEvtHandler_php* value_to_return0;
				value_to_return0 = (wxEvtHandler_php*) ((wxEvtHandler_php*)native_object)->GetNextHandler();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxEvtHandler_entry);
					((zo_wxEvtHandler*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxEvtHandler_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxEvtHandler::GetNextHandler at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::GetNextHandler\n");
	}
}
/* }}} */

/* {{{ proto wxEvtHandler wxEvtHandler::GetPreviousHandler()
   Returns the pointer to the previous handler in the chain. */
PHP_METHOD(php_wxEvtHandler, GetPreviousHandler)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::GetPreviousHandler\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::GetPreviousHandler call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::GetPreviousHandler() to return object pointer\n\n");
				#endif

				wxEvtHandler_php* value_to_return0;
				value_to_return0 = (wxEvtHandler_php*) ((wxEvtHandler_php*)native_object)->GetPreviousHandler();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxEvtHandler_entry);
					((zo_wxEvtHandler*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxEvtHandler_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxEvtHandler::GetPreviousHandler at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::GetPreviousHandler\n");
	}
}
/* }}} */

/* {{{ proto bool wxEvtHandler::IsUnlinked()
   Returns true if the next and the previous handler pointers of this event handler instance are NULL. */
PHP_METHOD(php_wxEvtHandler, IsUnlinked)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::IsUnlinked\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::IsUnlinked call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvtHandler::IsUnlinked())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxEvtHandler_php*)native_object)->IsUnlinked());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::IsUnlinked\n");
	}
}
/* }}} */

/* {{{ proto bool wxEvtHandler::ProcessEvent(wxEvent &event)
   Processes an event, searching event tables and calling zero or more suitable event handler function(s). */
PHP_METHOD(php_wxEvtHandler, ProcessEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::ProcessEvent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::ProcessEvent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* event0 = 0;
	wxEvent* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'o' (&event0)\n");
		#endif

		char parse_parameters_string[] = "o";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxEvent*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'event' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'event' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvtHandler::ProcessEvent(*(wxEvent*) object_pointer0_0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxEvtHandler_php*)native_object)->ProcessEvent(*(wxEvent*) object_pointer0_0));

				references->AddReference(event0, "wxEvtHandler::ProcessEvent at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::ProcessEvent\n");
	}
}
/* }}} */

/* {{{ proto bool wxEvtHandler::ProcessEventLocally(wxEvent &event)
   Try to process the event in this handler and all those chained to it. */
PHP_METHOD(php_wxEvtHandler, ProcessEventLocally)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::ProcessEventLocally\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::ProcessEventLocally call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* event0 = 0;
	wxEvent* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'o' (&event0)\n");
		#endif

		char parse_parameters_string[] = "o";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxEvent*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'event' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'event' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvtHandler::ProcessEventLocally(*(wxEvent*) object_pointer0_0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxEvtHandler_php*)native_object)->ProcessEventLocally(*(wxEvent*) object_pointer0_0));

				references->AddReference(event0, "wxEvtHandler::ProcessEventLocally at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::ProcessEventLocally\n");
	}
}
/* }}} */

/* {{{ proto  wxEvtHandler::ProcessPendingEvents()
   Processes the pending events previously queued using QueueEvent() or AddPendingEvent(); you must call this function only if you are sure there are pending events for this handler, otherwise a wxCHECK will fail. */
PHP_METHOD(php_wxEvtHandler, ProcessPendingEvents)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::ProcessPendingEvents\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::ProcessPendingEvents call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::ProcessPendingEvents()\n\n");
				#endif

				((wxEvtHandler_php*)native_object)->ProcessPendingEvents();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::ProcessPendingEvents\n");
	}
}
/* }}} */

/* {{{ proto  wxEvtHandler::QueueEvent(wxEvent &event)
   Queue event for a later processing. */
PHP_METHOD(php_wxEvtHandler, QueueEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::QueueEvent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::QueueEvent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* event0 = 0;
	wxEvent* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&event0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxEvent*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'event' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'event' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::QueueEvent((wxEvent*) object_pointer0_0)\n\n");
				#endif

				((wxEvtHandler_php*)native_object)->QueueEvent((wxEvent*) object_pointer0_0);

				references->AddReference(event0, "wxEvtHandler::QueueEvent at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::QueueEvent\n");
	}
}
/* }}} */

/* {{{ proto  wxEvtHandler::RemoveFilter(wxEventFilter &filter)
   Remove a filter previously installed with AddFilter(). */
PHP_METHOD(php_wxEvtHandler, RemoveFilter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::RemoveFilter\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::RemoveFilter call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* filter0 = 0;
	wxEventFilter* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&filter0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &filter0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(filter0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEventFilter*) zend_object_store_get_object(filter0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEventFilter*) zend_object_store_get_object(filter0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxEventFilter*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXEVENTFILTER_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'filter' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(filter0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'filter' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxEvtHandler::RemoveFilter((wxEventFilter*) object_pointer0_0)\n\n");
				#endif

				wxEvtHandler::RemoveFilter((wxEventFilter*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::RemoveFilter\n");
	}
}
/* }}} */

/* {{{ proto bool wxEvtHandler::SafelyProcessEvent(wxEvent &event)
   Processes an event by calling ProcessEvent() and handles any exceptions that occur in the process. */
PHP_METHOD(php_wxEvtHandler, SafelyProcessEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::SafelyProcessEvent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::SafelyProcessEvent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* event0 = 0;
	wxEvent* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'o' (&event0)\n");
		#endif

		char parse_parameters_string[] = "o";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxEvent*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'event' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'event' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxEvtHandler::SafelyProcessEvent(*(wxEvent*) object_pointer0_0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxEvtHandler_php*)native_object)->SafelyProcessEvent(*(wxEvent*) object_pointer0_0));

				references->AddReference(event0, "wxEvtHandler::SafelyProcessEvent at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::SafelyProcessEvent\n");
	}
}
/* }}} */

/* {{{ proto  wxEvtHandler::SetEvtHandlerEnabled(bool enabled)
   Enables or disables the event handler. */
PHP_METHOD(php_wxEvtHandler, SetEvtHandlerEnabled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::SetEvtHandlerEnabled\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::SetEvtHandlerEnabled call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool enabled0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&enabled0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &enabled0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::SetEvtHandlerEnabled(enabled0)\n\n");
				#endif

				((wxEvtHandler_php*)native_object)->SetEvtHandlerEnabled(enabled0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::SetEvtHandlerEnabled\n");
	}
}
/* }}} */

/* {{{ proto  wxEvtHandler::SetNextHandler(wxEvtHandler &handler)
   Sets the pointer to the next handler. */
PHP_METHOD(php_wxEvtHandler, SetNextHandler)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::SetNextHandler\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::SetNextHandler call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* handler0 = 0;
	wxEvtHandler* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&handler0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &handler0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(handler0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEvtHandler*) zend_object_store_get_object(handler0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEvtHandler*) zend_object_store_get_object(handler0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxEvtHandler*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'handler' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(handler0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'handler' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::SetNextHandler((wxEvtHandler*) object_pointer0_0)\n\n");
				#endif

				((wxEvtHandler_php*)native_object)->SetNextHandler((wxEvtHandler*) object_pointer0_0);

				references->AddReference(handler0, "wxEvtHandler::SetNextHandler at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::SetNextHandler\n");
	}
}
/* }}} */

/* {{{ proto  wxEvtHandler::SetPreviousHandler(wxEvtHandler &handler)
   Sets the pointer to the previous handler. */
PHP_METHOD(php_wxEvtHandler, SetPreviousHandler)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::SetPreviousHandler\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::SetPreviousHandler call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* handler0 = 0;
	wxEvtHandler* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&handler0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &handler0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(handler0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEvtHandler*) zend_object_store_get_object(handler0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEvtHandler*) zend_object_store_get_object(handler0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxEvtHandler*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'handler' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(handler0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'handler' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::SetPreviousHandler((wxEvtHandler*) object_pointer0_0)\n\n");
				#endif

				((wxEvtHandler_php*)native_object)->SetPreviousHandler((wxEvtHandler*) object_pointer0_0);

				references->AddReference(handler0, "wxEvtHandler::SetPreviousHandler at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::SetPreviousHandler\n");
	}
}
/* }}} */

/* {{{ proto bool wxEvtHandler::TryAfter(wxEvent &event)
   Method called by ProcessEvent() as last resort. */
bool wxEvtHandler_php::TryAfter(wxEvent& event)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxEvtHandler::TryAfter\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "TryAfter", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxEvent_entry);
	((zo_wxEvent*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxEvent_php*) &event;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "TryAfter", 8, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	return wxEvtHandler::TryAfter(event);
}
/* }}} */

/* {{{ proto bool wxEvtHandler::TryBefore(wxEvent &event)
   Method called by ProcessEvent() before examining this object event tables. */
bool wxEvtHandler_php::TryBefore(wxEvent& event)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxEvtHandler::TryBefore\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "TryBefore", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxEvent_entry);
	((zo_wxEvent*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxEvent_php*) &event;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "TryBefore", 9, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	return wxEvtHandler::TryBefore(event);
}
/* }}} */

/* {{{ proto  wxEvtHandler::Unlink()
   Unlinks this event handler from the chain it's part of (if any); then links the "previous" event handler to the "next" one (so that the chain won't be interrupted). */
PHP_METHOD(php_wxEvtHandler, Unlink)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEvtHandler::Unlink\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEvtHandler* current_object;
	wxphp_object_type current_object_type;
	wxEvtHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEvtHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEvtHandler::Unlink call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXEVTHANDLER_TYPE){
				references = &((wxEvtHandler_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNONOWNEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxNonOwnedWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOPLEVELWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATUSBAR_TYPE) && (!reference_type_found)){
				references = &((wxStatusBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANYBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxAnyButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPTOGGLEBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxBitmapToggleButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTROLWITHITEMS_TYPE) && (!reference_type_found)){
				references = &((wxControlWithItems_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKLISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXREARRANGELIST_TYPE) && (!reference_type_found)){
				references = &((wxRearrangeList_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICE_TYPE) && (!reference_type_found)){
				references = &((wxChoice_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLBASE_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTBOOK_TYPE) && (!reference_type_found)){
				references = &((wxListbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHOICEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxChoicebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxNotebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEBOOK_TYPE) && (!reference_type_found)){
				references = &((wxTreebook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBOOK_TYPE) && (!reference_type_found)){
				references = &((wxToolbook_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXANIMATIONCTRL_TYPE) && (!reference_type_found)){
				references = &((wxAnimationCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLBAR_TYPE) && (!reference_type_found)){
				references = &((wxScrollBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICTEXT_TYPE) && (!reference_type_found)){
				references = &((wxStaticText_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICLINE_TYPE) && (!reference_type_found)){
				references = &((wxStaticLine_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBOX_TYPE) && (!reference_type_found)){
				references = &((wxStaticBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTATICBITMAP_TYPE) && (!reference_type_found)){
				references = &((wxStaticBitmap_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHECKBOX_TYPE) && (!reference_type_found)){
				references = &((wxCheckBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTextCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSEARCHCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSearchCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBITMAPCOMBOBOX_TYPE) && (!reference_type_found)){
				references = &((wxBitmapComboBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTVIEW_TYPE) && (!reference_type_found)){
				references = &((wxListView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBOX_TYPE) && (!reference_type_found)){
				references = &((wxRadioBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRADIOBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxRadioButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSLIDER_TYPE) && (!reference_type_found)){
				references = &((wxSlider_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRL_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINBUTTON_TYPE) && (!reference_type_found)){
				references = &((wxSpinButton_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGAUGE_TYPE) && (!reference_type_found)){
				references = &((wxGauge_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINCTRLDOUBLE_TYPE) && (!reference_type_found)){
				references = &((wxSpinCtrlDouble_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICDIRCTRL_TYPE) && (!reference_type_found)){
				references = &((wxGenericDirCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDARCTRL_TYPE) && (!reference_type_found)){
				references = &((wxCalendarCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPICKERBASE_TYPE) && (!reference_type_found)){
				references = &((wxPickerBase_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxFilePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDirPickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTimePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEPICKERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDatePickerCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANE_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePane_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOMBOCTRL_TYPE) && (!reference_type_found)){
				references = &((wxComboCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREECTRL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRL_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLSIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRL_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXINFOBAR_TYPE) && (!reference_type_found)){
				references = &((wxInfoBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONCONTROL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonControl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERY_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGallery_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPAGE_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONPANEL_TYPE) && (!reference_type_found)){
				references = &((wxRibbonPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONTOOLBAR_TYPE) && (!reference_type_found)){
				references = &((wxRibbonToolBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEW_TYPE) && (!reference_type_found)){
				references = &((wxWebView_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIACTRL_TYPE) && (!reference_type_found)){
				references = &((wxMediaCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSplitterWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPANEL_TYPE) && (!reference_type_found)){
				references = &((wxPanel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRID_TYPE) && (!reference_type_found)){
				references = &((wxGrid_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCANVAS_TYPE) && (!reference_type_found)){
				references = &((wxPreviewCanvas_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPage_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDPAGESIMPLE_TYPE) && (!reference_type_found)){
				references = &((wxWizardPageSimple_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEDITABLELISTBOX_TYPE) && (!reference_type_found)){
				references = &((wxEditableListBox_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHSCROLLEDWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHScrolledWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWCONTROLBAR_TYPE) && (!reference_type_found)){
				references = &((wxPreviewControlBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENUBAR_TYPE) && (!reference_type_found)){
				references = &((wxMenuBar_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBANNERWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxBannerWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICLIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREELISTCTRL_TYPE) && (!reference_type_found)){
				references = &((wxTreeListCtrl_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHLAYOUTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxSashLayoutWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxTextValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICVALIDATOR_TYPE) && (!reference_type_found)){
				references = &((wxGenericValidator_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMENU_TYPE) && (!reference_type_found)){
				references = &((wxMenu_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUIMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxAuiManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE) && (!reference_type_found)){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTIMER_TYPE) && (!reference_type_found)){
				references = &((wxTimer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXEVENTBLOCKER_TYPE) && (!reference_type_found)){
				references = &((wxEventBlocker_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROCESS_TYPE) && (!reference_type_found)){
				references = &((wxProcess_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILESYSTEMWATCHER_TYPE) && (!reference_type_found)){
				references = &((wxFileSystemWatcher_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTASKBARICON_TYPE) && (!reference_type_found)){
				references = &((wxTaskBarIcon_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFICATIONMESSAGE_TYPE) && (!reference_type_found)){
				references = &((wxNotificationMessage_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEvtHandler::Unlink()\n\n");
				#endif

				((wxEvtHandler_php*)native_object)->Unlink();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEvtHandler::Unlink\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxKeyEvent_free(void *object TSRMLS_DC) 
{
    zo_wxKeyEvent* custom_object = (zo_wxKeyEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxKeyEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxKeyEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxKeyEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxKeyEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxKeyEvent* custom_object;
    custom_object = (zo_wxKeyEvent*) emalloc(sizeof(zo_wxKeyEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxKeyEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXKEYEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxKeyEvent::DoAllowNextEvent()
   Allow normal key events generation. */
PHP_METHOD(php_wxKeyEvent, DoAllowNextEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::DoAllowNextEvent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyEvent::DoAllowNextEvent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYEVENT_TYPE){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyEvent::DoAllowNextEvent()\n\n");
				#endif

				((wxKeyEvent_php*)native_object)->DoAllowNextEvent();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyEvent::DoAllowNextEvent\n");
	}
}
/* }}} */

/* {{{ proto int wxKeyEvent::GetKeyCode()
   Returns the key code of the key that generated this event. */
PHP_METHOD(php_wxKeyEvent, GetKeyCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::GetKeyCode\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyEvent::GetKeyCode call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYEVENT_TYPE){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxKeyEvent::GetKeyCode())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxKeyEvent_php*)native_object)->GetKeyCode());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyEvent::GetKeyCode\n");
	}
}
/* }}} */

/* {{{ proto wxPoint wxKeyEvent::GetPosition()
   Obtains the position (in client coordinates) at which the key was pressed. */
PHP_METHOD(php_wxKeyEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyEvent::GetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYEVENT_TYPE){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	long x1;
	long y1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&x1, &y1)\n");
		#endif

		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x1, &y1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyEvent::GetPosition() to return new object\n\n");
				#endif

				wxPoint value_to_return0;
				value_to_return0 = ((wxKeyEvent_php*)native_object)->GetPosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				((wxPoint_php*)ptr)->phpObj = return_value;
				((wxPoint_php*)ptr)->InitProperties();
				zo_wxPoint* zo0 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxPoint_php*) ptr;


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxKeyEvent::GetPosition((wxCoord*) x1, (wxCoord*) y1)\n\n");
				#endif

				((wxKeyEvent_php*)native_object)->GetPosition((wxCoord*) x1, (wxCoord*) y1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyEvent::GetPosition\n");
	}
}
/* }}} */

/* {{{ proto int wxKeyEvent::GetRawKeyCode()
   Returns the raw key code for this event. */
PHP_METHOD(php_wxKeyEvent, GetRawKeyCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::GetRawKeyCode\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyEvent::GetRawKeyCode call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYEVENT_TYPE){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxKeyEvent::GetRawKeyCode())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxKeyEvent_php*)native_object)->GetRawKeyCode());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyEvent::GetRawKeyCode\n");
	}
}
/* }}} */

/* {{{ proto int wxKeyEvent::GetRawKeyFlags()
   Returns the low level key flags for this event. */
PHP_METHOD(php_wxKeyEvent, GetRawKeyFlags)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::GetRawKeyFlags\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyEvent::GetRawKeyFlags call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYEVENT_TYPE){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxKeyEvent::GetRawKeyFlags())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxKeyEvent_php*)native_object)->GetRawKeyFlags());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyEvent::GetRawKeyFlags\n");
	}
}
/* }}} */

/* {{{ proto int wxKeyEvent::GetX()
   Returns the X position (in client coordinates) of the event. */
PHP_METHOD(php_wxKeyEvent, GetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::GetX\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyEvent::GetX call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYEVENT_TYPE){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxKeyEvent::GetX())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxKeyEvent_php*)native_object)->GetX());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyEvent::GetX\n");
	}
}
/* }}} */

/* {{{ proto int wxKeyEvent::GetY()
   Returns the Y position (in client coordinates) of the event. */
PHP_METHOD(php_wxKeyEvent, GetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::GetY\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyEvent::GetY call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYEVENT_TYPE){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxKeyEvent::GetY())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxKeyEvent_php*)native_object)->GetY());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyEvent::GetY\n");
	}
}
/* }}} */

/* {{{ proto bool wxKeyEvent::IsKeyInCategory(int category)
   Returns true if the key is in the given key category. */
PHP_METHOD(php_wxKeyEvent, IsKeyInCategory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::IsKeyInCategory\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyEvent::IsKeyInCategory call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYEVENT_TYPE){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long category0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&category0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &category0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyEvent::IsKeyInCategory((int) category0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxKeyEvent_php*)native_object)->IsKeyInCategory((int) category0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyEvent::IsKeyInCategory\n");
	}
}
/* }}} */

/* {{{ proto bool wxKeyEvent::IsNextEventAllowed()
   Returns true if DoAllowNextEvent() had been called, false by default. */
PHP_METHOD(php_wxKeyEvent, IsNextEventAllowed)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::IsNextEventAllowed\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxKeyEvent::IsNextEventAllowed call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXKEYEVENT_TYPE){
				references = &((wxKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxKeyEvent::IsNextEventAllowed())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxKeyEvent_php*)native_object)->IsNextEventAllowed());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxKeyEvent::IsNextEventAllowed\n");
	}
}
/* }}} */

/* {{{ proto  wxKeyEvent::wxKeyEvent(int keyEventType)
   Constructor. */
PHP_METHOD(php_wxKeyEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxKeyEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxKeyEvent* current_object;
	wxKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long keyEventType0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&keyEventType0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &keyEventType0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxKeyEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) keyEventType0)\n");
				#endif

				native_object = new wxKeyEvent_php((wxEventType) keyEventType0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxKeyEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxScrollWinEvent_free(void *object TSRMLS_DC) 
{
    zo_wxScrollWinEvent* custom_object = (zo_wxScrollWinEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxScrollWinEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxScrollWinEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxScrollWinEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxScrollWinEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxScrollWinEvent* custom_object;
    custom_object = (zo_wxScrollWinEvent*) emalloc(sizeof(zo_wxScrollWinEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxScrollWinEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXSCROLLWINEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxScrollWinEvent::wxScrollWinEvent(int commandType, int pos, int orientation)
   Constructor. */
PHP_METHOD(php_wxScrollWinEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollWinEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxScrollWinEvent* current_object;
	wxScrollWinEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandType0;
	long pos0;
	long orientation0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lll' (&commandType0, &pos0, &orientation0)\n");
		#endif

		char parse_parameters_string[] = "|lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &pos0, &orientation0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxScrollWinEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif

				native_object = new wxScrollWinEvent_php((wxEventType) commandType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) pos0)\n");
				#endif

				native_object = new wxScrollWinEvent_php((wxEventType) commandType0, (int) pos0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) pos0, (int) orientation0)\n");
				#endif

				native_object = new wxScrollWinEvent_php((wxEventType) commandType0, (int) pos0, (int) orientation0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxScrollWinEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxScrollWinEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxScrollWinEvent::SetPosition(int pos) */
PHP_METHOD(php_wxScrollWinEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollWinEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxScrollWinEvent* current_object;
	wxphp_object_type current_object_type;
	wxScrollWinEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxScrollWinEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxScrollWinEvent::SetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSCROLLWINEVENT_TYPE){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&pos0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxScrollWinEvent::SetPosition((int) pos0)\n\n");
				#endif

				((wxScrollWinEvent_php*)native_object)->SetPosition((int) pos0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxScrollWinEvent::SetPosition\n");
	}
}
/* }}} */

/* {{{ proto  wxScrollWinEvent::SetOrientation(int orient) */
PHP_METHOD(php_wxScrollWinEvent, SetOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollWinEvent::SetOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxScrollWinEvent* current_object;
	wxphp_object_type current_object_type;
	wxScrollWinEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxScrollWinEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxScrollWinEvent::SetOrientation call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSCROLLWINEVENT_TYPE){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long orient0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&orient0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &orient0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxScrollWinEvent::SetOrientation((int) orient0)\n\n");
				#endif

				((wxScrollWinEvent_php*)native_object)->SetOrientation((int) orient0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxScrollWinEvent::SetOrientation\n");
	}
}
/* }}} */

/* {{{ proto int wxScrollWinEvent::GetPosition()
   Returns the position of the scrollbar for the thumb track and release events. */
PHP_METHOD(php_wxScrollWinEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollWinEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxScrollWinEvent* current_object;
	wxphp_object_type current_object_type;
	wxScrollWinEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxScrollWinEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxScrollWinEvent::GetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSCROLLWINEVENT_TYPE){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxScrollWinEvent::GetPosition())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxScrollWinEvent_php*)native_object)->GetPosition());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxScrollWinEvent::GetPosition\n");
	}
}
/* }}} */

/* {{{ proto int wxScrollWinEvent::GetOrientation()
   Returns wxHORIZONTAL or wxVERTICAL, depending on the orientation of the scrollbar. */
PHP_METHOD(php_wxScrollWinEvent, GetOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollWinEvent::GetOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxScrollWinEvent* current_object;
	wxphp_object_type current_object_type;
	wxScrollWinEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxScrollWinEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxScrollWinEvent::GetOrientation call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSCROLLWINEVENT_TYPE){
				references = &((wxScrollWinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxScrollWinEvent::GetOrientation())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxScrollWinEvent_php*)native_object)->GetOrientation());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxScrollWinEvent::GetOrientation\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxSysColourChangedEvent_free(void *object TSRMLS_DC) 
{
    zo_wxSysColourChangedEvent* custom_object = (zo_wxSysColourChangedEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSysColourChangedEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSysColourChangedEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxSysColourChangedEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSysColourChangedEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxSysColourChangedEvent* custom_object;
    custom_object = (zo_wxSysColourChangedEvent*) emalloc(sizeof(zo_wxSysColourChangedEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxSysColourChangedEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXSYSCOLOURCHANGEDEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxSysColourChangedEvent::wxSysColourChangedEvent()
   Constructor. */
PHP_METHOD(php_wxSysColourChangedEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSysColourChangedEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSysColourChangedEvent* current_object;
	wxSysColourChangedEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxSysColourChangedEvent_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxSysColourChangedEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxSysColourChangedEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxCommandEvent_free(void *object TSRMLS_DC) 
{
    zo_wxCommandEvent* custom_object = (zo_wxCommandEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCommandEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxCommandEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxCommandEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCommandEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxCommandEvent* custom_object;
    custom_object = (zo_wxCommandEvent*) emalloc(sizeof(zo_wxCommandEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxCommandEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXCOMMANDEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxCommandEvent::wxCommandEvent(int commandEventType, int id)
   Constructor. */
PHP_METHOD(php_wxCommandEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCommandEvent* current_object;
	wxCommandEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandEventType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandEventType0, &id0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandEventType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxCommandEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandEventType0)\n");
				#endif

				native_object = new wxCommandEvent_php((wxEventType) commandEventType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandEventType0, (int) id0)\n");
				#endif

				native_object = new wxCommandEvent_php((wxEventType) commandEventType0, (int) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxCommandEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxCommandEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxCommandEvent::SetString(string string)
   Sets the m_commandString member. */
PHP_METHOD(php_wxCommandEvent, SetString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::SetString\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCommandEvent* current_object;
	wxphp_object_type current_object_type;
	wxCommandEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCommandEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCommandEvent::SetString call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOMMANDEVENT_TYPE){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* string0;
	long string_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&string0, &string_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string0, &string_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCommandEvent::SetString(wxString(string0, wxConvUTF8))\n\n");
				#endif

				((wxCommandEvent_php*)native_object)->SetString(wxString(string0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCommandEvent::SetString\n");
	}
}
/* }}} */

/* {{{ proto  wxCommandEvent::SetInt(int intCommand)
   Sets the m_commandInt member. */
PHP_METHOD(php_wxCommandEvent, SetInt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::SetInt\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCommandEvent* current_object;
	wxphp_object_type current_object_type;
	wxCommandEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCommandEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCommandEvent::SetInt call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOMMANDEVENT_TYPE){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long intCommand0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&intCommand0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &intCommand0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCommandEvent::SetInt((int) intCommand0)\n\n");
				#endif

				((wxCommandEvent_php*)native_object)->SetInt((int) intCommand0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCommandEvent::SetInt\n");
	}
}
/* }}} */

/* {{{ proto  wxCommandEvent::SetExtraLong(int extraLong)
   Sets the m_extraLong member. */
PHP_METHOD(php_wxCommandEvent, SetExtraLong)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::SetExtraLong\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCommandEvent* current_object;
	wxphp_object_type current_object_type;
	wxCommandEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCommandEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCommandEvent::SetExtraLong call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOMMANDEVENT_TYPE){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long extraLong0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&extraLong0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &extraLong0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCommandEvent::SetExtraLong((long) extraLong0)\n\n");
				#endif

				((wxCommandEvent_php*)native_object)->SetExtraLong((long) extraLong0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCommandEvent::SetExtraLong\n");
	}
}
/* }}} */

/* {{{ proto bool wxCommandEvent::IsSelection()
   For a listbox or similar event, returns true if it is a selection, false if it is a deselection. */
PHP_METHOD(php_wxCommandEvent, IsSelection)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::IsSelection\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCommandEvent* current_object;
	wxphp_object_type current_object_type;
	wxCommandEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCommandEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCommandEvent::IsSelection call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOMMANDEVENT_TYPE){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxCommandEvent::IsSelection())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxCommandEvent_php*)native_object)->IsSelection());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCommandEvent::IsSelection\n");
	}
}
/* }}} */

/* {{{ proto bool wxCommandEvent::IsChecked()
   This method can be used with checkbox and menu events: for the checkboxes, the method returns true for a selection event and false for a deselection one. */
PHP_METHOD(php_wxCommandEvent, IsChecked)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::IsChecked\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCommandEvent* current_object;
	wxphp_object_type current_object_type;
	wxCommandEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCommandEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCommandEvent::IsChecked call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOMMANDEVENT_TYPE){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxCommandEvent::IsChecked())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxCommandEvent_php*)native_object)->IsChecked());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCommandEvent::IsChecked\n");
	}
}
/* }}} */

/* {{{ proto string wxCommandEvent::GetString()
   Returns item string for a listbox or choice selection event. */
PHP_METHOD(php_wxCommandEvent, GetString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::GetString\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCommandEvent* current_object;
	wxphp_object_type current_object_type;
	wxCommandEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCommandEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCommandEvent::GetString call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOMMANDEVENT_TYPE){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxCommandEvent::GetString().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxCommandEvent_php*)native_object)->GetString();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCommandEvent::GetString\n");
	}
}
/* }}} */

/* {{{ proto int wxCommandEvent::GetSelection()
   Returns item index for a listbox or choice selection event (not valid for a deselection). */
PHP_METHOD(php_wxCommandEvent, GetSelection)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::GetSelection\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCommandEvent* current_object;
	wxphp_object_type current_object_type;
	wxCommandEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCommandEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCommandEvent::GetSelection call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOMMANDEVENT_TYPE){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxCommandEvent::GetSelection())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxCommandEvent_php*)native_object)->GetSelection());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCommandEvent::GetSelection\n");
	}
}
/* }}} */

/* {{{ proto int wxCommandEvent::GetInt()
   Returns the integer identifier corresponding to a listbox, choice or radiobox selection (only if the event was a selection, not a deselection), or a boolean value representing the value of a checkbox. */
PHP_METHOD(php_wxCommandEvent, GetInt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::GetInt\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCommandEvent* current_object;
	wxphp_object_type current_object_type;
	wxCommandEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCommandEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCommandEvent::GetInt call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOMMANDEVENT_TYPE){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxCommandEvent::GetInt())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxCommandEvent_php*)native_object)->GetInt());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCommandEvent::GetInt\n");
	}
}
/* }}} */

/* {{{ proto int wxCommandEvent::GetExtraLong()
   Returns extra information dependent on the event objects type. */
PHP_METHOD(php_wxCommandEvent, GetExtraLong)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCommandEvent::GetExtraLong\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCommandEvent* current_object;
	wxphp_object_type current_object_type;
	wxCommandEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCommandEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCommandEvent::GetExtraLong call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCOMMANDEVENT_TYPE){
				references = &((wxCommandEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXNOTIFYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE) && (!reference_type_found)){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCELLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHYPERLINKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxColourPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSCROLLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWMODALDIALOGEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowModalDialogEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCALENDAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxCalendarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXUPDATEUIEVENT_TYPE) && (!reference_type_found)){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHELPEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLLAPSIBLEPANEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxCollapsiblePaneEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCLIPBOARDTEXTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxClipboardTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILECTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSASHEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE) && (!reference_type_found)){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxCommandEvent::GetExtraLong())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxCommandEvent_php*)native_object)->GetExtraLong());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCommandEvent::GetExtraLong\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxWindowCreateEvent_free(void *object TSRMLS_DC) 
{
    zo_wxWindowCreateEvent* custom_object = (zo_wxWindowCreateEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxWindowCreateEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxWindowCreateEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxWindowCreateEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxWindowCreateEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxWindowCreateEvent* custom_object;
    custom_object = (zo_wxWindowCreateEvent*) emalloc(sizeof(zo_wxWindowCreateEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxWindowCreateEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXWINDOWCREATEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxWindow wxWindowCreateEvent::GetWindow()
   Return the window being created. */
PHP_METHOD(php_wxWindowCreateEvent, GetWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWindowCreateEvent::GetWindow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxWindowCreateEvent* current_object;
	wxphp_object_type current_object_type;
	wxWindowCreateEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxWindowCreateEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxWindowCreateEvent::GetWindow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXWINDOWCREATEEVENT_TYPE){
				references = &((wxWindowCreateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxWindowCreateEvent::GetWindow() to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxWindowCreateEvent_php*)native_object)->GetWindow();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxWindowCreateEvent::GetWindow at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxWindowCreateEvent::GetWindow\n");
	}
}
/* }}} */

/* {{{ proto  wxWindowCreateEvent::wxWindowCreateEvent(wxWindow &win)
   Constructor. */
PHP_METHOD(php_wxWindowCreateEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWindowCreateEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxWindowCreateEvent* current_object;
	wxWindowCreateEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* win0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|z' (&win0)\n");
		#endif

		char parse_parameters_string[] = "|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'win' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'win' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxWindowCreateEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif

				native_object = new wxWindowCreateEvent_php((wxWindow*) object_pointer0_0);

				native_object->references.Initialize();
				((wxWindowCreateEvent_php*) native_object)->references.AddReference(win0, "wxWindowCreateEvent::wxWindowCreateEvent at call with 1 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxWindowCreateEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxWindowCreateEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxPaintEvent_free(void *object TSRMLS_DC) 
{
    zo_wxPaintEvent* custom_object = (zo_wxPaintEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxPaintEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxPaintEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxPaintEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxPaintEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxPaintEvent* custom_object;
    custom_object = (zo_wxPaintEvent*) emalloc(sizeof(zo_wxPaintEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxPaintEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXPAINTEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxPaintEvent::wxPaintEvent(int id)
   Constructor. */
PHP_METHOD(php_wxPaintEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPaintEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPaintEvent* current_object;
	wxPaintEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&id0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxPaintEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif

				native_object = new wxPaintEvent_php((int) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxPaintEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxPaintEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMaximizeEvent_free(void *object TSRMLS_DC) 
{
    zo_wxMaximizeEvent* custom_object = (zo_wxMaximizeEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMaximizeEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMaximizeEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxMaximizeEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMaximizeEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxMaximizeEvent* custom_object;
    custom_object = (zo_wxMaximizeEvent*) emalloc(sizeof(zo_wxMaximizeEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxMaximizeEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXMAXIMIZEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxMaximizeEvent::wxMaximizeEvent(int id)
   Constructor. */
PHP_METHOD(php_wxMaximizeEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMaximizeEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMaximizeEvent* current_object;
	wxMaximizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&id0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxMaximizeEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif

				native_object = new wxMaximizeEvent_php((int) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxMaximizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxMaximizeEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxUpdateUIEvent_free(void *object TSRMLS_DC) 
{
    zo_wxUpdateUIEvent* custom_object = (zo_wxUpdateUIEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxUpdateUIEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxUpdateUIEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxUpdateUIEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxUpdateUIEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxUpdateUIEvent* custom_object;
    custom_object = (zo_wxUpdateUIEvent*) emalloc(sizeof(zo_wxUpdateUIEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxUpdateUIEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXUPDATEUIEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxUpdateUIEvent::CanUpdate(wxWindow &window)
   Returns true if it is appropriate to update (send UI update events to) this window. */
PHP_METHOD(php_wxUpdateUIEvent, CanUpdate)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::CanUpdate\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::CanUpdate call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* window0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&window0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(window0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(window0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'window' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'window' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::CanUpdate((wxWindow*) object_pointer0_0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxUpdateUIEvent::CanUpdate((wxWindow*) object_pointer0_0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::CanUpdate\n");
	}
}
/* }}} */

/* {{{ proto  wxUpdateUIEvent::Check(bool check)
   Check or uncheck the UI element. */
PHP_METHOD(php_wxUpdateUIEvent, Check)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::Check\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::Check call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool check0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&check0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &check0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxUpdateUIEvent::Check(check0)\n\n");
				#endif

				((wxUpdateUIEvent_php*)native_object)->Check(check0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::Check\n");
	}
}
/* }}} */

/* {{{ proto  wxUpdateUIEvent::Enable(bool enable)
   Enable or disable the UI element. */
PHP_METHOD(php_wxUpdateUIEvent, Enable)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::Enable\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::Enable call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool enable0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&enable0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &enable0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxUpdateUIEvent::Enable(enable0)\n\n");
				#endif

				((wxUpdateUIEvent_php*)native_object)->Enable(enable0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::Enable\n");
	}
}
/* }}} */

/* {{{ proto bool wxUpdateUIEvent::GetEnabled()
   Returns true if the UI element should be enabled. */
PHP_METHOD(php_wxUpdateUIEvent, GetEnabled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetEnabled\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::GetEnabled call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetEnabled())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)native_object)->GetEnabled());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::GetEnabled\n");
	}
}
/* }}} */

/* {{{ proto bool wxUpdateUIEvent::GetChecked()
   Returns true if the UI element should be checked. */
PHP_METHOD(php_wxUpdateUIEvent, GetChecked)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetChecked\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::GetChecked call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetChecked())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)native_object)->GetChecked());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::GetChecked\n");
	}
}
/* }}} */

/* {{{ proto wxUpdateUIMode wxUpdateUIEvent::GetMode()
   Static function returning a value specifying how wxWidgets will send update events: to all windows, or only to those which specify that they will process the events. */
PHP_METHOD(php_wxUpdateUIEvent, GetMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetMode\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::GetMode call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_LONG(wxUpdateUIEvent::GetMode())\n\n");
				#endif

				ZVAL_LONG(return_value, wxUpdateUIEvent::GetMode());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::GetMode\n");
	}
}
/* }}} */

/* {{{ proto bool wxUpdateUIEvent::GetSetChecked()
   Returns true if the application has called Check(). */
PHP_METHOD(php_wxUpdateUIEvent, GetSetChecked)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetSetChecked\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::GetSetChecked call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetSetChecked())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)native_object)->GetSetChecked());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::GetSetChecked\n");
	}
}
/* }}} */

/* {{{ proto bool wxUpdateUIEvent::GetSetEnabled()
   Returns true if the application has called Enable(). */
PHP_METHOD(php_wxUpdateUIEvent, GetSetEnabled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetSetEnabled\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::GetSetEnabled call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetSetEnabled())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)native_object)->GetSetEnabled());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::GetSetEnabled\n");
	}
}
/* }}} */

/* {{{ proto bool wxUpdateUIEvent::GetSetShown()
   Returns true if the application has called Show(). */
PHP_METHOD(php_wxUpdateUIEvent, GetSetShown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetSetShown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::GetSetShown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetSetShown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)native_object)->GetSetShown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::GetSetShown\n");
	}
}
/* }}} */

/* {{{ proto bool wxUpdateUIEvent::GetSetText()
   Returns true if the application has called SetText(). */
PHP_METHOD(php_wxUpdateUIEvent, GetSetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetSetText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::GetSetText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetSetText())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)native_object)->GetSetText());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::GetSetText\n");
	}
}
/* }}} */

/* {{{ proto bool wxUpdateUIEvent::GetShown()
   Returns true if the UI element should be shown. */
PHP_METHOD(php_wxUpdateUIEvent, GetShown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetShown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::GetShown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxUpdateUIEvent::GetShown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxUpdateUIEvent_php*)native_object)->GetShown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::GetShown\n");
	}
}
/* }}} */

/* {{{ proto string wxUpdateUIEvent::GetText()
   Returns the text that should be set for the UI element. */
PHP_METHOD(php_wxUpdateUIEvent, GetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::GetText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxUpdateUIEvent::GetText().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxUpdateUIEvent_php*)native_object)->GetText();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::GetText\n");
	}
}
/* }}} */

/* {{{ proto int wxUpdateUIEvent::GetUpdateInterval()
   Returns the current interval between updates in milliseconds. */
PHP_METHOD(php_wxUpdateUIEvent, GetUpdateInterval)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::GetUpdateInterval\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::GetUpdateInterval call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_LONG(wxUpdateUIEvent::GetUpdateInterval())\n\n");
				#endif

				ZVAL_LONG(return_value, wxUpdateUIEvent::GetUpdateInterval());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::GetUpdateInterval\n");
	}
}
/* }}} */

/* {{{ proto  wxUpdateUIEvent::ResetUpdateTime()
   Used internally to reset the last-updated time to the current time. */
PHP_METHOD(php_wxUpdateUIEvent, ResetUpdateTime)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::ResetUpdateTime\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::ResetUpdateTime call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxUpdateUIEvent::ResetUpdateTime()\n\n");
				#endif

				wxUpdateUIEvent::ResetUpdateTime();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::ResetUpdateTime\n");
	}
}
/* }}} */

/* {{{ proto  wxUpdateUIEvent::SetMode(wxUpdateUIMode mode)
   Specify how wxWidgets will send update events: to all windows, or only to those which specify that they will process the events. */
PHP_METHOD(php_wxUpdateUIEvent, SetMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::SetMode\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::SetMode call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long mode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&mode0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &mode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxUpdateUIEvent::SetMode((wxUpdateUIMode) mode0)\n\n");
				#endif

				wxUpdateUIEvent::SetMode((wxUpdateUIMode) mode0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::SetMode\n");
	}
}
/* }}} */

/* {{{ proto  wxUpdateUIEvent::SetText(string text)
   Sets the text for this UI element. */
PHP_METHOD(php_wxUpdateUIEvent, SetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::SetText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::SetText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxUpdateUIEvent::SetText(wxString(text0, wxConvUTF8))\n\n");
				#endif

				((wxUpdateUIEvent_php*)native_object)->SetText(wxString(text0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::SetText\n");
	}
}
/* }}} */

/* {{{ proto  wxUpdateUIEvent::SetUpdateInterval(int updateInterval)
   Sets the interval between updates in milliseconds. */
PHP_METHOD(php_wxUpdateUIEvent, SetUpdateInterval)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::SetUpdateInterval\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::SetUpdateInterval call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long updateInterval0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&updateInterval0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &updateInterval0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxUpdateUIEvent::SetUpdateInterval((long) updateInterval0)\n\n");
				#endif

				wxUpdateUIEvent::SetUpdateInterval((long) updateInterval0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::SetUpdateInterval\n");
	}
}
/* }}} */

/* {{{ proto  wxUpdateUIEvent::Show(bool show)
   Show or hide the UI element. */
PHP_METHOD(php_wxUpdateUIEvent, Show)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::Show\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxphp_object_type current_object_type;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxUpdateUIEvent::Show call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXUPDATEUIEVENT_TYPE){
				references = &((wxUpdateUIEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool show0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&show0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &show0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxUpdateUIEvent::Show(show0)\n\n");
				#endif

				((wxUpdateUIEvent_php*)native_object)->Show(show0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxUpdateUIEvent::Show\n");
	}
}
/* }}} */

/* {{{ proto  wxUpdateUIEvent::wxUpdateUIEvent(int commandId)
   Constructor. */
PHP_METHOD(php_wxUpdateUIEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxUpdateUIEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxUpdateUIEvent* current_object;
	wxUpdateUIEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandId0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&commandId0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandId0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxUpdateUIEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindowID) commandId0)\n");
				#endif

				native_object = new wxUpdateUIEvent_php((wxWindowID) commandId0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxUpdateUIEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxUpdateUIEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxClipboardTextEvent_free(void *object TSRMLS_DC) 
{
    zo_wxClipboardTextEvent* custom_object = (zo_wxClipboardTextEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxClipboardTextEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxClipboardTextEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxClipboardTextEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxClipboardTextEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxClipboardTextEvent* custom_object;
    custom_object = (zo_wxClipboardTextEvent*) emalloc(sizeof(zo_wxClipboardTextEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxClipboardTextEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXCLIPBOARDTEXTEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxClipboardTextEvent::wxClipboardTextEvent(int commandType, int id)
   Constructor. */
PHP_METHOD(php_wxClipboardTextEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxClipboardTextEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxClipboardTextEvent* current_object;
	wxClipboardTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandType0, &id0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxClipboardTextEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif

				native_object = new wxClipboardTextEvent_php((wxEventType) commandType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0)\n");
				#endif

				native_object = new wxClipboardTextEvent_php((wxEventType) commandType0, (int) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxClipboardTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxClipboardTextEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMouseEvent_free(void *object TSRMLS_DC) 
{
    zo_wxMouseEvent* custom_object = (zo_wxMouseEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMouseEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMouseEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxMouseEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMouseEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxMouseEvent* custom_object;
    custom_object = (zo_wxMouseEvent*) emalloc(sizeof(zo_wxMouseEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxMouseEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXMOUSEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxMouseEvent::Aux1DClick()
   Returns true if the event was a first extra button double click. */
PHP_METHOD(php_wxMouseEvent, Aux1DClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Aux1DClick\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::Aux1DClick call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Aux1DClick())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Aux1DClick());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::Aux1DClick\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::Aux1Down()
   Returns true if the first extra button mouse button changed to down. */
PHP_METHOD(php_wxMouseEvent, Aux1Down)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Aux1Down\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::Aux1Down call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Aux1Down())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Aux1Down());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::Aux1Down\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::Aux1Up()
   Returns true if the first extra button mouse button changed to up. */
PHP_METHOD(php_wxMouseEvent, Aux1Up)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Aux1Up\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::Aux1Up call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Aux1Up())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Aux1Up());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::Aux1Up\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::Aux2DClick()
   Returns true if the event was a second extra button double click. */
PHP_METHOD(php_wxMouseEvent, Aux2DClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Aux2DClick\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::Aux2DClick call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Aux2DClick())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Aux2DClick());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::Aux2DClick\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::Aux2Down()
   Returns true if the second extra button mouse button changed to down. */
PHP_METHOD(php_wxMouseEvent, Aux2Down)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Aux2Down\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::Aux2Down call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Aux2Down())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Aux2Down());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::Aux2Down\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::Aux2Up()
   Returns true if the second extra button mouse button changed to up. */
PHP_METHOD(php_wxMouseEvent, Aux2Up)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Aux2Up\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::Aux2Up call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Aux2Up())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Aux2Up());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::Aux2Up\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::Button(wxMouseButton but)
   Returns true if the event was generated by the specified button. */
PHP_METHOD(php_wxMouseEvent, Button)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Button\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::Button call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long but0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&but0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &but0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Button((wxMouseButton) but0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Button((wxMouseButton) but0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::Button\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::ButtonDClick(wxMouseButton but)
   If the argument is omitted, this returns true if the event was a mouse double click event. */
PHP_METHOD(php_wxMouseEvent, ButtonDClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::ButtonDClick\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::ButtonDClick call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long but0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&but0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &but0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::ButtonDClick())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->ButtonDClick());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::ButtonDClick((wxMouseButton) but0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->ButtonDClick((wxMouseButton) but0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::ButtonDClick\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::ButtonDown(wxMouseButton but)
   If the argument is omitted, this returns true if the event was a mouse button down event. */
PHP_METHOD(php_wxMouseEvent, ButtonDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::ButtonDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::ButtonDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long but0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&but0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &but0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::ButtonDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->ButtonDown());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::ButtonDown((wxMouseButton) but0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->ButtonDown((wxMouseButton) but0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::ButtonDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::ButtonUp(wxMouseButton but)
   If the argument is omitted, this returns true if the event was a mouse button up event. */
PHP_METHOD(php_wxMouseEvent, ButtonUp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::ButtonUp\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::ButtonUp call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long but0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&but0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &but0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::ButtonUp())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->ButtonUp());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::ButtonUp((wxMouseButton) but0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->ButtonUp((wxMouseButton) but0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::ButtonUp\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::Dragging()
   Returns true if this was a dragging event (motion while a button is depressed). */
PHP_METHOD(php_wxMouseEvent, Dragging)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Dragging\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::Dragging call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Dragging())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Dragging());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::Dragging\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::Entering()
   Returns true if the mouse was entering the window. */
PHP_METHOD(php_wxMouseEvent, Entering)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Entering\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::Entering call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Entering())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Entering());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::Entering\n");
	}
}
/* }}} */

/* {{{ proto int wxMouseEvent::GetButton()
   Returns the mouse button which generated this event or wxMOUSE_BTN_NONE if no button is involved (for mouse move, enter or leave event, for example). */
PHP_METHOD(php_wxMouseEvent, GetButton)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetButton\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::GetButton call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseEvent::GetButton())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxMouseEvent_php*)native_object)->GetButton());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::GetButton\n");
	}
}
/* }}} */

/* {{{ proto int wxMouseEvent::GetClickCount()
   Returns the number of mouse clicks for this event: 1 for a simple click, 2 for a double-click, 3 for a triple-click and so on. */
PHP_METHOD(php_wxMouseEvent, GetClickCount)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetClickCount\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::GetClickCount call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseEvent::GetClickCount())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxMouseEvent_php*)native_object)->GetClickCount());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::GetClickCount\n");
	}
}
/* }}} */

/* {{{ proto int wxMouseEvent::GetLinesPerAction()
   Returns the configured number of lines (or whatever) to be scrolled per wheel action. */
PHP_METHOD(php_wxMouseEvent, GetLinesPerAction)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetLinesPerAction\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::GetLinesPerAction call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseEvent::GetLinesPerAction())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxMouseEvent_php*)native_object)->GetLinesPerAction());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::GetLinesPerAction\n");
	}
}
/* }}} */

/* {{{ proto wxPoint wxMouseEvent::GetLogicalPosition(wxDC dc)
   Returns the logical mouse position in pixels (i.e. translated according to the translation set for the DC, which usually indicates that the window has been scrolled). */
PHP_METHOD(php_wxMouseEvent, GetLogicalPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetLogicalPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::GetLogicalPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* dc0 = 0;
	wxDC* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'o' (&dc0)\n");
		#endif

		char parse_parameters_string[] = "o";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dc0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dc0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDC*) zend_object_store_get_object(dc0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDC*) zend_object_store_get_object(dc0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDC*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'dc' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dc0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'dc' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseEvent::GetLogicalPosition(*(wxDC*) object_pointer0_0) to return new object\n\n");
				#endif

				wxPoint value_to_return1;
				value_to_return1 = ((wxMouseEvent_php*)native_object)->GetLogicalPosition(*(wxDC*) object_pointer0_0);
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return1, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				((wxPoint_php*)ptr)->phpObj = return_value;
				((wxPoint_php*)ptr)->InitProperties();
				zo_wxPoint* zo1 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo1->native_object = (wxPoint_php*) ptr;

				references->AddReference(dc0, "wxMouseEvent::GetLogicalPosition at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::GetLogicalPosition\n");
	}
}
/* }}} */

/* {{{ proto int wxMouseEvent::GetWheelDelta()
   Get wheel delta, normally 120. */
PHP_METHOD(php_wxMouseEvent, GetWheelDelta)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetWheelDelta\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::GetWheelDelta call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseEvent::GetWheelDelta())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxMouseEvent_php*)native_object)->GetWheelDelta());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::GetWheelDelta\n");
	}
}
/* }}} */

/* {{{ proto int wxMouseEvent::GetWheelRotation()
   Get wheel rotation, positive or negative indicates direction of rotation. */
PHP_METHOD(php_wxMouseEvent, GetWheelRotation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetWheelRotation\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::GetWheelRotation call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseEvent::GetWheelRotation())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxMouseEvent_php*)native_object)->GetWheelRotation());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::GetWheelRotation\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::IsButton()
   Returns true if the event was a mouse button event (not necessarily a button down event - that may be tested using ButtonDown()). */
PHP_METHOD(php_wxMouseEvent, IsButton)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::IsButton\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::IsButton call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::IsButton())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->IsButton());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::IsButton\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::IsPageScroll()
   Returns true if the system has been setup to do page scrolling with the mouse wheel instead of line scrolling. */
PHP_METHOD(php_wxMouseEvent, IsPageScroll)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::IsPageScroll\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::IsPageScroll call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::IsPageScroll())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->IsPageScroll());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::IsPageScroll\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::Leaving()
   Returns true if the mouse was leaving the window. */
PHP_METHOD(php_wxMouseEvent, Leaving)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Leaving\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::Leaving call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Leaving())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Leaving());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::Leaving\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::LeftDClick()
   Returns true if the event was a left double click. */
PHP_METHOD(php_wxMouseEvent, LeftDClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::LeftDClick\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::LeftDClick call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::LeftDClick())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->LeftDClick());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::LeftDClick\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::LeftDown()
   Returns true if the left mouse button changed to down. */
PHP_METHOD(php_wxMouseEvent, LeftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::LeftDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::LeftDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::LeftDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->LeftDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::LeftDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::LeftUp()
   Returns true if the left mouse button changed to up. */
PHP_METHOD(php_wxMouseEvent, LeftUp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::LeftUp\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::LeftUp call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::LeftUp())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->LeftUp());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::LeftUp\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::MetaDown()
   Returns true if the Meta key was down at the time of the event. */
PHP_METHOD(php_wxMouseEvent, MetaDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::MetaDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::MetaDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::MetaDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->MetaDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::MetaDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::MiddleDClick()
   Returns true if the event was a middle double click. */
PHP_METHOD(php_wxMouseEvent, MiddleDClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::MiddleDClick\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::MiddleDClick call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::MiddleDClick())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->MiddleDClick());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::MiddleDClick\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::MiddleDown()
   Returns true if the middle mouse button changed to down. */
PHP_METHOD(php_wxMouseEvent, MiddleDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::MiddleDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::MiddleDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::MiddleDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->MiddleDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::MiddleDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::MiddleUp()
   Returns true if the middle mouse button changed to up. */
PHP_METHOD(php_wxMouseEvent, MiddleUp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::MiddleUp\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::MiddleUp call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::MiddleUp())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->MiddleUp());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::MiddleUp\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::Moving()
   Returns true if this was a motion event and no mouse buttons were pressed. */
PHP_METHOD(php_wxMouseEvent, Moving)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::Moving\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::Moving call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::Moving())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Moving());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::Moving\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::RightDClick()
   Returns true if the event was a right double click. */
PHP_METHOD(php_wxMouseEvent, RightDClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::RightDClick\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::RightDClick call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::RightDClick())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->RightDClick());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::RightDClick\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::RightDown()
   Returns true if the right mouse button changed to down. */
PHP_METHOD(php_wxMouseEvent, RightDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::RightDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::RightDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::RightDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->RightDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::RightDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseEvent::RightUp()
   Returns true if the right mouse button changed to up. */
PHP_METHOD(php_wxMouseEvent, RightUp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::RightUp\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::RightUp call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEvent::RightUp())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->RightUp());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::RightUp\n");
	}
}
/* }}} */

/* {{{ proto  wxMouseEvent::wxMouseEvent(int mouseEventType)
   Constructor. */
PHP_METHOD(php_wxMouseEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long mouseEventType0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&mouseEventType0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &mouseEventType0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxMouseEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) mouseEventType0)\n");
				#endif

				native_object = new wxMouseEvent_php((wxEventType) mouseEventType0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxMouseEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto wxMouseWheelAxis wxMouseEvent::GetWheelAxis()
   Gets the axis the wheel operation concerns. */
PHP_METHOD(php_wxMouseEvent, GetWheelAxis)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEvent::GetWheelAxis\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEvent* current_object;
	wxphp_object_type current_object_type;
	wxMouseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEvent::GetWheelAxis call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENT_TYPE){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseEvent::GetWheelAxis())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxMouseEvent_php*)native_object)->GetWheelAxis());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEvent::GetWheelAxis\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxActivateEvent_free(void *object TSRMLS_DC) 
{
    zo_wxActivateEvent* custom_object = (zo_wxActivateEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxActivateEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxActivateEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxActivateEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxActivateEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxActivateEvent* custom_object;
    custom_object = (zo_wxActivateEvent*) emalloc(sizeof(zo_wxActivateEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxActivateEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXACTIVATEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxActivateEvent::wxActivateEvent(int eventType, bool active, int id, Reason ActivationReason)
   Constructor. */
PHP_METHOD(php_wxActivateEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxActivateEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxActivateEvent* current_object;
	wxActivateEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long eventType0;
	bool active0;
	long id0;
	long ActivationReason0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lbll' (&eventType0, &active0, &id0, &ActivationReason0)\n");
		#endif

		char parse_parameters_string[] = "|lbll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &eventType0, &active0, &id0, &ActivationReason0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxActivateEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0)\n");
				#endif

				native_object = new wxActivateEvent_php((wxEventType) eventType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, active0)\n");
				#endif

				native_object = new wxActivateEvent_php((wxEventType) eventType0, active0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, active0, (int) id0)\n");
				#endif

				native_object = new wxActivateEvent_php((wxEventType) eventType0, active0, (int) id0);

				native_object->references.Initialize();
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, active0, (int) id0, (wxActivateEvent::Reason) ActivationReason0)\n");
				#endif

				native_object = new wxActivateEvent_php((wxEventType) eventType0, active0, (int) id0, (wxActivateEvent::Reason) ActivationReason0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxActivateEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxActivateEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto bool wxActivateEvent::GetActive()
   Returns true if the application or window is being activated, false otherwise. */
PHP_METHOD(php_wxActivateEvent, GetActive)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxActivateEvent::GetActive\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxActivateEvent* current_object;
	wxphp_object_type current_object_type;
	wxActivateEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxActivateEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxActivateEvent::GetActive call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXACTIVATEEVENT_TYPE){
				references = &((wxActivateEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxActivateEvent::GetActive())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxActivateEvent_php*)native_object)->GetActive());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxActivateEvent::GetActive\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxContextMenuEvent_free(void *object TSRMLS_DC) 
{
    zo_wxContextMenuEvent* custom_object = (zo_wxContextMenuEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxContextMenuEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxContextMenuEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxContextMenuEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxContextMenuEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxContextMenuEvent* custom_object;
    custom_object = (zo_wxContextMenuEvent*) emalloc(sizeof(zo_wxContextMenuEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxContextMenuEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXCONTEXTMENUEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxPoint wxContextMenuEvent::GetPosition()
   Returns the position in screen coordinates at which the menu should be shown. */
PHP_METHOD(php_wxContextMenuEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxContextMenuEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxContextMenuEvent* current_object;
	wxphp_object_type current_object_type;
	wxContextMenuEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxContextMenuEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxContextMenuEvent::GetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxContextMenuEvent::GetPosition() to return object reference\n\n");
				#endif

				wxPoint_php* value_to_return0;
				value_to_return0 = (wxPoint_php*) &((wxContextMenuEvent_php*)native_object)->GetPosition();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxPoint_entry);
					((zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPoint_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxContextMenuEvent::GetPosition at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxContextMenuEvent::GetPosition\n");
	}
}
/* }}} */

/* {{{ proto  wxContextMenuEvent::SetPosition(wxPoint point)
   Sets the position at which the menu should be shown. */
PHP_METHOD(php_wxContextMenuEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxContextMenuEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxContextMenuEvent* current_object;
	wxphp_object_type current_object_type;
	wxContextMenuEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxContextMenuEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxContextMenuEvent::SetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCONTEXTMENUEVENT_TYPE){
				references = &((wxContextMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* point0 = 0;
	wxPoint* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&point0, php_wxPoint_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &point0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(point0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(point0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(point0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxPoint*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'point' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(point0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'point' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxContextMenuEvent::SetPosition(*(wxPoint*) object_pointer0_0)\n\n");
				#endif

				((wxContextMenuEvent_php*)native_object)->SetPosition(*(wxPoint*) object_pointer0_0);

				references->AddReference(point0, "wxContextMenuEvent::SetPosition at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxContextMenuEvent::SetPosition\n");
	}
}
/* }}} */

/* {{{ proto  wxContextMenuEvent::wxContextMenuEvent(int type, int id, wxPoint pos)
   Constructor. */
PHP_METHOD(php_wxContextMenuEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxContextMenuEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxContextMenuEvent* current_object;
	wxContextMenuEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long type0;
	long id0;
	zval* pos0 = 0;
	wxPoint* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llO' (&type0, &id0, &pos0, php_wxPoint_entry)\n");
		#endif

		char parse_parameters_string[] = "|llO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0, &id0, &pos0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxPoint*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxContextMenuEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0)\n");
				#endif

				native_object = new wxContextMenuEvent_php((wxEventType) type0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0)\n");
				#endif

				native_object = new wxContextMenuEvent_php((wxEventType) type0, (int) id0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0, *(wxPoint*) object_pointer0_2)\n");
				#endif

				native_object = new wxContextMenuEvent_php((wxEventType) type0, (int) id0, *(wxPoint*) object_pointer0_2);

				native_object->references.Initialize();
				((wxContextMenuEvent_php*) native_object)->references.AddReference(pos0, "wxContextMenuEvent::wxContextMenuEvent at call with 3 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxContextMenuEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxContextMenuEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxEraseEvent_free(void *object TSRMLS_DC) 
{
    zo_wxEraseEvent* custom_object = (zo_wxEraseEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEraseEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxEraseEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxEraseEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxEraseEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxEraseEvent* custom_object;
    custom_object = (zo_wxEraseEvent*) emalloc(sizeof(zo_wxEraseEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxEraseEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXERASEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxDC wxEraseEvent::GetDC()
   Returns the device context associated with the erase event to draw on. */
PHP_METHOD(php_wxEraseEvent, GetDC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEraseEvent::GetDC\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEraseEvent* current_object;
	wxphp_object_type current_object_type;
	wxEraseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxEraseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxEraseEvent::GetDC call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXERASEEVENT_TYPE){
				references = &((wxEraseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxEraseEvent::GetDC() to return object pointer\n\n");
				#endif

				wxDC_php* value_to_return0;
				value_to_return0 = (wxDC_php*) ((wxEraseEvent_php*)native_object)->GetDC();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxDC_entry);
					((zo_wxDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDC_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxEraseEvent::GetDC at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxEraseEvent::GetDC\n");
	}
}
/* }}} */

/* {{{ proto  wxEraseEvent::wxEraseEvent(int id, wxDC &dc)
   Constructor. */
PHP_METHOD(php_wxEraseEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxEraseEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxEraseEvent* current_object;
	wxEraseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long id0;
	zval* dc0 = 0;
	wxDC* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lz' (&id0, &dc0)\n");
		#endif

		char parse_parameters_string[] = "|lz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0, &dc0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(dc0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDC*) zend_object_store_get_object(dc0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDC*) zend_object_store_get_object(dc0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxDC*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'dc' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dc0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'dc' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxEraseEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif

				native_object = new wxEraseEvent_php((int) id0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0, (wxDC*) object_pointer0_1)\n");
				#endif

				native_object = new wxEraseEvent_php((int) id0, (wxDC*) object_pointer0_1);

				native_object->references.Initialize();
				((wxEraseEvent_php*) native_object)->references.AddReference(dc0, "wxEraseEvent::wxEraseEvent at call with 2 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxEraseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxEraseEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxFocusEvent_free(void *object TSRMLS_DC) 
{
    zo_wxFocusEvent* custom_object = (zo_wxFocusEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFocusEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxFocusEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxFocusEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFocusEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxFocusEvent* custom_object;
    custom_object = (zo_wxFocusEvent*) emalloc(sizeof(zo_wxFocusEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxFocusEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXFOCUSEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxWindow wxFocusEvent::GetWindow()
   Returns the window associated with this event, that is the window which had the focus before for the wxEVT_SET_FOCUS event and the window which is going to receive focus for the wxEVT_KILL_FOCUS one. */
PHP_METHOD(php_wxFocusEvent, GetWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFocusEvent::GetWindow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFocusEvent* current_object;
	wxphp_object_type current_object_type;
	wxFocusEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFocusEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFocusEvent::GetWindow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFOCUSEVENT_TYPE){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFocusEvent::GetWindow() to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxFocusEvent_php*)native_object)->GetWindow();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFocusEvent::GetWindow at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFocusEvent::GetWindow\n");
	}
}
/* }}} */

/* {{{ proto  wxFocusEvent::SetWindow(wxWindow &win) */
PHP_METHOD(php_wxFocusEvent, SetWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFocusEvent::SetWindow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFocusEvent* current_object;
	wxphp_object_type current_object_type;
	wxFocusEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFocusEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFocusEvent::SetWindow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFOCUSEVENT_TYPE){
				references = &((wxFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* win0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&win0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'win' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'win' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFocusEvent::SetWindow((wxWindow*) object_pointer0_0)\n\n");
				#endif

				((wxFocusEvent_php*)native_object)->SetWindow((wxWindow*) object_pointer0_0);

				references->AddReference(win0, "wxFocusEvent::SetWindow at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFocusEvent::SetWindow\n");
	}
}
/* }}} */

/* {{{ proto  wxFocusEvent::wxFocusEvent(int eventType, int id)
   Constructor. */
PHP_METHOD(php_wxFocusEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFocusEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFocusEvent* current_object;
	wxFocusEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long eventType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&eventType0, &id0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &eventType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxFocusEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0)\n");
				#endif

				native_object = new wxFocusEvent_php((wxEventType) eventType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, (int) id0)\n");
				#endif

				native_object = new wxFocusEvent_php((wxEventType) eventType0, (int) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxFocusEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxFocusEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxChildFocusEvent_free(void *object TSRMLS_DC) 
{
    zo_wxChildFocusEvent* custom_object = (zo_wxChildFocusEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxChildFocusEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxChildFocusEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxChildFocusEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxChildFocusEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxChildFocusEvent* custom_object;
    custom_object = (zo_wxChildFocusEvent*) emalloc(sizeof(zo_wxChildFocusEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxChildFocusEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXCHILDFOCUSEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxWindow wxChildFocusEvent::GetWindow()
   Returns the direct child which receives the focus, or a (grand-)parent of the control receiving the focus. */
PHP_METHOD(php_wxChildFocusEvent, GetWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxChildFocusEvent::GetWindow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxChildFocusEvent* current_object;
	wxphp_object_type current_object_type;
	wxChildFocusEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxChildFocusEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxChildFocusEvent::GetWindow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCHILDFOCUSEVENT_TYPE){
				references = &((wxChildFocusEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxChildFocusEvent::GetWindow() to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxChildFocusEvent_php*)native_object)->GetWindow();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxChildFocusEvent::GetWindow at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxChildFocusEvent::GetWindow\n");
	}
}
/* }}} */

/* {{{ proto  wxChildFocusEvent::wxChildFocusEvent(wxWindow &win)
   Constructor. */
PHP_METHOD(php_wxChildFocusEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxChildFocusEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxChildFocusEvent* current_object;
	wxChildFocusEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* win0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|z' (&win0)\n");
		#endif

		char parse_parameters_string[] = "|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'win' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'win' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxChildFocusEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif

				native_object = new wxChildFocusEvent_php((wxWindow*) object_pointer0_0);

				native_object->references.Initialize();
				((wxChildFocusEvent_php*) native_object)->references.AddReference(win0, "wxChildFocusEvent::wxChildFocusEvent at call with 1 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxChildFocusEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxChildFocusEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxNotifyEvent_free(void *object TSRMLS_DC) 
{
    zo_wxNotifyEvent* custom_object = (zo_wxNotifyEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxNotifyEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxNotifyEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxNotifyEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxNotifyEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxNotifyEvent* custom_object;
    custom_object = (zo_wxNotifyEvent*) emalloc(sizeof(zo_wxNotifyEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxNotifyEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXNOTIFYEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxNotifyEvent::Allow()
   This is the opposite of Veto(): it explicitly allows the event to be processed. */
PHP_METHOD(php_wxNotifyEvent, Allow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNotifyEvent::Allow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNotifyEvent* current_object;
	wxphp_object_type current_object_type;
	wxNotifyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxNotifyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxNotifyEvent::Allow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXNOTIFYEVENT_TYPE){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNotifyEvent::Allow()\n\n");
				#endif

				((wxNotifyEvent_php*)native_object)->Allow();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxNotifyEvent::Allow\n");
	}
}
/* }}} */

/* {{{ proto bool wxNotifyEvent::IsAllowed()
   Returns true if the change is allowed (Veto() hasn't been called) or false otherwise (if it was). */
PHP_METHOD(php_wxNotifyEvent, IsAllowed)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNotifyEvent::IsAllowed\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNotifyEvent* current_object;
	wxphp_object_type current_object_type;
	wxNotifyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxNotifyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxNotifyEvent::IsAllowed call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXNOTIFYEVENT_TYPE){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxNotifyEvent::IsAllowed())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxNotifyEvent_php*)native_object)->IsAllowed());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxNotifyEvent::IsAllowed\n");
	}
}
/* }}} */

/* {{{ proto  wxNotifyEvent::Veto()
   Prevents the change announced by this event from happening. */
PHP_METHOD(php_wxNotifyEvent, Veto)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNotifyEvent::Veto\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNotifyEvent* current_object;
	wxphp_object_type current_object_type;
	wxNotifyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxNotifyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxNotifyEvent::Veto call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXNOTIFYEVENT_TYPE){
				references = &((wxNotifyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTREEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXBOOKCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxBookCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUINOTEBOOKEVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiNotebookEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXAUITOOLBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxAuiToolBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXLISTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLITTEREVENT_TYPE) && (!reference_type_found)){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDSIZEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE) && (!reference_type_found)){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHEADERCTRLEVENT_TYPE) && (!reference_type_found)){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXRIBBONBAREVENT_TYPE) && (!reference_type_found)){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWEBVIEWEVENT_TYPE) && (!reference_type_found)){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMEDIAEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMediaEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNotifyEvent::Veto()\n\n");
				#endif

				((wxNotifyEvent_php*)native_object)->Veto();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxNotifyEvent::Veto\n");
	}
}
/* }}} */

/* {{{ proto  wxNotifyEvent::wxNotifyEvent(int eventType, int id)
   Constructor (used internally by wxWidgets only). */
PHP_METHOD(php_wxNotifyEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNotifyEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNotifyEvent* current_object;
	wxNotifyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long eventType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&eventType0, &id0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &eventType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxNotifyEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0)\n");
				#endif

				native_object = new wxNotifyEvent_php((wxEventType) eventType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, (int) id0)\n");
				#endif

				native_object = new wxNotifyEvent_php((wxEventType) eventType0, (int) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxNotifyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxNotifyEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxThreadEvent_free(void *object TSRMLS_DC) 
{
    zo_wxThreadEvent* custom_object = (zo_wxThreadEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxThreadEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxThreadEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxThreadEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxThreadEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxThreadEvent* custom_object;
    custom_object = (zo_wxThreadEvent*) emalloc(sizeof(zo_wxThreadEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxThreadEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXTHREADEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxEvent wxThreadEvent::Clone()
   Clones this event making sure that all internal members which use COW (only m_commandString for now; see Reference Counting) are unshared (see wxObject::UnShare). */
PHP_METHOD(php_wxThreadEvent, CloneMethod)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::Clone\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxThreadEvent* current_object;
	wxphp_object_type current_object_type;
	wxThreadEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxThreadEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxThreadEvent::Clone call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTHREADEVENT_TYPE){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxThreadEvent::Clone() to return object pointer\n\n");
				#endif

				wxEvent_php* value_to_return0;
				value_to_return0 = (wxEvent_php*) ((wxThreadEvent_php*)native_object)->Clone();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxEvent_entry);
					((zo_wxEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxEvent_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxThreadEvent::Clone at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxThreadEvent::Clone\n");
	}
}
/* }}} */

/* {{{ proto int wxThreadEvent::GetExtraLong()
   Returns extra information integer value. */
PHP_METHOD(php_wxThreadEvent, GetExtraLong)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::GetExtraLong\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxThreadEvent* current_object;
	wxphp_object_type current_object_type;
	wxThreadEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxThreadEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxThreadEvent::GetExtraLong call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTHREADEVENT_TYPE){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxThreadEvent::GetExtraLong())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxThreadEvent_php*)native_object)->GetExtraLong());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxThreadEvent::GetExtraLong\n");
	}
}
/* }}} */

/* {{{ proto wxEventCategory wxThreadEvent::GetEventCategory()
   Returns wxEVT_CATEGORY_THREAD. */
PHP_METHOD(php_wxThreadEvent, GetEventCategory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::GetEventCategory\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxThreadEvent* current_object;
	wxphp_object_type current_object_type;
	wxThreadEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxThreadEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxThreadEvent::GetEventCategory call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTHREADEVENT_TYPE){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxThreadEvent::GetEventCategory())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxThreadEvent_php*)native_object)->GetEventCategory());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxThreadEvent::GetEventCategory\n");
	}
}
/* }}} */

/* {{{ proto int wxThreadEvent::GetInt()
   Returns stored integer value. */
PHP_METHOD(php_wxThreadEvent, GetInt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::GetInt\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxThreadEvent* current_object;
	wxphp_object_type current_object_type;
	wxThreadEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxThreadEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxThreadEvent::GetInt call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTHREADEVENT_TYPE){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxThreadEvent::GetInt())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxThreadEvent_php*)native_object)->GetInt());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxThreadEvent::GetInt\n");
	}
}
/* }}} */

/* {{{ proto string wxThreadEvent::GetString()
   Returns stored string value. */
PHP_METHOD(php_wxThreadEvent, GetString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::GetString\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxThreadEvent* current_object;
	wxphp_object_type current_object_type;
	wxThreadEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxThreadEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxThreadEvent::GetString call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTHREADEVENT_TYPE){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxThreadEvent::GetString().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxThreadEvent_php*)native_object)->GetString();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxThreadEvent::GetString\n");
	}
}
/* }}} */

/* {{{ proto  wxThreadEvent::SetInt(int intCommand)
   Sets the integer value. */
PHP_METHOD(php_wxThreadEvent, SetInt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::SetInt\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxThreadEvent* current_object;
	wxphp_object_type current_object_type;
	wxThreadEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxThreadEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxThreadEvent::SetInt call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTHREADEVENT_TYPE){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long intCommand0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&intCommand0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &intCommand0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxThreadEvent::SetInt((int) intCommand0)\n\n");
				#endif

				((wxThreadEvent_php*)native_object)->SetInt((int) intCommand0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxThreadEvent::SetInt\n");
	}
}
/* }}} */

/* {{{ proto  wxThreadEvent::SetExtraLong(int extraLong)
   Sets the extra information value. */
PHP_METHOD(php_wxThreadEvent, SetExtraLong)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::SetExtraLong\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxThreadEvent* current_object;
	wxphp_object_type current_object_type;
	wxThreadEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxThreadEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxThreadEvent::SetExtraLong call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTHREADEVENT_TYPE){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long extraLong0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&extraLong0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &extraLong0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxThreadEvent::SetExtraLong((long) extraLong0)\n\n");
				#endif

				((wxThreadEvent_php*)native_object)->SetExtraLong((long) extraLong0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxThreadEvent::SetExtraLong\n");
	}
}
/* }}} */

/* {{{ proto  wxThreadEvent::SetString(string string)
   Sets the string value. */
PHP_METHOD(php_wxThreadEvent, SetString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::SetString\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxThreadEvent* current_object;
	wxphp_object_type current_object_type;
	wxThreadEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxThreadEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxThreadEvent::SetString call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTHREADEVENT_TYPE){
				references = &((wxThreadEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* string0;
	long string_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&string0, &string_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string0, &string_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxThreadEvent::SetString(wxString(string0, wxConvUTF8))\n\n");
				#endif

				((wxThreadEvent_php*)native_object)->SetString(wxString(string0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxThreadEvent::SetString\n");
	}
}
/* }}} */

/* {{{ proto  wxThreadEvent::wxThreadEvent(int eventType, int id)
   Constructor. */
PHP_METHOD(php_wxThreadEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxThreadEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxThreadEvent* current_object;
	wxThreadEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long eventType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&eventType0, &id0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &eventType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxThreadEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0)\n");
				#endif

				native_object = new wxThreadEvent_php((wxEventType) eventType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, (int) id0)\n");
				#endif

				native_object = new wxThreadEvent_php((wxEventType) eventType0, (int) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxThreadEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxThreadEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHelpEvent_free(void *object TSRMLS_DC) 
{
    zo_wxHelpEvent* custom_object = (zo_wxHelpEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHelpEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHelpEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHelpEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHelpEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHelpEvent* custom_object;
    custom_object = (zo_wxHelpEvent*) emalloc(sizeof(zo_wxHelpEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHelpEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHELPEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxHelpEvent::Origin wxHelpEvent::GetOrigin()
   Returns the origin of the help event which is one of the wxHelpEvent::Origin values. */
PHP_METHOD(php_wxHelpEvent, GetOrigin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHelpEvent::GetOrigin\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHelpEvent* current_object;
	wxphp_object_type current_object_type;
	wxHelpEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHelpEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHelpEvent::GetOrigin call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHELPEVENT_TYPE){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHelpEvent::GetOrigin())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxHelpEvent_php*)native_object)->GetOrigin());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHelpEvent::GetOrigin\n");
	}
}
/* }}} */

/* {{{ proto wxPoint wxHelpEvent::GetPosition()
   Returns the left-click position of the mouse, in screen coordinates. */
PHP_METHOD(php_wxHelpEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHelpEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHelpEvent* current_object;
	wxphp_object_type current_object_type;
	wxHelpEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHelpEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHelpEvent::GetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHELPEVENT_TYPE){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHelpEvent::GetPosition() to return object reference\n\n");
				#endif

				wxPoint_php* value_to_return0;
				value_to_return0 = (wxPoint_php*) &((wxHelpEvent_php*)native_object)->GetPosition();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxPoint_entry);
					((zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPoint_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxHelpEvent::GetPosition at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHelpEvent::GetPosition\n");
	}
}
/* }}} */

/* {{{ proto  wxHelpEvent::SetOrigin(wxHelpEvent::Origin origin)
   Set the help event origin, only used internally by wxWidgets normally. */
PHP_METHOD(php_wxHelpEvent, SetOrigin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHelpEvent::SetOrigin\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHelpEvent* current_object;
	wxphp_object_type current_object_type;
	wxHelpEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHelpEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHelpEvent::SetOrigin call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHELPEVENT_TYPE){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long origin0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&origin0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &origin0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHelpEvent::SetOrigin((wxHelpEvent::Origin) origin0)\n\n");
				#endif

				((wxHelpEvent_php*)native_object)->SetOrigin((wxHelpEvent::Origin) origin0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHelpEvent::SetOrigin\n");
	}
}
/* }}} */

/* {{{ proto  wxHelpEvent::SetPosition(wxPoint pt)
   Sets the left-click position of the mouse, in screen coordinates. */
PHP_METHOD(php_wxHelpEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHelpEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHelpEvent* current_object;
	wxphp_object_type current_object_type;
	wxHelpEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHelpEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHelpEvent::SetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHELPEVENT_TYPE){
				references = &((wxHelpEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* pt0 = 0;
	wxPoint* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pt0, php_wxPoint_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pt0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pt0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxPoint*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHelpEvent::SetPosition(*(wxPoint*) object_pointer0_0)\n\n");
				#endif

				((wxHelpEvent_php*)native_object)->SetPosition(*(wxPoint*) object_pointer0_0);

				references->AddReference(pt0, "wxHelpEvent::SetPosition at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHelpEvent::SetPosition\n");
	}
}
/* }}} */

/* {{{ proto  wxHelpEvent::wxHelpEvent(int type, int winid, wxPoint pt, wxHelpEvent::Origin origin)
   Constructor. */
PHP_METHOD(php_wxHelpEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHelpEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHelpEvent* current_object;
	wxHelpEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long type0;
	long winid0;
	zval* pt0 = 0;
	wxPoint* object_pointer0_2 = 0;
	long origin0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llOl' (&type0, &winid0, &pt0, php_wxPoint_entry, &origin0)\n");
		#endif

		char parse_parameters_string[] = "|llOl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0, &winid0, &pt0, php_wxPoint_entry, &origin0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(pt0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pt0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pt0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxPoint*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxHelpEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0)\n");
				#endif

				native_object = new wxHelpEvent_php((wxEventType) type0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (wxWindowID) winid0)\n");
				#endif

				native_object = new wxHelpEvent_php((wxEventType) type0, (wxWindowID) winid0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (wxWindowID) winid0, *(wxPoint*) object_pointer0_2)\n");
				#endif

				native_object = new wxHelpEvent_php((wxEventType) type0, (wxWindowID) winid0, *(wxPoint*) object_pointer0_2);

				native_object->references.Initialize();
				((wxHelpEvent_php*) native_object)->references.AddReference(pt0, "wxHelpEvent::wxHelpEvent at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (wxWindowID) winid0, *(wxPoint*) object_pointer0_2, (wxHelpEvent::Origin) origin0)\n");
				#endif

				native_object = new wxHelpEvent_php((wxEventType) type0, (wxWindowID) winid0, *(wxPoint*) object_pointer0_2, (wxHelpEvent::Origin) origin0);

				native_object->references.Initialize();
				((wxHelpEvent_php*) native_object)->references.AddReference(pt0, "wxHelpEvent::wxHelpEvent at call with 4 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHelpEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHelpEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxScrollEvent_free(void *object TSRMLS_DC) 
{
    zo_wxScrollEvent* custom_object = (zo_wxScrollEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxScrollEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxScrollEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxScrollEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxScrollEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxScrollEvent* custom_object;
    custom_object = (zo_wxScrollEvent*) emalloc(sizeof(zo_wxScrollEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxScrollEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXSCROLLEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxScrollEvent::wxScrollEvent(int commandType, int id, int pos, int orientation)
   Constructor. */
PHP_METHOD(php_wxScrollEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxScrollEvent* current_object;
	wxScrollEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandType0;
	long id0;
	long pos0;
	long orientation0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llll' (&commandType0, &id0, &pos0, &orientation0)\n");
		#endif

		char parse_parameters_string[] = "|llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &id0, &pos0, &orientation0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxScrollEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif

				native_object = new wxScrollEvent_php((wxEventType) commandType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0)\n");
				#endif

				native_object = new wxScrollEvent_php((wxEventType) commandType0, (int) id0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0, (int) pos0)\n");
				#endif

				native_object = new wxScrollEvent_php((wxEventType) commandType0, (int) id0, (int) pos0);

				native_object->references.Initialize();
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0, (int) pos0, (int) orientation0)\n");
				#endif

				native_object = new wxScrollEvent_php((wxEventType) commandType0, (int) id0, (int) pos0, (int) orientation0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxScrollEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxScrollEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxScrollEvent::SetPosition(int pos) */
PHP_METHOD(php_wxScrollEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxScrollEvent* current_object;
	wxphp_object_type current_object_type;
	wxScrollEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxScrollEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxScrollEvent::SetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSCROLLEVENT_TYPE){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&pos0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxScrollEvent::SetPosition((int) pos0)\n\n");
				#endif

				((wxScrollEvent_php*)native_object)->SetPosition((int) pos0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxScrollEvent::SetPosition\n");
	}
}
/* }}} */

/* {{{ proto  wxScrollEvent::SetOrientation(int orient) */
PHP_METHOD(php_wxScrollEvent, SetOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollEvent::SetOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxScrollEvent* current_object;
	wxphp_object_type current_object_type;
	wxScrollEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxScrollEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxScrollEvent::SetOrientation call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSCROLLEVENT_TYPE){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long orient0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&orient0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &orient0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxScrollEvent::SetOrientation((int) orient0)\n\n");
				#endif

				((wxScrollEvent_php*)native_object)->SetOrientation((int) orient0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxScrollEvent::SetOrientation\n");
	}
}
/* }}} */

/* {{{ proto int wxScrollEvent::GetPosition()
   Returns the position of the scrollbar. */
PHP_METHOD(php_wxScrollEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxScrollEvent* current_object;
	wxphp_object_type current_object_type;
	wxScrollEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxScrollEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxScrollEvent::GetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSCROLLEVENT_TYPE){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxScrollEvent::GetPosition())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxScrollEvent_php*)native_object)->GetPosition());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxScrollEvent::GetPosition\n");
	}
}
/* }}} */

/* {{{ proto int wxScrollEvent::GetOrientation()
   Returns wxHORIZONTAL or wxVERTICAL, depending on the orientation of the scrollbar. */
PHP_METHOD(php_wxScrollEvent, GetOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxScrollEvent::GetOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxScrollEvent* current_object;
	wxphp_object_type current_object_type;
	wxScrollEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxScrollEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxScrollEvent::GetOrientation call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSCROLLEVENT_TYPE){
				references = &((wxScrollEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxScrollEvent::GetOrientation())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxScrollEvent_php*)native_object)->GetOrientation());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxScrollEvent::GetOrientation\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxIdleEvent_free(void *object TSRMLS_DC) 
{
    zo_wxIdleEvent* custom_object = (zo_wxIdleEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxIdleEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxIdleEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxIdleEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxIdleEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxIdleEvent* custom_object;
    custom_object = (zo_wxIdleEvent*) emalloc(sizeof(zo_wxIdleEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxIdleEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXIDLEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxIdleMode wxIdleEvent::GetMode()
   Static function returning a value specifying how wxWidgets will send idle events: to all windows, or only to those which specify that they will process the events. */
PHP_METHOD(php_wxIdleEvent, GetMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxIdleEvent::GetMode\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxIdleEvent* current_object;
	wxphp_object_type current_object_type;
	wxIdleEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxIdleEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxIdleEvent::GetMode call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXIDLEEVENT_TYPE){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_LONG(wxIdleEvent::GetMode())\n\n");
				#endif

				ZVAL_LONG(return_value, wxIdleEvent::GetMode());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxIdleEvent::GetMode\n");
	}
}
/* }}} */

/* {{{ proto bool wxIdleEvent::MoreRequested()
   Returns true if the OnIdle function processing this event requested more processing time. */
PHP_METHOD(php_wxIdleEvent, MoreRequested)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxIdleEvent::MoreRequested\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxIdleEvent* current_object;
	wxphp_object_type current_object_type;
	wxIdleEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxIdleEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxIdleEvent::MoreRequested call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXIDLEEVENT_TYPE){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxIdleEvent::MoreRequested())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxIdleEvent_php*)native_object)->MoreRequested());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxIdleEvent::MoreRequested\n");
	}
}
/* }}} */

/* {{{ proto  wxIdleEvent::RequestMore(bool needMore)
   Tells wxWidgets that more processing is required. */
PHP_METHOD(php_wxIdleEvent, RequestMore)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxIdleEvent::RequestMore\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxIdleEvent* current_object;
	wxphp_object_type current_object_type;
	wxIdleEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxIdleEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxIdleEvent::RequestMore call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXIDLEEVENT_TYPE){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool needMore0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&needMore0)\n");
		#endif

		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &needMore0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxIdleEvent::RequestMore()\n\n");
				#endif

				((wxIdleEvent_php*)native_object)->RequestMore();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxIdleEvent::RequestMore(needMore0)\n\n");
				#endif

				((wxIdleEvent_php*)native_object)->RequestMore(needMore0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxIdleEvent::RequestMore\n");
	}
}
/* }}} */

/* {{{ proto  wxIdleEvent::SetMode(wxIdleMode mode)
   Static function for specifying how wxWidgets will send idle events: to all windows, or only to those which specify that they will process the events. */
PHP_METHOD(php_wxIdleEvent, SetMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxIdleEvent::SetMode\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxIdleEvent* current_object;
	wxphp_object_type current_object_type;
	wxIdleEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxIdleEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxIdleEvent::SetMode call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXIDLEEVENT_TYPE){
				references = &((wxIdleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long mode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&mode0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &mode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxIdleEvent::SetMode((wxIdleMode) mode0)\n\n");
				#endif

				wxIdleEvent::SetMode((wxIdleMode) mode0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxIdleEvent::SetMode\n");
	}
}
/* }}} */

/* {{{ proto  wxIdleEvent::wxIdleEvent()
   Constructor. */
PHP_METHOD(php_wxIdleEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxIdleEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxIdleEvent* current_object;
	wxIdleEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxIdleEvent_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxIdleEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxIdleEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxInitDialogEvent_free(void *object TSRMLS_DC) 
{
    zo_wxInitDialogEvent* custom_object = (zo_wxInitDialogEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxInitDialogEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxInitDialogEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxInitDialogEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxInitDialogEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxInitDialogEvent* custom_object;
    custom_object = (zo_wxInitDialogEvent*) emalloc(sizeof(zo_wxInitDialogEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxInitDialogEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXINITDIALOGEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxInitDialogEvent::wxInitDialogEvent(int id)
   Constructor. */
PHP_METHOD(php_wxInitDialogEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxInitDialogEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxInitDialogEvent* current_object;
	wxInitDialogEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&id0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxInitDialogEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif

				native_object = new wxInitDialogEvent_php((int) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxInitDialogEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxInitDialogEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxWindowDestroyEvent_free(void *object TSRMLS_DC) 
{
    zo_wxWindowDestroyEvent* custom_object = (zo_wxWindowDestroyEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxWindowDestroyEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxWindowDestroyEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxWindowDestroyEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxWindowDestroyEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxWindowDestroyEvent* custom_object;
    custom_object = (zo_wxWindowDestroyEvent*) emalloc(sizeof(zo_wxWindowDestroyEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxWindowDestroyEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXWINDOWDESTROYEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxWindow wxWindowDestroyEvent::GetWindow()
   Return the window being destroyed. */
PHP_METHOD(php_wxWindowDestroyEvent, GetWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWindowDestroyEvent::GetWindow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxWindowDestroyEvent* current_object;
	wxphp_object_type current_object_type;
	wxWindowDestroyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxWindowDestroyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxWindowDestroyEvent::GetWindow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXWINDOWDESTROYEVENT_TYPE){
				references = &((wxWindowDestroyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxWindowDestroyEvent::GetWindow() to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxWindowDestroyEvent_php*)native_object)->GetWindow();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxWindowDestroyEvent::GetWindow at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxWindowDestroyEvent::GetWindow\n");
	}
}
/* }}} */

/* {{{ proto  wxWindowDestroyEvent::wxWindowDestroyEvent(wxWindow &win)
   Constructor. */
PHP_METHOD(php_wxWindowDestroyEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWindowDestroyEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxWindowDestroyEvent* current_object;
	wxWindowDestroyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* win0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|z' (&win0)\n");
		#endif

		char parse_parameters_string[] = "|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'win' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'win' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxWindowDestroyEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif

				native_object = new wxWindowDestroyEvent_php((wxWindow*) object_pointer0_0);

				native_object->references.Initialize();
				((wxWindowDestroyEvent_php*) native_object)->references.AddReference(win0, "wxWindowDestroyEvent::wxWindowDestroyEvent at call with 1 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxWindowDestroyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxWindowDestroyEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxNavigationKeyEvent_free(void *object TSRMLS_DC) 
{
    zo_wxNavigationKeyEvent* custom_object = (zo_wxNavigationKeyEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxNavigationKeyEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxNavigationKeyEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxNavigationKeyEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxNavigationKeyEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxNavigationKeyEvent* custom_object;
    custom_object = (zo_wxNavigationKeyEvent*) emalloc(sizeof(zo_wxNavigationKeyEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxNavigationKeyEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXNAVIGATIONKEYEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxWindow wxNavigationKeyEvent::GetCurrentFocus()
   Returns the child that has the focus, or NULL. */
PHP_METHOD(php_wxNavigationKeyEvent, GetCurrentFocus)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::GetCurrentFocus\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNavigationKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxNavigationKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxNavigationKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxNavigationKeyEvent::GetCurrentFocus call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNavigationKeyEvent::GetCurrentFocus() to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxNavigationKeyEvent_php*)native_object)->GetCurrentFocus();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxNavigationKeyEvent::GetCurrentFocus at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxNavigationKeyEvent::GetCurrentFocus\n");
	}
}
/* }}} */

/* {{{ proto bool wxNavigationKeyEvent::GetDirection()
   Returns true if the navigation was in the forward direction. */
PHP_METHOD(php_wxNavigationKeyEvent, GetDirection)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::GetDirection\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNavigationKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxNavigationKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxNavigationKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxNavigationKeyEvent::GetDirection call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxNavigationKeyEvent::GetDirection())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxNavigationKeyEvent_php*)native_object)->GetDirection());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxNavigationKeyEvent::GetDirection\n");
	}
}
/* }}} */

/* {{{ proto bool wxNavigationKeyEvent::IsFromTab()
   Returns true if the navigation event was from a tab key. */
PHP_METHOD(php_wxNavigationKeyEvent, IsFromTab)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::IsFromTab\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNavigationKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxNavigationKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxNavigationKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxNavigationKeyEvent::IsFromTab call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxNavigationKeyEvent::IsFromTab())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxNavigationKeyEvent_php*)native_object)->IsFromTab());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxNavigationKeyEvent::IsFromTab\n");
	}
}
/* }}} */

/* {{{ proto bool wxNavigationKeyEvent::IsWindowChange()
   Returns true if the navigation event represents a window change (for example, from Ctrl-Page Down in a notebook). */
PHP_METHOD(php_wxNavigationKeyEvent, IsWindowChange)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::IsWindowChange\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNavigationKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxNavigationKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxNavigationKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxNavigationKeyEvent::IsWindowChange call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxNavigationKeyEvent::IsWindowChange())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxNavigationKeyEvent_php*)native_object)->IsWindowChange());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxNavigationKeyEvent::IsWindowChange\n");
	}
}
/* }}} */

/* {{{ proto  wxNavigationKeyEvent::SetCurrentFocus(wxWindow &currentFocus)
   Sets the current focus window member. */
PHP_METHOD(php_wxNavigationKeyEvent, SetCurrentFocus)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::SetCurrentFocus\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNavigationKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxNavigationKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxNavigationKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxNavigationKeyEvent::SetCurrentFocus call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* currentFocus0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&currentFocus0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &currentFocus0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(currentFocus0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(currentFocus0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(currentFocus0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'currentFocus' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(currentFocus0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'currentFocus' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNavigationKeyEvent::SetCurrentFocus((wxWindow*) object_pointer0_0)\n\n");
				#endif

				((wxNavigationKeyEvent_php*)native_object)->SetCurrentFocus((wxWindow*) object_pointer0_0);

				references->AddReference(currentFocus0, "wxNavigationKeyEvent::SetCurrentFocus at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxNavigationKeyEvent::SetCurrentFocus\n");
	}
}
/* }}} */

/* {{{ proto  wxNavigationKeyEvent::SetDirection(bool direction)
   Sets the direction to forward if direction is true, or backward if false. */
PHP_METHOD(php_wxNavigationKeyEvent, SetDirection)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::SetDirection\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNavigationKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxNavigationKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxNavigationKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxNavigationKeyEvent::SetDirection call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool direction0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&direction0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &direction0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNavigationKeyEvent::SetDirection(direction0)\n\n");
				#endif

				((wxNavigationKeyEvent_php*)native_object)->SetDirection(direction0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxNavigationKeyEvent::SetDirection\n");
	}
}
/* }}} */

/* {{{ proto  wxNavigationKeyEvent::SetFlags(int flags)
   Sets the flags for this event. */
PHP_METHOD(php_wxNavigationKeyEvent, SetFlags)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::SetFlags\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNavigationKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxNavigationKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxNavigationKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxNavigationKeyEvent::SetFlags call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&flags0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNavigationKeyEvent::SetFlags((long) flags0)\n\n");
				#endif

				((wxNavigationKeyEvent_php*)native_object)->SetFlags((long) flags0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxNavigationKeyEvent::SetFlags\n");
	}
}
/* }}} */

/* {{{ proto  wxNavigationKeyEvent::SetFromTab(bool fromTab)
   Marks the navigation event as from a tab key. */
PHP_METHOD(php_wxNavigationKeyEvent, SetFromTab)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::SetFromTab\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNavigationKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxNavigationKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxNavigationKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxNavigationKeyEvent::SetFromTab call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool fromTab0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&fromTab0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &fromTab0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNavigationKeyEvent::SetFromTab(fromTab0)\n\n");
				#endif

				((wxNavigationKeyEvent_php*)native_object)->SetFromTab(fromTab0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxNavigationKeyEvent::SetFromTab\n");
	}
}
/* }}} */

/* {{{ proto  wxNavigationKeyEvent::SetWindowChange(bool windowChange)
   Marks the event as a window change event. */
PHP_METHOD(php_wxNavigationKeyEvent, SetWindowChange)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::SetWindowChange\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNavigationKeyEvent* current_object;
	wxphp_object_type current_object_type;
	wxNavigationKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxNavigationKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxNavigationKeyEvent::SetWindowChange call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXNAVIGATIONKEYEVENT_TYPE){
				references = &((wxNavigationKeyEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool windowChange0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&windowChange0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &windowChange0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxNavigationKeyEvent::SetWindowChange(windowChange0)\n\n");
				#endif

				((wxNavigationKeyEvent_php*)native_object)->SetWindowChange(windowChange0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxNavigationKeyEvent::SetWindowChange\n");
	}
}
/* }}} */

/* {{{ proto  wxNavigationKeyEvent::wxNavigationKeyEvent() */
PHP_METHOD(php_wxNavigationKeyEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxNavigationKeyEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxNavigationKeyEvent* current_object;
	wxNavigationKeyEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxNavigationKeyEvent_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxNavigationKeyEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxNavigationKeyEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxCloseEvent_free(void *object TSRMLS_DC) 
{
    zo_wxCloseEvent* custom_object = (zo_wxCloseEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCloseEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxCloseEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxCloseEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCloseEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxCloseEvent* custom_object;
    custom_object = (zo_wxCloseEvent*) emalloc(sizeof(zo_wxCloseEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxCloseEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXCLOSEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxCloseEvent::CanVeto()
   Returns true if you can veto a system shutdown or a window close event. */
PHP_METHOD(php_wxCloseEvent, CanVeto)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCloseEvent::CanVeto\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCloseEvent* current_object;
	wxphp_object_type current_object_type;
	wxCloseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCloseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCloseEvent::CanVeto call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCLOSEEVENT_TYPE){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxCloseEvent::CanVeto())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxCloseEvent_php*)native_object)->CanVeto());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCloseEvent::CanVeto\n");
	}
}
/* }}} */

/* {{{ proto bool wxCloseEvent::GetLoggingOff()
   Returns true if the user is just logging off or false if the system is shutting down. */
PHP_METHOD(php_wxCloseEvent, GetLoggingOff)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCloseEvent::GetLoggingOff\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCloseEvent* current_object;
	wxphp_object_type current_object_type;
	wxCloseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCloseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCloseEvent::GetLoggingOff call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCLOSEEVENT_TYPE){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxCloseEvent::GetLoggingOff())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxCloseEvent_php*)native_object)->GetLoggingOff());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCloseEvent::GetLoggingOff\n");
	}
}
/* }}} */

/* {{{ proto  wxCloseEvent::SetCanVeto(bool canVeto)
   Sets the 'can veto' flag. */
PHP_METHOD(php_wxCloseEvent, SetCanVeto)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCloseEvent::SetCanVeto\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCloseEvent* current_object;
	wxphp_object_type current_object_type;
	wxCloseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCloseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCloseEvent::SetCanVeto call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCLOSEEVENT_TYPE){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool canVeto0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&canVeto0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &canVeto0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCloseEvent::SetCanVeto(canVeto0)\n\n");
				#endif

				((wxCloseEvent_php*)native_object)->SetCanVeto(canVeto0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCloseEvent::SetCanVeto\n");
	}
}
/* }}} */

/* {{{ proto  wxCloseEvent::SetLoggingOff(bool loggingOff)
   Sets the 'logging off' flag. */
PHP_METHOD(php_wxCloseEvent, SetLoggingOff)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCloseEvent::SetLoggingOff\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCloseEvent* current_object;
	wxphp_object_type current_object_type;
	wxCloseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCloseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCloseEvent::SetLoggingOff call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCLOSEEVENT_TYPE){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool loggingOff0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&loggingOff0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &loggingOff0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCloseEvent::SetLoggingOff(loggingOff0)\n\n");
				#endif

				((wxCloseEvent_php*)native_object)->SetLoggingOff(loggingOff0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCloseEvent::SetLoggingOff\n");
	}
}
/* }}} */

/* {{{ proto  wxCloseEvent::Veto(bool veto)
   Call this from your event handler to veto a system shutdown or to signal to the calling application that a window close did not happen. */
PHP_METHOD(php_wxCloseEvent, Veto)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCloseEvent::Veto\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCloseEvent* current_object;
	wxphp_object_type current_object_type;
	wxCloseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCloseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCloseEvent::Veto call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCLOSEEVENT_TYPE){
				references = &((wxCloseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool veto0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&veto0)\n");
		#endif

		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &veto0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCloseEvent::Veto()\n\n");
				#endif

				((wxCloseEvent_php*)native_object)->Veto();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCloseEvent::Veto(veto0)\n\n");
				#endif

				((wxCloseEvent_php*)native_object)->Veto(veto0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCloseEvent::Veto\n");
	}
}
/* }}} */

/* {{{ proto  wxCloseEvent::wxCloseEvent(int commandEventType, int id)
   Constructor. */
PHP_METHOD(php_wxCloseEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCloseEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCloseEvent* current_object;
	wxCloseEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandEventType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandEventType0, &id0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandEventType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxCloseEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandEventType0)\n");
				#endif

				native_object = new wxCloseEvent_php((wxEventType) commandEventType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandEventType0, (int) id0)\n");
				#endif

				native_object = new wxCloseEvent_php((wxEventType) commandEventType0, (int) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxCloseEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxCloseEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMenuEvent_free(void *object TSRMLS_DC) 
{
    zo_wxMenuEvent* custom_object = (zo_wxMenuEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMenuEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMenuEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxMenuEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMenuEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxMenuEvent* custom_object;
    custom_object = (zo_wxMenuEvent*) emalloc(sizeof(zo_wxMenuEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxMenuEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXMENUEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxMenu wxMenuEvent::GetMenu()
   Returns the menu which is being opened or closed. */
PHP_METHOD(php_wxMenuEvent, GetMenu)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMenuEvent::GetMenu\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMenuEvent* current_object;
	wxphp_object_type current_object_type;
	wxMenuEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMenuEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMenuEvent::GetMenu call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMENUEVENT_TYPE){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMenuEvent::GetMenu() to return object pointer\n\n");
				#endif

				wxMenu_php* value_to_return0;
				value_to_return0 = (wxMenu_php*) ((wxMenuEvent_php*)native_object)->GetMenu();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxMenu_entry);
					((zo_wxMenu*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMenu_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxMenuEvent::GetMenu at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMenuEvent::GetMenu\n");
	}
}
/* }}} */

/* {{{ proto int wxMenuEvent::GetMenuId()
   Returns the menu identifier associated with the event. */
PHP_METHOD(php_wxMenuEvent, GetMenuId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMenuEvent::GetMenuId\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMenuEvent* current_object;
	wxphp_object_type current_object_type;
	wxMenuEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMenuEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMenuEvent::GetMenuId call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMENUEVENT_TYPE){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMenuEvent::GetMenuId())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxMenuEvent_php*)native_object)->GetMenuId());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMenuEvent::GetMenuId\n");
	}
}
/* }}} */

/* {{{ proto bool wxMenuEvent::IsPopup()
   Returns true if the menu which is being opened or closed is a popup menu, false if it is a normal one. */
PHP_METHOD(php_wxMenuEvent, IsPopup)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMenuEvent::IsPopup\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMenuEvent* current_object;
	wxphp_object_type current_object_type;
	wxMenuEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMenuEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMenuEvent::IsPopup call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMENUEVENT_TYPE){
				references = &((wxMenuEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMenuEvent::IsPopup())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMenuEvent_php*)native_object)->IsPopup());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMenuEvent::IsPopup\n");
	}
}
/* }}} */

/* {{{ proto  wxMenuEvent::wxMenuEvent(int type, int id, wxMenu &menu)
   Constructor. */
PHP_METHOD(php_wxMenuEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMenuEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMenuEvent* current_object;
	wxMenuEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long type0;
	long id0;
	zval* menu0 = 0;
	wxMenu* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llz' (&type0, &id0, &menu0)\n");
		#endif

		char parse_parameters_string[] = "|llz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0, &id0, &menu0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(menu0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxMenu*) zend_object_store_get_object(menu0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxMenu*) zend_object_store_get_object(menu0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxMenu*) argument_native_object;
					if (!object_pointer0_2 || (argument_type != PHP_WXMENU_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'menu' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(menu0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'menu' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxMenuEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0)\n");
				#endif

				native_object = new wxMenuEvent_php((wxEventType) type0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0)\n");
				#endif

				native_object = new wxMenuEvent_php((wxEventType) type0, (int) id0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0, (wxMenu*) object_pointer0_2)\n");
				#endif

				native_object = new wxMenuEvent_php((wxEventType) type0, (int) id0, (wxMenu*) object_pointer0_2);

				native_object->references.Initialize();
				((wxMenuEvent_php*) native_object)->references.AddReference(menu0, "wxMenuEvent::wxMenuEvent at call with 3 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxMenuEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxMenuEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMoveEvent_free(void *object TSRMLS_DC) 
{
    zo_wxMoveEvent* custom_object = (zo_wxMoveEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMoveEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMoveEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxMoveEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMoveEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxMoveEvent* custom_object;
    custom_object = (zo_wxMoveEvent*) emalloc(sizeof(zo_wxMoveEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxMoveEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXMOVEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxPoint wxMoveEvent::GetPosition()
   Returns the position of the window generating the move change event. */
PHP_METHOD(php_wxMoveEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMoveEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMoveEvent* current_object;
	wxphp_object_type current_object_type;
	wxMoveEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMoveEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMoveEvent::GetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOVEEVENT_TYPE){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMoveEvent::GetPosition() to return new object\n\n");
				#endif

				wxPoint value_to_return0;
				value_to_return0 = ((wxMoveEvent_php*)native_object)->GetPosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				((wxPoint_php*)ptr)->phpObj = return_value;
				((wxPoint_php*)ptr)->InitProperties();
				zo_wxPoint* zo0 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxPoint_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMoveEvent::GetPosition\n");
	}
}
/* }}} */

/* {{{ proto wxRect wxMoveEvent::GetRect() */
PHP_METHOD(php_wxMoveEvent, GetRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMoveEvent::GetRect\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMoveEvent* current_object;
	wxphp_object_type current_object_type;
	wxMoveEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMoveEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMoveEvent::GetRect call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOVEEVENT_TYPE){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMoveEvent::GetRect() to return new object\n\n");
				#endif

				wxRect value_to_return0;
				value_to_return0 = ((wxMoveEvent_php*)native_object)->GetRect();
				void* ptr = safe_emalloc(1, sizeof(wxRect_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxRect));
				object_init_ex(return_value, php_wxRect_entry);
				((wxRect_php*)ptr)->phpObj = return_value;
				((wxRect_php*)ptr)->InitProperties();
				zo_wxRect* zo0 = (zo_wxRect*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxRect_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMoveEvent::GetRect\n");
	}
}
/* }}} */

/* {{{ proto  wxMoveEvent::SetPosition(wxPoint pos) */
PHP_METHOD(php_wxMoveEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMoveEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMoveEvent* current_object;
	wxphp_object_type current_object_type;
	wxMoveEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMoveEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMoveEvent::SetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOVEEVENT_TYPE){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* pos0 = 0;
	wxPoint* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pos0, php_wxPoint_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxPoint*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMoveEvent::SetPosition(*(wxPoint*) object_pointer0_0)\n\n");
				#endif

				((wxMoveEvent_php*)native_object)->SetPosition(*(wxPoint*) object_pointer0_0);

				references->AddReference(pos0, "wxMoveEvent::SetPosition at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMoveEvent::SetPosition\n");
	}
}
/* }}} */

/* {{{ proto  wxMoveEvent::SetRect(wxRect rect) */
PHP_METHOD(php_wxMoveEvent, SetRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMoveEvent::SetRect\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMoveEvent* current_object;
	wxphp_object_type current_object_type;
	wxMoveEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMoveEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMoveEvent::SetRect call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOVEEVENT_TYPE){
				references = &((wxMoveEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* rect0 = 0;
	wxRect* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&rect0, php_wxRect_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect0, php_wxRect_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRect*) zend_object_store_get_object(rect0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRect*) zend_object_store_get_object(rect0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxRect*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMoveEvent::SetRect(*(wxRect*) object_pointer0_0)\n\n");
				#endif

				((wxMoveEvent_php*)native_object)->SetRect(*(wxRect*) object_pointer0_0);

				references->AddReference(rect0, "wxMoveEvent::SetRect at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMoveEvent::SetRect\n");
	}
}
/* }}} */

/* {{{ proto  wxMoveEvent::wxMoveEvent(wxPoint pt, int id)
   Constructor. */
PHP_METHOD(php_wxMoveEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMoveEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMoveEvent* current_object;
	wxMoveEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* pt0 = 0;
	wxPoint* object_pointer0_0 = 0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O|l' (&pt0, php_wxPoint_entry, &id0)\n");
		#endif

		char parse_parameters_string[] = "O|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt0, php_wxPoint_entry, &id0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pt0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pt0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxPoint*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxPoint*) object_pointer0_0)\n");
				#endif

				native_object = new wxMoveEvent_php(*(wxPoint*) object_pointer0_0);

				native_object->references.Initialize();
				((wxMoveEvent_php*) native_object)->references.AddReference(pt0, "wxMoveEvent::wxMoveEvent at call with 1 argument(s)");
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxPoint*) object_pointer0_0, (int) id0)\n");
				#endif

				native_object = new wxMoveEvent_php(*(wxPoint*) object_pointer0_0, (int) id0);

				native_object->references.Initialize();
				((wxMoveEvent_php*) native_object)->references.AddReference(pt0, "wxMoveEvent::wxMoveEvent at call with 2 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxMoveEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxMoveEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxSizeEvent_free(void *object TSRMLS_DC) 
{
    zo_wxSizeEvent* custom_object = (zo_wxSizeEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSizeEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSizeEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxSizeEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSizeEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxSizeEvent* custom_object;
    custom_object = (zo_wxSizeEvent*) emalloc(sizeof(zo_wxSizeEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxSizeEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXSIZEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxRect wxSizeEvent::GetRect() */
PHP_METHOD(php_wxSizeEvent, GetRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSizeEvent::GetRect\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSizeEvent* current_object;
	wxphp_object_type current_object_type;
	wxSizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSizeEvent::GetRect call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSIZEEVENT_TYPE){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSizeEvent::GetRect() to return new object\n\n");
				#endif

				wxRect value_to_return0;
				value_to_return0 = ((wxSizeEvent_php*)native_object)->GetRect();
				void* ptr = safe_emalloc(1, sizeof(wxRect_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxRect));
				object_init_ex(return_value, php_wxRect_entry);
				((wxRect_php*)ptr)->phpObj = return_value;
				((wxRect_php*)ptr)->InitProperties();
				zo_wxRect* zo0 = (zo_wxRect*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxRect_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSizeEvent::GetRect\n");
	}
}
/* }}} */

/* {{{ proto wxSize wxSizeEvent::GetSize()
   Returns the entire size of the window generating the size change event. */
PHP_METHOD(php_wxSizeEvent, GetSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSizeEvent::GetSize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSizeEvent* current_object;
	wxphp_object_type current_object_type;
	wxSizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSizeEvent::GetSize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSIZEEVENT_TYPE){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSizeEvent::GetSize() to return new object\n\n");
				#endif

				wxSize value_to_return0;
				value_to_return0 = ((wxSizeEvent_php*)native_object)->GetSize();
				void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				((wxSize_php*)ptr)->phpObj = return_value;
				zo_wxSize* zo0 = (zo_wxSize*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxSize_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSizeEvent::GetSize\n");
	}
}
/* }}} */

/* {{{ proto  wxSizeEvent::SetRect(wxRect rect) */
PHP_METHOD(php_wxSizeEvent, SetRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSizeEvent::SetRect\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSizeEvent* current_object;
	wxphp_object_type current_object_type;
	wxSizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSizeEvent::SetRect call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSIZEEVENT_TYPE){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* rect0 = 0;
	wxRect* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&rect0, php_wxRect_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect0, php_wxRect_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRect*) zend_object_store_get_object(rect0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRect*) zend_object_store_get_object(rect0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxRect*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSizeEvent::SetRect(*(wxRect*) object_pointer0_0)\n\n");
				#endif

				((wxSizeEvent_php*)native_object)->SetRect(*(wxRect*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSizeEvent::SetRect\n");
	}
}
/* }}} */

/* {{{ proto  wxSizeEvent::SetSize(wxSize size) */
PHP_METHOD(php_wxSizeEvent, SetSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSizeEvent::SetSize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSizeEvent* current_object;
	wxphp_object_type current_object_type;
	wxSizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSizeEvent::SetSize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSIZEEVENT_TYPE){
				references = &((wxSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* size0 = 0;
	wxSize* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&size0, php_wxSize_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &size0, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxSize*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSizeEvent::SetSize(*(wxSize*) object_pointer0_0)\n\n");
				#endif

				((wxSizeEvent_php*)native_object)->SetSize(*(wxSize*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSizeEvent::SetSize\n");
	}
}
/* }}} */

/* {{{ proto  wxSizeEvent::wxSizeEvent(wxSize sz, int id)
   Constructor. */
PHP_METHOD(php_wxSizeEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSizeEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSizeEvent* current_object;
	wxSizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* sz0 = 0;
	wxSize* object_pointer0_0 = 0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O|l' (&sz0, php_wxSize_entry, &id0)\n");
		#endif

		char parse_parameters_string[] = "O|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &sz0, php_wxSize_entry, &id0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(sz0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(sz0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(sz0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxSize*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'sz' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(sz0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'sz' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxSize*) object_pointer0_0)\n");
				#endif

				native_object = new wxSizeEvent_php(*(wxSize*) object_pointer0_0);

				native_object->references.Initialize();
				((wxSizeEvent_php*) native_object)->references.AddReference(sz0, "wxSizeEvent::wxSizeEvent at call with 1 argument(s)");
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxSize*) object_pointer0_0, (int) id0)\n");
				#endif

				native_object = new wxSizeEvent_php(*(wxSize*) object_pointer0_0, (int) id0);

				native_object->references.Initialize();
				((wxSizeEvent_php*) native_object)->references.AddReference(sz0, "wxSizeEvent::wxSizeEvent at call with 2 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxSizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxSizeEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxSetCursorEvent_free(void *object TSRMLS_DC) 
{
    zo_wxSetCursorEvent* custom_object = (zo_wxSetCursorEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSetCursorEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSetCursorEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxSetCursorEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSetCursorEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxSetCursorEvent* custom_object;
    custom_object = (zo_wxSetCursorEvent*) emalloc(sizeof(zo_wxSetCursorEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxSetCursorEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXSETCURSOREVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxCursor wxSetCursorEvent::GetCursor()
   Returns a reference to the cursor specified by this event. */
PHP_METHOD(php_wxSetCursorEvent, GetCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSetCursorEvent::GetCursor\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSetCursorEvent* current_object;
	wxphp_object_type current_object_type;
	wxSetCursorEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSetCursorEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSetCursorEvent::GetCursor call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSETCURSOREVENT_TYPE){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSetCursorEvent::GetCursor() to return object reference\n\n");
				#endif

				wxCursor_php* value_to_return0;
				value_to_return0 = (wxCursor_php*) &((wxSetCursorEvent_php*)native_object)->GetCursor();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxCursor_entry);
					((zo_wxCursor*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxCursor_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxSetCursorEvent::GetCursor at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSetCursorEvent::GetCursor\n");
	}
}
/* }}} */

/* {{{ proto int wxSetCursorEvent::GetX()
   Returns the X coordinate of the mouse in client coordinates. */
PHP_METHOD(php_wxSetCursorEvent, GetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSetCursorEvent::GetX\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSetCursorEvent* current_object;
	wxphp_object_type current_object_type;
	wxSetCursorEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSetCursorEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSetCursorEvent::GetX call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSETCURSOREVENT_TYPE){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSetCursorEvent::GetX())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxSetCursorEvent_php*)native_object)->GetX());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSetCursorEvent::GetX\n");
	}
}
/* }}} */

/* {{{ proto int wxSetCursorEvent::GetY()
   Returns the Y coordinate of the mouse in client coordinates. */
PHP_METHOD(php_wxSetCursorEvent, GetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSetCursorEvent::GetY\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSetCursorEvent* current_object;
	wxphp_object_type current_object_type;
	wxSetCursorEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSetCursorEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSetCursorEvent::GetY call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSETCURSOREVENT_TYPE){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSetCursorEvent::GetY())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxSetCursorEvent_php*)native_object)->GetY());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSetCursorEvent::GetY\n");
	}
}
/* }}} */

/* {{{ proto bool wxSetCursorEvent::HasCursor()
   Returns true if the cursor specified by this event is a valid cursor. */
PHP_METHOD(php_wxSetCursorEvent, HasCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSetCursorEvent::HasCursor\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSetCursorEvent* current_object;
	wxphp_object_type current_object_type;
	wxSetCursorEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSetCursorEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSetCursorEvent::HasCursor call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSETCURSOREVENT_TYPE){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxSetCursorEvent::HasCursor())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxSetCursorEvent_php*)native_object)->HasCursor());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSetCursorEvent::HasCursor\n");
	}
}
/* }}} */

/* {{{ proto  wxSetCursorEvent::SetCursor(wxCursor cursor)
   Sets the cursor associated with this event. */
PHP_METHOD(php_wxSetCursorEvent, SetCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSetCursorEvent::SetCursor\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSetCursorEvent* current_object;
	wxphp_object_type current_object_type;
	wxSetCursorEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSetCursorEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSetCursorEvent::SetCursor call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSETCURSOREVENT_TYPE){
				references = &((wxSetCursorEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* cursor0 = 0;
	wxCursor* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&cursor0, php_wxCursor_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cursor0, php_wxCursor_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cursor0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxCursor*) zend_object_store_get_object(cursor0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxCursor*) zend_object_store_get_object(cursor0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxCursor*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'cursor' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cursor0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cursor' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSetCursorEvent::SetCursor(*(wxCursor*) object_pointer0_0)\n\n");
				#endif

				((wxSetCursorEvent_php*)native_object)->SetCursor(*(wxCursor*) object_pointer0_0);

				references->AddReference(cursor0, "wxSetCursorEvent::SetCursor at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSetCursorEvent::SetCursor\n");
	}
}
/* }}} */

/* {{{ proto  wxSetCursorEvent::wxSetCursorEvent(int x, int y)
   Constructor, used by the library itself internally to initialize the event object. */
PHP_METHOD(php_wxSetCursorEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSetCursorEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSetCursorEvent* current_object;
	wxSetCursorEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&x0, &y0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxSetCursorEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxCoord) x0)\n");
				#endif

				native_object = new wxSetCursorEvent_php((wxCoord) x0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxCoord) x0, (wxCoord) y0)\n");
				#endif

				native_object = new wxSetCursorEvent_php((wxCoord) x0, (wxCoord) y0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxSetCursorEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxSetCursorEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxFileCtrlEvent_free(void *object TSRMLS_DC) 
{
    zo_wxFileCtrlEvent* custom_object = (zo_wxFileCtrlEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFileCtrlEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxFileCtrlEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxFileCtrlEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFileCtrlEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxFileCtrlEvent* custom_object;
    custom_object = (zo_wxFileCtrlEvent*) emalloc(sizeof(zo_wxFileCtrlEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxFileCtrlEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXFILECTRLEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto string wxFileCtrlEvent::GetDirectory()
   Returns the current directory. */
PHP_METHOD(php_wxFileCtrlEvent, GetDirectory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::GetDirectory\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileCtrlEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileCtrlEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileCtrlEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileCtrlEvent::GetDirectory call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILECTRLEVENT_TYPE){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxFileCtrlEvent::GetDirectory().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxFileCtrlEvent_php*)native_object)->GetDirectory();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileCtrlEvent::GetDirectory\n");
	}
}
/* }}} */

/* {{{ proto string wxFileCtrlEvent::GetFile()
   Returns the file selected (assuming it is only one file). */
PHP_METHOD(php_wxFileCtrlEvent, GetFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::GetFile\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileCtrlEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileCtrlEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileCtrlEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileCtrlEvent::GetFile call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILECTRLEVENT_TYPE){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxFileCtrlEvent::GetFile().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxFileCtrlEvent_php*)native_object)->GetFile();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileCtrlEvent::GetFile\n");
	}
}
/* }}} */

/* {{{ proto array wxFileCtrlEvent::GetFiles()
   Returns the files selected. */
PHP_METHOD(php_wxFileCtrlEvent, GetFiles)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::GetFiles\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileCtrlEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileCtrlEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileCtrlEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileCtrlEvent::GetFiles call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILECTRLEVENT_TYPE){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileCtrlEvent::GetFiles() to return strings array\n\n");
				#endif

				wxArrayString value_to_return0;
				value_to_return0 = ((wxFileCtrlEvent_php*)native_object)->GetFiles();
				char* temp_string0;
				array_init(return_value);
				for(size_t i=0; i<value_to_return0.GetCount(); i++)
				{
					temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0[i].size()+1));
					strcpy (temp_string0, (const char *) value_to_return0[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string0, 1);
					free(temp_string0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileCtrlEvent::GetFiles\n");
	}
}
/* }}} */

/* {{{ proto int wxFileCtrlEvent::GetFilterIndex()
   Returns the current file filter index. */
PHP_METHOD(php_wxFileCtrlEvent, GetFilterIndex)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::GetFilterIndex\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileCtrlEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileCtrlEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileCtrlEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileCtrlEvent::GetFilterIndex call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILECTRLEVENT_TYPE){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxFileCtrlEvent::GetFilterIndex())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxFileCtrlEvent_php*)native_object)->GetFilterIndex());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileCtrlEvent::GetFilterIndex\n");
	}
}
/* }}} */

/* {{{ proto  wxFileCtrlEvent::SetDirectory(string directory)
   Sets the directory of this event. */
PHP_METHOD(php_wxFileCtrlEvent, SetDirectory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::SetDirectory\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileCtrlEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileCtrlEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileCtrlEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileCtrlEvent::SetDirectory call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILECTRLEVENT_TYPE){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* directory0;
	long directory_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&directory0, &directory_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &directory0, &directory_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileCtrlEvent::SetDirectory(wxString(directory0, wxConvUTF8))\n\n");
				#endif

				((wxFileCtrlEvent_php*)native_object)->SetDirectory(wxString(directory0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileCtrlEvent::SetDirectory\n");
	}
}
/* }}} */

/* {{{ proto  wxFileCtrlEvent::SetFiles(array files)
   Sets the files changed by this event. */
PHP_METHOD(php_wxFileCtrlEvent, SetFiles)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::SetFiles\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileCtrlEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileCtrlEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileCtrlEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileCtrlEvent::SetFiles call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILECTRLEVENT_TYPE){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* files0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'a' (&files0)\n");
		#endif

		char parse_parameters_string[] = "a";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &files0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		wxArrayString strings_array0_0;
		bool strings_continue0_0 = true;

		switch(arguments_received)
		{
			case 1:
			{
				int array_index0_0 = 0;
				zval** temp_array_value0_0 = 0;
				while(strings_continue0_0)
				{
					if(zend_hash_index_find(HASH_OF(files0), array_index0_0, (void**)&temp_array_value0_0) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_0);
						strings_array0_0.Add(wxString(Z_STRVAL_PP(temp_array_value0_0), wxConvUTF8));
						array_index0_0++;
					}
					else
					{
						strings_continue0_0 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileCtrlEvent::SetFiles(strings_array0_0)\n\n");
				#endif

				((wxFileCtrlEvent_php*)native_object)->SetFiles(strings_array0_0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileCtrlEvent::SetFiles\n");
	}
}
/* }}} */

/* {{{ proto  wxFileCtrlEvent::SetFilterIndex(int index)
   Sets the filter index changed by this event. */
PHP_METHOD(php_wxFileCtrlEvent, SetFilterIndex)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::SetFilterIndex\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileCtrlEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileCtrlEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileCtrlEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileCtrlEvent::SetFilterIndex call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILECTRLEVENT_TYPE){
				references = &((wxFileCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long index0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&index0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &index0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileCtrlEvent::SetFilterIndex((int) index0)\n\n");
				#endif

				((wxFileCtrlEvent_php*)native_object)->SetFilterIndex((int) index0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileCtrlEvent::SetFilterIndex\n");
	}
}
/* }}} */

/* {{{ proto  wxFileCtrlEvent::wxFileCtrlEvent(int type, wxObject &evtObject, int id)
   Constructor. */
PHP_METHOD(php_wxFileCtrlEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileCtrlEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileCtrlEvent* current_object;
	wxFileCtrlEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long type0;
	zval* evtObject0 = 0;
	wxObject* object_pointer0_1 = 0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lzl' (&type0, &evtObject0, &id0)\n");
		#endif

		char parse_parameters_string[] = "lzl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0, &evtObject0, &id0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(evtObject0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxObject*) zend_object_store_get_object(evtObject0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxObject*) zend_object_store_get_object(evtObject0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxObject*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXOBJECT_TYPE && argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE && argument_type != PHP_WXBITMAPHANDLER_TYPE && argument_type != PHP_WXIMAGE_TYPE && argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE && argument_type != PHP_WXSIZERITEM_TYPE && argument_type != PHP_WXGBSIZERITEM_TYPE && argument_type != PHP_WXIMAGELIST_TYPE && argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE && argument_type != PHP_WXCOLOUR_TYPE && argument_type != PHP_WXMENUITEM_TYPE && argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE && argument_type != PHP_WXACCELERATORTABLE_TYPE && argument_type != PHP_WXGDIOBJECT_TYPE && argument_type != PHP_WXBITMAP_TYPE && argument_type != PHP_WXPALETTE_TYPE && argument_type != PHP_WXICON_TYPE && argument_type != PHP_WXFONT_TYPE && argument_type != PHP_WXANIMATION_TYPE && argument_type != PHP_WXICONBUNDLE_TYPE && argument_type != PHP_WXCURSOR_TYPE && argument_type != PHP_WXREGION_TYPE && argument_type != PHP_WXPEN_TYPE && argument_type != PHP_WXBRUSH_TYPE && argument_type != PHP_WXARTPROVIDER_TYPE && argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE && argument_type != PHP_WXHTMLEASYPRINTING_TYPE && argument_type != PHP_WXHTMLLINKINFO_TYPE && argument_type != PHP_WXFINDREPLACEDATA_TYPE && argument_type != PHP_WXSOUND_TYPE && argument_type != PHP_WXFILESYSTEM_TYPE && argument_type != PHP_WXFILESYSTEMHANDLER_TYPE && argument_type != PHP_WXMASK_TYPE && argument_type != PHP_WXTOOLTIP_TYPE && argument_type != PHP_WXGRAPHICSRENDERER_TYPE && argument_type != PHP_WXLAYOUTCONSTRAINTS_TYPE && argument_type != PHP_WXFSFILE_TYPE && argument_type != PHP_WXCOLOURDATA_TYPE && argument_type != PHP_WXFONTDATA_TYPE && argument_type != PHP_WXGRIDTABLEBASE_TYPE && argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXT_TYPE && argument_type != PHP_WXVARIANT_TYPE && argument_type != PHP_WXCLIPBOARD_TYPE && argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE && argument_type != PHP_WXXMLRESOURCE_TYPE && argument_type != PHP_WXPAGESETUPDIALOG_TYPE && argument_type != PHP_WXPAGESETUPDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDIALOG_TYPE && argument_type != PHP_WXPRINTDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDATA_TYPE && argument_type != PHP_WXPRINTPREVIEW_TYPE && argument_type != PHP_WXPRINTER_TYPE && argument_type != PHP_WXPRINTOUT_TYPE && argument_type != PHP_WXHTMLPRINTOUT_TYPE && argument_type != PHP_WXHTMLDCRENDERER_TYPE && argument_type != PHP_WXHTMLFILTER_TYPE && argument_type != PHP_WXHTMLHELPDATA_TYPE && argument_type != PHP_WXHTMLTAGHANDLER_TYPE && argument_type != PHP_WXHTMLWINTAGHANDLER_TYPE && argument_type != PHP_WXMODULE_TYPE && argument_type != PHP_WXHTMLTAGSMODULE_TYPE && argument_type != PHP_WXIMAGEHANDLER_TYPE && argument_type != PHP_WXXMLRESOURCEHANDLER_TYPE && argument_type != PHP_WXXMLDOCUMENT_TYPE && argument_type != PHP_WXLAYOUTALGORITHM_TYPE && argument_type != PHP_WXFILEHISTORY_TYPE && argument_type != PHP_WXTOOLBARTOOLBASE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'evtObject' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(evtObject0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'evtObject' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (wxObject*) object_pointer0_1, (int) id0)\n");
				#endif

				native_object = new wxFileCtrlEvent_php((wxEventType) type0, (wxObject*) object_pointer0_1, (int) id0);

				native_object->references.Initialize();
				((wxFileCtrlEvent_php*) native_object)->references.AddReference(evtObject0, "wxFileCtrlEvent::wxFileCtrlEvent at call with 3 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxFileCtrlEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxFileCtrlEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxFileDirPickerEvent_free(void *object TSRMLS_DC) 
{
    zo_wxFileDirPickerEvent* custom_object = (zo_wxFileDirPickerEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFileDirPickerEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxFileDirPickerEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxFileDirPickerEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFileDirPickerEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxFileDirPickerEvent* custom_object;
    custom_object = (zo_wxFileDirPickerEvent*) emalloc(sizeof(zo_wxFileDirPickerEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxFileDirPickerEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXFILEDIRPICKEREVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto string wxFileDirPickerEvent::GetPath()
   Retrieve the absolute path of the file/directory the user has just selected. */
PHP_METHOD(php_wxFileDirPickerEvent, GetPath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileDirPickerEvent::GetPath\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileDirPickerEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileDirPickerEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileDirPickerEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileDirPickerEvent::GetPath call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxFileDirPickerEvent::GetPath().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxFileDirPickerEvent_php*)native_object)->GetPath();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileDirPickerEvent::GetPath\n");
	}
}
/* }}} */

/* {{{ proto  wxFileDirPickerEvent::SetPath(string path)
   Set the absolute path of the file/directory associated with the event. */
PHP_METHOD(php_wxFileDirPickerEvent, SetPath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileDirPickerEvent::SetPath\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileDirPickerEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileDirPickerEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileDirPickerEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileDirPickerEvent::SetPath call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILEDIRPICKEREVENT_TYPE){
				references = &((wxFileDirPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* path0;
	long path_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&path0, &path_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &path0, &path_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileDirPickerEvent::SetPath(wxString(path0, wxConvUTF8))\n\n");
				#endif

				((wxFileDirPickerEvent_php*)native_object)->SetPath(wxString(path0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileDirPickerEvent::SetPath\n");
	}
}
/* }}} */

/* {{{ proto  wxFileDirPickerEvent::wxFileDirPickerEvent(int type, wxObject &generator, int id, string path)
   The constructor is not normally used by the user code. */
PHP_METHOD(php_wxFileDirPickerEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileDirPickerEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileDirPickerEvent* current_object;
	wxFileDirPickerEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long type0;
	zval* generator0 = 0;
	wxObject* object_pointer0_1 = 0;
	long id0;
	char* path0;
	long path_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lzls' (&type0, &generator0, &id0, &path0, &path_len0)\n");
		#endif

		char parse_parameters_string[] = "lzls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0, &generator0, &id0, &path0, &path_len0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(generator0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxObject*) zend_object_store_get_object(generator0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxObject*) zend_object_store_get_object(generator0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxObject*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXOBJECT_TYPE && argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE && argument_type != PHP_WXBITMAPHANDLER_TYPE && argument_type != PHP_WXIMAGE_TYPE && argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE && argument_type != PHP_WXSIZERITEM_TYPE && argument_type != PHP_WXGBSIZERITEM_TYPE && argument_type != PHP_WXIMAGELIST_TYPE && argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE && argument_type != PHP_WXCOLOUR_TYPE && argument_type != PHP_WXMENUITEM_TYPE && argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE && argument_type != PHP_WXACCELERATORTABLE_TYPE && argument_type != PHP_WXGDIOBJECT_TYPE && argument_type != PHP_WXBITMAP_TYPE && argument_type != PHP_WXPALETTE_TYPE && argument_type != PHP_WXICON_TYPE && argument_type != PHP_WXFONT_TYPE && argument_type != PHP_WXANIMATION_TYPE && argument_type != PHP_WXICONBUNDLE_TYPE && argument_type != PHP_WXCURSOR_TYPE && argument_type != PHP_WXREGION_TYPE && argument_type != PHP_WXPEN_TYPE && argument_type != PHP_WXBRUSH_TYPE && argument_type != PHP_WXARTPROVIDER_TYPE && argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE && argument_type != PHP_WXHTMLEASYPRINTING_TYPE && argument_type != PHP_WXHTMLLINKINFO_TYPE && argument_type != PHP_WXFINDREPLACEDATA_TYPE && argument_type != PHP_WXSOUND_TYPE && argument_type != PHP_WXFILESYSTEM_TYPE && argument_type != PHP_WXFILESYSTEMHANDLER_TYPE && argument_type != PHP_WXMASK_TYPE && argument_type != PHP_WXTOOLTIP_TYPE && argument_type != PHP_WXGRAPHICSRENDERER_TYPE && argument_type != PHP_WXLAYOUTCONSTRAINTS_TYPE && argument_type != PHP_WXFSFILE_TYPE && argument_type != PHP_WXCOLOURDATA_TYPE && argument_type != PHP_WXFONTDATA_TYPE && argument_type != PHP_WXGRIDTABLEBASE_TYPE && argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXT_TYPE && argument_type != PHP_WXVARIANT_TYPE && argument_type != PHP_WXCLIPBOARD_TYPE && argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE && argument_type != PHP_WXXMLRESOURCE_TYPE && argument_type != PHP_WXPAGESETUPDIALOG_TYPE && argument_type != PHP_WXPAGESETUPDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDIALOG_TYPE && argument_type != PHP_WXPRINTDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDATA_TYPE && argument_type != PHP_WXPRINTPREVIEW_TYPE && argument_type != PHP_WXPRINTER_TYPE && argument_type != PHP_WXPRINTOUT_TYPE && argument_type != PHP_WXHTMLPRINTOUT_TYPE && argument_type != PHP_WXHTMLDCRENDERER_TYPE && argument_type != PHP_WXHTMLFILTER_TYPE && argument_type != PHP_WXHTMLHELPDATA_TYPE && argument_type != PHP_WXHTMLTAGHANDLER_TYPE && argument_type != PHP_WXHTMLWINTAGHANDLER_TYPE && argument_type != PHP_WXMODULE_TYPE && argument_type != PHP_WXHTMLTAGSMODULE_TYPE && argument_type != PHP_WXIMAGEHANDLER_TYPE && argument_type != PHP_WXXMLRESOURCEHANDLER_TYPE && argument_type != PHP_WXXMLDOCUMENT_TYPE && argument_type != PHP_WXLAYOUTALGORITHM_TYPE && argument_type != PHP_WXFILEHISTORY_TYPE && argument_type != PHP_WXTOOLBARTOOLBASE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'generator' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(generator0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'generator' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (wxObject*) object_pointer0_1, (int) id0, wxString(path0, wxConvUTF8))\n");
				#endif

				native_object = new wxFileDirPickerEvent_php((wxEventType) type0, (wxObject*) object_pointer0_1, (int) id0, wxString(path0, wxConvUTF8));

				native_object->references.Initialize();
				((wxFileDirPickerEvent_php*) native_object)->references.AddReference(generator0, "wxFileDirPickerEvent::wxFileDirPickerEvent at call with 4 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxFileDirPickerEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxFileDirPickerEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxFontPickerEvent_free(void *object TSRMLS_DC) 
{
    zo_wxFontPickerEvent* custom_object = (zo_wxFontPickerEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFontPickerEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxFontPickerEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxFontPickerEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFontPickerEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxFontPickerEvent* custom_object;
    custom_object = (zo_wxFontPickerEvent*) emalloc(sizeof(zo_wxFontPickerEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxFontPickerEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXFONTPICKEREVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxFont wxFontPickerEvent::GetFont()
   Retrieve the font the user has just selected. */
PHP_METHOD(php_wxFontPickerEvent, GetFont)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFontPickerEvent::GetFont\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFontPickerEvent* current_object;
	wxphp_object_type current_object_type;
	wxFontPickerEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFontPickerEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFontPickerEvent::GetFont call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFONTPICKEREVENT_TYPE){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFontPickerEvent::GetFont() to return new object\n\n");
				#endif

				wxFont value_to_return0;
				value_to_return0 = ((wxFontPickerEvent_php*)native_object)->GetFont();
				((wxRefCounter *) value_to_return0.GetRefData())->IncRef();
				void* ptr = safe_emalloc(1, sizeof(wxFont_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxFont));
				object_init_ex(return_value, php_wxFont_entry);
				((wxFont_php*)ptr)->phpObj = return_value;
				zo_wxFont* zo0 = (zo_wxFont*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxFont_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFontPickerEvent::GetFont\n");
	}
}
/* }}} */

/* {{{ proto  wxFontPickerEvent::SetFont(wxFont f)
   Set the font associated with the event. */
PHP_METHOD(php_wxFontPickerEvent, SetFont)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFontPickerEvent::SetFont\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFontPickerEvent* current_object;
	wxphp_object_type current_object_type;
	wxFontPickerEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFontPickerEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFontPickerEvent::SetFont call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFONTPICKEREVENT_TYPE){
				references = &((wxFontPickerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* f0 = 0;
	wxFont* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&f0, php_wxFont_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &f0, php_wxFont_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(f0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxFont*) zend_object_store_get_object(f0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxFont*) zend_object_store_get_object(f0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxFont*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'f' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(f0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'f' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFontPickerEvent::SetFont(*(wxFont*) object_pointer0_0)\n\n");
				#endif

				((wxFontPickerEvent_php*)native_object)->SetFont(*(wxFont*) object_pointer0_0);

				references->AddReference(f0, "wxFontPickerEvent::SetFont at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFontPickerEvent::SetFont\n");
	}
}
/* }}} */

/* {{{ proto  wxFontPickerEvent::wxFontPickerEvent(wxObject &generator, int id, wxFont font)
   The constructor is not normally used by the user code. */
PHP_METHOD(php_wxFontPickerEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFontPickerEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFontPickerEvent* current_object;
	wxFontPickerEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* generator0 = 0;
	wxObject* object_pointer0_0 = 0;
	long id0;
	zval* font0 = 0;
	wxFont* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zlO' (&generator0, &id0, &font0, php_wxFont_entry)\n");
		#endif

		char parse_parameters_string[] = "zlO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &generator0, &id0, &font0, php_wxFont_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(generator0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxObject*) zend_object_store_get_object(generator0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxObject*) zend_object_store_get_object(generator0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxObject*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXOBJECT_TYPE && argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE && argument_type != PHP_WXBITMAPHANDLER_TYPE && argument_type != PHP_WXIMAGE_TYPE && argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE && argument_type != PHP_WXSIZERITEM_TYPE && argument_type != PHP_WXGBSIZERITEM_TYPE && argument_type != PHP_WXIMAGELIST_TYPE && argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE && argument_type != PHP_WXCOLOUR_TYPE && argument_type != PHP_WXMENUITEM_TYPE && argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE && argument_type != PHP_WXACCELERATORTABLE_TYPE && argument_type != PHP_WXGDIOBJECT_TYPE && argument_type != PHP_WXBITMAP_TYPE && argument_type != PHP_WXPALETTE_TYPE && argument_type != PHP_WXICON_TYPE && argument_type != PHP_WXFONT_TYPE && argument_type != PHP_WXANIMATION_TYPE && argument_type != PHP_WXICONBUNDLE_TYPE && argument_type != PHP_WXCURSOR_TYPE && argument_type != PHP_WXREGION_TYPE && argument_type != PHP_WXPEN_TYPE && argument_type != PHP_WXBRUSH_TYPE && argument_type != PHP_WXARTPROVIDER_TYPE && argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE && argument_type != PHP_WXHTMLEASYPRINTING_TYPE && argument_type != PHP_WXHTMLLINKINFO_TYPE && argument_type != PHP_WXFINDREPLACEDATA_TYPE && argument_type != PHP_WXSOUND_TYPE && argument_type != PHP_WXFILESYSTEM_TYPE && argument_type != PHP_WXFILESYSTEMHANDLER_TYPE && argument_type != PHP_WXMASK_TYPE && argument_type != PHP_WXTOOLTIP_TYPE && argument_type != PHP_WXGRAPHICSRENDERER_TYPE && argument_type != PHP_WXLAYOUTCONSTRAINTS_TYPE && argument_type != PHP_WXFSFILE_TYPE && argument_type != PHP_WXCOLOURDATA_TYPE && argument_type != PHP_WXFONTDATA_TYPE && argument_type != PHP_WXGRIDTABLEBASE_TYPE && argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXT_TYPE && argument_type != PHP_WXVARIANT_TYPE && argument_type != PHP_WXCLIPBOARD_TYPE && argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE && argument_type != PHP_WXXMLRESOURCE_TYPE && argument_type != PHP_WXPAGESETUPDIALOG_TYPE && argument_type != PHP_WXPAGESETUPDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDIALOG_TYPE && argument_type != PHP_WXPRINTDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDATA_TYPE && argument_type != PHP_WXPRINTPREVIEW_TYPE && argument_type != PHP_WXPRINTER_TYPE && argument_type != PHP_WXPRINTOUT_TYPE && argument_type != PHP_WXHTMLPRINTOUT_TYPE && argument_type != PHP_WXHTMLDCRENDERER_TYPE && argument_type != PHP_WXHTMLFILTER_TYPE && argument_type != PHP_WXHTMLHELPDATA_TYPE && argument_type != PHP_WXHTMLTAGHANDLER_TYPE && argument_type != PHP_WXHTMLWINTAGHANDLER_TYPE && argument_type != PHP_WXMODULE_TYPE && argument_type != PHP_WXHTMLTAGSMODULE_TYPE && argument_type != PHP_WXIMAGEHANDLER_TYPE && argument_type != PHP_WXXMLRESOURCEHANDLER_TYPE && argument_type != PHP_WXXMLDOCUMENT_TYPE && argument_type != PHP_WXLAYOUTALGORITHM_TYPE && argument_type != PHP_WXFILEHISTORY_TYPE && argument_type != PHP_WXTOOLBARTOOLBASE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'generator' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(generator0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'generator' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(font0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxFont*) zend_object_store_get_object(font0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxFont*) zend_object_store_get_object(font0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxFont*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'font' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(font0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'font' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxObject*) object_pointer0_0, (int) id0, *(wxFont*) object_pointer0_2)\n");
				#endif

				native_object = new wxFontPickerEvent_php((wxObject*) object_pointer0_0, (int) id0, *(wxFont*) object_pointer0_2);

				native_object->references.Initialize();
				((wxFontPickerEvent_php*) native_object)->references.AddReference(generator0, "wxFontPickerEvent::wxFontPickerEvent at call with 3 argument(s)");
				((wxFontPickerEvent_php*) native_object)->references.AddReference(font0, "wxFontPickerEvent::wxFontPickerEvent at call with 3 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxFontPickerEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxFontPickerEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxFileSystemWatcherEvent_free(void *object TSRMLS_DC) 
{
    zo_wxFileSystemWatcherEvent* custom_object = (zo_wxFileSystemWatcherEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFileSystemWatcherEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxFileSystemWatcherEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxFileSystemWatcherEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFileSystemWatcherEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxFileSystemWatcherEvent* custom_object;
    custom_object = (zo_wxFileSystemWatcherEvent*) emalloc(sizeof(zo_wxFileSystemWatcherEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxFileSystemWatcherEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXFILESYSTEMWATCHEREVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxFileSystemWatcherEvent::GetChangeType()
   Returns the type of file system change that occurred. */
PHP_METHOD(php_wxFileSystemWatcherEvent, GetChangeType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileSystemWatcherEvent::GetChangeType\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileSystemWatcherEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileSystemWatcherEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileSystemWatcherEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileSystemWatcherEvent::GetChangeType call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxFileSystemWatcherEvent::GetChangeType())\n\n");
				#endif

				if(current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE)
				{
					ZVAL_LONG(return_value, ((wxFileSystemWatcherEvent_php*)native_object)->GetChangeType());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileSystemWatcherEvent::GetChangeType\n");
	}
}
/* }}} */

/* {{{ proto string wxFileSystemWatcherEvent::GetErrorDescription()
   Return a description of the warning or error if this is an error event. */
PHP_METHOD(php_wxFileSystemWatcherEvent, GetErrorDescription)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileSystemWatcherEvent::GetErrorDescription\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileSystemWatcherEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileSystemWatcherEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileSystemWatcherEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileSystemWatcherEvent::GetErrorDescription call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxFileSystemWatcherEvent::GetErrorDescription().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				if(current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE)
				{
					value_to_return0 = ((wxFileSystemWatcherEvent_php*)native_object)->GetErrorDescription();
				}
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileSystemWatcherEvent::GetErrorDescription\n");
	}
}
/* }}} */

/* {{{ proto wxFileName wxFileSystemWatcherEvent::GetNewPath()
   Returns the new path of the renamed file/directory if this is a rename event. */
PHP_METHOD(php_wxFileSystemWatcherEvent, GetNewPath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileSystemWatcherEvent::GetNewPath\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileSystemWatcherEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileSystemWatcherEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileSystemWatcherEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileSystemWatcherEvent::GetNewPath call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileSystemWatcherEvent::GetNewPath() to return object reference\n\n");
				#endif

				wxFileName_php* value_to_return0;
				if(current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE)
				{
					value_to_return0 = (wxFileName_php*) &((wxFileSystemWatcherEvent_php*)native_object)->GetNewPath();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxFileName_entry);
					((zo_wxFileName*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFileName_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxFileSystemWatcherEvent::GetNewPath at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileSystemWatcherEvent::GetNewPath\n");
	}
}
/* }}} */

/* {{{ proto wxFileName wxFileSystemWatcherEvent::GetPath()
   Returns the path at which the event occurred. */
PHP_METHOD(php_wxFileSystemWatcherEvent, GetPath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileSystemWatcherEvent::GetPath\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileSystemWatcherEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileSystemWatcherEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileSystemWatcherEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileSystemWatcherEvent::GetPath call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFileSystemWatcherEvent::GetPath() to return object reference\n\n");
				#endif

				wxFileName_php* value_to_return0;
				if(current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE)
				{
					value_to_return0 = (wxFileName_php*) &((wxFileSystemWatcherEvent_php*)native_object)->GetPath();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxFileName_entry);
					((zo_wxFileName*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFileName_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxFileSystemWatcherEvent::GetPath at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileSystemWatcherEvent::GetPath\n");
	}
}
/* }}} */

/* {{{ proto bool wxFileSystemWatcherEvent::IsError()
   Returns true if this error is an error event. */
PHP_METHOD(php_wxFileSystemWatcherEvent, IsError)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileSystemWatcherEvent::IsError\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileSystemWatcherEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileSystemWatcherEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileSystemWatcherEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileSystemWatcherEvent::IsError call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFileSystemWatcherEvent::IsError())\n\n");
				#endif

				if(current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxFileSystemWatcherEvent_php*)native_object)->IsError());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileSystemWatcherEvent::IsError\n");
	}
}
/* }}} */

/* {{{ proto string wxFileSystemWatcherEvent::ToString()
   Returns a wxString describing an event, useful for logging, debugging or testing. */
PHP_METHOD(php_wxFileSystemWatcherEvent, ToString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFileSystemWatcherEvent::ToString\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFileSystemWatcherEvent* current_object;
	wxphp_object_type current_object_type;
	wxFileSystemWatcherEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFileSystemWatcherEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFileSystemWatcherEvent::ToString call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE){
				references = &((wxFileSystemWatcherEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxFileSystemWatcherEvent::ToString().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				if(current_object_type == PHP_WXFILESYSTEMWATCHEREVENT_TYPE)
				{
					value_to_return0 = ((wxFileSystemWatcherEvent_php*)native_object)->ToString();
				}
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFileSystemWatcherEvent::ToString\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxGridEvent_free(void *object TSRMLS_DC) 
{
    zo_wxGridEvent* custom_object = (zo_wxGridEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxGridEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxGridEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxGridEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxGridEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxGridEvent* custom_object;
    custom_object = (zo_wxGridEvent*) emalloc(sizeof(zo_wxGridEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxGridEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXGRIDEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxGridEvent::AltDown()
   Returns true if the Alt key was down at the time of the event. */
PHP_METHOD(php_wxGridEvent, AltDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::AltDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEvent::AltDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEVENT_TYPE){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridEvent::AltDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridEvent_php*)native_object)->AltDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEvent::AltDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxGridEvent::ControlDown()
   Returns true if the Control key was down at the time of the event. */
PHP_METHOD(php_wxGridEvent, ControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::ControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEvent::ControlDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEVENT_TYPE){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridEvent::ControlDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridEvent_php*)native_object)->ControlDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEvent::ControlDown\n");
	}
}
/* }}} */

/* {{{ proto int wxGridEvent::GetCol()
   Column at which the event occurred. */
PHP_METHOD(php_wxGridEvent, GetCol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::GetCol\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEvent::GetCol call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEVENT_TYPE){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridEvent::GetCol())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxGridEvent_php*)native_object)->GetCol());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEvent::GetCol\n");
	}
}
/* }}} */

/* {{{ proto wxPoint wxGridEvent::GetPosition()
   Position in pixels at which the event occurred. */
PHP_METHOD(php_wxGridEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEvent::GetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEVENT_TYPE){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridEvent::GetPosition() to return new object\n\n");
				#endif

				wxPoint value_to_return0;
				value_to_return0 = ((wxGridEvent_php*)native_object)->GetPosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				((wxPoint_php*)ptr)->phpObj = return_value;
				((wxPoint_php*)ptr)->InitProperties();
				zo_wxPoint* zo0 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxPoint_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEvent::GetPosition\n");
	}
}
/* }}} */

/* {{{ proto int wxGridEvent::GetRow()
   Row at which the event occurred. */
PHP_METHOD(php_wxGridEvent, GetRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::GetRow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEvent::GetRow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEVENT_TYPE){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridEvent::GetRow())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxGridEvent_php*)native_object)->GetRow());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEvent::GetRow\n");
	}
}
/* }}} */

/* {{{ proto bool wxGridEvent::MetaDown()
   Returns true if the Meta key was down at the time of the event. */
PHP_METHOD(php_wxGridEvent, MetaDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::MetaDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEvent::MetaDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEVENT_TYPE){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridEvent::MetaDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridEvent_php*)native_object)->MetaDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEvent::MetaDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxGridEvent::Selecting()
   Returns true if the user is selecting grid cells, or false if deselecting. */
PHP_METHOD(php_wxGridEvent, Selecting)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::Selecting\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEvent::Selecting call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEVENT_TYPE){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridEvent::Selecting())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridEvent_php*)native_object)->Selecting());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEvent::Selecting\n");
	}
}
/* }}} */

/* {{{ proto bool wxGridEvent::ShiftDown()
   Returns true if the Shift key was down at the time of the event. */
PHP_METHOD(php_wxGridEvent, ShiftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::ShiftDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEvent::ShiftDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEVENT_TYPE){
				references = &((wxGridEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridEvent::ShiftDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridEvent_php*)native_object)->ShiftDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEvent::ShiftDown\n");
	}
}
/* }}} */

/* {{{ proto  wxGridEvent::wxGridEvent()
   Default constructor. */
PHP_METHOD(php_wxGridEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEvent* current_object;
	wxGridEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	long id1;
	long type1;
	zval* obj1 = 0;
	wxObject* object_pointer1_2 = 0;
	long row1;
	long col1;
	long x1;
	long y1;
	bool sel1;
	zval* kbd1 = 0;
	wxKeyboardState* object_pointer1_8 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 9)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llz|llllbo' (&id1, &type1, &obj1, &row1, &col1, &x1, &y1, &sel1, &kbd1)\n");
		#endif

		char parse_parameters_string[] = "llz|llllbo";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id1, &type1, &obj1, &row1, &col1, &x1, &y1, &sel1, &kbd1 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(obj1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxObject*) zend_object_store_get_object(obj1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxObject*) zend_object_store_get_object(obj1 TSRMLS_CC))->native_object;
					object_pointer1_2 = (wxObject*) argument_native_object;
					if (!object_pointer1_2 || (argument_type != PHP_WXOBJECT_TYPE && argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE && argument_type != PHP_WXBITMAPHANDLER_TYPE && argument_type != PHP_WXIMAGE_TYPE && argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE && argument_type != PHP_WXSIZERITEM_TYPE && argument_type != PHP_WXGBSIZERITEM_TYPE && argument_type != PHP_WXIMAGELIST_TYPE && argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE && argument_type != PHP_WXCOLOUR_TYPE && argument_type != PHP_WXMENUITEM_TYPE && argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE && argument_type != PHP_WXACCELERATORTABLE_TYPE && argument_type != PHP_WXGDIOBJECT_TYPE && argument_type != PHP_WXBITMAP_TYPE && argument_type != PHP_WXPALETTE_TYPE && argument_type != PHP_WXICON_TYPE && argument_type != PHP_WXFONT_TYPE && argument_type != PHP_WXANIMATION_TYPE && argument_type != PHP_WXICONBUNDLE_TYPE && argument_type != PHP_WXCURSOR_TYPE && argument_type != PHP_WXREGION_TYPE && argument_type != PHP_WXPEN_TYPE && argument_type != PHP_WXBRUSH_TYPE && argument_type != PHP_WXARTPROVIDER_TYPE && argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE && argument_type != PHP_WXHTMLEASYPRINTING_TYPE && argument_type != PHP_WXHTMLLINKINFO_TYPE && argument_type != PHP_WXFINDREPLACEDATA_TYPE && argument_type != PHP_WXSOUND_TYPE && argument_type != PHP_WXFILESYSTEM_TYPE && argument_type != PHP_WXFILESYSTEMHANDLER_TYPE && argument_type != PHP_WXMASK_TYPE && argument_type != PHP_WXTOOLTIP_TYPE && argument_type != PHP_WXGRAPHICSRENDERER_TYPE && argument_type != PHP_WXLAYOUTCONSTRAINTS_TYPE && argument_type != PHP_WXFSFILE_TYPE && argument_type != PHP_WXCOLOURDATA_TYPE && argument_type != PHP_WXFONTDATA_TYPE && argument_type != PHP_WXGRIDTABLEBASE_TYPE && argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXT_TYPE && argument_type != PHP_WXVARIANT_TYPE && argument_type != PHP_WXCLIPBOARD_TYPE && argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE && argument_type != PHP_WXXMLRESOURCE_TYPE && argument_type != PHP_WXPAGESETUPDIALOG_TYPE && argument_type != PHP_WXPAGESETUPDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDIALOG_TYPE && argument_type != PHP_WXPRINTDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDATA_TYPE && argument_type != PHP_WXPRINTPREVIEW_TYPE && argument_type != PHP_WXPRINTER_TYPE && argument_type != PHP_WXPRINTOUT_TYPE && argument_type != PHP_WXHTMLPRINTOUT_TYPE && argument_type != PHP_WXHTMLDCRENDERER_TYPE && argument_type != PHP_WXHTMLFILTER_TYPE && argument_type != PHP_WXHTMLHELPDATA_TYPE && argument_type != PHP_WXHTMLTAGHANDLER_TYPE && argument_type != PHP_WXHTMLWINTAGHANDLER_TYPE && argument_type != PHP_WXMODULE_TYPE && argument_type != PHP_WXHTMLTAGSMODULE_TYPE && argument_type != PHP_WXIMAGEHANDLER_TYPE && argument_type != PHP_WXXMLRESOURCEHANDLER_TYPE && argument_type != PHP_WXXMLDOCUMENT_TYPE && argument_type != PHP_WXLAYOUTALGORITHM_TYPE && argument_type != PHP_WXFILEHISTORY_TYPE && argument_type != PHP_WXTOOLBARTOOLBASE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'obj' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(obj1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'obj' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 9){
				if(Z_TYPE_P(kbd1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxKeyboardState*) zend_object_store_get_object(kbd1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxKeyboardState*) zend_object_store_get_object(kbd1 TSRMLS_CC))->native_object;
					object_pointer1_8 = (wxKeyboardState*) argument_native_object;
					if (!object_pointer1_8 || (argument_type != PHP_WXKEYBOARDSTATE_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXMOUSESTATE_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'kbd' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(kbd1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'kbd' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxGridEvent_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2)\n");
				#endif

				native_object = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2);

				native_object->references.Initialize();
				((wxGridEvent_php*) native_object)->references.AddReference(obj1, "wxGridEvent::wxGridEvent at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1)\n");
				#endif

				native_object = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1);

				native_object->references.Initialize();
				((wxGridEvent_php*) native_object)->references.AddReference(obj1, "wxGridEvent::wxGridEvent at call with 4 argument(s)");
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1)\n");
				#endif

				native_object = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1);

				native_object->references.Initialize();
				((wxGridEvent_php*) native_object)->references.AddReference(obj1, "wxGridEvent::wxGridEvent at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1)\n");
				#endif

				native_object = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1);

				native_object->references.Initialize();
				((wxGridEvent_php*) native_object)->references.AddReference(obj1, "wxGridEvent::wxGridEvent at call with 6 argument(s)");
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1, (int) y1)\n");
				#endif

				native_object = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1, (int) y1);

				native_object->references.Initialize();
				((wxGridEvent_php*) native_object)->references.AddReference(obj1, "wxGridEvent::wxGridEvent at call with 7 argument(s)");
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1, (int) y1, sel1)\n");
				#endif

				native_object = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1, (int) y1, sel1);

				native_object->references.Initialize();
				((wxGridEvent_php*) native_object)->references.AddReference(obj1, "wxGridEvent::wxGridEvent at call with 8 argument(s)");
				break;
			}
			case 9:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1, (int) y1, sel1, *(wxKeyboardState*) object_pointer1_8)\n");
				#endif

				native_object = new wxGridEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (int) x1, (int) y1, sel1, *(wxKeyboardState*) object_pointer1_8);

				native_object->references.Initialize();
				((wxGridEvent_php*) native_object)->references.AddReference(obj1, "wxGridEvent::wxGridEvent at call with 9 argument(s)");
				((wxGridEvent_php*) native_object)->references.AddReference(kbd1, "wxGridEvent::wxGridEvent at call with 9 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxGridEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxGridEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxGridSizeEvent_free(void *object TSRMLS_DC) 
{
    zo_wxGridSizeEvent* custom_object = (zo_wxGridSizeEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxGridSizeEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxGridSizeEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxGridSizeEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxGridSizeEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxGridSizeEvent* custom_object;
    custom_object = (zo_wxGridSizeEvent*) emalloc(sizeof(zo_wxGridSizeEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxGridSizeEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXGRIDSIZEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxGridSizeEvent::AltDown()
   Returns true if the Alt key was down at the time of the event. */
PHP_METHOD(php_wxGridSizeEvent, AltDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::AltDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridSizeEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridSizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridSizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridSizeEvent::AltDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDSIZEEVENT_TYPE){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridSizeEvent::AltDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridSizeEvent_php*)native_object)->AltDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridSizeEvent::AltDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxGridSizeEvent::ControlDown()
   Returns true if the Control key was down at the time of the event. */
PHP_METHOD(php_wxGridSizeEvent, ControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::ControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridSizeEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridSizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridSizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridSizeEvent::ControlDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDSIZEEVENT_TYPE){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridSizeEvent::ControlDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridSizeEvent_php*)native_object)->ControlDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridSizeEvent::ControlDown\n");
	}
}
/* }}} */

/* {{{ proto wxPoint wxGridSizeEvent::GetPosition()
   Position in pixels at which the event occurred. */
PHP_METHOD(php_wxGridSizeEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridSizeEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridSizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridSizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridSizeEvent::GetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDSIZEEVENT_TYPE){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridSizeEvent::GetPosition() to return new object\n\n");
				#endif

				wxPoint value_to_return0;
				value_to_return0 = ((wxGridSizeEvent_php*)native_object)->GetPosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				((wxPoint_php*)ptr)->phpObj = return_value;
				((wxPoint_php*)ptr)->InitProperties();
				zo_wxPoint* zo0 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxPoint_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridSizeEvent::GetPosition\n");
	}
}
/* }}} */

/* {{{ proto int wxGridSizeEvent::GetRowOrCol()
   Row or column at that was resized. */
PHP_METHOD(php_wxGridSizeEvent, GetRowOrCol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::GetRowOrCol\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridSizeEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridSizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridSizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridSizeEvent::GetRowOrCol call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDSIZEEVENT_TYPE){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridSizeEvent::GetRowOrCol())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxGridSizeEvent_php*)native_object)->GetRowOrCol());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridSizeEvent::GetRowOrCol\n");
	}
}
/* }}} */

/* {{{ proto bool wxGridSizeEvent::MetaDown()
   Returns true if the Meta key was down at the time of the event. */
PHP_METHOD(php_wxGridSizeEvent, MetaDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::MetaDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridSizeEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridSizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridSizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridSizeEvent::MetaDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDSIZEEVENT_TYPE){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridSizeEvent::MetaDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridSizeEvent_php*)native_object)->MetaDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridSizeEvent::MetaDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxGridSizeEvent::ShiftDown()
   Returns true if the Shift key was down at the time of the event. */
PHP_METHOD(php_wxGridSizeEvent, ShiftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::ShiftDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridSizeEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridSizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridSizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridSizeEvent::ShiftDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDSIZEEVENT_TYPE){
				references = &((wxGridSizeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridSizeEvent::ShiftDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridSizeEvent_php*)native_object)->ShiftDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridSizeEvent::ShiftDown\n");
	}
}
/* }}} */

/* {{{ proto  wxGridSizeEvent::wxGridSizeEvent()
   Default constructor. */
PHP_METHOD(php_wxGridSizeEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridSizeEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridSizeEvent* current_object;
	wxGridSizeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	long id1;
	long type1;
	zval* obj1 = 0;
	wxObject* object_pointer1_2 = 0;
	long rowOrCol1;
	long x1;
	long y1;
	zval* kbd1 = 0;
	wxKeyboardState* object_pointer1_6 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llz|lllo' (&id1, &type1, &obj1, &rowOrCol1, &x1, &y1, &kbd1)\n");
		#endif

		char parse_parameters_string[] = "llz|lllo";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id1, &type1, &obj1, &rowOrCol1, &x1, &y1, &kbd1 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(obj1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxObject*) zend_object_store_get_object(obj1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxObject*) zend_object_store_get_object(obj1 TSRMLS_CC))->native_object;
					object_pointer1_2 = (wxObject*) argument_native_object;
					if (!object_pointer1_2 || (argument_type != PHP_WXOBJECT_TYPE && argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE && argument_type != PHP_WXBITMAPHANDLER_TYPE && argument_type != PHP_WXIMAGE_TYPE && argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE && argument_type != PHP_WXSIZERITEM_TYPE && argument_type != PHP_WXGBSIZERITEM_TYPE && argument_type != PHP_WXIMAGELIST_TYPE && argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE && argument_type != PHP_WXCOLOUR_TYPE && argument_type != PHP_WXMENUITEM_TYPE && argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE && argument_type != PHP_WXACCELERATORTABLE_TYPE && argument_type != PHP_WXGDIOBJECT_TYPE && argument_type != PHP_WXBITMAP_TYPE && argument_type != PHP_WXPALETTE_TYPE && argument_type != PHP_WXICON_TYPE && argument_type != PHP_WXFONT_TYPE && argument_type != PHP_WXANIMATION_TYPE && argument_type != PHP_WXICONBUNDLE_TYPE && argument_type != PHP_WXCURSOR_TYPE && argument_type != PHP_WXREGION_TYPE && argument_type != PHP_WXPEN_TYPE && argument_type != PHP_WXBRUSH_TYPE && argument_type != PHP_WXARTPROVIDER_TYPE && argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE && argument_type != PHP_WXHTMLEASYPRINTING_TYPE && argument_type != PHP_WXHTMLLINKINFO_TYPE && argument_type != PHP_WXFINDREPLACEDATA_TYPE && argument_type != PHP_WXSOUND_TYPE && argument_type != PHP_WXFILESYSTEM_TYPE && argument_type != PHP_WXFILESYSTEMHANDLER_TYPE && argument_type != PHP_WXMASK_TYPE && argument_type != PHP_WXTOOLTIP_TYPE && argument_type != PHP_WXGRAPHICSRENDERER_TYPE && argument_type != PHP_WXLAYOUTCONSTRAINTS_TYPE && argument_type != PHP_WXFSFILE_TYPE && argument_type != PHP_WXCOLOURDATA_TYPE && argument_type != PHP_WXFONTDATA_TYPE && argument_type != PHP_WXGRIDTABLEBASE_TYPE && argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXT_TYPE && argument_type != PHP_WXVARIANT_TYPE && argument_type != PHP_WXCLIPBOARD_TYPE && argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE && argument_type != PHP_WXXMLRESOURCE_TYPE && argument_type != PHP_WXPAGESETUPDIALOG_TYPE && argument_type != PHP_WXPAGESETUPDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDIALOG_TYPE && argument_type != PHP_WXPRINTDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDATA_TYPE && argument_type != PHP_WXPRINTPREVIEW_TYPE && argument_type != PHP_WXPRINTER_TYPE && argument_type != PHP_WXPRINTOUT_TYPE && argument_type != PHP_WXHTMLPRINTOUT_TYPE && argument_type != PHP_WXHTMLDCRENDERER_TYPE && argument_type != PHP_WXHTMLFILTER_TYPE && argument_type != PHP_WXHTMLHELPDATA_TYPE && argument_type != PHP_WXHTMLTAGHANDLER_TYPE && argument_type != PHP_WXHTMLWINTAGHANDLER_TYPE && argument_type != PHP_WXMODULE_TYPE && argument_type != PHP_WXHTMLTAGSMODULE_TYPE && argument_type != PHP_WXIMAGEHANDLER_TYPE && argument_type != PHP_WXXMLRESOURCEHANDLER_TYPE && argument_type != PHP_WXXMLDOCUMENT_TYPE && argument_type != PHP_WXLAYOUTALGORITHM_TYPE && argument_type != PHP_WXFILEHISTORY_TYPE && argument_type != PHP_WXTOOLBARTOOLBASE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'obj' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(obj1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'obj' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 7){
				if(Z_TYPE_P(kbd1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxKeyboardState*) zend_object_store_get_object(kbd1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxKeyboardState*) zend_object_store_get_object(kbd1 TSRMLS_CC))->native_object;
					object_pointer1_6 = (wxKeyboardState*) argument_native_object;
					if (!object_pointer1_6 || (argument_type != PHP_WXKEYBOARDSTATE_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXMOUSESTATE_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'kbd' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(kbd1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'kbd' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxGridSizeEvent_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2)\n");
				#endif

				native_object = new wxGridSizeEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2);

				native_object->references.Initialize();
				((wxGridSizeEvent_php*) native_object)->references.AddReference(obj1, "wxGridSizeEvent::wxGridSizeEvent at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1)\n");
				#endif

				native_object = new wxGridSizeEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1);

				native_object->references.Initialize();
				((wxGridSizeEvent_php*) native_object)->references.AddReference(obj1, "wxGridSizeEvent::wxGridSizeEvent at call with 4 argument(s)");
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1, (int) x1)\n");
				#endif

				native_object = new wxGridSizeEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1, (int) x1);

				native_object->references.Initialize();
				((wxGridSizeEvent_php*) native_object)->references.AddReference(obj1, "wxGridSizeEvent::wxGridSizeEvent at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1, (int) x1, (int) y1)\n");
				#endif

				native_object = new wxGridSizeEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1, (int) x1, (int) y1);

				native_object->references.Initialize();
				((wxGridSizeEvent_php*) native_object)->references.AddReference(obj1, "wxGridSizeEvent::wxGridSizeEvent at call with 6 argument(s)");
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1, (int) x1, (int) y1, *(wxKeyboardState*) object_pointer1_6)\n");
				#endif

				native_object = new wxGridSizeEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) rowOrCol1, (int) x1, (int) y1, *(wxKeyboardState*) object_pointer1_6);

				native_object->references.Initialize();
				((wxGridSizeEvent_php*) native_object)->references.AddReference(obj1, "wxGridSizeEvent::wxGridSizeEvent at call with 7 argument(s)");
				((wxGridSizeEvent_php*) native_object)->references.AddReference(kbd1, "wxGridSizeEvent::wxGridSizeEvent at call with 7 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxGridSizeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxGridSizeEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxGridRangeSelectEvent_free(void *object TSRMLS_DC) 
{
    zo_wxGridRangeSelectEvent* custom_object = (zo_wxGridRangeSelectEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxGridRangeSelectEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxGridRangeSelectEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxGridRangeSelectEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxGridRangeSelectEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxGridRangeSelectEvent* custom_object;
    custom_object = (zo_wxGridRangeSelectEvent*) emalloc(sizeof(zo_wxGridRangeSelectEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxGridRangeSelectEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXGRIDRANGESELECTEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxGridRangeSelectEvent::AltDown()
   Returns true if the Alt key was down at the time of the event. */
PHP_METHOD(php_wxGridRangeSelectEvent, AltDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::AltDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridRangeSelectEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridRangeSelectEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridRangeSelectEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridRangeSelectEvent::AltDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridRangeSelectEvent::AltDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridRangeSelectEvent_php*)native_object)->AltDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridRangeSelectEvent::AltDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxGridRangeSelectEvent::ControlDown()
   Returns true if the Control key was down at the time of the event. */
PHP_METHOD(php_wxGridRangeSelectEvent, ControlDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::ControlDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridRangeSelectEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridRangeSelectEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridRangeSelectEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridRangeSelectEvent::ControlDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridRangeSelectEvent::ControlDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridRangeSelectEvent_php*)native_object)->ControlDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridRangeSelectEvent::ControlDown\n");
	}
}
/* }}} */

/* {{{ proto wxGridCellCoords wxGridRangeSelectEvent::GetBottomRightCoords()
   Top left corner of the rectangular area that was (de)selected. */
PHP_METHOD(php_wxGridRangeSelectEvent, GetBottomRightCoords)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::GetBottomRightCoords\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridRangeSelectEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridRangeSelectEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridRangeSelectEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridRangeSelectEvent::GetBottomRightCoords call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridRangeSelectEvent::GetBottomRightCoords() to return new object\n\n");
				#endif

				wxGridCellCoords value_to_return0;
				value_to_return0 = ((wxGridRangeSelectEvent_php*)native_object)->GetBottomRightCoords();
				void* ptr = safe_emalloc(1, sizeof(wxGridCellCoords_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxGridCellCoords));
				object_init_ex(return_value, php_wxGridCellCoords_entry);
				((wxGridCellCoords_php*)ptr)->phpObj = return_value;
				zo_wxGridCellCoords* zo0 = (zo_wxGridCellCoords*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxGridCellCoords_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridRangeSelectEvent::GetBottomRightCoords\n");
	}
}
/* }}} */

/* {{{ proto int wxGridRangeSelectEvent::GetBottomRow()
   Bottom row of the rectangular area that was (de)selected. */
PHP_METHOD(php_wxGridRangeSelectEvent, GetBottomRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::GetBottomRow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridRangeSelectEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridRangeSelectEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridRangeSelectEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridRangeSelectEvent::GetBottomRow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridRangeSelectEvent::GetBottomRow())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxGridRangeSelectEvent_php*)native_object)->GetBottomRow());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridRangeSelectEvent::GetBottomRow\n");
	}
}
/* }}} */

/* {{{ proto int wxGridRangeSelectEvent::GetLeftCol()
   Left column of the rectangular area that was (de)selected. */
PHP_METHOD(php_wxGridRangeSelectEvent, GetLeftCol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::GetLeftCol\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridRangeSelectEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridRangeSelectEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridRangeSelectEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridRangeSelectEvent::GetLeftCol call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridRangeSelectEvent::GetLeftCol())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxGridRangeSelectEvent_php*)native_object)->GetLeftCol());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridRangeSelectEvent::GetLeftCol\n");
	}
}
/* }}} */

/* {{{ proto int wxGridRangeSelectEvent::GetRightCol()
   Right column of the rectangular area that was (de)selected. */
PHP_METHOD(php_wxGridRangeSelectEvent, GetRightCol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::GetRightCol\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridRangeSelectEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridRangeSelectEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridRangeSelectEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridRangeSelectEvent::GetRightCol call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridRangeSelectEvent::GetRightCol())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxGridRangeSelectEvent_php*)native_object)->GetRightCol());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridRangeSelectEvent::GetRightCol\n");
	}
}
/* }}} */

/* {{{ proto wxGridCellCoords wxGridRangeSelectEvent::GetTopLeftCoords()
   Top left corner of the rectangular area that was (de)selected. */
PHP_METHOD(php_wxGridRangeSelectEvent, GetTopLeftCoords)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::GetTopLeftCoords\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridRangeSelectEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridRangeSelectEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridRangeSelectEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridRangeSelectEvent::GetTopLeftCoords call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridRangeSelectEvent::GetTopLeftCoords() to return new object\n\n");
				#endif

				wxGridCellCoords value_to_return0;
				value_to_return0 = ((wxGridRangeSelectEvent_php*)native_object)->GetTopLeftCoords();
				void* ptr = safe_emalloc(1, sizeof(wxGridCellCoords_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxGridCellCoords));
				object_init_ex(return_value, php_wxGridCellCoords_entry);
				((wxGridCellCoords_php*)ptr)->phpObj = return_value;
				zo_wxGridCellCoords* zo0 = (zo_wxGridCellCoords*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxGridCellCoords_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridRangeSelectEvent::GetTopLeftCoords\n");
	}
}
/* }}} */

/* {{{ proto int wxGridRangeSelectEvent::GetTopRow()
   Top row of the rectangular area that was (de)selected. */
PHP_METHOD(php_wxGridRangeSelectEvent, GetTopRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::GetTopRow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridRangeSelectEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridRangeSelectEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridRangeSelectEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridRangeSelectEvent::GetTopRow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridRangeSelectEvent::GetTopRow())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxGridRangeSelectEvent_php*)native_object)->GetTopRow());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridRangeSelectEvent::GetTopRow\n");
	}
}
/* }}} */

/* {{{ proto bool wxGridRangeSelectEvent::MetaDown()
   Returns true if the Meta key was down at the time of the event. */
PHP_METHOD(php_wxGridRangeSelectEvent, MetaDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::MetaDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridRangeSelectEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridRangeSelectEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridRangeSelectEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridRangeSelectEvent::MetaDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridRangeSelectEvent::MetaDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridRangeSelectEvent_php*)native_object)->MetaDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridRangeSelectEvent::MetaDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxGridRangeSelectEvent::Selecting()
   Returns true if the area was selected, false otherwise. */
PHP_METHOD(php_wxGridRangeSelectEvent, Selecting)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::Selecting\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridRangeSelectEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridRangeSelectEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridRangeSelectEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridRangeSelectEvent::Selecting call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridRangeSelectEvent::Selecting())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridRangeSelectEvent_php*)native_object)->Selecting());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridRangeSelectEvent::Selecting\n");
	}
}
/* }}} */

/* {{{ proto bool wxGridRangeSelectEvent::ShiftDown()
   Returns true if the Shift key was down at the time of the event. */
PHP_METHOD(php_wxGridRangeSelectEvent, ShiftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::ShiftDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridRangeSelectEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridRangeSelectEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridRangeSelectEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridRangeSelectEvent::ShiftDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDRANGESELECTEVENT_TYPE){
				references = &((wxGridRangeSelectEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxGridRangeSelectEvent::ShiftDown())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxGridRangeSelectEvent_php*)native_object)->ShiftDown());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridRangeSelectEvent::ShiftDown\n");
	}
}
/* }}} */

/* {{{ proto  wxGridRangeSelectEvent::wxGridRangeSelectEvent()
   Default constructor. */
PHP_METHOD(php_wxGridRangeSelectEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridRangeSelectEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridRangeSelectEvent* current_object;
	wxGridRangeSelectEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	long id1;
	long type1;
	zval* obj1 = 0;
	wxObject* object_pointer1_2 = 0;
	zval* topLeft1 = 0;
	wxGridCellCoords* object_pointer1_3 = 0;
	zval* bottomRight1 = 0;
	wxGridCellCoords* object_pointer1_4 = 0;
	bool sel1;
	zval* kbd1 = 0;
	wxKeyboardState* object_pointer1_6 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 5  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llzOO|bo' (&id1, &type1, &obj1, &topLeft1, php_wxGridCellCoords_entry, &bottomRight1, php_wxGridCellCoords_entry, &sel1, &kbd1)\n");
		#endif

		char parse_parameters_string[] = "llzOO|bo";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id1, &type1, &obj1, &topLeft1, php_wxGridCellCoords_entry, &bottomRight1, php_wxGridCellCoords_entry, &sel1, &kbd1 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(obj1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxObject*) zend_object_store_get_object(obj1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxObject*) zend_object_store_get_object(obj1 TSRMLS_CC))->native_object;
					object_pointer1_2 = (wxObject*) argument_native_object;
					if (!object_pointer1_2 || (argument_type != PHP_WXOBJECT_TYPE && argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE && argument_type != PHP_WXBITMAPHANDLER_TYPE && argument_type != PHP_WXIMAGE_TYPE && argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE && argument_type != PHP_WXSIZERITEM_TYPE && argument_type != PHP_WXGBSIZERITEM_TYPE && argument_type != PHP_WXIMAGELIST_TYPE && argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE && argument_type != PHP_WXCOLOUR_TYPE && argument_type != PHP_WXMENUITEM_TYPE && argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE && argument_type != PHP_WXACCELERATORTABLE_TYPE && argument_type != PHP_WXGDIOBJECT_TYPE && argument_type != PHP_WXBITMAP_TYPE && argument_type != PHP_WXPALETTE_TYPE && argument_type != PHP_WXICON_TYPE && argument_type != PHP_WXFONT_TYPE && argument_type != PHP_WXANIMATION_TYPE && argument_type != PHP_WXICONBUNDLE_TYPE && argument_type != PHP_WXCURSOR_TYPE && argument_type != PHP_WXREGION_TYPE && argument_type != PHP_WXPEN_TYPE && argument_type != PHP_WXBRUSH_TYPE && argument_type != PHP_WXARTPROVIDER_TYPE && argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE && argument_type != PHP_WXHTMLEASYPRINTING_TYPE && argument_type != PHP_WXHTMLLINKINFO_TYPE && argument_type != PHP_WXFINDREPLACEDATA_TYPE && argument_type != PHP_WXSOUND_TYPE && argument_type != PHP_WXFILESYSTEM_TYPE && argument_type != PHP_WXFILESYSTEMHANDLER_TYPE && argument_type != PHP_WXMASK_TYPE && argument_type != PHP_WXTOOLTIP_TYPE && argument_type != PHP_WXGRAPHICSRENDERER_TYPE && argument_type != PHP_WXLAYOUTCONSTRAINTS_TYPE && argument_type != PHP_WXFSFILE_TYPE && argument_type != PHP_WXCOLOURDATA_TYPE && argument_type != PHP_WXFONTDATA_TYPE && argument_type != PHP_WXGRIDTABLEBASE_TYPE && argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXT_TYPE && argument_type != PHP_WXVARIANT_TYPE && argument_type != PHP_WXCLIPBOARD_TYPE && argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE && argument_type != PHP_WXXMLRESOURCE_TYPE && argument_type != PHP_WXPAGESETUPDIALOG_TYPE && argument_type != PHP_WXPAGESETUPDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDIALOG_TYPE && argument_type != PHP_WXPRINTDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDATA_TYPE && argument_type != PHP_WXPRINTPREVIEW_TYPE && argument_type != PHP_WXPRINTER_TYPE && argument_type != PHP_WXPRINTOUT_TYPE && argument_type != PHP_WXHTMLPRINTOUT_TYPE && argument_type != PHP_WXHTMLDCRENDERER_TYPE && argument_type != PHP_WXHTMLFILTER_TYPE && argument_type != PHP_WXHTMLHELPDATA_TYPE && argument_type != PHP_WXHTMLTAGHANDLER_TYPE && argument_type != PHP_WXHTMLWINTAGHANDLER_TYPE && argument_type != PHP_WXMODULE_TYPE && argument_type != PHP_WXHTMLTAGSMODULE_TYPE && argument_type != PHP_WXIMAGEHANDLER_TYPE && argument_type != PHP_WXXMLRESOURCEHANDLER_TYPE && argument_type != PHP_WXXMLDOCUMENT_TYPE && argument_type != PHP_WXLAYOUTALGORITHM_TYPE && argument_type != PHP_WXFILEHISTORY_TYPE && argument_type != PHP_WXTOOLBARTOOLBASE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'obj' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(obj1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'obj' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(topLeft1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxGridCellCoords*) zend_object_store_get_object(topLeft1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxGridCellCoords*) zend_object_store_get_object(topLeft1 TSRMLS_CC))->native_object;
					object_pointer1_3 = (wxGridCellCoords*) argument_native_object;
					if (!object_pointer1_3 )
					{
						zend_error(E_ERROR, "Parameter 'topLeft' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(topLeft1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'topLeft' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(bottomRight1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxGridCellCoords*) zend_object_store_get_object(bottomRight1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxGridCellCoords*) zend_object_store_get_object(bottomRight1 TSRMLS_CC))->native_object;
					object_pointer1_4 = (wxGridCellCoords*) argument_native_object;
					if (!object_pointer1_4 )
					{
						zend_error(E_ERROR, "Parameter 'bottomRight' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bottomRight1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'bottomRight' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 7){
				if(Z_TYPE_P(kbd1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxKeyboardState*) zend_object_store_get_object(kbd1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxKeyboardState*) zend_object_store_get_object(kbd1 TSRMLS_CC))->native_object;
					object_pointer1_6 = (wxKeyboardState*) argument_native_object;
					if (!object_pointer1_6 || (argument_type != PHP_WXKEYBOARDSTATE_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXMOUSESTATE_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'kbd' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(kbd1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'kbd' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxGridRangeSelectEvent_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, *(wxGridCellCoords*) object_pointer1_3, *(wxGridCellCoords*) object_pointer1_4)\n");
				#endif

				native_object = new wxGridRangeSelectEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, *(wxGridCellCoords*) object_pointer1_3, *(wxGridCellCoords*) object_pointer1_4);

				native_object->references.Initialize();
				((wxGridRangeSelectEvent_php*) native_object)->references.AddReference(obj1, "wxGridRangeSelectEvent::wxGridRangeSelectEvent at call with 5 argument(s)");
				((wxGridRangeSelectEvent_php*) native_object)->references.AddReference(topLeft1, "wxGridRangeSelectEvent::wxGridRangeSelectEvent at call with 5 argument(s)");
				((wxGridRangeSelectEvent_php*) native_object)->references.AddReference(bottomRight1, "wxGridRangeSelectEvent::wxGridRangeSelectEvent at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, *(wxGridCellCoords*) object_pointer1_3, *(wxGridCellCoords*) object_pointer1_4, sel1)\n");
				#endif

				native_object = new wxGridRangeSelectEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, *(wxGridCellCoords*) object_pointer1_3, *(wxGridCellCoords*) object_pointer1_4, sel1);

				native_object->references.Initialize();
				((wxGridRangeSelectEvent_php*) native_object)->references.AddReference(obj1, "wxGridRangeSelectEvent::wxGridRangeSelectEvent at call with 6 argument(s)");
				((wxGridRangeSelectEvent_php*) native_object)->references.AddReference(topLeft1, "wxGridRangeSelectEvent::wxGridRangeSelectEvent at call with 6 argument(s)");
				((wxGridRangeSelectEvent_php*) native_object)->references.AddReference(bottomRight1, "wxGridRangeSelectEvent::wxGridRangeSelectEvent at call with 6 argument(s)");
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, *(wxGridCellCoords*) object_pointer1_3, *(wxGridCellCoords*) object_pointer1_4, sel1, *(wxKeyboardState*) object_pointer1_6)\n");
				#endif

				native_object = new wxGridRangeSelectEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, *(wxGridCellCoords*) object_pointer1_3, *(wxGridCellCoords*) object_pointer1_4, sel1, *(wxKeyboardState*) object_pointer1_6);

				native_object->references.Initialize();
				((wxGridRangeSelectEvent_php*) native_object)->references.AddReference(obj1, "wxGridRangeSelectEvent::wxGridRangeSelectEvent at call with 7 argument(s)");
				((wxGridRangeSelectEvent_php*) native_object)->references.AddReference(topLeft1, "wxGridRangeSelectEvent::wxGridRangeSelectEvent at call with 7 argument(s)");
				((wxGridRangeSelectEvent_php*) native_object)->references.AddReference(bottomRight1, "wxGridRangeSelectEvent::wxGridRangeSelectEvent at call with 7 argument(s)");
				((wxGridRangeSelectEvent_php*) native_object)->references.AddReference(kbd1, "wxGridRangeSelectEvent::wxGridRangeSelectEvent at call with 7 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxGridRangeSelectEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxGridRangeSelectEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxGridEditorCreatedEvent_free(void *object TSRMLS_DC) 
{
    zo_wxGridEditorCreatedEvent* custom_object = (zo_wxGridEditorCreatedEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxGridEditorCreatedEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxGridEditorCreatedEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxGridEditorCreatedEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxGridEditorCreatedEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxGridEditorCreatedEvent* custom_object;
    custom_object = (zo_wxGridEditorCreatedEvent*) emalloc(sizeof(zo_wxGridEditorCreatedEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxGridEditorCreatedEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXGRIDEDITORCREATEDEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxGridEditorCreatedEvent::GetCol()
   Returns the column at which the event occurred. */
PHP_METHOD(php_wxGridEditorCreatedEvent, GetCol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::GetCol\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEditorCreatedEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEditorCreatedEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEditorCreatedEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEditorCreatedEvent::GetCol call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridEditorCreatedEvent::GetCol())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxGridEditorCreatedEvent_php*)native_object)->GetCol());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEditorCreatedEvent::GetCol\n");
	}
}
/* }}} */

/* {{{ proto wxControl wxGridEditorCreatedEvent::GetControl()
   Returns the edit control. */
PHP_METHOD(php_wxGridEditorCreatedEvent, GetControl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::GetControl\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEditorCreatedEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEditorCreatedEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEditorCreatedEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEditorCreatedEvent::GetControl call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridEditorCreatedEvent::GetControl() to return object pointer\n\n");
				#endif

				wxControl_php* value_to_return0;
				value_to_return0 = (wxControl_php*) ((wxGridEditorCreatedEvent_php*)native_object)->GetControl();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxControl_entry);
					((zo_wxControl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxControl_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxGridEditorCreatedEvent::GetControl at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEditorCreatedEvent::GetControl\n");
	}
}
/* }}} */

/* {{{ proto int wxGridEditorCreatedEvent::GetRow()
   Returns the row at which the event occurred. */
PHP_METHOD(php_wxGridEditorCreatedEvent, GetRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::GetRow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEditorCreatedEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEditorCreatedEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEditorCreatedEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEditorCreatedEvent::GetRow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxGridEditorCreatedEvent::GetRow())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxGridEditorCreatedEvent_php*)native_object)->GetRow());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEditorCreatedEvent::GetRow\n");
	}
}
/* }}} */

/* {{{ proto  wxGridEditorCreatedEvent::SetCol(int col)
   Sets the column at which the event occurred. */
PHP_METHOD(php_wxGridEditorCreatedEvent, SetCol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::SetCol\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEditorCreatedEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEditorCreatedEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEditorCreatedEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEditorCreatedEvent::SetCol call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&col0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &col0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridEditorCreatedEvent::SetCol((int) col0)\n\n");
				#endif

				((wxGridEditorCreatedEvent_php*)native_object)->SetCol((int) col0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEditorCreatedEvent::SetCol\n");
	}
}
/* }}} */

/* {{{ proto  wxGridEditorCreatedEvent::SetControl(wxControl &ctrl)
   Sets the edit control. */
PHP_METHOD(php_wxGridEditorCreatedEvent, SetControl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::SetControl\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEditorCreatedEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEditorCreatedEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEditorCreatedEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEditorCreatedEvent::SetControl call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* ctrl0 = 0;
	wxControl* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&ctrl0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &ctrl0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(ctrl0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxControl*) zend_object_store_get_object(ctrl0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxControl*) zend_object_store_get_object(ctrl0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxControl*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'ctrl' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(ctrl0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'ctrl' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridEditorCreatedEvent::SetControl((wxControl*) object_pointer0_0)\n\n");
				#endif

				((wxGridEditorCreatedEvent_php*)native_object)->SetControl((wxControl*) object_pointer0_0);

				references->AddReference(ctrl0, "wxGridEditorCreatedEvent::SetControl at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEditorCreatedEvent::SetControl\n");
	}
}
/* }}} */

/* {{{ proto  wxGridEditorCreatedEvent::SetRow(int row)
   Sets the row at which the event occurred. */
PHP_METHOD(php_wxGridEditorCreatedEvent, SetRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::SetRow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEditorCreatedEvent* current_object;
	wxphp_object_type current_object_type;
	wxGridEditorCreatedEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxGridEditorCreatedEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxGridEditorCreatedEvent::SetRow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXGRIDEDITORCREATEDEVENT_TYPE){
				references = &((wxGridEditorCreatedEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long row0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&row0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &row0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxGridEditorCreatedEvent::SetRow((int) row0)\n\n");
				#endif

				((wxGridEditorCreatedEvent_php*)native_object)->SetRow((int) row0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxGridEditorCreatedEvent::SetRow\n");
	}
}
/* }}} */

/* {{{ proto  wxGridEditorCreatedEvent::wxGridEditorCreatedEvent()
   Default constructor. */
PHP_METHOD(php_wxGridEditorCreatedEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxGridEditorCreatedEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxGridEditorCreatedEvent* current_object;
	wxGridEditorCreatedEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	long id1;
	long type1;
	zval* obj1 = 0;
	wxObject* object_pointer1_2 = 0;
	long row1;
	long col1;
	zval* ctrl1 = 0;
	wxControl* object_pointer1_5 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llzllz' (&id1, &type1, &obj1, &row1, &col1, &ctrl1)\n");
		#endif

		char parse_parameters_string[] = "llzllz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id1, &type1, &obj1, &row1, &col1, &ctrl1 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(obj1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxObject*) zend_object_store_get_object(obj1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxObject*) zend_object_store_get_object(obj1 TSRMLS_CC))->native_object;
					object_pointer1_2 = (wxObject*) argument_native_object;
					if (!object_pointer1_2 || (argument_type != PHP_WXOBJECT_TYPE && argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE && argument_type != PHP_WXBITMAPHANDLER_TYPE && argument_type != PHP_WXIMAGE_TYPE && argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE && argument_type != PHP_WXSIZERITEM_TYPE && argument_type != PHP_WXGBSIZERITEM_TYPE && argument_type != PHP_WXIMAGELIST_TYPE && argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE && argument_type != PHP_WXCOLOUR_TYPE && argument_type != PHP_WXMENUITEM_TYPE && argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE && argument_type != PHP_WXACCELERATORTABLE_TYPE && argument_type != PHP_WXGDIOBJECT_TYPE && argument_type != PHP_WXBITMAP_TYPE && argument_type != PHP_WXPALETTE_TYPE && argument_type != PHP_WXICON_TYPE && argument_type != PHP_WXFONT_TYPE && argument_type != PHP_WXANIMATION_TYPE && argument_type != PHP_WXICONBUNDLE_TYPE && argument_type != PHP_WXCURSOR_TYPE && argument_type != PHP_WXREGION_TYPE && argument_type != PHP_WXPEN_TYPE && argument_type != PHP_WXBRUSH_TYPE && argument_type != PHP_WXARTPROVIDER_TYPE && argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE && argument_type != PHP_WXHTMLEASYPRINTING_TYPE && argument_type != PHP_WXHTMLLINKINFO_TYPE && argument_type != PHP_WXFINDREPLACEDATA_TYPE && argument_type != PHP_WXSOUND_TYPE && argument_type != PHP_WXFILESYSTEM_TYPE && argument_type != PHP_WXFILESYSTEMHANDLER_TYPE && argument_type != PHP_WXMASK_TYPE && argument_type != PHP_WXTOOLTIP_TYPE && argument_type != PHP_WXGRAPHICSRENDERER_TYPE && argument_type != PHP_WXLAYOUTCONSTRAINTS_TYPE && argument_type != PHP_WXFSFILE_TYPE && argument_type != PHP_WXCOLOURDATA_TYPE && argument_type != PHP_WXFONTDATA_TYPE && argument_type != PHP_WXGRIDTABLEBASE_TYPE && argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXT_TYPE && argument_type != PHP_WXVARIANT_TYPE && argument_type != PHP_WXCLIPBOARD_TYPE && argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE && argument_type != PHP_WXXMLRESOURCE_TYPE && argument_type != PHP_WXPAGESETUPDIALOG_TYPE && argument_type != PHP_WXPAGESETUPDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDIALOG_TYPE && argument_type != PHP_WXPRINTDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDATA_TYPE && argument_type != PHP_WXPRINTPREVIEW_TYPE && argument_type != PHP_WXPRINTER_TYPE && argument_type != PHP_WXPRINTOUT_TYPE && argument_type != PHP_WXHTMLPRINTOUT_TYPE && argument_type != PHP_WXHTMLDCRENDERER_TYPE && argument_type != PHP_WXHTMLFILTER_TYPE && argument_type != PHP_WXHTMLHELPDATA_TYPE && argument_type != PHP_WXHTMLTAGHANDLER_TYPE && argument_type != PHP_WXHTMLWINTAGHANDLER_TYPE && argument_type != PHP_WXMODULE_TYPE && argument_type != PHP_WXHTMLTAGSMODULE_TYPE && argument_type != PHP_WXIMAGEHANDLER_TYPE && argument_type != PHP_WXXMLRESOURCEHANDLER_TYPE && argument_type != PHP_WXXMLDOCUMENT_TYPE && argument_type != PHP_WXLAYOUTALGORITHM_TYPE && argument_type != PHP_WXFILEHISTORY_TYPE && argument_type != PHP_WXTOOLBARTOOLBASE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'obj' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(obj1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'obj' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 6){
				if(Z_TYPE_P(ctrl1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxControl*) zend_object_store_get_object(ctrl1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxControl*) zend_object_store_get_object(ctrl1 TSRMLS_CC))->native_object;
					object_pointer1_5 = (wxControl*) argument_native_object;
					if (!object_pointer1_5 || (argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'ctrl' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(ctrl1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'ctrl' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxGridEditorCreatedEvent_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (wxControl*) object_pointer1_5)\n");
				#endif

				native_object = new wxGridEditorCreatedEvent_php((int) id1, (wxEventType) type1, (wxObject*) object_pointer1_2, (int) row1, (int) col1, (wxControl*) object_pointer1_5);

				native_object->references.Initialize();
				((wxGridEditorCreatedEvent_php*) native_object)->references.AddReference(obj1, "wxGridEditorCreatedEvent::wxGridEditorCreatedEvent at call with 6 argument(s)");
				((wxGridEditorCreatedEvent_php*) native_object)->references.AddReference(ctrl1, "wxGridEditorCreatedEvent::wxGridEditorCreatedEvent at call with 6 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxGridEditorCreatedEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxGridEditorCreatedEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHeaderCtrlEvent_free(void *object TSRMLS_DC) 
{
    zo_wxHeaderCtrlEvent* custom_object = (zo_wxHeaderCtrlEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHeaderCtrlEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHeaderCtrlEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHeaderCtrlEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHeaderCtrlEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHeaderCtrlEvent* custom_object;
    custom_object = (zo_wxHeaderCtrlEvent*) emalloc(sizeof(zo_wxHeaderCtrlEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHeaderCtrlEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHEADERCTRLEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxHeaderCtrlEvent::GetColumn()
   Return the index of the column affected by this event. */
PHP_METHOD(php_wxHeaderCtrlEvent, GetColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHeaderCtrlEvent::GetColumn\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHeaderCtrlEvent* current_object;
	wxphp_object_type current_object_type;
	wxHeaderCtrlEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHeaderCtrlEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHeaderCtrlEvent::GetColumn call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHEADERCTRLEVENT_TYPE){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHeaderCtrlEvent::GetColumn())\n\n");
				#endif

				if(current_object_type == PHP_WXHEADERCTRLEVENT_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHeaderCtrlEvent_php*)native_object)->GetColumn());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHeaderCtrlEvent::GetColumn\n");
	}
}
/* }}} */

/* {{{ proto int wxHeaderCtrlEvent::GetNewOrder()
   Return the new order of the column. */
PHP_METHOD(php_wxHeaderCtrlEvent, GetNewOrder)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHeaderCtrlEvent::GetNewOrder\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHeaderCtrlEvent* current_object;
	wxphp_object_type current_object_type;
	wxHeaderCtrlEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHeaderCtrlEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHeaderCtrlEvent::GetNewOrder call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHEADERCTRLEVENT_TYPE){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHeaderCtrlEvent::GetNewOrder())\n\n");
				#endif

				if(current_object_type == PHP_WXHEADERCTRLEVENT_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHeaderCtrlEvent_php*)native_object)->GetNewOrder());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHeaderCtrlEvent::GetNewOrder\n");
	}
}
/* }}} */

/* {{{ proto int wxHeaderCtrlEvent::GetWidth()
   Return the current width of the column. */
PHP_METHOD(php_wxHeaderCtrlEvent, GetWidth)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHeaderCtrlEvent::GetWidth\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHeaderCtrlEvent* current_object;
	wxphp_object_type current_object_type;
	wxHeaderCtrlEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHeaderCtrlEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHeaderCtrlEvent::GetWidth call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHEADERCTRLEVENT_TYPE){
				references = &((wxHeaderCtrlEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHeaderCtrlEvent::GetWidth())\n\n");
				#endif

				if(current_object_type == PHP_WXHEADERCTRLEVENT_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHeaderCtrlEvent_php*)native_object)->GetWidth());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHeaderCtrlEvent::GetWidth\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHyperlinkEvent_free(void *object TSRMLS_DC) 
{
    zo_wxHyperlinkEvent* custom_object = (zo_wxHyperlinkEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHyperlinkEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHyperlinkEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHyperlinkEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHyperlinkEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHyperlinkEvent* custom_object;
    custom_object = (zo_wxHyperlinkEvent*) emalloc(sizeof(zo_wxHyperlinkEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHyperlinkEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHYPERLINKEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto string wxHyperlinkEvent::GetURL()
   Returns the URL of the hyperlink where the user has just clicked. */
PHP_METHOD(php_wxHyperlinkEvent, GetURL)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHyperlinkEvent::GetURL\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHyperlinkEvent* current_object;
	wxphp_object_type current_object_type;
	wxHyperlinkEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHyperlinkEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHyperlinkEvent::GetURL call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHYPERLINKEVENT_TYPE){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHyperlinkEvent::GetURL().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxHyperlinkEvent_php*)native_object)->GetURL();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHyperlinkEvent::GetURL\n");
	}
}
/* }}} */

/* {{{ proto  wxHyperlinkEvent::SetURL(string url)
   Sets the URL associated with the event. */
PHP_METHOD(php_wxHyperlinkEvent, SetURL)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHyperlinkEvent::SetURL\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHyperlinkEvent* current_object;
	wxphp_object_type current_object_type;
	wxHyperlinkEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHyperlinkEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHyperlinkEvent::SetURL call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHYPERLINKEVENT_TYPE){
				references = &((wxHyperlinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* url0;
	long url_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&url0, &url_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &url0, &url_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHyperlinkEvent::SetURL(wxString(url0, wxConvUTF8))\n\n");
				#endif

				((wxHyperlinkEvent_php*)native_object)->SetURL(wxString(url0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHyperlinkEvent::SetURL\n");
	}
}
/* }}} */

/* {{{ proto  wxHyperlinkEvent::wxHyperlinkEvent(wxObject &generator, int id, string url)
   The constructor is not normally used by the user code. */
PHP_METHOD(php_wxHyperlinkEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHyperlinkEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHyperlinkEvent* current_object;
	wxHyperlinkEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* generator0 = 0;
	wxObject* object_pointer0_0 = 0;
	long id0;
	char* url0;
	long url_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls' (&generator0, &id0, &url0, &url_len0)\n");
		#endif

		char parse_parameters_string[] = "zls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &generator0, &id0, &url0, &url_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(generator0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxObject*) zend_object_store_get_object(generator0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxObject*) zend_object_store_get_object(generator0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxObject*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXOBJECT_TYPE && argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE && argument_type != PHP_WXBITMAPHANDLER_TYPE && argument_type != PHP_WXIMAGE_TYPE && argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE && argument_type != PHP_WXSIZERITEM_TYPE && argument_type != PHP_WXGBSIZERITEM_TYPE && argument_type != PHP_WXIMAGELIST_TYPE && argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE && argument_type != PHP_WXCOLOUR_TYPE && argument_type != PHP_WXMENUITEM_TYPE && argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE && argument_type != PHP_WXACCELERATORTABLE_TYPE && argument_type != PHP_WXGDIOBJECT_TYPE && argument_type != PHP_WXBITMAP_TYPE && argument_type != PHP_WXPALETTE_TYPE && argument_type != PHP_WXICON_TYPE && argument_type != PHP_WXFONT_TYPE && argument_type != PHP_WXANIMATION_TYPE && argument_type != PHP_WXICONBUNDLE_TYPE && argument_type != PHP_WXCURSOR_TYPE && argument_type != PHP_WXREGION_TYPE && argument_type != PHP_WXPEN_TYPE && argument_type != PHP_WXBRUSH_TYPE && argument_type != PHP_WXARTPROVIDER_TYPE && argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE && argument_type != PHP_WXHTMLEASYPRINTING_TYPE && argument_type != PHP_WXHTMLLINKINFO_TYPE && argument_type != PHP_WXFINDREPLACEDATA_TYPE && argument_type != PHP_WXSOUND_TYPE && argument_type != PHP_WXFILESYSTEM_TYPE && argument_type != PHP_WXFILESYSTEMHANDLER_TYPE && argument_type != PHP_WXMASK_TYPE && argument_type != PHP_WXTOOLTIP_TYPE && argument_type != PHP_WXGRAPHICSRENDERER_TYPE && argument_type != PHP_WXLAYOUTCONSTRAINTS_TYPE && argument_type != PHP_WXFSFILE_TYPE && argument_type != PHP_WXCOLOURDATA_TYPE && argument_type != PHP_WXFONTDATA_TYPE && argument_type != PHP_WXGRIDTABLEBASE_TYPE && argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXT_TYPE && argument_type != PHP_WXVARIANT_TYPE && argument_type != PHP_WXCLIPBOARD_TYPE && argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE && argument_type != PHP_WXXMLRESOURCE_TYPE && argument_type != PHP_WXPAGESETUPDIALOG_TYPE && argument_type != PHP_WXPAGESETUPDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDIALOG_TYPE && argument_type != PHP_WXPRINTDIALOGDATA_TYPE && argument_type != PHP_WXPRINTDATA_TYPE && argument_type != PHP_WXPRINTPREVIEW_TYPE && argument_type != PHP_WXPRINTER_TYPE && argument_type != PHP_WXPRINTOUT_TYPE && argument_type != PHP_WXHTMLPRINTOUT_TYPE && argument_type != PHP_WXHTMLDCRENDERER_TYPE && argument_type != PHP_WXHTMLFILTER_TYPE && argument_type != PHP_WXHTMLHELPDATA_TYPE && argument_type != PHP_WXHTMLTAGHANDLER_TYPE && argument_type != PHP_WXHTMLWINTAGHANDLER_TYPE && argument_type != PHP_WXMODULE_TYPE && argument_type != PHP_WXHTMLTAGSMODULE_TYPE && argument_type != PHP_WXIMAGEHANDLER_TYPE && argument_type != PHP_WXXMLRESOURCEHANDLER_TYPE && argument_type != PHP_WXXMLDOCUMENT_TYPE && argument_type != PHP_WXLAYOUTALGORITHM_TYPE && argument_type != PHP_WXFILEHISTORY_TYPE && argument_type != PHP_WXTOOLBARTOOLBASE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'generator' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(generator0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'generator' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxObject*) object_pointer0_0, (int) id0, wxString(url0, wxConvUTF8))\n");
				#endif

				native_object = new wxHyperlinkEvent_php((wxObject*) object_pointer0_0, (int) id0, wxString(url0, wxConvUTF8));

				native_object->references.Initialize();
				((wxHyperlinkEvent_php*) native_object)->references.AddReference(generator0, "wxHyperlinkEvent::wxHyperlinkEvent at call with 3 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHyperlinkEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHyperlinkEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxQueryLayoutInfoEvent_free(void *object TSRMLS_DC) 
{
    zo_wxQueryLayoutInfoEvent* custom_object = (zo_wxQueryLayoutInfoEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxQueryLayoutInfoEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxQueryLayoutInfoEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxQueryLayoutInfoEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxQueryLayoutInfoEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxQueryLayoutInfoEvent* custom_object;
    custom_object = (zo_wxQueryLayoutInfoEvent*) emalloc(sizeof(zo_wxQueryLayoutInfoEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxQueryLayoutInfoEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXQUERYLAYOUTINFOEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxLayoutAlignment wxQueryLayoutInfoEvent::GetAlignment()
   Specifies the alignment of the window (which side of the remaining parent client area the window sticks to). */
PHP_METHOD(php_wxQueryLayoutInfoEvent, GetAlignment)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::GetAlignment\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxQueryLayoutInfoEvent* current_object;
	wxphp_object_type current_object_type;
	wxQueryLayoutInfoEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxQueryLayoutInfoEvent::GetAlignment call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxQueryLayoutInfoEvent::GetAlignment())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxQueryLayoutInfoEvent_php*)native_object)->GetAlignment());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxQueryLayoutInfoEvent::GetAlignment\n");
	}
}
/* }}} */

/* {{{ proto int wxQueryLayoutInfoEvent::GetFlags()
   Returns the flags associated with this event. */
PHP_METHOD(php_wxQueryLayoutInfoEvent, GetFlags)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::GetFlags\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxQueryLayoutInfoEvent* current_object;
	wxphp_object_type current_object_type;
	wxQueryLayoutInfoEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxQueryLayoutInfoEvent::GetFlags call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxQueryLayoutInfoEvent::GetFlags())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxQueryLayoutInfoEvent_php*)native_object)->GetFlags());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxQueryLayoutInfoEvent::GetFlags\n");
	}
}
/* }}} */

/* {{{ proto wxLayoutOrientation wxQueryLayoutInfoEvent::GetOrientation()
   Returns the orientation that the event handler specified to the event object. */
PHP_METHOD(php_wxQueryLayoutInfoEvent, GetOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::GetOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxQueryLayoutInfoEvent* current_object;
	wxphp_object_type current_object_type;
	wxQueryLayoutInfoEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxQueryLayoutInfoEvent::GetOrientation call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxQueryLayoutInfoEvent::GetOrientation())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxQueryLayoutInfoEvent_php*)native_object)->GetOrientation());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxQueryLayoutInfoEvent::GetOrientation\n");
	}
}
/* }}} */

/* {{{ proto int wxQueryLayoutInfoEvent::GetRequestedLength()
   Returns the requested length of the window in the direction of the window orientation. */
PHP_METHOD(php_wxQueryLayoutInfoEvent, GetRequestedLength)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::GetRequestedLength\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxQueryLayoutInfoEvent* current_object;
	wxphp_object_type current_object_type;
	wxQueryLayoutInfoEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxQueryLayoutInfoEvent::GetRequestedLength call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxQueryLayoutInfoEvent::GetRequestedLength())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxQueryLayoutInfoEvent_php*)native_object)->GetRequestedLength());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxQueryLayoutInfoEvent::GetRequestedLength\n");
	}
}
/* }}} */

/* {{{ proto wxSize wxQueryLayoutInfoEvent::GetSize()
   Returns the size that the event handler specified to the event object as being the requested size of the window. */
PHP_METHOD(php_wxQueryLayoutInfoEvent, GetSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::GetSize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxQueryLayoutInfoEvent* current_object;
	wxphp_object_type current_object_type;
	wxQueryLayoutInfoEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxQueryLayoutInfoEvent::GetSize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxQueryLayoutInfoEvent::GetSize() to return new object\n\n");
				#endif

				wxSize value_to_return0;
				value_to_return0 = ((wxQueryLayoutInfoEvent_php*)native_object)->GetSize();
				void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				((wxSize_php*)ptr)->phpObj = return_value;
				zo_wxSize* zo0 = (zo_wxSize*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxSize_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxQueryLayoutInfoEvent::GetSize\n");
	}
}
/* }}} */

/* {{{ proto  wxQueryLayoutInfoEvent::SetAlignment(wxLayoutAlignment alignment)
   Call this to specify the alignment of the window (which side of the remaining parent client area the window sticks to). */
PHP_METHOD(php_wxQueryLayoutInfoEvent, SetAlignment)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::SetAlignment\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxQueryLayoutInfoEvent* current_object;
	wxphp_object_type current_object_type;
	wxQueryLayoutInfoEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxQueryLayoutInfoEvent::SetAlignment call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long alignment0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&alignment0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &alignment0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxQueryLayoutInfoEvent::SetAlignment((wxLayoutAlignment) alignment0)\n\n");
				#endif

				((wxQueryLayoutInfoEvent_php*)native_object)->SetAlignment((wxLayoutAlignment) alignment0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxQueryLayoutInfoEvent::SetAlignment\n");
	}
}
/* }}} */

/* {{{ proto  wxQueryLayoutInfoEvent::SetFlags(int flags)
   Sets the flags associated with this event. */
PHP_METHOD(php_wxQueryLayoutInfoEvent, SetFlags)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::SetFlags\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxQueryLayoutInfoEvent* current_object;
	wxphp_object_type current_object_type;
	wxQueryLayoutInfoEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxQueryLayoutInfoEvent::SetFlags call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&flags0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxQueryLayoutInfoEvent::SetFlags((int) flags0)\n\n");
				#endif

				((wxQueryLayoutInfoEvent_php*)native_object)->SetFlags((int) flags0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxQueryLayoutInfoEvent::SetFlags\n");
	}
}
/* }}} */

/* {{{ proto  wxQueryLayoutInfoEvent::SetOrientation(wxLayoutOrientation orientation)
   Call this to specify the orientation of the window. */
PHP_METHOD(php_wxQueryLayoutInfoEvent, SetOrientation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::SetOrientation\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxQueryLayoutInfoEvent* current_object;
	wxphp_object_type current_object_type;
	wxQueryLayoutInfoEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxQueryLayoutInfoEvent::SetOrientation call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long orientation0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&orientation0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &orientation0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxQueryLayoutInfoEvent::SetOrientation((wxLayoutOrientation) orientation0)\n\n");
				#endif

				((wxQueryLayoutInfoEvent_php*)native_object)->SetOrientation((wxLayoutOrientation) orientation0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxQueryLayoutInfoEvent::SetOrientation\n");
	}
}
/* }}} */

/* {{{ proto  wxQueryLayoutInfoEvent::SetRequestedLength(int length)
   Sets the requested length of the window in the direction of the window orientation. */
PHP_METHOD(php_wxQueryLayoutInfoEvent, SetRequestedLength)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::SetRequestedLength\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxQueryLayoutInfoEvent* current_object;
	wxphp_object_type current_object_type;
	wxQueryLayoutInfoEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxQueryLayoutInfoEvent::SetRequestedLength call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long length0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&length0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &length0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxQueryLayoutInfoEvent::SetRequestedLength((int) length0)\n\n");
				#endif

				((wxQueryLayoutInfoEvent_php*)native_object)->SetRequestedLength((int) length0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxQueryLayoutInfoEvent::SetRequestedLength\n");
	}
}
/* }}} */

/* {{{ proto  wxQueryLayoutInfoEvent::SetSize(wxSize size)
   Call this to let the calling code know what the size of the window is. */
PHP_METHOD(php_wxQueryLayoutInfoEvent, SetSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::SetSize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxQueryLayoutInfoEvent* current_object;
	wxphp_object_type current_object_type;
	wxQueryLayoutInfoEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxQueryLayoutInfoEvent::SetSize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXQUERYLAYOUTINFOEVENT_TYPE){
				references = &((wxQueryLayoutInfoEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* size0 = 0;
	wxSize* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&size0, php_wxSize_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &size0, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxSize*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxQueryLayoutInfoEvent::SetSize(*(wxSize*) object_pointer0_0)\n\n");
				#endif

				((wxQueryLayoutInfoEvent_php*)native_object)->SetSize(*(wxSize*) object_pointer0_0);

				references->AddReference(size0, "wxQueryLayoutInfoEvent::SetSize at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxQueryLayoutInfoEvent::SetSize\n");
	}
}
/* }}} */

/* {{{ proto  wxQueryLayoutInfoEvent::wxQueryLayoutInfoEvent(int id)
   Constructor. */
PHP_METHOD(php_wxQueryLayoutInfoEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxQueryLayoutInfoEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxQueryLayoutInfoEvent* current_object;
	wxQueryLayoutInfoEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&id0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxQueryLayoutInfoEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindowID) id0)\n");
				#endif

				native_object = new wxQueryLayoutInfoEvent_php((wxWindowID) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxQueryLayoutInfoEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxCalculateLayoutEvent_free(void *object TSRMLS_DC) 
{
    zo_wxCalculateLayoutEvent* custom_object = (zo_wxCalculateLayoutEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCalculateLayoutEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxCalculateLayoutEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxCalculateLayoutEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxCalculateLayoutEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxCalculateLayoutEvent* custom_object;
    custom_object = (zo_wxCalculateLayoutEvent*) emalloc(sizeof(zo_wxCalculateLayoutEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxCalculateLayoutEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXCALCULATELAYOUTEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxCalculateLayoutEvent::GetFlags()
   Returns the flags associated with this event. */
PHP_METHOD(php_wxCalculateLayoutEvent, GetFlags)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalculateLayoutEvent::GetFlags\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCalculateLayoutEvent* current_object;
	wxphp_object_type current_object_type;
	wxCalculateLayoutEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCalculateLayoutEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCalculateLayoutEvent::GetFlags call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxCalculateLayoutEvent::GetFlags())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxCalculateLayoutEvent_php*)native_object)->GetFlags());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCalculateLayoutEvent::GetFlags\n");
	}
}
/* }}} */

/* {{{ proto wxRect wxCalculateLayoutEvent::GetRect()
   Before the event handler is entered, returns the remaining parent client area that the window could occupy. */
PHP_METHOD(php_wxCalculateLayoutEvent, GetRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalculateLayoutEvent::GetRect\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCalculateLayoutEvent* current_object;
	wxphp_object_type current_object_type;
	wxCalculateLayoutEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCalculateLayoutEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCalculateLayoutEvent::GetRect call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCalculateLayoutEvent::GetRect() to return new object\n\n");
				#endif

				wxRect value_to_return0;
				value_to_return0 = ((wxCalculateLayoutEvent_php*)native_object)->GetRect();
				void* ptr = safe_emalloc(1, sizeof(wxRect_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxRect));
				object_init_ex(return_value, php_wxRect_entry);
				((wxRect_php*)ptr)->phpObj = return_value;
				((wxRect_php*)ptr)->InitProperties();
				zo_wxRect* zo0 = (zo_wxRect*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxRect_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCalculateLayoutEvent::GetRect\n");
	}
}
/* }}} */

/* {{{ proto  wxCalculateLayoutEvent::SetFlags(int flags)
   Sets the flags associated with this event. */
PHP_METHOD(php_wxCalculateLayoutEvent, SetFlags)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalculateLayoutEvent::SetFlags\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCalculateLayoutEvent* current_object;
	wxphp_object_type current_object_type;
	wxCalculateLayoutEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCalculateLayoutEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCalculateLayoutEvent::SetFlags call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&flags0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCalculateLayoutEvent::SetFlags((int) flags0)\n\n");
				#endif

				((wxCalculateLayoutEvent_php*)native_object)->SetFlags((int) flags0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCalculateLayoutEvent::SetFlags\n");
	}
}
/* }}} */

/* {{{ proto  wxCalculateLayoutEvent::SetRect(wxRect rect)
   Call this to specify the new remaining parent client area, after the space occupied by the window has been subtracted. */
PHP_METHOD(php_wxCalculateLayoutEvent, SetRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalculateLayoutEvent::SetRect\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCalculateLayoutEvent* current_object;
	wxphp_object_type current_object_type;
	wxCalculateLayoutEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxCalculateLayoutEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxCalculateLayoutEvent::SetRect call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXCALCULATELAYOUTEVENT_TYPE){
				references = &((wxCalculateLayoutEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* rect0 = 0;
	wxRect* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&rect0, php_wxRect_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &rect0, php_wxRect_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(rect0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRect*) zend_object_store_get_object(rect0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRect*) zend_object_store_get_object(rect0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxRect*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'rect' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(rect0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'rect' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxCalculateLayoutEvent::SetRect(*(wxRect*) object_pointer0_0)\n\n");
				#endif

				((wxCalculateLayoutEvent_php*)native_object)->SetRect(*(wxRect*) object_pointer0_0);

				references->AddReference(rect0, "wxCalculateLayoutEvent::SetRect at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxCalculateLayoutEvent::SetRect\n");
	}
}
/* }}} */

/* {{{ proto  wxCalculateLayoutEvent::wxCalculateLayoutEvent(int id)
   Constructor. */
PHP_METHOD(php_wxCalculateLayoutEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxCalculateLayoutEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxCalculateLayoutEvent* current_object;
	wxCalculateLayoutEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&id0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxCalculateLayoutEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindowID) id0)\n");
				#endif

				native_object = new wxCalculateLayoutEvent_php((wxWindowID) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxCalculateLayoutEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxCalculateLayoutEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxListEvent_free(void *object TSRMLS_DC) 
{
    zo_wxListEvent* custom_object = (zo_wxListEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxListEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxListEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxListEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxListEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxListEvent* custom_object;
    custom_object = (zo_wxListEvent*) emalloc(sizeof(zo_wxListEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxListEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXLISTEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxListEvent::GetCacheFrom()
   For EVT_LIST_CACHE_HINT event only: return the first item which the list control advises us to cache. */
PHP_METHOD(php_wxListEvent, GetCacheFrom)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetCacheFrom\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxphp_object_type current_object_type;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxListEvent::GetCacheFrom call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXLISTEVENT_TYPE){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetCacheFrom())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxListEvent_php*)native_object)->GetCacheFrom());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxListEvent::GetCacheFrom\n");
	}
}
/* }}} */

/* {{{ proto int wxListEvent::GetCacheTo()
   For EVT_LIST_CACHE_HINT event only: return the last item (inclusive) which the list control advises us to cache. */
PHP_METHOD(php_wxListEvent, GetCacheTo)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetCacheTo\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxphp_object_type current_object_type;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxListEvent::GetCacheTo call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXLISTEVENT_TYPE){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetCacheTo())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxListEvent_php*)native_object)->GetCacheTo());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxListEvent::GetCacheTo\n");
	}
}
/* }}} */

/* {{{ proto int wxListEvent::GetColumn()
   The column position: it is only used with COL events. */
PHP_METHOD(php_wxListEvent, GetColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetColumn\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxphp_object_type current_object_type;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxListEvent::GetColumn call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXLISTEVENT_TYPE){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetColumn())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxListEvent_php*)native_object)->GetColumn());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxListEvent::GetColumn\n");
	}
}
/* }}} */

/* {{{ proto int wxListEvent::GetImage()
   The image. */
PHP_METHOD(php_wxListEvent, GetImage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetImage\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxphp_object_type current_object_type;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxListEvent::GetImage call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXLISTEVENT_TYPE){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetImage())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxListEvent_php*)native_object)->GetImage());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxListEvent::GetImage\n");
	}
}
/* }}} */

/* {{{ proto int wxListEvent::GetIndex()
   The item index. */
PHP_METHOD(php_wxListEvent, GetIndex)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetIndex\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxphp_object_type current_object_type;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxListEvent::GetIndex call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXLISTEVENT_TYPE){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetIndex())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxListEvent_php*)native_object)->GetIndex());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxListEvent::GetIndex\n");
	}
}
/* }}} */

/* {{{ proto wxListItem wxListEvent::GetItem()
   An item object, used by some events. */
PHP_METHOD(php_wxListEvent, GetItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxphp_object_type current_object_type;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxListEvent::GetItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXLISTEVENT_TYPE){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxListEvent::GetItem() to return object reference\n\n");
				#endif

				wxListItem_php* value_to_return0;
				value_to_return0 = (wxListItem_php*) &((wxListEvent_php*)native_object)->GetItem();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxListItem_entry);
					((zo_wxListItem*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxListItem_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxListEvent::GetItem at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxListEvent::GetItem\n");
	}
}
/* }}} */

/* {{{ proto int wxListEvent::GetKeyCode()
   Key code if the event is a keypress event. */
PHP_METHOD(php_wxListEvent, GetKeyCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetKeyCode\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxphp_object_type current_object_type;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxListEvent::GetKeyCode call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXLISTEVENT_TYPE){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetKeyCode())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxListEvent_php*)native_object)->GetKeyCode());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxListEvent::GetKeyCode\n");
	}
}
/* }}} */

/* {{{ proto string wxListEvent::GetLabel()
   The (new) item label for EVT_LIST_END_LABEL_EDIT event. */
PHP_METHOD(php_wxListEvent, GetLabel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetLabel\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxphp_object_type current_object_type;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxListEvent::GetLabel call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXLISTEVENT_TYPE){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxListEvent::GetLabel().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxListEvent_php*)native_object)->GetLabel();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxListEvent::GetLabel\n");
	}
}
/* }}} */

/* {{{ proto int wxListEvent::GetMask()
   The mask. */
PHP_METHOD(php_wxListEvent, GetMask)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetMask\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxphp_object_type current_object_type;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxListEvent::GetMask call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXLISTEVENT_TYPE){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxListEvent::GetMask())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxListEvent_php*)native_object)->GetMask());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxListEvent::GetMask\n");
	}
}
/* }}} */

/* {{{ proto wxPoint wxListEvent::GetPoint()
   The position of the mouse pointer if the event is a drag event. */
PHP_METHOD(php_wxListEvent, GetPoint)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetPoint\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxphp_object_type current_object_type;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxListEvent::GetPoint call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXLISTEVENT_TYPE){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxListEvent::GetPoint() to return new object\n\n");
				#endif

				wxPoint value_to_return0;
				value_to_return0 = ((wxListEvent_php*)native_object)->GetPoint();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				((wxPoint_php*)ptr)->phpObj = return_value;
				((wxPoint_php*)ptr)->InitProperties();
				zo_wxPoint* zo0 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxPoint_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxListEvent::GetPoint\n");
	}
}
/* }}} */

/* {{{ proto string wxListEvent::GetText()
   The text. */
PHP_METHOD(php_wxListEvent, GetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::GetText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxphp_object_type current_object_type;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxListEvent::GetText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXLISTEVENT_TYPE){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxListEvent::GetText().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxListEvent_php*)native_object)->GetText();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxListEvent::GetText\n");
	}
}
/* }}} */

/* {{{ proto bool wxListEvent::IsEditCancelled()
   This method only makes sense for EVT_LIST_END_LABEL_EDIT message and returns true if it the label editing has been cancelled by the user (GetLabel() returns an empty string in this case but it doesn't allow the application to distinguish between really cancelling the edit and the admittedly rare case when the user wants to rename it to an empty string). */
PHP_METHOD(php_wxListEvent, IsEditCancelled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::IsEditCancelled\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxphp_object_type current_object_type;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxListEvent::IsEditCancelled call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXLISTEVENT_TYPE){
				references = &((wxListEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxListEvent::IsEditCancelled())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxListEvent_php*)native_object)->IsEditCancelled());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxListEvent::IsEditCancelled\n");
	}
}
/* }}} */

/* {{{ proto  wxListEvent::wxListEvent(int commandType, int id)
   Constructor. */
PHP_METHOD(php_wxListEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxListEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxListEvent* current_object;
	wxListEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandType0, &id0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxListEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif

				native_object = new wxListEvent_php((wxEventType) commandType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0)\n");
				#endif

				native_object = new wxListEvent_php((wxEventType) commandType0, (int) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxListEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxListEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMediaEvent_free(void *object TSRMLS_DC) 
{
    zo_wxMediaEvent* custom_object = (zo_wxMediaEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMediaEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMediaEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxMediaEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMediaEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxMediaEvent* custom_object;
    custom_object = (zo_wxMediaEvent*) emalloc(sizeof(zo_wxMediaEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxMediaEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXMEDIAEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxMediaEvent::wxMediaEvent(int commandType, int winid)
   Default ctor. */
PHP_METHOD(php_wxMediaEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMediaEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMediaEvent* current_object;
	wxMediaEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandType0;
	long winid0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandType0, &winid0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &winid0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxMediaEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif

				native_object = new wxMediaEvent_php((wxEventType) commandType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) winid0)\n");
				#endif

				native_object = new wxMediaEvent_php((wxEventType) commandType0, (int) winid0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxMediaEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxMediaEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMouseEventsManager_free(void *object TSRMLS_DC) 
{
    zo_wxMouseEventsManager* custom_object = (zo_wxMouseEventsManager*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMouseEventsManager_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMouseEventsManager done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxMouseEventsManager_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMouseEventsManager_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxMouseEventsManager* custom_object;
    custom_object = (zo_wxMouseEventsManager*) emalloc(sizeof(zo_wxMouseEventsManager));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxMouseEventsManager_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXMOUSEEVENTSMANAGER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxMouseEventsManager::Create(wxWindow &win)
   Finishes initialization of the object created using default constructor. */
PHP_METHOD(php_wxMouseEventsManager, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEventsManager::Create\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEventsManager* current_object;
	wxphp_object_type current_object_type;
	wxMouseEventsManager_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseEventsManager*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseEventsManager::Create call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSEEVENTSMANAGER_TYPE){
				references = &((wxMouseEventsManager_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* win0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&win0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'win' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'win' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseEventsManager::Create((wxWindow*) object_pointer0_0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMouseEventsManager_php*)native_object)->Create((wxWindow*) object_pointer0_0));

				references->AddReference(win0, "wxMouseEventsManager::Create at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseEventsManager::Create\n");
	}
}
/* }}} */

/* {{{ proto  wxMouseEventsManager::MouseClickBegin(int item)
   May be overridden to update the state of an item when it is pressed. */
void wxMouseEventsManager_php::MouseClickBegin(int item)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseClickBegin\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseClickBegin", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "MouseClickBegin", 15, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	wxMouseEventsManager::MouseClickBegin(item);
}
/* }}} */

/* {{{ proto  wxMouseEventsManager::MouseClickCancelled(int item)
   Must be overridden to reset the item appearance changed by MouseClickBegin(). */
void wxMouseEventsManager_php::MouseClickCancelled(int item)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseClickCancelled\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseClickCancelled", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "MouseClickCancelled", 19, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	wxMouseEventsManager::MouseClickCancelled(item);
}
/* }}} */

/* {{{ proto bool wxMouseEventsManager::MouseClicked(int item)
   Must be overridden to react to mouse clicks. */
bool wxMouseEventsManager_php::MouseClicked(int item)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseClicked\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseClicked", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "MouseClicked", 12, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxMouseEventsManager::MouseClicked'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto bool wxMouseEventsManager::MouseDragBegin(int item, wxPoint pos)
   Must be overridden to allow or deny dragging of the item. */
bool wxMouseEventsManager_php::MouseDragBegin(int item, const wxPoint& pos)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseDragBegin\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[2];
	zval *arguments[2];
	
	//Initilize arguments array
	for(int i=0; i<2; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseDragBegin", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
	object_init_ex(arguments[1], php_wxPoint_entry);
	((zo_wxPoint*) zend_object_store_get_object(arguments[1] TSRMLS_CC))->native_object = (wxPoint_php*) &pos;
		
	for(int i=0; i<2; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "MouseDragBegin", 14, &return_value, 2, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<2; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxMouseEventsManager::MouseDragBegin'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto  wxMouseEventsManager::MouseDragCancelled(int item)
   Must be overridden to handle cancellation of mouse dragging. */
void wxMouseEventsManager_php::MouseDragCancelled(int item)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseDragCancelled\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseDragCancelled", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "MouseDragCancelled", 18, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxMouseEventsManager::MouseDragCancelled'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return;
	
}
/* }}} */

/* {{{ proto  wxMouseEventsManager::MouseDragEnd(int item, wxPoint pos)
   Must be overridden to handle item drop. */
void wxMouseEventsManager_php::MouseDragEnd(int item, const wxPoint& pos)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseDragEnd\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[2];
	zval *arguments[2];
	
	//Initilize arguments array
	for(int i=0; i<2; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseDragEnd", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
	object_init_ex(arguments[1], php_wxPoint_entry);
	((zo_wxPoint*) zend_object_store_get_object(arguments[1] TSRMLS_CC))->native_object = (wxPoint_php*) &pos;
		
	for(int i=0; i<2; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "MouseDragEnd", 12, &return_value, 2, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<2; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxMouseEventsManager::MouseDragEnd'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return;
	
}
/* }}} */

/* {{{ proto  wxMouseEventsManager::MouseDragging(int item, wxPoint pos)
   Must be overridden to provide feed back while an item is being dragged. */
void wxMouseEventsManager_php::MouseDragging(int item, const wxPoint& pos)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseDragging\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[2];
	zval *arguments[2];
	
	//Initilize arguments array
	for(int i=0; i<2; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseDragging", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], item);
	object_init_ex(arguments[1], php_wxPoint_entry);
	((zo_wxPoint*) zend_object_store_get_object(arguments[1] TSRMLS_CC))->native_object = (wxPoint_php*) &pos;
		
	for(int i=0; i<2; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "MouseDragging", 13, &return_value, 2, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<2; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxMouseEventsManager::MouseDragging'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return;
	
}
/* }}} */

/* {{{ proto int wxMouseEventsManager::MouseHitTest(wxPoint pos)
   Must be overridden to return the item at the given position. */
int wxMouseEventsManager_php::MouseHitTest(const wxPoint& pos)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMouseEventsManager::MouseHitTest\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "MouseHitTest", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxPoint_entry);
	((zo_wxPoint*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxPoint_php*) &pos;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "MouseHitTest", 12, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxMouseEventsManager::MouseHitTest'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return (int) Z_LVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto  wxMouseEventsManager::wxMouseEventsManager()
   Default constructor. */
PHP_METHOD(php_wxMouseEventsManager, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseEventsManager::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseEventsManager* current_object;
	wxMouseEventsManager_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* win1 = 0;
	wxWindow* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&win1)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(win1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(win1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxWindow*) argument_native_object;
					if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'win' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'win' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxMouseEventsManager_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0)\n");
				#endif

				native_object = new wxMouseEventsManager_php((wxWindow*) object_pointer1_0);

				native_object->references.Initialize();
				((wxMouseEventsManager_php*) native_object)->references.AddReference(win1, "wxMouseEventsManager::wxMouseEventsManager at call with 1 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxMouseEventsManager*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxMouseEventsManager::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMouseState_free(void *object TSRMLS_DC) 
{
    zo_wxMouseState* custom_object = (zo_wxMouseState*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMouseState_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMouseState done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxMouseState_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMouseState_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxMouseState* custom_object;
    custom_object = (zo_wxMouseState*) emalloc(sizeof(zo_wxMouseState));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxMouseState_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXMOUSESTATE_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxMouseState::Aux1IsDown()
   Returns true if the first extra button mouse button is currently down. */
PHP_METHOD(php_wxMouseState, Aux1IsDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::Aux1IsDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::Aux1IsDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseState::Aux1IsDown())\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Aux1IsDown());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseState_php*)native_object)->Aux1IsDown());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::Aux1IsDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseState::Aux2IsDown()
   Returns true if the second extra button mouse button is currently down. */
PHP_METHOD(php_wxMouseState, Aux2IsDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::Aux2IsDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::Aux2IsDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseState::Aux2IsDown())\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->Aux2IsDown());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseState_php*)native_object)->Aux2IsDown());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::Aux2IsDown\n");
	}
}
/* }}} */

/* {{{ proto wxPoint wxMouseState::GetPosition()
   Returns the physical mouse position. */
PHP_METHOD(php_wxMouseState, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::GetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::GetPosition() to return new object\n\n");
				#endif

				wxPoint value_to_return0;
				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					value_to_return0 = ((wxMouseEvent_php*)native_object)->GetPosition();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					((wxPoint_php*)ptr)->phpObj = return_value;
					((wxPoint_php*)ptr)->InitProperties();
					zo_wxPoint* zo0 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
					zo0->native_object = (wxPoint_php*) ptr;
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					value_to_return0 = ((wxMouseState_php*)native_object)->GetPosition();
					void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
					memcpy(ptr, &value_to_return0, sizeof(wxPoint));
					object_init_ex(return_value, php_wxPoint_entry);
					((wxPoint_php*)ptr)->phpObj = return_value;
					((wxPoint_php*)ptr)->InitProperties();
					zo_wxPoint* zo0 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
					zo0->native_object = (wxPoint_php*) ptr;
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::GetPosition\n");
	}
}
/* }}} */

/* {{{ proto int wxMouseState::GetX()
   Returns X coordinate of the physical mouse event position. */
PHP_METHOD(php_wxMouseState, GetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::GetX\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::GetX call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseState::GetX())\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_LONG(return_value, ((wxMouseEvent_php*)native_object)->GetX());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_LONG(return_value, ((wxMouseState_php*)native_object)->GetX());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::GetX\n");
	}
}
/* }}} */

/* {{{ proto int wxMouseState::GetY()
   Returns Y coordinate of the physical mouse event position. */
PHP_METHOD(php_wxMouseState, GetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::GetY\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::GetY call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxMouseState::GetY())\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_LONG(return_value, ((wxMouseEvent_php*)native_object)->GetY());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_LONG(return_value, ((wxMouseState_php*)native_object)->GetY());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::GetY\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseState::LeftIsDown()
   Returns true if the left mouse button is currently down. */
PHP_METHOD(php_wxMouseState, LeftIsDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::LeftIsDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::LeftIsDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseState::LeftIsDown())\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->LeftIsDown());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseState_php*)native_object)->LeftIsDown());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::LeftIsDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseState::MiddleIsDown()
   Returns true if the middle mouse button is currently down. */
PHP_METHOD(php_wxMouseState, MiddleIsDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::MiddleIsDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::MiddleIsDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseState::MiddleIsDown())\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->MiddleIsDown());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseState_php*)native_object)->MiddleIsDown());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::MiddleIsDown\n");
	}
}
/* }}} */

/* {{{ proto bool wxMouseState::RightIsDown()
   Returns true if the right mouse button is currently down. */
PHP_METHOD(php_wxMouseState, RightIsDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::RightIsDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::RightIsDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMouseState::RightIsDown())\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseEvent_php*)native_object)->RightIsDown());
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxMouseState_php*)native_object)->RightIsDown());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::RightIsDown\n");
	}
}
/* }}} */

/* {{{ proto  wxMouseState::SetAux1Down(bool down) */
PHP_METHOD(php_wxMouseState, SetAux1Down)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetAux1Down\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::SetAux1Down call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetAux1Down(down0)\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetAux1Down(down0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetAux1Down(down0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::SetAux1Down\n");
	}
}
/* }}} */

/* {{{ proto  wxMouseState::SetAux2Down(bool down) */
PHP_METHOD(php_wxMouseState, SetAux2Down)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetAux2Down\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::SetAux2Down call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetAux2Down(down0)\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetAux2Down(down0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetAux2Down(down0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::SetAux2Down\n");
	}
}
/* }}} */

/* {{{ proto  wxMouseState::SetLeftDown(bool down) */
PHP_METHOD(php_wxMouseState, SetLeftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetLeftDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::SetLeftDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetLeftDown(down0)\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetLeftDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetLeftDown(down0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::SetLeftDown\n");
	}
}
/* }}} */

/* {{{ proto  wxMouseState::SetMiddleDown(bool down) */
PHP_METHOD(php_wxMouseState, SetMiddleDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetMiddleDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::SetMiddleDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetMiddleDown(down0)\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetMiddleDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetMiddleDown(down0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::SetMiddleDown\n");
	}
}
/* }}} */

/* {{{ proto  wxMouseState::SetPosition(wxPoint pos) */
PHP_METHOD(php_wxMouseState, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::SetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* pos0 = 0;
	wxPoint* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pos0, php_wxPoint_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxPoint*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetPosition(*(wxPoint*) object_pointer0_0)\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetPosition(*(wxPoint*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetPosition(*(wxPoint*) object_pointer0_0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::SetPosition\n");
	}
}
/* }}} */

/* {{{ proto  wxMouseState::SetRightDown(bool down) */
PHP_METHOD(php_wxMouseState, SetRightDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetRightDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::SetRightDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool down0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&down0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &down0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetRightDown(down0)\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetRightDown(down0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetRightDown(down0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::SetRightDown\n");
	}
}
/* }}} */

/* {{{ proto  wxMouseState::SetState(wxMouseState state) */
PHP_METHOD(php_wxMouseState, SetState)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetState\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::SetState call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* state0 = 0;
	wxMouseState* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'o' (&state0)\n");
		#endif

		char parse_parameters_string[] = "o";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &state0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(state0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxMouseState*) zend_object_store_get_object(state0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxMouseState*) zend_object_store_get_object(state0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxMouseState*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXMOUSESTATE_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'state' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(state0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'state' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetState(*(wxMouseState*) object_pointer0_0)\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetState(*(wxMouseState*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetState(*(wxMouseState*) object_pointer0_0);
				}

				references->AddReference(state0, "wxMouseState::SetState at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::SetState\n");
	}
}
/* }}} */

/* {{{ proto  wxMouseState::SetX(int x) */
PHP_METHOD(php_wxMouseState, SetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetX\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::SetX call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&x0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetX((wxCoord) x0)\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetX((wxCoord) x0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetX((wxCoord) x0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::SetX\n");
	}
}
/* }}} */

/* {{{ proto  wxMouseState::SetY(int y) */
PHP_METHOD(php_wxMouseState, SetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::SetY\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxphp_object_type current_object_type;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMouseState::SetY call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMOUSESTATE_TYPE){
				references = &((wxMouseState_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMOUSEEVENT_TYPE) && (!reference_type_found)){
				references = &((wxMouseEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&y0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMouseState::SetY((wxCoord) y0)\n\n");
				#endif

				if(current_object_type == PHP_WXMOUSEEVENT_TYPE)
				{
					((wxMouseEvent_php*)native_object)->SetY((wxCoord) y0);
				}
				else if(current_object_type == PHP_WXMOUSESTATE_TYPE)
				{
					((wxMouseState_php*)native_object)->SetY((wxCoord) y0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMouseState::SetY\n");
	}
}
/* }}} */

/* {{{ proto  wxMouseState::wxMouseState()
   Default constructor. */
PHP_METHOD(php_wxMouseState, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMouseState::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMouseState* current_object;
	wxMouseState_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxMouseState_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxMouseState*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxMouseState::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxProcessEvent_free(void *object TSRMLS_DC) 
{
    zo_wxProcessEvent* custom_object = (zo_wxProcessEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxProcessEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxProcessEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxProcessEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxProcessEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxProcessEvent* custom_object;
    custom_object = (zo_wxProcessEvent*) emalloc(sizeof(zo_wxProcessEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxProcessEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXPROCESSEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxProcessEvent::GetExitCode()
   Returns the exist status. */
PHP_METHOD(php_wxProcessEvent, GetExitCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxProcessEvent::GetExitCode\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxProcessEvent* current_object;
	wxphp_object_type current_object_type;
	wxProcessEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxProcessEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxProcessEvent::GetExitCode call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPROCESSEVENT_TYPE){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxProcessEvent::GetExitCode())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxProcessEvent_php*)native_object)->GetExitCode());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxProcessEvent::GetExitCode\n");
	}
}
/* }}} */

/* {{{ proto int wxProcessEvent::GetPid()
   Returns the process id. */
PHP_METHOD(php_wxProcessEvent, GetPid)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxProcessEvent::GetPid\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxProcessEvent* current_object;
	wxphp_object_type current_object_type;
	wxProcessEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxProcessEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxProcessEvent::GetPid call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPROCESSEVENT_TYPE){
				references = &((wxProcessEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxProcessEvent::GetPid())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxProcessEvent_php*)native_object)->GetPid());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxProcessEvent::GetPid\n");
	}
}
/* }}} */

/* {{{ proto  wxProcessEvent::wxProcessEvent(int id, int pid, int exitcode)
   Constructor. */
PHP_METHOD(php_wxProcessEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxProcessEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxProcessEvent* current_object;
	wxProcessEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long id0;
	long pid0;
	long exitcode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lll' (&id0, &pid0, &exitcode0)\n");
		#endif

		char parse_parameters_string[] = "|lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0, &pid0, &exitcode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxProcessEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif

				native_object = new wxProcessEvent_php((int) id0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0, (int) pid0)\n");
				#endif

				native_object = new wxProcessEvent_php((int) id0, (int) pid0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0, (int) pid0, (int) exitcode0)\n");
				#endif

				native_object = new wxProcessEvent_php((int) id0, (int) pid0, (int) exitcode0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxProcessEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxProcessEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxRibbonBarEvent_free(void *object TSRMLS_DC) 
{
    zo_wxRibbonBarEvent* custom_object = (zo_wxRibbonBarEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxRibbonBarEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxRibbonBarEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxRibbonBarEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxRibbonBarEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxRibbonBarEvent* custom_object;
    custom_object = (zo_wxRibbonBarEvent*) emalloc(sizeof(zo_wxRibbonBarEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxRibbonBarEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXRIBBONBAREVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxRibbonPage wxRibbonBarEvent::GetPage()
   Returns the page being changed to, or being clicked on. */
PHP_METHOD(php_wxRibbonBarEvent, GetPage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonBarEvent::GetPage\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxRibbonBarEvent* current_object;
	wxphp_object_type current_object_type;
	wxRibbonBarEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxRibbonBarEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxRibbonBarEvent::GetPage call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXRIBBONBAREVENT_TYPE){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonBarEvent::GetPage() to return object pointer\n\n");
				#endif

				wxRibbonPage_php* value_to_return0;
				value_to_return0 = (wxRibbonPage_php*) ((wxRibbonBarEvent_php*)native_object)->GetPage();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxRibbonPage_entry);
					((zo_wxRibbonPage*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonPage_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxRibbonBarEvent::GetPage at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxRibbonBarEvent::GetPage\n");
	}
}
/* }}} */

/* {{{ proto  wxRibbonBarEvent::SetPage(wxRibbonPage &page)
   Sets the page relating to this event. */
PHP_METHOD(php_wxRibbonBarEvent, SetPage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonBarEvent::SetPage\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxRibbonBarEvent* current_object;
	wxphp_object_type current_object_type;
	wxRibbonBarEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxRibbonBarEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxRibbonBarEvent::SetPage call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXRIBBONBAREVENT_TYPE){
				references = &((wxRibbonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* page0 = 0;
	wxRibbonPage* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&page0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &page0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(page0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRibbonPage*) zend_object_store_get_object(page0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRibbonPage*) zend_object_store_get_object(page0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxRibbonPage*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONPAGE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'page' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(page0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'page' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonBarEvent::SetPage((wxRibbonPage*) object_pointer0_0)\n\n");
				#endif

				((wxRibbonBarEvent_php*)native_object)->SetPage((wxRibbonPage*) object_pointer0_0);

				references->AddReference(page0, "wxRibbonBarEvent::SetPage at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxRibbonBarEvent::SetPage\n");
	}
}
/* }}} */

/* {{{ proto  wxRibbonBarEvent::wxRibbonBarEvent(int command_type, int win_id, wxRibbonPage &page)
   Constructor. */
PHP_METHOD(php_wxRibbonBarEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonBarEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxRibbonBarEvent* current_object;
	wxRibbonBarEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long command_type0;
	long win_id0;
	zval* page0 = 0;
	wxRibbonPage* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llz' (&command_type0, &win_id0, &page0)\n");
		#endif

		char parse_parameters_string[] = "|llz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &command_type0, &win_id0, &page0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(page0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRibbonPage*) zend_object_store_get_object(page0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRibbonPage*) zend_object_store_get_object(page0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxRibbonPage*) argument_native_object;
					if (!object_pointer0_2 || (argument_type != PHP_WXRIBBONPAGE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'page' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(page0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'page' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxRibbonBarEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0)\n");
				#endif

				native_object = new wxRibbonBarEvent_php((wxEventType) command_type0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0)\n");
				#endif

				native_object = new wxRibbonBarEvent_php((wxEventType) command_type0, (int) win_id0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0, (wxRibbonPage*) object_pointer0_2)\n");
				#endif

				native_object = new wxRibbonBarEvent_php((wxEventType) command_type0, (int) win_id0, (wxRibbonPage*) object_pointer0_2);

				native_object->references.Initialize();
				((wxRibbonBarEvent_php*) native_object)->references.AddReference(page0, "wxRibbonBarEvent::wxRibbonBarEvent at call with 3 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxRibbonBarEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxRibbonBarEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxRibbonButtonBarEvent_free(void *object TSRMLS_DC) 
{
    zo_wxRibbonButtonBarEvent* custom_object = (zo_wxRibbonButtonBarEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxRibbonButtonBarEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxRibbonButtonBarEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxRibbonButtonBarEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxRibbonButtonBarEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxRibbonButtonBarEvent* custom_object;
    custom_object = (zo_wxRibbonButtonBarEvent*) emalloc(sizeof(zo_wxRibbonButtonBarEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxRibbonButtonBarEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXRIBBONBUTTONBAREVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxRibbonButtonBarEvent::wxRibbonButtonBarEvent(int command_type, int win_id, wxRibbonButtonBar &bar, wxRibbonButtonBarButtonBase &button)
   Constructor. */
PHP_METHOD(php_wxRibbonButtonBarEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonButtonBarEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxRibbonButtonBarEvent* current_object;
	wxRibbonButtonBarEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long command_type0;
	long win_id0;
	zval* bar0 = 0;
	wxRibbonButtonBar* object_pointer0_2 = 0;
	zval* button0 = 0;
	wxRibbonButtonBarButtonBase* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llzz' (&command_type0, &win_id0, &bar0, &button0)\n");
		#endif

		char parse_parameters_string[] = "|llzz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &command_type0, &win_id0, &bar0, &button0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(bar0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRibbonButtonBar*) zend_object_store_get_object(bar0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRibbonButtonBar*) zend_object_store_get_object(bar0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxRibbonButtonBar*) argument_native_object;
					if (!object_pointer0_2 || (argument_type != PHP_WXRIBBONBUTTONBAR_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'bar' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bar0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'bar' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(button0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRibbonButtonBarButtonBase*) zend_object_store_get_object(button0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRibbonButtonBarButtonBase*) zend_object_store_get_object(button0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxRibbonButtonBarButtonBase*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXRIBBONBUTTONBARBUTTONBASE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'button' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(button0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'button' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxRibbonButtonBarEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0)\n");
				#endif

				native_object = new wxRibbonButtonBarEvent_php((wxEventType) command_type0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0)\n");
				#endif

				native_object = new wxRibbonButtonBarEvent_php((wxEventType) command_type0, (int) win_id0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0, (wxRibbonButtonBar*) object_pointer0_2)\n");
				#endif

				native_object = new wxRibbonButtonBarEvent_php((wxEventType) command_type0, (int) win_id0, (wxRibbonButtonBar*) object_pointer0_2);

				native_object->references.Initialize();
				((wxRibbonButtonBarEvent_php*) native_object)->references.AddReference(bar0, "wxRibbonButtonBarEvent::wxRibbonButtonBarEvent at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0, (wxRibbonButtonBar*) object_pointer0_2, (wxRibbonButtonBarButtonBase*) object_pointer0_3)\n");
				#endif

				native_object = new wxRibbonButtonBarEvent_php((wxEventType) command_type0, (int) win_id0, (wxRibbonButtonBar*) object_pointer0_2, (wxRibbonButtonBarButtonBase*) object_pointer0_3);

				native_object->references.Initialize();
				((wxRibbonButtonBarEvent_php*) native_object)->references.AddReference(bar0, "wxRibbonButtonBarEvent::wxRibbonButtonBarEvent at call with 4 argument(s)");
				((wxRibbonButtonBarEvent_php*) native_object)->references.AddReference(button0, "wxRibbonButtonBarEvent::wxRibbonButtonBarEvent at call with 4 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxRibbonButtonBarEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxRibbonButtonBarEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto wxRibbonButtonBar wxRibbonButtonBarEvent::GetBar()
   Returns the bar which contains the button which the event relates to. */
PHP_METHOD(php_wxRibbonButtonBarEvent, GetBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonButtonBarEvent::GetBar\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxRibbonButtonBarEvent* current_object;
	wxphp_object_type current_object_type;
	wxRibbonButtonBarEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxRibbonButtonBarEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxRibbonButtonBarEvent::GetBar call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonButtonBarEvent::GetBar() to return object pointer\n\n");
				#endif

				wxRibbonButtonBar_php* value_to_return0;
				value_to_return0 = (wxRibbonButtonBar_php*) ((wxRibbonButtonBarEvent_php*)native_object)->GetBar();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxRibbonButtonBar_entry);
					((zo_wxRibbonButtonBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonButtonBar_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxRibbonButtonBarEvent::GetBar at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxRibbonButtonBarEvent::GetBar\n");
	}
}
/* }}} */

/* {{{ proto bool wxRibbonButtonBarEvent::PopupMenu(wxMenu &menu)
   Display a popup menu as a result of this (dropdown clicked) event. */
PHP_METHOD(php_wxRibbonButtonBarEvent, PopupMenu)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonButtonBarEvent::PopupMenu\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxRibbonButtonBarEvent* current_object;
	wxphp_object_type current_object_type;
	wxRibbonButtonBarEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxRibbonButtonBarEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxRibbonButtonBarEvent::PopupMenu call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* menu0 = 0;
	wxMenu* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&menu0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &menu0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(menu0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxMenu*) zend_object_store_get_object(menu0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxMenu*) zend_object_store_get_object(menu0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxMenu*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXMENU_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'menu' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(menu0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'menu' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxRibbonButtonBarEvent::PopupMenu((wxMenu*) object_pointer0_0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxRibbonButtonBarEvent_php*)native_object)->PopupMenu((wxMenu*) object_pointer0_0));

				references->AddReference(menu0, "wxRibbonButtonBarEvent::PopupMenu at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxRibbonButtonBarEvent::PopupMenu\n");
	}
}
/* }}} */

/* {{{ proto  wxRibbonButtonBarEvent::SetBar(wxRibbonButtonBar &bar)
   Sets the button bar relating to this event. */
PHP_METHOD(php_wxRibbonButtonBarEvent, SetBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonButtonBarEvent::SetBar\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxRibbonButtonBarEvent* current_object;
	wxphp_object_type current_object_type;
	wxRibbonButtonBarEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxRibbonButtonBarEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxRibbonButtonBarEvent::SetBar call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXRIBBONBUTTONBAREVENT_TYPE){
				references = &((wxRibbonButtonBarEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* bar0 = 0;
	wxRibbonButtonBar* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&bar0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bar0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bar0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRibbonButtonBar*) zend_object_store_get_object(bar0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRibbonButtonBar*) zend_object_store_get_object(bar0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxRibbonButtonBar*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONBUTTONBAR_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'bar' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bar0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'bar' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonButtonBarEvent::SetBar((wxRibbonButtonBar*) object_pointer0_0)\n\n");
				#endif

				((wxRibbonButtonBarEvent_php*)native_object)->SetBar((wxRibbonButtonBar*) object_pointer0_0);

				references->AddReference(bar0, "wxRibbonButtonBarEvent::SetBar at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxRibbonButtonBarEvent::SetBar\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxRibbonGalleryEvent_free(void *object TSRMLS_DC) 
{
    zo_wxRibbonGalleryEvent* custom_object = (zo_wxRibbonGalleryEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxRibbonGalleryEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxRibbonGalleryEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxRibbonGalleryEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxRibbonGalleryEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxRibbonGalleryEvent* custom_object;
    custom_object = (zo_wxRibbonGalleryEvent*) emalloc(sizeof(zo_wxRibbonGalleryEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxRibbonGalleryEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXRIBBONGALLERYEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxRibbonGallery wxRibbonGalleryEvent::GetGallery()
   Returns the gallery which the event relates to. */
PHP_METHOD(php_wxRibbonGalleryEvent, GetGallery)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonGalleryEvent::GetGallery\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxRibbonGalleryEvent* current_object;
	wxphp_object_type current_object_type;
	wxRibbonGalleryEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxRibbonGalleryEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxRibbonGalleryEvent::GetGallery call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonGalleryEvent::GetGallery() to return object pointer\n\n");
				#endif

				wxRibbonGallery_php* value_to_return0;
				value_to_return0 = (wxRibbonGallery_php*) ((wxRibbonGalleryEvent_php*)native_object)->GetGallery();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxRibbonGallery_entry);
					((zo_wxRibbonGallery*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonGallery_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxRibbonGalleryEvent::GetGallery at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxRibbonGalleryEvent::GetGallery\n");
	}
}
/* }}} */

/* {{{ proto wxRibbonGalleryItem wxRibbonGalleryEvent::GetGalleryItem()
   Returns the gallery item which the event relates to, or NULL if it does not relate to an item. */
PHP_METHOD(php_wxRibbonGalleryEvent, GetGalleryItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonGalleryEvent::GetGalleryItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxRibbonGalleryEvent* current_object;
	wxphp_object_type current_object_type;
	wxRibbonGalleryEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxRibbonGalleryEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxRibbonGalleryEvent::GetGalleryItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonGalleryEvent::GetGalleryItem() to return object pointer\n\n");
				#endif

				wxRibbonGalleryItem_php* value_to_return0;
				value_to_return0 = (wxRibbonGalleryItem_php*) ((wxRibbonGalleryEvent_php*)native_object)->GetGalleryItem();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxRibbonGalleryItem_entry);
					((zo_wxRibbonGalleryItem*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonGalleryItem_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxRibbonGalleryEvent::GetGalleryItem at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxRibbonGalleryEvent::GetGalleryItem\n");
	}
}
/* }}} */

/* {{{ proto  wxRibbonGalleryEvent::SetGallery(wxRibbonGallery &gallery)
   Sets the gallery relating to this event. */
PHP_METHOD(php_wxRibbonGalleryEvent, SetGallery)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonGalleryEvent::SetGallery\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxRibbonGalleryEvent* current_object;
	wxphp_object_type current_object_type;
	wxRibbonGalleryEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxRibbonGalleryEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxRibbonGalleryEvent::SetGallery call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* gallery0 = 0;
	wxRibbonGallery* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&gallery0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &gallery0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(gallery0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRibbonGallery*) zend_object_store_get_object(gallery0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRibbonGallery*) zend_object_store_get_object(gallery0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxRibbonGallery*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONGALLERY_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'gallery' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(gallery0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'gallery' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonGalleryEvent::SetGallery((wxRibbonGallery*) object_pointer0_0)\n\n");
				#endif

				((wxRibbonGalleryEvent_php*)native_object)->SetGallery((wxRibbonGallery*) object_pointer0_0);

				references->AddReference(gallery0, "wxRibbonGalleryEvent::SetGallery at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxRibbonGalleryEvent::SetGallery\n");
	}
}
/* }}} */

/* {{{ proto  wxRibbonGalleryEvent::SetGalleryItem(wxRibbonGalleryItem &item)
   Sets the gallery item relating to this event. */
PHP_METHOD(php_wxRibbonGalleryEvent, SetGalleryItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonGalleryEvent::SetGalleryItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxRibbonGalleryEvent* current_object;
	wxphp_object_type current_object_type;
	wxRibbonGalleryEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxRibbonGalleryEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxRibbonGalleryEvent::SetGalleryItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXRIBBONGALLERYEVENT_TYPE){
				references = &((wxRibbonGalleryEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxRibbonGalleryItem* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&item0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRibbonGalleryItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRibbonGalleryItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxRibbonGalleryItem*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXRIBBONGALLERYITEM_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxRibbonGalleryEvent::SetGalleryItem((wxRibbonGalleryItem*) object_pointer0_0)\n\n");
				#endif

				((wxRibbonGalleryEvent_php*)native_object)->SetGalleryItem((wxRibbonGalleryItem*) object_pointer0_0);

				references->AddReference(item0, "wxRibbonGalleryEvent::SetGalleryItem at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxRibbonGalleryEvent::SetGalleryItem\n");
	}
}
/* }}} */

/* {{{ proto  wxRibbonGalleryEvent::wxRibbonGalleryEvent(int command_type, int win_id, wxRibbonGallery &gallery, wxRibbonGalleryItem &item)
   Constructor. */
PHP_METHOD(php_wxRibbonGalleryEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxRibbonGalleryEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxRibbonGalleryEvent* current_object;
	wxRibbonGalleryEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long command_type0;
	long win_id0;
	zval* gallery0 = 0;
	wxRibbonGallery* object_pointer0_2 = 0;
	zval* item0 = 0;
	wxRibbonGalleryItem* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llzz' (&command_type0, &win_id0, &gallery0, &item0)\n");
		#endif

		char parse_parameters_string[] = "|llzz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &command_type0, &win_id0, &gallery0, &item0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(gallery0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRibbonGallery*) zend_object_store_get_object(gallery0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRibbonGallery*) zend_object_store_get_object(gallery0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxRibbonGallery*) argument_native_object;
					if (!object_pointer0_2 || (argument_type != PHP_WXRIBBONGALLERY_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'gallery' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(gallery0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'gallery' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRibbonGalleryItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRibbonGalleryItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxRibbonGalleryItem*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXRIBBONGALLERYITEM_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxRibbonGalleryEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0)\n");
				#endif

				native_object = new wxRibbonGalleryEvent_php((wxEventType) command_type0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0)\n");
				#endif

				native_object = new wxRibbonGalleryEvent_php((wxEventType) command_type0, (int) win_id0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0, (wxRibbonGallery*) object_pointer0_2)\n");
				#endif

				native_object = new wxRibbonGalleryEvent_php((wxEventType) command_type0, (int) win_id0, (wxRibbonGallery*) object_pointer0_2);

				native_object->references.Initialize();
				((wxRibbonGalleryEvent_php*) native_object)->references.AddReference(gallery0, "wxRibbonGalleryEvent::wxRibbonGalleryEvent at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) command_type0, (int) win_id0, (wxRibbonGallery*) object_pointer0_2, (wxRibbonGalleryItem*) object_pointer0_3)\n");
				#endif

				native_object = new wxRibbonGalleryEvent_php((wxEventType) command_type0, (int) win_id0, (wxRibbonGallery*) object_pointer0_2, (wxRibbonGalleryItem*) object_pointer0_3);

				native_object->references.Initialize();
				((wxRibbonGalleryEvent_php*) native_object)->references.AddReference(gallery0, "wxRibbonGalleryEvent::wxRibbonGalleryEvent at call with 4 argument(s)");
				((wxRibbonGalleryEvent_php*) native_object)->references.AddReference(item0, "wxRibbonGalleryEvent::wxRibbonGalleryEvent at call with 4 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxRibbonGalleryEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxRibbonGalleryEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxSashEvent_free(void *object TSRMLS_DC) 
{
    zo_wxSashEvent* custom_object = (zo_wxSashEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSashEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSashEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxSashEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSashEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxSashEvent* custom_object;
    custom_object = (zo_wxSashEvent*) emalloc(sizeof(zo_wxSashEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxSashEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXSASHEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxRect wxSashEvent::GetDragRect()
   Returns the rectangle representing the new size the window would be if the resize was applied. */
PHP_METHOD(php_wxSashEvent, GetDragRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSashEvent::GetDragRect\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSashEvent* current_object;
	wxphp_object_type current_object_type;
	wxSashEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSashEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSashEvent::GetDragRect call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSASHEVENT_TYPE){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSashEvent::GetDragRect() to return new object\n\n");
				#endif

				wxRect value_to_return0;
				value_to_return0 = ((wxSashEvent_php*)native_object)->GetDragRect();
				void* ptr = safe_emalloc(1, sizeof(wxRect_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxRect));
				object_init_ex(return_value, php_wxRect_entry);
				((wxRect_php*)ptr)->phpObj = return_value;
				((wxRect_php*)ptr)->InitProperties();
				zo_wxRect* zo0 = (zo_wxRect*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxRect_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSashEvent::GetDragRect\n");
	}
}
/* }}} */

/* {{{ proto wxSashDragStatus wxSashEvent::GetDragStatus()
   Returns the status of the sash: one of wxSASH_STATUS_OK, wxSASH_STATUS_OUT_OF_RANGE. */
PHP_METHOD(php_wxSashEvent, GetDragStatus)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSashEvent::GetDragStatus\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSashEvent* current_object;
	wxphp_object_type current_object_type;
	wxSashEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSashEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSashEvent::GetDragStatus call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSASHEVENT_TYPE){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSashEvent::GetDragStatus())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxSashEvent_php*)native_object)->GetDragStatus());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSashEvent::GetDragStatus\n");
	}
}
/* }}} */

/* {{{ proto wxSashEdgePosition wxSashEvent::GetEdge()
   Returns the dragged edge. */
PHP_METHOD(php_wxSashEvent, GetEdge)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSashEvent::GetEdge\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSashEvent* current_object;
	wxphp_object_type current_object_type;
	wxSashEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSashEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSashEvent::GetEdge call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSASHEVENT_TYPE){
				references = &((wxSashEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSashEvent::GetEdge())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxSashEvent_php*)native_object)->GetEdge());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSashEvent::GetEdge\n");
	}
}
/* }}} */

/* {{{ proto  wxSashEvent::wxSashEvent(int id, wxSashEdgePosition edge)
   Constructor. */
PHP_METHOD(php_wxSashEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSashEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSashEvent* current_object;
	wxSashEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long id0;
	long edge0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&id0, &edge0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0, &edge0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxSashEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0)\n");
				#endif

				native_object = new wxSashEvent_php((int) id0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0, (wxSashEdgePosition) edge0)\n");
				#endif

				native_object = new wxSashEvent_php((int) id0, (wxSashEdgePosition) edge0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxSashEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxSashEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxSpinEvent_free(void *object TSRMLS_DC) 
{
    zo_wxSpinEvent* custom_object = (zo_wxSpinEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSpinEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSpinEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxSpinEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSpinEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxSpinEvent* custom_object;
    custom_object = (zo_wxSpinEvent*) emalloc(sizeof(zo_wxSpinEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxSpinEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXSPINEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxSpinEvent::GetPosition()
   Retrieve the current spin button or control value. */
PHP_METHOD(php_wxSpinEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSpinEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSpinEvent* current_object;
	wxphp_object_type current_object_type;
	wxSpinEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSpinEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSpinEvent::GetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSPINEVENT_TYPE){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSpinEvent::GetPosition())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxSpinEvent_php*)native_object)->GetPosition());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSpinEvent::GetPosition\n");
	}
}
/* }}} */

/* {{{ proto  wxSpinEvent::SetPosition(int pos)
   Set the value associated with the event. */
PHP_METHOD(php_wxSpinEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSpinEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSpinEvent* current_object;
	wxphp_object_type current_object_type;
	wxSpinEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSpinEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSpinEvent::SetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSPINEVENT_TYPE){
				references = &((wxSpinEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&pos0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSpinEvent::SetPosition((int) pos0)\n\n");
				#endif

				((wxSpinEvent_php*)native_object)->SetPosition((int) pos0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSpinEvent::SetPosition\n");
	}
}
/* }}} */

/* {{{ proto  wxSpinEvent::wxSpinEvent(int commandType, int id)
   The constructor is not normally used by the user code. */
PHP_METHOD(php_wxSpinEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSpinEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSpinEvent* current_object;
	wxSpinEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandType0;
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandType0, &id0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxSpinEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif

				native_object = new wxSpinEvent_php((wxEventType) commandType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0)\n");
				#endif

				native_object = new wxSpinEvent_php((wxEventType) commandType0, (int) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxSpinEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxSpinEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxSpinDoubleEvent_free(void *object TSRMLS_DC) 
{
    zo_wxSpinDoubleEvent* custom_object = (zo_wxSpinDoubleEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSpinDoubleEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSpinDoubleEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxSpinDoubleEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSpinDoubleEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxSpinDoubleEvent* custom_object;
    custom_object = (zo_wxSpinDoubleEvent*) emalloc(sizeof(zo_wxSpinDoubleEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxSpinDoubleEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXSPINDOUBLEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxSpinDoubleEvent::wxSpinDoubleEvent(wxSpinDoubleEvent event)
   The copy constructor. */
PHP_METHOD(php_wxSpinDoubleEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSpinDoubleEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSpinDoubleEvent* current_object;
	wxSpinDoubleEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* event0 = 0;
	wxSpinDoubleEvent* object_pointer0_0 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	long commandType1;
	long winid1;
	double value1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&event0, php_wxSpinDoubleEvent_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0, php_wxSpinDoubleEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSpinDoubleEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSpinDoubleEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxSpinDoubleEvent*) argument_native_object;
					if (!object_pointer0_0 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
					goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lld' (&commandType1, &winid1, &value1)\n");
		#endif

		char parse_parameters_string[] = "|lld";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType1, &winid1, &value1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxSpinDoubleEvent*) object_pointer0_0)\n");
				#endif

				native_object = new wxSpinDoubleEvent_php(*(wxSpinDoubleEvent*) object_pointer0_0);

				native_object->references.Initialize();
				((wxSpinDoubleEvent_php*) native_object)->references.AddReference(event0, "wxSpinDoubleEvent::wxSpinDoubleEvent at call with 1 argument(s)");
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxSpinDoubleEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType1)\n");
				#endif

				native_object = new wxSpinDoubleEvent_php((wxEventType) commandType1);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType1, (int) winid1)\n");
				#endif

				native_object = new wxSpinDoubleEvent_php((wxEventType) commandType1, (int) winid1);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType1, (int) winid1, value1)\n");
				#endif

				native_object = new wxSpinDoubleEvent_php((wxEventType) commandType1, (int) winid1, value1);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxSpinDoubleEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxSpinDoubleEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxSpinDoubleEvent::SetValue(float value)
   Set the value associated with the event. */
PHP_METHOD(php_wxSpinDoubleEvent, SetValue)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSpinDoubleEvent::SetValue\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSpinDoubleEvent* current_object;
	wxphp_object_type current_object_type;
	wxSpinDoubleEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSpinDoubleEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSpinDoubleEvent::SetValue call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	double value0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&value0)\n");
		#endif

		char parse_parameters_string[] = "d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &value0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSpinDoubleEvent::SetValue(value0)\n\n");
				#endif

				((wxSpinDoubleEvent_php*)native_object)->SetValue(value0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSpinDoubleEvent::SetValue\n");
	}
}
/* }}} */

/* {{{ proto float wxSpinDoubleEvent::GetValue()
   Returns the value associated with this spin control event. */
PHP_METHOD(php_wxSpinDoubleEvent, GetValue)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSpinDoubleEvent::GetValue\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSpinDoubleEvent* current_object;
	wxphp_object_type current_object_type;
	wxSpinDoubleEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSpinDoubleEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSpinDoubleEvent::GetValue call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSPINDOUBLEEVENT_TYPE){
				references = &((wxSpinDoubleEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSpinDoubleEvent::GetValue())\n\n");
				#endif

				ZVAL_DOUBLE(return_value, ((wxSpinDoubleEvent_php*)native_object)->GetValue());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSpinDoubleEvent::GetValue\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxSplitterEvent_free(void *object TSRMLS_DC) 
{
    zo_wxSplitterEvent* custom_object = (zo_wxSplitterEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSplitterEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxSplitterEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxSplitterEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSplitterEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxSplitterEvent* custom_object;
    custom_object = (zo_wxSplitterEvent*) emalloc(sizeof(zo_wxSplitterEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxSplitterEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXSPLITTEREVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxSplitterEvent::GetSashPosition()
   Returns the new sash position. */
PHP_METHOD(php_wxSplitterEvent, GetSashPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplitterEvent::GetSashPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSplitterEvent* current_object;
	wxphp_object_type current_object_type;
	wxSplitterEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSplitterEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSplitterEvent::GetSashPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSPLITTEREVENT_TYPE){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSplitterEvent::GetSashPosition())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxSplitterEvent_php*)native_object)->GetSashPosition());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSplitterEvent::GetSashPosition\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxSplitterEvent::GetWindowBeingRemoved()
   Returns a pointer to the window being removed when a splitter window is unsplit. */
PHP_METHOD(php_wxSplitterEvent, GetWindowBeingRemoved)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplitterEvent::GetWindowBeingRemoved\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSplitterEvent* current_object;
	wxphp_object_type current_object_type;
	wxSplitterEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSplitterEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSplitterEvent::GetWindowBeingRemoved call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSPLITTEREVENT_TYPE){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSplitterEvent::GetWindowBeingRemoved() to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxSplitterEvent_php*)native_object)->GetWindowBeingRemoved();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxSplitterEvent::GetWindowBeingRemoved at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSplitterEvent::GetWindowBeingRemoved\n");
	}
}
/* }}} */

/* {{{ proto int wxSplitterEvent::GetX()
   Returns the x coordinate of the double-click point. */
PHP_METHOD(php_wxSplitterEvent, GetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplitterEvent::GetX\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSplitterEvent* current_object;
	wxphp_object_type current_object_type;
	wxSplitterEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSplitterEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSplitterEvent::GetX call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSPLITTEREVENT_TYPE){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSplitterEvent::GetX())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxSplitterEvent_php*)native_object)->GetX());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSplitterEvent::GetX\n");
	}
}
/* }}} */

/* {{{ proto int wxSplitterEvent::GetY()
   Returns the y coordinate of the double-click point. */
PHP_METHOD(php_wxSplitterEvent, GetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplitterEvent::GetY\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSplitterEvent* current_object;
	wxphp_object_type current_object_type;
	wxSplitterEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSplitterEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSplitterEvent::GetY call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSPLITTEREVENT_TYPE){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSplitterEvent::GetY())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxSplitterEvent_php*)native_object)->GetY());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSplitterEvent::GetY\n");
	}
}
/* }}} */

/* {{{ proto  wxSplitterEvent::SetSashPosition(int pos)
   In the case of wxEVT_SPLITTER_SASH_POS_CHANGED events, sets the new sash position. */
PHP_METHOD(php_wxSplitterEvent, SetSashPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplitterEvent::SetSashPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSplitterEvent* current_object;
	wxphp_object_type current_object_type;
	wxSplitterEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSplitterEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSplitterEvent::SetSashPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSPLITTEREVENT_TYPE){
				references = &((wxSplitterEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&pos0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxSplitterEvent::SetSashPosition((int) pos0)\n\n");
				#endif

				((wxSplitterEvent_php*)native_object)->SetSashPosition((int) pos0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSplitterEvent::SetSashPosition\n");
	}
}
/* }}} */

/* {{{ proto  wxSplitterEvent::wxSplitterEvent(int eventType, wxSplitterWindow &splitter)
   Constructor. */
PHP_METHOD(php_wxSplitterEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplitterEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSplitterEvent* current_object;
	wxSplitterEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long eventType0;
	zval* splitter0 = 0;
	wxSplitterWindow* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lz' (&eventType0, &splitter0)\n");
		#endif

		char parse_parameters_string[] = "|lz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &eventType0, &splitter0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(splitter0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSplitterWindow*) zend_object_store_get_object(splitter0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSplitterWindow*) zend_object_store_get_object(splitter0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxSplitterWindow*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXSPLITTERWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'splitter' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(splitter0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'splitter' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxSplitterEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0)\n");
				#endif

				native_object = new wxSplitterEvent_php((wxEventType) eventType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) eventType0, (wxSplitterWindow*) object_pointer0_1)\n");
				#endif

				native_object = new wxSplitterEvent_php((wxEventType) eventType0, (wxSplitterWindow*) object_pointer0_1);

				native_object->references.Initialize();
				((wxSplitterEvent_php*) native_object)->references.AddReference(splitter0, "wxSplitterEvent::wxSplitterEvent at call with 2 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxSplitterEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxSplitterEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxStyledTextEvent_free(void *object TSRMLS_DC) 
{
    zo_wxStyledTextEvent* custom_object = (zo_wxStyledTextEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxStyledTextEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxStyledTextEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxStyledTextEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxStyledTextEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxStyledTextEvent* custom_object;
    custom_object = (zo_wxStyledTextEvent*) emalloc(sizeof(zo_wxStyledTextEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxStyledTextEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXSTYLEDTEXTEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxStyledTextEvent::wxStyledTextEvent(int commandType, int id) */
PHP_METHOD(php_wxStyledTextEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandType0;
	long id0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* event1 = 0;
	wxStyledTextEvent* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandType0, &id0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&event1, php_wxStyledTextEvent_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event1, php_wxStyledTextEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxStyledTextEvent*) zend_object_store_get_object(event1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxStyledTextEvent*) zend_object_store_get_object(event1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxStyledTextEvent*) argument_native_object;
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter 'event' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'event' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxStyledTextEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif

				native_object = new wxStyledTextEvent_php((wxEventType) commandType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0)\n");
				#endif

				native_object = new wxStyledTextEvent_php((wxEventType) commandType0, (int) id0);

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxStyledTextEvent*) object_pointer1_0)\n");
				#endif

				native_object = new wxStyledTextEvent_php(*(wxStyledTextEvent*) object_pointer1_0);

				native_object->references.Initialize();
				((wxStyledTextEvent_php*) native_object)->references.AddReference(event1, "wxStyledTextEvent::wxStyledTextEvent at call with 1 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxStyledTextEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetY(int val) */
PHP_METHOD(php_wxStyledTextEvent, SetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetY\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetY call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetY((int) val0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetY((int) val0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetY\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetX(int val) */
PHP_METHOD(php_wxStyledTextEvent, SetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetX\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetX call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetX((int) val0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetX((int) val0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetX\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetWParam(int val) */
PHP_METHOD(php_wxStyledTextEvent, SetWParam)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetWParam\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetWParam call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetWParam((int) val0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetWParam((int) val0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetWParam\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetText(string t) */
PHP_METHOD(php_wxStyledTextEvent, SetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* t0;
	long t_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&t0, &t_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &t0, &t_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetText(wxString(t0, wxConvUTF8))\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetText(wxString(t0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetText\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetPosition(int pos) */
PHP_METHOD(php_wxStyledTextEvent, SetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&pos0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetPosition((int) pos0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetPosition((int) pos0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetPosition\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetModifiers(int m) */
PHP_METHOD(php_wxStyledTextEvent, SetModifiers)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetModifiers\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetModifiers call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long m0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&m0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &m0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetModifiers((int) m0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetModifiers((int) m0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetModifiers\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetModificationType(int t) */
PHP_METHOD(php_wxStyledTextEvent, SetModificationType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetModificationType\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetModificationType call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long t0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&t0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &t0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetModificationType((int) t0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetModificationType((int) t0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetModificationType\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetMessage(int val) */
PHP_METHOD(php_wxStyledTextEvent, SetMessage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetMessage\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetMessage call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetMessage((int) val0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetMessage((int) val0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetMessage\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetMargin(int val) */
PHP_METHOD(php_wxStyledTextEvent, SetMargin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetMargin\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetMargin call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetMargin((int) val0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetMargin((int) val0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetMargin\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetListType(int val) */
PHP_METHOD(php_wxStyledTextEvent, SetListType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetListType\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetListType call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetListType((int) val0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetListType((int) val0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetListType\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetLinesAdded(int num) */
PHP_METHOD(php_wxStyledTextEvent, SetLinesAdded)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetLinesAdded\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetLinesAdded call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long num0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&num0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &num0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetLinesAdded((int) num0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetLinesAdded((int) num0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetLinesAdded\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetLine(int val) */
PHP_METHOD(php_wxStyledTextEvent, SetLine)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetLine\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetLine call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetLine((int) val0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetLine((int) val0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetLine\n");
	}
}
/* }}} */

/* {{{ proto bool wxStyledTextEvent::GetAlt() */
PHP_METHOD(php_wxStyledTextEvent, GetAlt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetAlt\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetAlt call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxStyledTextEvent::GetAlt())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxStyledTextEvent_php*)native_object)->GetAlt());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetAlt\n");
	}
}
/* }}} */

/* {{{ proto bool wxStyledTextEvent::GetControl() */
PHP_METHOD(php_wxStyledTextEvent, GetControl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetControl\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetControl call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxStyledTextEvent::GetControl())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxStyledTextEvent_php*)native_object)->GetControl());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetControl\n");
	}
}
/* }}} */

/* {{{ proto string wxStyledTextEvent::GetDragText() */
PHP_METHOD(php_wxStyledTextEvent, GetDragText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetDragText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetDragText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxStyledTextEvent::GetDragText().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxStyledTextEvent_php*)native_object)->GetDragText();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetDragText\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetFoldLevelNow() */
PHP_METHOD(php_wxStyledTextEvent, GetFoldLevelNow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetFoldLevelNow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetFoldLevelNow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetFoldLevelNow())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetFoldLevelNow());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetFoldLevelNow\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetFoldLevelPrev() */
PHP_METHOD(php_wxStyledTextEvent, GetFoldLevelPrev)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetFoldLevelPrev\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetFoldLevelPrev call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetFoldLevelPrev())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetFoldLevelPrev());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetFoldLevelPrev\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetKey() */
PHP_METHOD(php_wxStyledTextEvent, GetKey)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetKey\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetKey call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetKey())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetKey());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetKey\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetLParam() */
PHP_METHOD(php_wxStyledTextEvent, GetLParam)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetLParam\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetLParam call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetLParam())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetLParam());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetLParam\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetLength() */
PHP_METHOD(php_wxStyledTextEvent, GetLength)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetLength\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetLength call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetLength())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetLength());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetLength\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetLine() */
PHP_METHOD(php_wxStyledTextEvent, GetLine)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetLine\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetLine call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetLine())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetLine());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetLine\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetLinesAdded() */
PHP_METHOD(php_wxStyledTextEvent, GetLinesAdded)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetLinesAdded\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetLinesAdded call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetLinesAdded())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetLinesAdded());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetLinesAdded\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetListType() */
PHP_METHOD(php_wxStyledTextEvent, GetListType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetListType\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetListType call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetListType())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetListType());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetListType\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetMargin() */
PHP_METHOD(php_wxStyledTextEvent, GetMargin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetMargin\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetMargin call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetMargin())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetMargin());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetMargin\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetMessage() */
PHP_METHOD(php_wxStyledTextEvent, GetMessage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetMessage\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetMessage call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetMessage())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetMessage());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetMessage\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetModificationType() */
PHP_METHOD(php_wxStyledTextEvent, GetModificationType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetModificationType\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetModificationType call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetModificationType())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetModificationType());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetModificationType\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetModifiers() */
PHP_METHOD(php_wxStyledTextEvent, GetModifiers)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetModifiers\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetModifiers call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetModifiers())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetModifiers());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetModifiers\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetPosition() */
PHP_METHOD(php_wxStyledTextEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetPosition())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetPosition());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetPosition\n");
	}
}
/* }}} */

/* {{{ proto bool wxStyledTextEvent::GetShift() */
PHP_METHOD(php_wxStyledTextEvent, GetShift)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetShift\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetShift call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxStyledTextEvent::GetShift())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxStyledTextEvent_php*)native_object)->GetShift());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetShift\n");
	}
}
/* }}} */

/* {{{ proto string wxStyledTextEvent::GetText() */
PHP_METHOD(php_wxStyledTextEvent, GetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxStyledTextEvent::GetText().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxStyledTextEvent_php*)native_object)->GetText();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetText\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetWParam() */
PHP_METHOD(php_wxStyledTextEvent, GetWParam)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetWParam\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetWParam call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetWParam())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetWParam());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetWParam\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetX() */
PHP_METHOD(php_wxStyledTextEvent, GetX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetX\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetX call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetX())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetX());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetX\n");
	}
}
/* }}} */

/* {{{ proto int wxStyledTextEvent::GetY() */
PHP_METHOD(php_wxStyledTextEvent, GetY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetY\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetY call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetY())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetY());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetY\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetDragResult(wxDragResult val) */
PHP_METHOD(php_wxStyledTextEvent, SetDragResult)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetDragResult\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetDragResult call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetDragResult((wxDragResult) val0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetDragResult((wxDragResult) val0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetDragResult\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetDragText(string val) */
PHP_METHOD(php_wxStyledTextEvent, SetDragText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetDragText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetDragText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* val0;
	long val_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&val0, &val_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0, &val_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetDragText(wxString(val0, wxConvUTF8))\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetDragText(wxString(val0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetDragText\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetFoldLevelNow(int val) */
PHP_METHOD(php_wxStyledTextEvent, SetFoldLevelNow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetFoldLevelNow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetFoldLevelNow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetFoldLevelNow((int) val0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetFoldLevelNow((int) val0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetFoldLevelNow\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetFoldLevelPrev(int val) */
PHP_METHOD(php_wxStyledTextEvent, SetFoldLevelPrev)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetFoldLevelPrev\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetFoldLevelPrev call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetFoldLevelPrev((int) val0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetFoldLevelPrev((int) val0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetFoldLevelPrev\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetKey(int k) */
PHP_METHOD(php_wxStyledTextEvent, SetKey)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetKey\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetKey call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long k0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&k0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &k0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetKey((int) k0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetKey((int) k0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetKey\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetLParam(int val) */
PHP_METHOD(php_wxStyledTextEvent, SetLParam)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetLParam\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetLParam call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long val0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&val0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &val0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetLParam((int) val0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetLParam((int) val0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetLParam\n");
	}
}
/* }}} */

/* {{{ proto  wxStyledTextEvent::SetLength(int len) */
PHP_METHOD(php_wxStyledTextEvent, SetLength)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::SetLength\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::SetLength call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&len0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxStyledTextEvent::SetLength((int) len0)\n\n");
				#endif

				((wxStyledTextEvent_php*)native_object)->SetLength((int) len0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::SetLength\n");
	}
}
/* }}} */

/* {{{ proto wxDragResult wxStyledTextEvent::GetDragResult() */
PHP_METHOD(php_wxStyledTextEvent, GetDragResult)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxStyledTextEvent::GetDragResult\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxStyledTextEvent* current_object;
	wxphp_object_type current_object_type;
	wxStyledTextEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxStyledTextEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxStyledTextEvent::GetDragResult call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSTYLEDTEXTEVENT_TYPE){
				references = &((wxStyledTextEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxStyledTextEvent::GetDragResult())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxStyledTextEvent_php*)native_object)->GetDragResult());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxStyledTextEvent::GetDragResult\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxTaskBarIconEvent_free(void *object TSRMLS_DC) 
{
    zo_wxTaskBarIconEvent* custom_object = (zo_wxTaskBarIconEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxTaskBarIconEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxTaskBarIconEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxTaskBarIconEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxTaskBarIconEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxTaskBarIconEvent* custom_object;
    custom_object = (zo_wxTaskBarIconEvent*) emalloc(sizeof(zo_wxTaskBarIconEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxTaskBarIconEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXTASKBARICONEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxTaskBarIconEvent::wxTaskBarIconEvent(int evtType, wxTaskBarIcon &tbIcon)
   Constructor. */
PHP_METHOD(php_wxTaskBarIconEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTaskBarIconEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTaskBarIconEvent* current_object;
	wxTaskBarIconEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long evtType0;
	zval* tbIcon0 = 0;
	wxTaskBarIcon* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lz' (&evtType0, &tbIcon0)\n");
		#endif

		char parse_parameters_string[] = "lz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &evtType0, &tbIcon0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(tbIcon0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxTaskBarIcon*) zend_object_store_get_object(tbIcon0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxTaskBarIcon*) zend_object_store_get_object(tbIcon0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxTaskBarIcon*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXTASKBARICON_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'tbIcon' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(tbIcon0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'tbIcon' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) evtType0, (wxTaskBarIcon*) object_pointer0_1)\n");
				#endif

				native_object = new wxTaskBarIconEvent_php((wxEventType) evtType0, (wxTaskBarIcon*) object_pointer0_1);

				native_object->references.Initialize();
				((wxTaskBarIconEvent_php*) native_object)->references.AddReference(tbIcon0, "wxTaskBarIconEvent::wxTaskBarIconEvent at call with 2 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxTaskBarIconEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxTaskBarIconEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxTimerEvent_free(void *object TSRMLS_DC) 
{
    zo_wxTimerEvent* custom_object = (zo_wxTimerEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxTimerEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxTimerEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxTimerEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxTimerEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxTimerEvent* custom_object;
    custom_object = (zo_wxTimerEvent*) emalloc(sizeof(zo_wxTimerEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxTimerEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXTIMEREVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxTimerEvent::GetInterval()
   Returns the interval of the timer which generated this event. */
PHP_METHOD(php_wxTimerEvent, GetInterval)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTimerEvent::GetInterval\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTimerEvent* current_object;
	wxphp_object_type current_object_type;
	wxTimerEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTimerEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTimerEvent::GetInterval call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTIMEREVENT_TYPE){
				references = &((wxTimerEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxTimerEvent::GetInterval())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxTimerEvent_php*)native_object)->GetInterval());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTimerEvent::GetInterval\n");
	}
}
/* }}} */

/* {{{ proto  wxTimerEvent::wxTimerEvent() */
PHP_METHOD(php_wxTimerEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTimerEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTimerEvent* current_object;
	wxTimerEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* timer1 = 0;
	wxTimer* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&timer1, php_wxTimer_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &timer1, php_wxTimer_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(timer1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxTimer*) zend_object_store_get_object(timer1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxTimer*) zend_object_store_get_object(timer1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxTimer*) argument_native_object;
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter 'timer' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(timer1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'timer' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxTimerEvent_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxTimer*) object_pointer1_0)\n");
				#endif

				native_object = new wxTimerEvent_php(*(wxTimer*) object_pointer1_0);

				native_object->references.Initialize();
				((wxTimerEvent_php*) native_object)->references.AddReference(timer1, "wxTimerEvent::wxTimerEvent at call with 1 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxTimerEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxTimerEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxTreeEvent_free(void *object TSRMLS_DC) 
{
    zo_wxTreeEvent* custom_object = (zo_wxTreeEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxTreeEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxTreeEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxTreeEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxTreeEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxTreeEvent* custom_object;
    custom_object = (zo_wxTreeEvent*) emalloc(sizeof(zo_wxTreeEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxTreeEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXTREEEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxTreeItemId wxTreeEvent::GetItem()
   Returns the item (valid for all events). */
PHP_METHOD(php_wxTreeEvent, GetItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::GetItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTreeEvent* current_object;
	wxphp_object_type current_object_type;
	wxTreeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTreeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTreeEvent::GetItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTREEEVENT_TYPE){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTreeEvent::GetItem() to return new object\n\n");
				#endif

				wxTreeItemId value_to_return0;
				value_to_return0 = ((wxTreeEvent_php*)native_object)->GetItem();
				void* ptr = safe_emalloc(1, sizeof(wxTreeItemId_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxTreeItemId));
				object_init_ex(return_value, php_wxTreeItemId_entry);
				((wxTreeItemId_php*)ptr)->phpObj = return_value;
				zo_wxTreeItemId* zo0 = (zo_wxTreeItemId*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxTreeItemId_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTreeEvent::GetItem\n");
	}
}
/* }}} */

/* {{{ proto int wxTreeEvent::GetKeyCode()
   Returns the key code if the event is a key event. */
PHP_METHOD(php_wxTreeEvent, GetKeyCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::GetKeyCode\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTreeEvent* current_object;
	wxphp_object_type current_object_type;
	wxTreeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTreeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTreeEvent::GetKeyCode call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTREEEVENT_TYPE){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxTreeEvent::GetKeyCode())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxTreeEvent_php*)native_object)->GetKeyCode());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTreeEvent::GetKeyCode\n");
	}
}
/* }}} */

/* {{{ proto wxKeyEvent wxTreeEvent::GetKeyEvent()
   Returns the key event for EVT_TREE_KEY_DOWN events. */
PHP_METHOD(php_wxTreeEvent, GetKeyEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::GetKeyEvent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTreeEvent* current_object;
	wxphp_object_type current_object_type;
	wxTreeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTreeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTreeEvent::GetKeyEvent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTREEEVENT_TYPE){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTreeEvent::GetKeyEvent() to return object reference\n\n");
				#endif

				wxKeyEvent_php* value_to_return0;
				value_to_return0 = (wxKeyEvent_php*) &((wxTreeEvent_php*)native_object)->GetKeyEvent();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxKeyEvent_entry);
					((zo_wxKeyEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxKeyEvent_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxTreeEvent::GetKeyEvent at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTreeEvent::GetKeyEvent\n");
	}
}
/* }}} */

/* {{{ proto string wxTreeEvent::GetLabel()
   Returns the label if the event is a begin or end edit label event. */
PHP_METHOD(php_wxTreeEvent, GetLabel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::GetLabel\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTreeEvent* current_object;
	wxphp_object_type current_object_type;
	wxTreeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTreeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTreeEvent::GetLabel call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTREEEVENT_TYPE){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxTreeEvent::GetLabel().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxTreeEvent_php*)native_object)->GetLabel();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTreeEvent::GetLabel\n");
	}
}
/* }}} */

/* {{{ proto wxTreeItemId wxTreeEvent::GetOldItem()
   Returns the old item index (valid for EVT_TREE_ITEM_CHANGING and EVT_TREE_ITEM_CHANGED events). */
PHP_METHOD(php_wxTreeEvent, GetOldItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::GetOldItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTreeEvent* current_object;
	wxphp_object_type current_object_type;
	wxTreeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTreeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTreeEvent::GetOldItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTREEEVENT_TYPE){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTreeEvent::GetOldItem() to return new object\n\n");
				#endif

				wxTreeItemId value_to_return0;
				value_to_return0 = ((wxTreeEvent_php*)native_object)->GetOldItem();
				void* ptr = safe_emalloc(1, sizeof(wxTreeItemId_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxTreeItemId));
				object_init_ex(return_value, php_wxTreeItemId_entry);
				((wxTreeItemId_php*)ptr)->phpObj = return_value;
				zo_wxTreeItemId* zo0 = (zo_wxTreeItemId*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxTreeItemId_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTreeEvent::GetOldItem\n");
	}
}
/* }}} */

/* {{{ proto wxPoint wxTreeEvent::GetPoint()
   Returns the position of the mouse pointer if the event is a drag or menu-context event. */
PHP_METHOD(php_wxTreeEvent, GetPoint)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::GetPoint\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTreeEvent* current_object;
	wxphp_object_type current_object_type;
	wxTreeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTreeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTreeEvent::GetPoint call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTREEEVENT_TYPE){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTreeEvent::GetPoint() to return new object\n\n");
				#endif

				wxPoint value_to_return0;
				value_to_return0 = ((wxTreeEvent_php*)native_object)->GetPoint();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				((wxPoint_php*)ptr)->phpObj = return_value;
				((wxPoint_php*)ptr)->InitProperties();
				zo_wxPoint* zo0 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxPoint_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTreeEvent::GetPoint\n");
	}
}
/* }}} */

/* {{{ proto bool wxTreeEvent::IsEditCancelled()
   Returns true if the label edit was cancelled. */
PHP_METHOD(php_wxTreeEvent, IsEditCancelled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::IsEditCancelled\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTreeEvent* current_object;
	wxphp_object_type current_object_type;
	wxTreeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTreeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTreeEvent::IsEditCancelled call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTREEEVENT_TYPE){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTreeEvent::IsEditCancelled())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTreeEvent_php*)native_object)->IsEditCancelled());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTreeEvent::IsEditCancelled\n");
	}
}
/* }}} */

/* {{{ proto  wxTreeEvent::SetToolTip(string tooltip)
   Set the tooltip for the item (valid for EVT_TREE_ITEM_GETTOOLTIP events). */
PHP_METHOD(php_wxTreeEvent, SetToolTip)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::SetToolTip\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTreeEvent* current_object;
	wxphp_object_type current_object_type;
	wxTreeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTreeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTreeEvent::SetToolTip call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTREEEVENT_TYPE){
				references = &((wxTreeEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* tooltip0;
	long tooltip_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&tooltip0, &tooltip_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &tooltip0, &tooltip_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTreeEvent::SetToolTip(wxString(tooltip0, wxConvUTF8))\n\n");
				#endif

				((wxTreeEvent_php*)native_object)->SetToolTip(wxString(tooltip0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTreeEvent::SetToolTip\n");
	}
}
/* }}} */

/* {{{ proto  wxTreeEvent::wxTreeEvent(int commandType, wxTreeCtrl &tree, wxTreeItemId item)
   Constructor, used by wxWidgets itself only. */
PHP_METHOD(php_wxTreeEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTreeEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTreeEvent* current_object;
	wxTreeEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandType0;
	zval* tree0 = 0;
	wxTreeCtrl* object_pointer0_1 = 0;
	zval* item0 = 0;
	wxTreeItemId* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lz|O' (&commandType0, &tree0, &item0, php_wxTreeItemId_entry)\n");
		#endif

		char parse_parameters_string[] = "lz|O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &tree0, &item0, php_wxTreeItemId_entry ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(tree0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxTreeCtrl*) zend_object_store_get_object(tree0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxTreeCtrl*) zend_object_store_get_object(tree0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxTreeCtrl*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXTREECTRL_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'tree' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(tree0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'tree' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxTreeItemId*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxTreeItemId*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxTreeItemId*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (wxTreeCtrl*) object_pointer0_1)\n");
				#endif

				native_object = new wxTreeEvent_php((wxEventType) commandType0, (wxTreeCtrl*) object_pointer0_1);

				native_object->references.Initialize();
				((wxTreeEvent_php*) native_object)->references.AddReference(tree0, "wxTreeEvent::wxTreeEvent at call with 2 argument(s)");
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (wxTreeCtrl*) object_pointer0_1, *(wxTreeItemId*) object_pointer0_2)\n");
				#endif

				native_object = new wxTreeEvent_php((wxEventType) commandType0, (wxTreeCtrl*) object_pointer0_1, *(wxTreeItemId*) object_pointer0_2);

				native_object->references.Initialize();
				((wxTreeEvent_php*) native_object)->references.AddReference(tree0, "wxTreeEvent::wxTreeEvent at call with 3 argument(s)");
				((wxTreeEvent_php*) native_object)->references.AddReference(item0, "wxTreeEvent::wxTreeEvent at call with 3 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxTreeEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxTreeEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxWebViewEvent_free(void *object TSRMLS_DC) 
{
    zo_wxWebViewEvent* custom_object = (zo_wxWebViewEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxWebViewEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxWebViewEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxWebViewEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxWebViewEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxWebViewEvent* custom_object;
    custom_object = (zo_wxWebViewEvent*) emalloc(sizeof(zo_wxWebViewEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxWebViewEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXWEBVIEWEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto string wxWebViewEvent::GetTarget()
   Get the name of the target frame which the url of this event has been or will be loaded into. */
PHP_METHOD(php_wxWebViewEvent, GetTarget)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWebViewEvent::GetTarget\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxWebViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxWebViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxWebViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxWebViewEvent::GetTarget call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXWEBVIEWEVENT_TYPE){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxWebViewEvent::GetTarget().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxWebViewEvent_php*)native_object)->GetTarget();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxWebViewEvent::GetTarget\n");
	}
}
/* }}} */

/* {{{ proto string wxWebViewEvent::GetURL()
   Get the URL being visited. */
PHP_METHOD(php_wxWebViewEvent, GetURL)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWebViewEvent::GetURL\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxWebViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxWebViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxWebViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxWebViewEvent::GetURL call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXWEBVIEWEVENT_TYPE){
				references = &((wxWebViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxWebViewEvent::GetURL().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxWebViewEvent_php*)native_object)->GetURL();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxWebViewEvent::GetURL\n");
	}
}
/* }}} */

/* {{{ proto  wxWebViewEvent::wxWebViewEvent() */
PHP_METHOD(php_wxWebViewEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWebViewEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxWebViewEvent* current_object;
	wxWebViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	long type1;
	long id1;
	char* href1;
	long href_len1;
	char* target1;
	long target_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llss' (&type1, &id1, &href1, &href_len1, &target1, &target_len1)\n");
		#endif

		char parse_parameters_string[] = "llss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type1, &id1, &href1, &href_len1, &target1, &target_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxWebViewEvent_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type1, (int) id1, wxString(href1, wxConvUTF8), wxString(target1, wxConvUTF8))\n");
				#endif

				native_object = new wxWebViewEvent_php((wxEventType) type1, (int) id1, wxString(href1, wxConvUTF8), wxString(target1, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxWebViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxWebViewEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxWizardEvent_free(void *object TSRMLS_DC) 
{
    zo_wxWizardEvent* custom_object = (zo_wxWizardEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxWizardEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxWizardEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxWizardEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxWizardEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxWizardEvent* custom_object;
    custom_object = (zo_wxWizardEvent*) emalloc(sizeof(zo_wxWizardEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxWizardEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXWIZARDEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxWizardEvent::GetDirection()
   Return the direction in which the page is changing: for EVT_WIZARD_PAGE_CHANGING, return true if we're going forward or false otherwise and for EVT_WIZARD_PAGE_CHANGED return true if we came from the previous page and false if we returned from the next one. */
PHP_METHOD(php_wxWizardEvent, GetDirection)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWizardEvent::GetDirection\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxWizardEvent* current_object;
	wxphp_object_type current_object_type;
	wxWizardEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxWizardEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxWizardEvent::GetDirection call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXWIZARDEVENT_TYPE){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxWizardEvent::GetDirection())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxWizardEvent_php*)native_object)->GetDirection());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxWizardEvent::GetDirection\n");
	}
}
/* }}} */

/* {{{ proto  wxWizardEvent::wxWizardEvent(int type, int id, bool direction, wxWizardPage &page)
   Constructor. */
PHP_METHOD(php_wxWizardEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWizardEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxWizardEvent* current_object;
	wxWizardEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long type0;
	long id0;
	bool direction0;
	zval* page0 = 0;
	wxWizardPage* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llbz' (&type0, &id0, &direction0, &page0)\n");
		#endif

		char parse_parameters_string[] = "|llbz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &type0, &id0, &direction0, &page0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(page0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWizardPage*) zend_object_store_get_object(page0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWizardPage*) zend_object_store_get_object(page0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxWizardPage*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'page' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(page0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'page' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxWizardEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0)\n");
				#endif

				native_object = new wxWizardEvent_php((wxEventType) type0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0)\n");
				#endif

				native_object = new wxWizardEvent_php((wxEventType) type0, (int) id0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0, direction0)\n");
				#endif

				native_object = new wxWizardEvent_php((wxEventType) type0, (int) id0, direction0);

				native_object->references.Initialize();
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) type0, (int) id0, direction0, (wxWizardPage*) object_pointer0_3)\n");
				#endif

				native_object = new wxWizardEvent_php((wxEventType) type0, (int) id0, direction0, (wxWizardPage*) object_pointer0_3);

				native_object->references.Initialize();
				((wxWizardEvent_php*) native_object)->references.AddReference(page0, "wxWizardEvent::wxWizardEvent at call with 4 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxWizardEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxWizardEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto wxWizardPage wxWizardEvent::GetPage()
   Returns the wxWizardPage which was active when this event was generated. */
PHP_METHOD(php_wxWizardEvent, GetPage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxWizardEvent::GetPage\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxWizardEvent* current_object;
	wxphp_object_type current_object_type;
	wxWizardEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxWizardEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxWizardEvent::GetPage call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXWIZARDEVENT_TYPE){
				references = &((wxWizardEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxWizardEvent::GetPage() to return object pointer\n\n");
				#endif

				wxWizardPage_php* value_to_return0;
				value_to_return0 = (wxWizardPage_php*) ((wxWizardEvent_php*)native_object)->GetPage();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWizardPage_entry);
					((zo_wxWizardPage*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWizardPage_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxWizardEvent::GetPage at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxWizardEvent::GetPage\n");
	}
}
/* }}} */

