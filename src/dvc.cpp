/*
 * @author Mário Soares
 * @contributors Jefferson González
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "appmanagement.h"
#include "aui.h"
#include "bookctrl.h"
#include "cfg.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "dnd.h"
#include "docview.h"
#include "dvc.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "help.h"
#include "html.h"
#include "logging.h"
#include "managedwnd.h"
#include "media.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "net.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "webview.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "others.h"


BEGIN_EXTERN_C()
void php_wxDataViewChoiceRenderer_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewChoiceRenderer* custom_object = (zo_wxDataViewChoiceRenderer*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewChoiceRenderer_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewChoiceRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewChoiceRenderer_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewChoiceRenderer_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewChoiceRenderer* custom_object;
    custom_object = (zo_wxDataViewChoiceRenderer*) emalloc(sizeof(zo_wxDataViewChoiceRenderer));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewChoiceRenderer_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWCHOICERENDERER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto string wxDataViewChoiceRenderer::GetChoice(int index)
   Returns the choice referred to by index. */
PHP_METHOD(php_wxDataViewChoiceRenderer, GetChoice)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewChoiceRenderer::GetChoice\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewChoiceRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewChoiceRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewChoiceRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewChoiceRenderer::GetChoice call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE){
				references = &((wxDataViewChoiceRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long index0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&index0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &index0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxDataViewChoiceRenderer::GetChoice((size_t) index0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = ((wxDataViewChoiceRenderer_php*)native_object)->GetChoice((size_t) index0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewChoiceRenderer::GetChoice\n");
	}
}
/* }}} */

/* {{{ proto array wxDataViewChoiceRenderer::GetChoices()
   Returns all choices. */
PHP_METHOD(php_wxDataViewChoiceRenderer, GetChoices)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewChoiceRenderer::GetChoices\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewChoiceRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewChoiceRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewChoiceRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewChoiceRenderer::GetChoices call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE){
				references = &((wxDataViewChoiceRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewChoiceRenderer::GetChoices() to return strings array\n\n");
				#endif

				wxArrayString value_to_return0;
				value_to_return0 = ((wxDataViewChoiceRenderer_php*)native_object)->GetChoices();
				char* temp_string0;
				array_init(return_value);
				for(size_t i=0; i<value_to_return0.GetCount(); i++)
				{
					temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0[i].size()+1));
					strcpy (temp_string0, (const char *) value_to_return0[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string0, 1);
					free(temp_string0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewChoiceRenderer::GetChoices\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewChoiceRenderer::wxDataViewChoiceRenderer(array choices, wxDataViewCellMode mode, int alignment)
   The ctor. */
PHP_METHOD(php_wxDataViewChoiceRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewChoiceRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewChoiceRenderer* current_object;
	wxDataViewChoiceRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* choices0 = 0;
	long mode0;
	long alignment0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'a|ll' (&choices0, &mode0, &alignment0)\n");
		#endif

		char parse_parameters_string[] = "a|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &choices0, &mode0, &alignment0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		wxArrayString strings_array0_0;
		bool strings_continue0_0 = true;

		switch(arguments_received)
		{
			case 1:
			{
				int array_index0_0 = 0;
				zval** temp_array_value0_0 = 0;
				while(strings_continue0_0)
				{
					if(zend_hash_index_find(HASH_OF(choices0), array_index0_0, (void**)&temp_array_value0_0) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_0);
						strings_array0_0.Add(wxString(Z_STRVAL_PP(temp_array_value0_0), wxConvUTF8));
						array_index0_0++;
					}
					else
					{
						strings_continue0_0 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(strings_array0_0)\n");
				#endif

				native_object = new wxDataViewChoiceRenderer_php(strings_array0_0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				int array_index0_0 = 0;
				zval** temp_array_value0_0 = 0;
				while(strings_continue0_0)
				{
					if(zend_hash_index_find(HASH_OF(choices0), array_index0_0, (void**)&temp_array_value0_0) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_0);
						strings_array0_0.Add(wxString(Z_STRVAL_PP(temp_array_value0_0), wxConvUTF8));
						array_index0_0++;
					}
					else
					{
						strings_continue0_0 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(strings_array0_0, (wxDataViewCellMode) mode0)\n");
				#endif

				native_object = new wxDataViewChoiceRenderer_php(strings_array0_0, (wxDataViewCellMode) mode0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				int array_index0_0 = 0;
				zval** temp_array_value0_0 = 0;
				while(strings_continue0_0)
				{
					if(zend_hash_index_find(HASH_OF(choices0), array_index0_0, (void**)&temp_array_value0_0) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_0);
						strings_array0_0.Add(wxString(Z_STRVAL_PP(temp_array_value0_0), wxConvUTF8));
						array_index0_0++;
					}
					else
					{
						strings_continue0_0 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(strings_array0_0, (wxDataViewCellMode) mode0, (int) alignment0)\n");
				#endif

				native_object = new wxDataViewChoiceRenderer_php(strings_array0_0, (wxDataViewCellMode) mode0, (int) alignment0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewChoiceRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewChoiceRenderer::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewModel_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewModel* custom_object = (zo_wxDataViewModel*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewModel_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewModel_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewModel_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewModel* custom_object;
    custom_object = (zo_wxDataViewModel*) emalloc(sizeof(zo_wxDataViewModel));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewModel_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWMODEL_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxDataViewModel::AddNotifier(wxDataViewModelNotifier &notifier)
   Adds a wxDataViewModelNotifier to the model. */
PHP_METHOD(php_wxDataViewModel, AddNotifier)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::AddNotifier\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::AddNotifier call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* notifier0 = 0;
	wxDataViewModelNotifier* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&notifier0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &notifier0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(notifier0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewModelNotifier*) zend_object_store_get_object(notifier0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewModelNotifier*) zend_object_store_get_object(notifier0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewModelNotifier*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXDATAVIEWMODELNOTIFIER_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'notifier' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(notifier0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'notifier' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewModel::AddNotifier((wxDataViewModelNotifier*) object_pointer0_0)\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					((wxDataViewListModel_php*)native_object)->AddNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					((wxDataViewIndexListModel_php*)native_object)->AddNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					((wxDataViewListStore_php*)native_object)->AddNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					((wxDataViewVirtualListModel_php*)native_object)->AddNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					((wxDataViewTreeStore_php*)native_object)->AddNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					((wxDataViewModel_php*)native_object)->AddNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}

				references->AddReference(notifier0, "wxDataViewModel::AddNotifier at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::AddNotifier\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewModel::ChangeValue(wxVariant variant, wxDataViewItem item, int col)
   Change the value of the given item and update the control to reflect it. */
PHP_METHOD(php_wxDataViewModel, ChangeValue)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::ChangeValue\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::ChangeValue call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* variant0 = 0;
	wxVariant* object_pointer0_0 = 0;
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_1 = 0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOl' (&variant0, php_wxVariant_entry, &item0, php_wxDataViewItem_entry, &col0)\n");
		#endif

		char parse_parameters_string[] = "OOl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &variant0, php_wxVariant_entry, &item0, php_wxDataViewItem_entry, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(variant0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxVariant*) zend_object_store_get_object(variant0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxVariant*) zend_object_store_get_object(variant0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxVariant*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'variant' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(variant0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'variant' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)native_object)->ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)native_object)->ChangeValue(*(wxVariant*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) col0));
				}

				references->AddReference(variant0, "wxDataViewModel::ChangeValue at call with 3 argument(s)");
				references->AddReference(item0, "wxDataViewModel::ChangeValue at call with 3 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::ChangeValue\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewModel::Cleared()
   Called to inform the model that all data has been cleared. */
PHP_METHOD(php_wxDataViewModel, Cleared)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::Cleared\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::Cleared call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::Cleared())\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->Cleared());
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->Cleared());
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->Cleared());
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->Cleared());
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)native_object)->Cleared());
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)native_object)->Cleared());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::Cleared\n");
	}
}
/* }}} */

/* {{{ proto int wxDataViewModel::Compare(wxDataViewItem item1, wxDataViewItem item2, int column, bool ascending)
   The compare function to be used by control. */
PHP_METHOD(php_wxDataViewModel, Compare)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::Compare\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::Compare call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item10 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	zval* item20 = 0;
	wxDataViewItem* object_pointer0_1 = 0;
	long column0;
	bool ascending0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOlb' (&item10, php_wxDataViewItem_entry, &item20, php_wxDataViewItem_entry, &column0, &ascending0)\n");
		#endif

		char parse_parameters_string[] = "OOlb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item10, php_wxDataViewItem_entry, &item20, php_wxDataViewItem_entry, &column0, &ascending0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item10) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item10 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item10 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item1' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item10) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item1' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(item20) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item20 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item20 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'item2' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item20) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item2' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewModel::Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewListModel_php*)native_object)->Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0));
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewIndexListModel_php*)native_object)->Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewListStore_php*)native_object)->Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0));
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewVirtualListModel_php*)native_object)->Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0));
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewTreeStore_php*)native_object)->Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0));
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewModel_php*)native_object)->Compare(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, (unsigned int) column0, ascending0));
				}

				references->AddReference(item10, "wxDataViewModel::Compare at call with 4 argument(s)");
				references->AddReference(item20, "wxDataViewModel::Compare at call with 4 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::Compare\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewModel::GetAttr(wxDataViewItem item, int col, wxDataViewItemAttr &attr)
   Override this to indicate that the item has special font attributes. */
PHP_METHOD(php_wxDataViewModel, GetAttr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::GetAttr\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::GetAttr call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	long col0;
	zval* attr0 = 0;
	wxDataViewItemAttr* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OlO' (&item0, php_wxDataViewItem_entry, &col0, &attr0, php_wxDataViewItemAttr_entry)\n");
		#endif

		char parse_parameters_string[] = "OlO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &col0, &attr0, php_wxDataViewItemAttr_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(attr0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItemAttr*) zend_object_store_get_object(attr0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItemAttr*) zend_object_store_get_object(attr0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxDataViewItemAttr*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'attr' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(attr0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'attr' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)native_object)->GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)native_object)->GetAttr(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}

				references->AddReference(item0, "wxDataViewModel::GetAttr at call with 3 argument(s)");
				references->AddReference(attr0, "wxDataViewModel::GetAttr at call with 3 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::GetAttr\n");
	}
}
/* }}} */

/* {{{ proto int wxDataViewModel::GetColumnCount()
   Override this to indicate the number of columns in the model. */
unsigned int wxDataViewModel_php::GetColumnCount()const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModel::GetColumnCount\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval* arguments[1];
	arguments[0] = NULL;
	params[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetColumnCount", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
		

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "GetColumnCount", 14, &return_value, 0, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewModel::GetColumnCount'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return (unsigned int) Z_LVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto string wxDataViewModel::GetColumnType(int col)
   Override this to indicate what type of data is stored in the column specified by col. */
wxString wxDataViewModel_php::GetColumnType(unsigned int col)const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModel::GetColumnType\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetColumnType", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], col);
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "GetColumnType", 13, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewModel::GetColumnType'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return wxString(Z_STRVAL_P(return_value), wxConvUTF8);
	
}
/* }}} */

/* {{{ proto wxDataViewItem wxDataViewModel::GetParent(wxDataViewItem item)
   Override this to indicate which wxDataViewItem representing the parent of item or an invalid wxDataViewItem if the root item is the parent item. */
wxDataViewItem wxDataViewModel_php::GetParent(const wxDataViewItem& item)const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModel::GetParent\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetParent", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	((zo_wxDataViewItem*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxDataViewItem_php*) &item;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "GetParent", 9, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewModel::GetParent'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	if(Z_TYPE_P(return_value) == IS_OBJECT)
	{
		return_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object;
	}

	//Threat it as a normal object on the calling function and not a php user space intiialized one
	((zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC))->is_user_initialized = 0;
	wxDataViewItem_php* var = (wxDataViewItem_php*) return_object;
	var->references.UnInitialize();

	return *(wxDataViewItem*) return_object;
	
}
/* }}} */

/* {{{ proto  wxDataViewModel::GetValue(wxVariant &variant, wxDataViewItem item, int col)
   Override this to indicate the value of item. */
void wxDataViewModel_php::GetValue(wxVariant& variant, const wxDataViewItem& item, unsigned int col)const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModel::GetValue\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[3];
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetValue", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxVariant_entry);
	((zo_wxVariant*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxVariant_php*) &variant;
	object_init_ex(arguments[1], php_wxDataViewItem_entry);
	((zo_wxDataViewItem*) zend_object_store_get_object(arguments[1] TSRMLS_CC))->native_object = (wxDataViewItem_php*) &item;
	ZVAL_LONG(arguments[2], col);
		
	for(int i=0; i<3; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "GetValue", 8, &return_value, 3, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<3; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewModel::GetValue'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return;
	
}
/* }}} */

/* {{{ proto bool wxDataViewModel::HasContainerColumns(wxDataViewItem item)
   Override this method to indicate if a container item merely acts as a headline (or for categorisation) or if it also acts a normal item with entries for further columns. */
PHP_METHOD(php_wxDataViewModel, HasContainerColumns)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::HasContainerColumns\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::HasContainerColumns call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::HasContainerColumns(*(wxDataViewItem*) object_pointer0_0))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->HasContainerColumns(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->HasContainerColumns(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->HasContainerColumns(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->HasContainerColumns(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)native_object)->HasContainerColumns(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)native_object)->HasContainerColumns(*(wxDataViewItem*) object_pointer0_0));
				}

				references->AddReference(item0, "wxDataViewModel::HasContainerColumns at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::HasContainerColumns\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewModel::HasDefaultCompare()
   Override this to indicate that the model provides a default compare function that the control should use if no wxDataViewColumn has been chosen for sorting. */
PHP_METHOD(php_wxDataViewModel, HasDefaultCompare)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::HasDefaultCompare\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::HasDefaultCompare call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::HasDefaultCompare())\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->HasDefaultCompare());
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->HasDefaultCompare());
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->HasDefaultCompare());
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->HasDefaultCompare());
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)native_object)->HasDefaultCompare());
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)native_object)->HasDefaultCompare());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::HasDefaultCompare\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewModel::HasValue(wxDataViewItem item, int col)
   Return true if there is a value in the given column of this item. */
PHP_METHOD(php_wxDataViewModel, HasValue)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::HasValue\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::HasValue call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ol' (&item0, php_wxDataViewItem_entry, &col0)\n");
		#endif

		char parse_parameters_string[] = "Ol";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)native_object)->HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)native_object)->HasValue(*(wxDataViewItem*) object_pointer0_0, (unsigned) col0));
				}

				references->AddReference(item0, "wxDataViewModel::HasValue at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::HasValue\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewModel::IsContainer(wxDataViewItem item)
   Override this to indicate of item is a container, i.e. if it can have child items. */
bool wxDataViewModel_php::IsContainer(const wxDataViewItem& item)const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModel::IsContainer\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "IsContainer", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	((zo_wxDataViewItem*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxDataViewItem_php*) &item;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "IsContainer", 11, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewModel::IsContainer'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto bool wxDataViewModel::IsEnabled(wxDataViewItem item, int col)
   Override this to indicate that the item should be disabled. */
PHP_METHOD(php_wxDataViewModel, IsEnabled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::IsEnabled\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::IsEnabled call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ol' (&item0, php_wxDataViewItem_entry, &col0)\n");
		#endif

		char parse_parameters_string[] = "Ol";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)native_object)->IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)native_object)->IsEnabled(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}

				references->AddReference(item0, "wxDataViewModel::IsEnabled at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::IsEnabled\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewModel::ItemAdded(wxDataViewItem parent, wxDataViewItem item)
   Call this to inform the model that an item has been added to the data. */
PHP_METHOD(php_wxDataViewModel, ItemAdded)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::ItemAdded\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::ItemAdded call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&parent0, php_wxDataViewItem_entry, &item0, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)native_object)->ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)native_object)->ItemAdded(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}

				references->AddReference(parent0, "wxDataViewModel::ItemAdded at call with 2 argument(s)");
				references->AddReference(item0, "wxDataViewModel::ItemAdded at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::ItemAdded\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewModel::ItemChanged(wxDataViewItem item)
   Call this to inform the model that an item has changed. */
PHP_METHOD(php_wxDataViewModel, ItemChanged)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::ItemChanged\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::ItemChanged call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::ItemChanged(*(wxDataViewItem*) object_pointer0_0))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->ItemChanged(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->ItemChanged(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->ItemChanged(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->ItemChanged(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)native_object)->ItemChanged(*(wxDataViewItem*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)native_object)->ItemChanged(*(wxDataViewItem*) object_pointer0_0));
				}

				references->AddReference(item0, "wxDataViewModel::ItemChanged at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::ItemChanged\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewModel::ItemDeleted(wxDataViewItem parent, wxDataViewItem item)
   Call this to inform the model that an item has been deleted from the data. */
PHP_METHOD(php_wxDataViewModel, ItemDeleted)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::ItemDeleted\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::ItemDeleted call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&parent0, php_wxDataViewItem_entry, &item0, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)native_object)->ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)native_object)->ItemDeleted(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1));
				}

				references->AddReference(parent0, "wxDataViewModel::ItemDeleted at call with 2 argument(s)");
				references->AddReference(item0, "wxDataViewModel::ItemDeleted at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::ItemDeleted\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewModel::RemoveNotifier(wxDataViewModelNotifier &notifier)
   Remove the notifier from the list of notifiers. */
PHP_METHOD(php_wxDataViewModel, RemoveNotifier)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::RemoveNotifier\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::RemoveNotifier call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* notifier0 = 0;
	wxDataViewModelNotifier* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&notifier0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &notifier0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(notifier0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewModelNotifier*) zend_object_store_get_object(notifier0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewModelNotifier*) zend_object_store_get_object(notifier0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewModelNotifier*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXDATAVIEWMODELNOTIFIER_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'notifier' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(notifier0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'notifier' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewModel::RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0)\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					((wxDataViewListModel_php*)native_object)->RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					((wxDataViewIndexListModel_php*)native_object)->RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					((wxDataViewListStore_php*)native_object)->RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					((wxDataViewVirtualListModel_php*)native_object)->RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					((wxDataViewTreeStore_php*)native_object)->RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					((wxDataViewModel_php*)native_object)->RemoveNotifier((wxDataViewModelNotifier*) object_pointer0_0);
				}

				references->AddReference(notifier0, "wxDataViewModel::RemoveNotifier at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::RemoveNotifier\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewModel::Resort()
   Call this to initiate a resort after the sort function has been changed. */
PHP_METHOD(php_wxDataViewModel, Resort)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::Resort\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::Resort call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewModel::Resort()\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					((wxDataViewListModel_php*)native_object)->Resort();
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					((wxDataViewIndexListModel_php*)native_object)->Resort();
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					((wxDataViewListStore_php*)native_object)->Resort();
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					((wxDataViewVirtualListModel_php*)native_object)->Resort();
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					((wxDataViewTreeStore_php*)native_object)->Resort();
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					((wxDataViewModel_php*)native_object)->Resort();
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::Resort\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewModel::SetValue(wxVariant variant, wxDataViewItem item, int col)
   This gets called in order to set a value in the data model. */
bool wxDataViewModel_php::SetValue(const wxVariant& variant, const wxDataViewItem& item, unsigned int col)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModel::SetValue\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[3];
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "SetValue", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxVariant_entry);
	((zo_wxVariant*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxVariant_php*) &variant;
	object_init_ex(arguments[1], php_wxDataViewItem_entry);
	((zo_wxDataViewItem*) zend_object_store_get_object(arguments[1] TSRMLS_CC))->native_object = (wxDataViewItem_php*) &item;
	ZVAL_LONG(arguments[2], col);
		
	for(int i=0; i<3; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "SetValue", 8, &return_value, 3, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<3; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewModel::SetValue'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto bool wxDataViewModel::ValueChanged(wxDataViewItem item, int col)
   Call this to inform this model that a value in the model has been changed. */
PHP_METHOD(php_wxDataViewModel, ValueChanged)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModel::ValueChanged\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModel::ValueChanged call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE){
				references = &((wxDataViewModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ol' (&item0, php_wxDataViewItem_entry, &col0)\n");
		#endif

		char parse_parameters_string[] = "Ol";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewModel::ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTreeStore_php*)native_object)->ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewModel_php*)native_object)->ValueChanged(*(wxDataViewItem*) object_pointer0_0, (unsigned int) col0));
				}

				references->AddReference(item0, "wxDataViewModel::ValueChanged at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModel::ValueChanged\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewListModel_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewListModel* custom_object = (zo_wxDataViewListModel*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewListModel_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewListModel done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewListModel_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewListModel_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewListModel* custom_object;
    custom_object = (zo_wxDataViewListModel*) emalloc(sizeof(zo_wxDataViewListModel));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewListModel_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWLISTMODEL_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxDataViewListModel::GetAttrByRow(int row, int col, wxDataViewItemAttr &attr)
   Override this to indicate that the row has special font attributes. */
PHP_METHOD(php_wxDataViewListModel, GetAttrByRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListModel::GetAttrByRow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewListModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewListModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewListModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewListModel::GetAttrByRow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long row0;
	long col0;
	zval* attr0 = 0;
	wxDataViewItemAttr* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llO' (&row0, &col0, &attr0, php_wxDataViewItemAttr_entry)\n");
		#endif

		char parse_parameters_string[] = "llO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &row0, &col0, &attr0, php_wxDataViewItemAttr_entry ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(attr0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItemAttr*) zend_object_store_get_object(attr0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItemAttr*) zend_object_store_get_object(attr0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxDataViewItemAttr*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'attr' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(attr0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'attr' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewListModel::GetAttrByRow((unsigned int) row0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->GetAttrByRow((unsigned int) row0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->GetAttrByRow((unsigned int) row0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->GetAttrByRow((unsigned int) row0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->GetAttrByRow((unsigned int) row0, (unsigned int) col0, *(wxDataViewItemAttr*) object_pointer0_2));
				}

				references->AddReference(attr0, "wxDataViewListModel::GetAttrByRow at call with 3 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewListModel::GetAttrByRow\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewListModel::GetValueByRow(wxVariant &variant, int row, int col)
   Override this to allow getting values from the model. */
void wxDataViewListModel_php::GetValueByRow(wxVariant& variant, unsigned int row, unsigned int col)const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewListModel::GetValueByRow\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[3];
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetValueByRow", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxVariant_entry);
	((zo_wxVariant*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxVariant_php*) &variant;
	ZVAL_LONG(arguments[1], row);
	ZVAL_LONG(arguments[2], col);
		
	for(int i=0; i<3; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "GetValueByRow", 13, &return_value, 3, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<3; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewListModel::GetValueByRow'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return;
	
}
/* }}} */

/* {{{ proto int wxDataViewListModel::GetCount()
   Returns the number of items (or rows) in the list. */
unsigned int wxDataViewListModel_php::GetCount()const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewListModel::GetCount\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval* arguments[1];
	arguments[0] = NULL;
	params[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetCount", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
		

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "GetCount", 8, &return_value, 0, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewListModel::GetCount'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return (unsigned int) Z_LVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto int wxDataViewListModel::GetRow(wxDataViewItem item)
   Returns the position of given item. */
unsigned int wxDataViewListModel_php::GetRow(const wxDataViewItem& item)const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewListModel::GetRow\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetRow", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	((zo_wxDataViewItem*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxDataViewItem_php*) &item;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "GetRow", 6, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewListModel::GetRow'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return (unsigned int) Z_LVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto bool wxDataViewListModel::IsEnabledByRow(int row, int col)
   Override this if you want to disable specific items. */
PHP_METHOD(php_wxDataViewListModel, IsEnabledByRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListModel::IsEnabledByRow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewListModel* current_object;
	wxphp_object_type current_object_type;
	wxDataViewListModel_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewListModel*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewListModel::IsEnabledByRow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE){
				references = &((wxDataViewListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIndexListModel_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE) && (!reference_type_found)){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE) && (!reference_type_found)){
				references = &((wxDataViewVirtualListModel_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long row0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&row0, &col0)\n");
		#endif

		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &row0, &col0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewListModel::IsEnabledByRow((unsigned int) row0, (unsigned int) col0))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWINDEXLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIndexListModel_php*)native_object)->IsEnabledByRow((unsigned int) row0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->IsEnabledByRow((unsigned int) row0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewVirtualListModel_php*)native_object)->IsEnabledByRow((unsigned int) row0, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWLISTMODEL_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewListModel_php*)native_object)->IsEnabledByRow((unsigned int) row0, (unsigned int) col0));
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewListModel::IsEnabledByRow\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewListModel::SetValueByRow(wxVariant variant, int row, int col)
   Called in order to set a value in the model. */
bool wxDataViewListModel_php::SetValueByRow(const wxVariant& variant, unsigned int row, unsigned int col)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewListModel::SetValueByRow\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[3];
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "SetValueByRow", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxVariant_entry);
	((zo_wxVariant*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxVariant_php*) &variant;
	ZVAL_LONG(arguments[1], row);
	ZVAL_LONG(arguments[2], col);
		
	for(int i=0; i<3; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "SetValueByRow", 13, &return_value, 3, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<3; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewListModel::SetValueByRow'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewIndexListModel_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewIndexListModel* custom_object = (zo_wxDataViewIndexListModel*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewIndexListModel_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewIndexListModel done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewIndexListModel_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewIndexListModel_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewIndexListModel* custom_object;
    custom_object = (zo_wxDataViewIndexListModel*) emalloc(sizeof(zo_wxDataViewIndexListModel));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewIndexListModel_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWINDEXLISTMODEL_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

BEGIN_EXTERN_C()
void php_wxDataViewVirtualListModel_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewVirtualListModel* custom_object = (zo_wxDataViewVirtualListModel*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewVirtualListModel_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewVirtualListModel done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewVirtualListModel_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewVirtualListModel_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewVirtualListModel* custom_object;
    custom_object = (zo_wxDataViewVirtualListModel*) emalloc(sizeof(zo_wxDataViewVirtualListModel));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewVirtualListModel_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

BEGIN_EXTERN_C()
void php_wxDataViewItemAttr_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewItemAttr* custom_object = (zo_wxDataViewItemAttr*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewItemAttr_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewItemAttr done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewItemAttr_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewItemAttr_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewItemAttr* custom_object;
    custom_object = (zo_wxDataViewItemAttr*) emalloc(sizeof(zo_wxDataViewItemAttr));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewItemAttr_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWITEMATTR_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxDataViewItemAttr::SetBold(bool set)
   Call this to indicate that the item shall be displayed in bold text. */
PHP_METHOD(php_wxDataViewItemAttr, SetBold)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItemAttr::SetBold\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewItemAttr* current_object;
	wxphp_object_type current_object_type;
	wxDataViewItemAttr_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewItemAttr*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewItemAttr::SetBold call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWITEMATTR_TYPE){
				references = &((wxDataViewItemAttr_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool set0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&set0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &set0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewItemAttr::SetBold(set0)\n\n");
				#endif

				((wxDataViewItemAttr_php*)native_object)->SetBold(set0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewItemAttr::SetBold\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewItemAttr::SetColour(wxColour colour)
   Call this to indicate that the item shall be displayed with that colour. */
PHP_METHOD(php_wxDataViewItemAttr, SetColour)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItemAttr::SetColour\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewItemAttr* current_object;
	wxphp_object_type current_object_type;
	wxDataViewItemAttr_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewItemAttr*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewItemAttr::SetColour call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWITEMATTR_TYPE){
				references = &((wxDataViewItemAttr_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* colour0 = 0;
	wxColour* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&colour0, php_wxColour_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &colour0, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(colour0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(colour0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(colour0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxColour*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'colour' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'colour' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewItemAttr::SetColour(*(wxColour*) object_pointer0_0)\n\n");
				#endif

				((wxDataViewItemAttr_php*)native_object)->SetColour(*(wxColour*) object_pointer0_0);

				references->AddReference(colour0, "wxDataViewItemAttr::SetColour at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewItemAttr::SetColour\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewItemAttr::SetItalic(bool set)
   Call this to indicate that the item shall be displayed in italic text. */
PHP_METHOD(php_wxDataViewItemAttr, SetItalic)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItemAttr::SetItalic\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewItemAttr* current_object;
	wxphp_object_type current_object_type;
	wxDataViewItemAttr_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewItemAttr*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewItemAttr::SetItalic call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWITEMATTR_TYPE){
				references = &((wxDataViewItemAttr_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool set0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&set0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &set0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewItemAttr::SetItalic(set0)\n\n");
				#endif

				((wxDataViewItemAttr_php*)native_object)->SetItalic(set0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewItemAttr::SetItalic\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewItemAttr::wxDataViewItemAttr()
   Constructor. */
PHP_METHOD(php_wxDataViewItemAttr, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItemAttr::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewItemAttr* current_object;
	wxDataViewItemAttr_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewItemAttr_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewItemAttr*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewItemAttr::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewItem_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewItem* custom_object = (zo_wxDataViewItem*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewItem_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewItem done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewItem_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewItem_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewItem* custom_object;
    custom_object = (zo_wxDataViewItem*) emalloc(sizeof(zo_wxDataViewItem));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewItem_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWITEM_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto void wxDataViewItem::GetID()
   Returns the ID. */
PHP_METHOD(php_wxDataViewItem, GetID)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItem::GetID\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewItem* current_object;
	wxphp_object_type current_object_type;
	wxDataViewItem_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewItem*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewItem::GetID call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWITEM_TYPE){
				references = &((wxDataViewItem_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewItem::GetID()\n\n");
				#endif

				ZVAL_STRING(return_value, (char*) ((wxDataViewItem_php*)native_object)->GetID(), 1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewItem::GetID\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewItem::IsOk()
   Returns true if the ID is not NULL. */
PHP_METHOD(php_wxDataViewItem, IsOk)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItem::IsOk\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewItem* current_object;
	wxphp_object_type current_object_type;
	wxDataViewItem_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewItem*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewItem::IsOk call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWITEM_TYPE){
				references = &((wxDataViewItem_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewItem::IsOk())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxDataViewItem_php*)native_object)->IsOk());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewItem::IsOk\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewItem::wxDataViewItem()
   Constructor. */
PHP_METHOD(php_wxDataViewItem, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewItem::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewItem* current_object;
	wxDataViewItem_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* item1 = 0;
	wxDataViewItem* object_pointer1_0 = 0;
	bool overload1_called = false;
	//Parameters for overload 2
	char* id2;
	long id_len2;
	zval* id2_ref;
	bool overload2_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item1, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item1, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer1_0 )
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(item1) != IS_NULL)
				{
					goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&id2, &id_len2)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id2, &id_len2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;

			char parse_references_string[] = "z";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &id2_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewItem_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxDataViewItem*) object_pointer1_0)\n");
				#endif

				native_object = new wxDataViewItem_php(*(wxDataViewItem*) object_pointer1_0);

				native_object->references.Initialize();
				((wxDataViewItem_php*) native_object)->references.AddReference(item1, "wxDataViewItem::wxDataViewItem at call with 1 argument(s)");
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((void*) id2)\n");
				#endif

				native_object = new wxDataViewItem_php((void*) id2);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewItem*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewItem::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewModelNotifier_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewModelNotifier* custom_object = (zo_wxDataViewModelNotifier*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewModelNotifier_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewModelNotifier done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewModelNotifier_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewModelNotifier_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewModelNotifier* custom_object;
    custom_object = (zo_wxDataViewModelNotifier*) emalloc(sizeof(zo_wxDataViewModelNotifier));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewModelNotifier_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWMODELNOTIFIER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxDataViewModelNotifier::Cleared()
   Called by owning model. */
bool wxDataViewModelNotifier_php::Cleared()
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModelNotifier::Cleared\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval* arguments[1];
	arguments[0] = NULL;
	params[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "Cleared", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
		

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "Cleared", 7, &return_value, 0, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewModelNotifier::Cleared'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto wxDataViewModel wxDataViewModelNotifier::GetOwner()
   Get owning wxDataViewModel. */
PHP_METHOD(php_wxDataViewModelNotifier, GetOwner)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModelNotifier::GetOwner\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModelNotifier* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModelNotifier_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModelNotifier*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModelNotifier::GetOwner call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODELNOTIFIER_TYPE){
				references = &((wxDataViewModelNotifier_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewModelNotifier::GetOwner() to return object pointer\n\n");
				#endif

				wxDataViewModel_php* value_to_return0;
				value_to_return0 = (wxDataViewModel_php*) ((wxDataViewModelNotifier_php*)native_object)->GetOwner();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxDataViewModel_entry);
					((zo_wxDataViewModel*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewModel_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxDataViewModelNotifier::GetOwner at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModelNotifier::GetOwner\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewModelNotifier::ItemAdded(wxDataViewItem parent, wxDataViewItem item)
   Called by owning model. */
bool wxDataViewModelNotifier_php::ItemAdded(const wxDataViewItem& parent, const wxDataViewItem& item)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModelNotifier::ItemAdded\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[2];
	zval *arguments[2];
	
	//Initilize arguments array
	for(int i=0; i<2; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "ItemAdded", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	((zo_wxDataViewItem*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxDataViewItem_php*) &parent;
	object_init_ex(arguments[1], php_wxDataViewItem_entry);
	((zo_wxDataViewItem*) zend_object_store_get_object(arguments[1] TSRMLS_CC))->native_object = (wxDataViewItem_php*) &item;
		
	for(int i=0; i<2; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "ItemAdded", 9, &return_value, 2, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<2; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewModelNotifier::ItemAdded'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto bool wxDataViewModelNotifier::ItemChanged(wxDataViewItem item)
   Called by owning model. */
bool wxDataViewModelNotifier_php::ItemChanged(const wxDataViewItem& item)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModelNotifier::ItemChanged\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "ItemChanged", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	((zo_wxDataViewItem*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxDataViewItem_php*) &item;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "ItemChanged", 11, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewModelNotifier::ItemChanged'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto bool wxDataViewModelNotifier::ItemDeleted(wxDataViewItem parent, wxDataViewItem item)
   Called by owning model. */
bool wxDataViewModelNotifier_php::ItemDeleted(const wxDataViewItem& parent, const wxDataViewItem& item)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModelNotifier::ItemDeleted\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[2];
	zval *arguments[2];
	
	//Initilize arguments array
	for(int i=0; i<2; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "ItemDeleted", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	((zo_wxDataViewItem*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxDataViewItem_php*) &parent;
	object_init_ex(arguments[1], php_wxDataViewItem_entry);
	((zo_wxDataViewItem*) zend_object_store_get_object(arguments[1] TSRMLS_CC))->native_object = (wxDataViewItem_php*) &item;
		
	for(int i=0; i<2; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "ItemDeleted", 11, &return_value, 2, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<2; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewModelNotifier::ItemDeleted'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto  wxDataViewModelNotifier::Resort()
   Called by owning model. */
void wxDataViewModelNotifier_php::Resort()
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModelNotifier::Resort\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval* arguments[1];
	arguments[0] = NULL;
	params[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "Resort", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
		

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "Resort", 6, &return_value, 0, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewModelNotifier::Resort'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return;
	
}
/* }}} */

/* {{{ proto  wxDataViewModelNotifier::SetOwner(wxDataViewModel &owner)
   Set owner of this notifier. */
PHP_METHOD(php_wxDataViewModelNotifier, SetOwner)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModelNotifier::SetOwner\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModelNotifier* current_object;
	wxphp_object_type current_object_type;
	wxDataViewModelNotifier_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewModelNotifier*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewModelNotifier::SetOwner call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWMODELNOTIFIER_TYPE){
				references = &((wxDataViewModelNotifier_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* owner0 = 0;
	wxDataViewModel* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&owner0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &owner0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(owner0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewModel*) zend_object_store_get_object(owner0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewModel*) zend_object_store_get_object(owner0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewModel*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXDATAVIEWMODEL_TYPE && argument_type != PHP_WXDATAVIEWLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWINDEXLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWLISTSTORE_TYPE && argument_type != PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWTREESTORE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'owner' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(owner0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'owner' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewModelNotifier::SetOwner((wxDataViewModel*) object_pointer0_0)\n\n");
				#endif

				((wxDataViewModelNotifier_php*)native_object)->SetOwner((wxDataViewModel*) object_pointer0_0);

				references->AddReference(owner0, "wxDataViewModelNotifier::SetOwner at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewModelNotifier::SetOwner\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewModelNotifier::ValueChanged(wxDataViewItem item, int col)
   Called by owning model. */
bool wxDataViewModelNotifier_php::ValueChanged(const wxDataViewItem& item, unsigned int col)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewModelNotifier::ValueChanged\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[2];
	zval *arguments[2];
	
	//Initilize arguments array
	for(int i=0; i<2; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "ValueChanged", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxDataViewItem_entry);
	((zo_wxDataViewItem*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxDataViewItem_php*) &item;
	ZVAL_LONG(arguments[1], col);
		
	for(int i=0; i<2; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "ValueChanged", 12, &return_value, 2, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<2; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewModelNotifier::ValueChanged'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto  wxDataViewModelNotifier::wxDataViewModelNotifier()
   Constructor. */
PHP_METHOD(php_wxDataViewModelNotifier, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewModelNotifier::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewModelNotifier* current_object;
	wxDataViewModelNotifier_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewModelNotifier_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewModelNotifier*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewModelNotifier::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewRenderer_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewRenderer* custom_object = (zo_wxDataViewRenderer*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewRenderer_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewRenderer_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewRenderer_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewRenderer* custom_object;
    custom_object = (zo_wxDataViewRenderer*) emalloc(sizeof(zo_wxDataViewRenderer));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewRenderer_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWRENDERER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxDataViewRenderer::EnableEllipsize(wxEllipsizeMode mode)
   Enable or disable replacing parts of the item text with ellipsis to make it fit the column width. */
PHP_METHOD(php_wxDataViewRenderer, EnableEllipsize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::EnableEllipsize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewRenderer::EnableEllipsize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE){
				references = &((wxDataViewRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long mode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&mode0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &mode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewRenderer::EnableEllipsize()\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE)
				{
					((wxDataViewBitmapRenderer_php*)native_object)->EnableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE)
				{
					((wxDataViewChoiceRenderer_php*)native_object)->EnableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					((wxDataViewCustomRenderer_php*)native_object)->EnableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					((wxDataViewSpinRenderer_php*)native_object)->EnableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE)
				{
					((wxDataViewDateRenderer_php*)native_object)->EnableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE)
				{
					((wxDataViewIconTextRenderer_php*)native_object)->EnableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE)
				{
					((wxDataViewProgressRenderer_php*)native_object)->EnableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE)
				{
					((wxDataViewTextRenderer_php*)native_object)->EnableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE)
				{
					((wxDataViewToggleRenderer_php*)native_object)->EnableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE)
				{
					((wxDataViewRenderer_php*)native_object)->EnableEllipsize();
				}


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewRenderer::EnableEllipsize((wxEllipsizeMode) mode0)\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE)
				{
					((wxDataViewBitmapRenderer_php*)native_object)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE)
				{
					((wxDataViewChoiceRenderer_php*)native_object)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					((wxDataViewCustomRenderer_php*)native_object)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					((wxDataViewSpinRenderer_php*)native_object)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE)
				{
					((wxDataViewDateRenderer_php*)native_object)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE)
				{
					((wxDataViewIconTextRenderer_php*)native_object)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE)
				{
					((wxDataViewProgressRenderer_php*)native_object)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE)
				{
					((wxDataViewTextRenderer_php*)native_object)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE)
				{
					((wxDataViewToggleRenderer_php*)native_object)->EnableEllipsize((wxEllipsizeMode) mode0);
				}
				else if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE)
				{
					((wxDataViewRenderer_php*)native_object)->EnableEllipsize((wxEllipsizeMode) mode0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewRenderer::EnableEllipsize\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewRenderer::DisableEllipsize()
   Disable replacing parts of the item text with ellipsis. */
PHP_METHOD(php_wxDataViewRenderer, DisableEllipsize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::DisableEllipsize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewRenderer::DisableEllipsize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE){
				references = &((wxDataViewRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewRenderer::DisableEllipsize()\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE)
				{
					((wxDataViewBitmapRenderer_php*)native_object)->DisableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE)
				{
					((wxDataViewChoiceRenderer_php*)native_object)->DisableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					((wxDataViewCustomRenderer_php*)native_object)->DisableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					((wxDataViewSpinRenderer_php*)native_object)->DisableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE)
				{
					((wxDataViewDateRenderer_php*)native_object)->DisableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE)
				{
					((wxDataViewIconTextRenderer_php*)native_object)->DisableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE)
				{
					((wxDataViewProgressRenderer_php*)native_object)->DisableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE)
				{
					((wxDataViewTextRenderer_php*)native_object)->DisableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE)
				{
					((wxDataViewToggleRenderer_php*)native_object)->DisableEllipsize();
				}
				else if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE)
				{
					((wxDataViewRenderer_php*)native_object)->DisableEllipsize();
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewRenderer::DisableEllipsize\n");
	}
}
/* }}} */

/* {{{ proto int wxDataViewRenderer::GetAlignment()
   Returns the alignment. */
PHP_METHOD(php_wxDataViewRenderer, GetAlignment)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::GetAlignment\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewRenderer::GetAlignment call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE){
				references = &((wxDataViewRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewRenderer::GetAlignment())\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewBitmapRenderer_php*)native_object)->GetAlignment());
				}
				else if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewChoiceRenderer_php*)native_object)->GetAlignment());
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewCustomRenderer_php*)native_object)->GetAlignment());
				}
				else if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewSpinRenderer_php*)native_object)->GetAlignment());
				}
				else if(current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewDateRenderer_php*)native_object)->GetAlignment());
				}
				else if(current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewIconTextRenderer_php*)native_object)->GetAlignment());
				}
				else if(current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewProgressRenderer_php*)native_object)->GetAlignment());
				}
				else if(current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewTextRenderer_php*)native_object)->GetAlignment());
				}
				else if(current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewToggleRenderer_php*)native_object)->GetAlignment());
				}
				else if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewRenderer_php*)native_object)->GetAlignment());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewRenderer::GetAlignment\n");
	}
}
/* }}} */

/* {{{ proto wxEllipsizeMode wxDataViewRenderer::GetEllipsizeMode()
   Returns the ellipsize mode used by the renderer. */
PHP_METHOD(php_wxDataViewRenderer, GetEllipsizeMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::GetEllipsizeMode\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewRenderer::GetEllipsizeMode call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE){
				references = &((wxDataViewRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewRenderer::GetEllipsizeMode())\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewBitmapRenderer_php*)native_object)->GetEllipsizeMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewChoiceRenderer_php*)native_object)->GetEllipsizeMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewCustomRenderer_php*)native_object)->GetEllipsizeMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewSpinRenderer_php*)native_object)->GetEllipsizeMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewDateRenderer_php*)native_object)->GetEllipsizeMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewIconTextRenderer_php*)native_object)->GetEllipsizeMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewProgressRenderer_php*)native_object)->GetEllipsizeMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewTextRenderer_php*)native_object)->GetEllipsizeMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewToggleRenderer_php*)native_object)->GetEllipsizeMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewRenderer_php*)native_object)->GetEllipsizeMode());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewRenderer::GetEllipsizeMode\n");
	}
}
/* }}} */

/* {{{ proto wxDataViewCellMode wxDataViewRenderer::GetMode()
   Returns the cell mode. */
PHP_METHOD(php_wxDataViewRenderer, GetMode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::GetMode\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewRenderer::GetMode call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE){
				references = &((wxDataViewRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewRenderer::GetMode())\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewBitmapRenderer_php*)native_object)->GetMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewChoiceRenderer_php*)native_object)->GetMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewCustomRenderer_php*)native_object)->GetMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewSpinRenderer_php*)native_object)->GetMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewDateRenderer_php*)native_object)->GetMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewIconTextRenderer_php*)native_object)->GetMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewProgressRenderer_php*)native_object)->GetMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewTextRenderer_php*)native_object)->GetMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewToggleRenderer_php*)native_object)->GetMode());
				}
				else if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxDataViewRenderer_php*)native_object)->GetMode());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewRenderer::GetMode\n");
	}
}
/* }}} */

/* {{{ proto wxDataViewColumn wxDataViewRenderer::GetOwner()
   Returns pointer to the owning wxDataViewColumn. */
PHP_METHOD(php_wxDataViewRenderer, GetOwner)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::GetOwner\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewRenderer::GetOwner call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE){
				references = &((wxDataViewRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewRenderer::GetOwner() to return object pointer\n\n");
				#endif

				wxDataViewColumn_php* value_to_return0;
				if(current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewBitmapRenderer_php*)native_object)->GetOwner();

				}
				else if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewChoiceRenderer_php*)native_object)->GetOwner();

				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewCustomRenderer_php*)native_object)->GetOwner();

				}
				else if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewSpinRenderer_php*)native_object)->GetOwner();

				}
				else if(current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewDateRenderer_php*)native_object)->GetOwner();

				}
				else if(current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewIconTextRenderer_php*)native_object)->GetOwner();

				}
				else if(current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewProgressRenderer_php*)native_object)->GetOwner();

				}
				else if(current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewTextRenderer_php*)native_object)->GetOwner();

				}
				else if(current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewToggleRenderer_php*)native_object)->GetOwner();

				}
				else if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE)
				{
					value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewRenderer_php*)native_object)->GetOwner();

				}
				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxDataViewColumn_entry);
					((zo_wxDataViewColumn*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewColumn_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxDataViewRenderer::GetOwner at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewRenderer::GetOwner\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewRenderer::GetValue(wxVariant &value)
   This methods retrieves the value from the renderer in order to transfer the value back to the data model. */
bool wxDataViewRenderer_php::GetValue(wxVariant& value)const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewRenderer::GetValue\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetValue", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxVariant_entry);
	((zo_wxVariant*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxVariant_php*) &value;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "GetValue", 8, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewRenderer::GetValue'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto string wxDataViewRenderer::GetVariantType()
   Returns a string with the type of the wxVariant supported by this renderer. */
PHP_METHOD(php_wxDataViewRenderer, GetVariantType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::GetVariantType\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewRenderer::GetVariantType call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE){
				references = &((wxDataViewRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxDataViewRenderer::GetVariantType().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				if(current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE)
				{
					value_to_return0 = ((wxDataViewBitmapRenderer_php*)native_object)->GetVariantType();
				}
				else if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE)
				{
					value_to_return0 = ((wxDataViewChoiceRenderer_php*)native_object)->GetVariantType();
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					value_to_return0 = ((wxDataViewCustomRenderer_php*)native_object)->GetVariantType();
				}
				else if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					value_to_return0 = ((wxDataViewSpinRenderer_php*)native_object)->GetVariantType();
				}
				else if(current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE)
				{
					value_to_return0 = ((wxDataViewDateRenderer_php*)native_object)->GetVariantType();
				}
				else if(current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE)
				{
					value_to_return0 = ((wxDataViewIconTextRenderer_php*)native_object)->GetVariantType();
				}
				else if(current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE)
				{
					value_to_return0 = ((wxDataViewProgressRenderer_php*)native_object)->GetVariantType();
				}
				else if(current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE)
				{
					value_to_return0 = ((wxDataViewTextRenderer_php*)native_object)->GetVariantType();
				}
				else if(current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE)
				{
					value_to_return0 = ((wxDataViewToggleRenderer_php*)native_object)->GetVariantType();
				}
				else if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE)
				{
					value_to_return0 = ((wxDataViewRenderer_php*)native_object)->GetVariantType();
				}
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewRenderer::GetVariantType\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewRenderer::SetAlignment(int align)
   Sets the alignment of the renderer's content. */
PHP_METHOD(php_wxDataViewRenderer, SetAlignment)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::SetAlignment\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewRenderer::SetAlignment call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE){
				references = &((wxDataViewRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&align0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewRenderer::SetAlignment((int) align0)\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE)
				{
					((wxDataViewBitmapRenderer_php*)native_object)->SetAlignment((int) align0);
				}
				else if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE)
				{
					((wxDataViewChoiceRenderer_php*)native_object)->SetAlignment((int) align0);
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					((wxDataViewCustomRenderer_php*)native_object)->SetAlignment((int) align0);
				}
				else if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					((wxDataViewSpinRenderer_php*)native_object)->SetAlignment((int) align0);
				}
				else if(current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE)
				{
					((wxDataViewDateRenderer_php*)native_object)->SetAlignment((int) align0);
				}
				else if(current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE)
				{
					((wxDataViewIconTextRenderer_php*)native_object)->SetAlignment((int) align0);
				}
				else if(current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE)
				{
					((wxDataViewProgressRenderer_php*)native_object)->SetAlignment((int) align0);
				}
				else if(current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE)
				{
					((wxDataViewTextRenderer_php*)native_object)->SetAlignment((int) align0);
				}
				else if(current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE)
				{
					((wxDataViewToggleRenderer_php*)native_object)->SetAlignment((int) align0);
				}
				else if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE)
				{
					((wxDataViewRenderer_php*)native_object)->SetAlignment((int) align0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewRenderer::SetAlignment\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewRenderer::SetOwner(wxDataViewColumn &owner)
   Sets the owning wxDataViewColumn. */
PHP_METHOD(php_wxDataViewRenderer, SetOwner)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::SetOwner\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewRenderer::SetOwner call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE){
				references = &((wxDataViewRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* owner0 = 0;
	wxDataViewColumn* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&owner0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &owner0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(owner0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewColumn*) zend_object_store_get_object(owner0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewColumn*) zend_object_store_get_object(owner0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewColumn*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXDATAVIEWCOLUMN_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'owner' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(owner0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'owner' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewRenderer::SetOwner((wxDataViewColumn*) object_pointer0_0)\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE)
				{
					((wxDataViewBitmapRenderer_php*)native_object)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE)
				{
					((wxDataViewChoiceRenderer_php*)native_object)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					((wxDataViewCustomRenderer_php*)native_object)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					((wxDataViewSpinRenderer_php*)native_object)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE)
				{
					((wxDataViewDateRenderer_php*)native_object)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE)
				{
					((wxDataViewIconTextRenderer_php*)native_object)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE)
				{
					((wxDataViewProgressRenderer_php*)native_object)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE)
				{
					((wxDataViewTextRenderer_php*)native_object)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE)
				{
					((wxDataViewToggleRenderer_php*)native_object)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}
				else if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE)
				{
					((wxDataViewRenderer_php*)native_object)->SetOwner((wxDataViewColumn*) object_pointer0_0);
				}

				references->AddReference(owner0, "wxDataViewRenderer::SetOwner at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewRenderer::SetOwner\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewRenderer::SetValue(wxVariant value)
   Set the value of the renderer (and thus its cell) to value. */
bool wxDataViewRenderer_php::SetValue(const wxVariant& value)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewRenderer::SetValue\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "SetValue", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxVariant_entry);
	((zo_wxVariant*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxVariant_php*) &value;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "SetValue", 8, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewRenderer::SetValue'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto bool wxDataViewRenderer::Validate(wxVariant &value)
   Before data is committed to the data model, it is passed to this method where it can be checked for validity. */
PHP_METHOD(php_wxDataViewRenderer, Validate)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewRenderer::Validate\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewRenderer::Validate call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE){
				references = &((wxDataViewRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewBitmapRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewChoiceRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewDateRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewIconTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewProgressRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewTextRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewToggleRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* value0 = 0;
	wxVariant* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&value0, php_wxVariant_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &value0, php_wxVariant_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(value0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxVariant*) zend_object_store_get_object(value0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxVariant*) zend_object_store_get_object(value0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxVariant*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'value' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(value0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'value' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewRenderer::Validate(*(wxVariant*) object_pointer0_0))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWBITMAPRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewBitmapRenderer_php*)native_object)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWCHOICERENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewChoiceRenderer_php*)native_object)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewCustomRenderer_php*)native_object)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewSpinRenderer_php*)native_object)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWDATERENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewDateRenderer_php*)native_object)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWICONTEXTRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewIconTextRenderer_php*)native_object)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWPROGRESSRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewProgressRenderer_php*)native_object)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWTEXTRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewTextRenderer_php*)native_object)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWTOGGLERENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewToggleRenderer_php*)native_object)->Validate(*(wxVariant*) object_pointer0_0));
				}
				else if(current_object_type == PHP_WXDATAVIEWRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewRenderer_php*)native_object)->Validate(*(wxVariant*) object_pointer0_0));
				}

				references->AddReference(value0, "wxDataViewRenderer::Validate at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewRenderer::Validate\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewTextRenderer_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewTextRenderer* custom_object = (zo_wxDataViewTextRenderer*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewTextRenderer_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewTextRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewTextRenderer_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewTextRenderer_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewTextRenderer* custom_object;
    custom_object = (zo_wxDataViewTextRenderer*) emalloc(sizeof(zo_wxDataViewTextRenderer));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewTextRenderer_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWTEXTRENDERER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxDataViewTextRenderer::wxDataViewTextRenderer(string varianttype, wxDataViewCellMode mode, int align)
   The ctor. */
PHP_METHOD(php_wxDataViewTextRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTextRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTextRenderer* current_object;
	wxDataViewTextRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sll' (&varianttype0, &varianttype_len0, &mode0, &align0)\n");
		#endif

		char parse_parameters_string[] = "|sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewTextRenderer_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8))\n");
				#endif

				native_object = new wxDataViewTextRenderer_php(wxString(varianttype0, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0)\n");
				#endif

				native_object = new wxDataViewTextRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif

				native_object = new wxDataViewTextRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewTextRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewTextRenderer::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewIconTextRenderer_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewIconTextRenderer* custom_object = (zo_wxDataViewIconTextRenderer*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewIconTextRenderer_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewIconTextRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewIconTextRenderer_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewIconTextRenderer_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewIconTextRenderer* custom_object;
    custom_object = (zo_wxDataViewIconTextRenderer*) emalloc(sizeof(zo_wxDataViewIconTextRenderer));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewIconTextRenderer_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWICONTEXTRENDERER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxDataViewIconTextRenderer::wxDataViewIconTextRenderer(string varianttype, wxDataViewCellMode mode, int align)
   The ctor. */
PHP_METHOD(php_wxDataViewIconTextRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewIconTextRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewIconTextRenderer* current_object;
	wxDataViewIconTextRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sll' (&varianttype0, &varianttype_len0, &mode0, &align0)\n");
		#endif

		char parse_parameters_string[] = "|sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewIconTextRenderer_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8))\n");
				#endif

				native_object = new wxDataViewIconTextRenderer_php(wxString(varianttype0, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0)\n");
				#endif

				native_object = new wxDataViewIconTextRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif

				native_object = new wxDataViewIconTextRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewIconTextRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewIconTextRenderer::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewProgressRenderer_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewProgressRenderer* custom_object = (zo_wxDataViewProgressRenderer*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewProgressRenderer_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewProgressRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewProgressRenderer_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewProgressRenderer_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewProgressRenderer* custom_object;
    custom_object = (zo_wxDataViewProgressRenderer*) emalloc(sizeof(zo_wxDataViewProgressRenderer));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewProgressRenderer_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWPROGRESSRENDERER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxDataViewProgressRenderer::wxDataViewProgressRenderer(string label, string varianttype, wxDataViewCellMode mode, int align)
   The ctor. */
PHP_METHOD(php_wxDataViewProgressRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewProgressRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewProgressRenderer* current_object;
	wxDataViewProgressRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	char* label0;
	long label_len0;
	char* varianttype0;
	long varianttype_len0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ssll' (&label0, &label_len0, &varianttype0, &varianttype_len0, &mode0, &align0)\n");
		#endif

		char parse_parameters_string[] = "|ssll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &label0, &label_len0, &varianttype0, &varianttype_len0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewProgressRenderer_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(label0, wxConvUTF8))\n");
				#endif

				native_object = new wxDataViewProgressRenderer_php(wxString(label0, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(label0, wxConvUTF8), wxString(varianttype0, wxConvUTF8))\n");
				#endif

				native_object = new wxDataViewProgressRenderer_php(wxString(label0, wxConvUTF8), wxString(varianttype0, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(label0, wxConvUTF8), wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0)\n");
				#endif

				native_object = new wxDataViewProgressRenderer_php(wxString(label0, wxConvUTF8), wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0);

				native_object->references.Initialize();
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(label0, wxConvUTF8), wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif

				native_object = new wxDataViewProgressRenderer_php(wxString(label0, wxConvUTF8), wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewProgressRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewProgressRenderer::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewSpinRenderer_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewSpinRenderer* custom_object = (zo_wxDataViewSpinRenderer*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewSpinRenderer_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewSpinRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewSpinRenderer_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewSpinRenderer_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewSpinRenderer* custom_object;
    custom_object = (zo_wxDataViewSpinRenderer*) emalloc(sizeof(zo_wxDataViewSpinRenderer));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewSpinRenderer_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWSPINRENDERER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxDataViewSpinRenderer::wxDataViewSpinRenderer(int min, int max, wxDataViewCellMode mode, int align)
   Constructor. */
PHP_METHOD(php_wxDataViewSpinRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewSpinRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewSpinRenderer* current_object;
	wxDataViewSpinRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long min0;
	long max0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll|ll' (&min0, &max0, &mode0, &align0)\n");
		#endif

		char parse_parameters_string[] = "ll|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &min0, &max0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) min0, (int) max0)\n");
				#endif

				native_object = new wxDataViewSpinRenderer_php((int) min0, (int) max0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) min0, (int) max0, (wxDataViewCellMode) mode0)\n");
				#endif

				native_object = new wxDataViewSpinRenderer_php((int) min0, (int) max0, (wxDataViewCellMode) mode0);

				native_object->references.Initialize();
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) min0, (int) max0, (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif

				native_object = new wxDataViewSpinRenderer_php((int) min0, (int) max0, (wxDataViewCellMode) mode0, (int) align0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewSpinRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewSpinRenderer::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewToggleRenderer_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewToggleRenderer* custom_object = (zo_wxDataViewToggleRenderer*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewToggleRenderer_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewToggleRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewToggleRenderer_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewToggleRenderer_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewToggleRenderer* custom_object;
    custom_object = (zo_wxDataViewToggleRenderer*) emalloc(sizeof(zo_wxDataViewToggleRenderer));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewToggleRenderer_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWTOGGLERENDERER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxDataViewToggleRenderer::wxDataViewToggleRenderer(string varianttype, wxDataViewCellMode mode, int align)
   The ctor. */
PHP_METHOD(php_wxDataViewToggleRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewToggleRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewToggleRenderer* current_object;
	wxDataViewToggleRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sll' (&varianttype0, &varianttype_len0, &mode0, &align0)\n");
		#endif

		char parse_parameters_string[] = "|sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewToggleRenderer_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8))\n");
				#endif

				native_object = new wxDataViewToggleRenderer_php(wxString(varianttype0, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0)\n");
				#endif

				native_object = new wxDataViewToggleRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif

				native_object = new wxDataViewToggleRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewToggleRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewToggleRenderer::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewDateRenderer_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewDateRenderer* custom_object = (zo_wxDataViewDateRenderer*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewDateRenderer_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewDateRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewDateRenderer_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewDateRenderer_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewDateRenderer* custom_object;
    custom_object = (zo_wxDataViewDateRenderer*) emalloc(sizeof(zo_wxDataViewDateRenderer));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewDateRenderer_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWDATERENDERER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxDataViewDateRenderer::wxDataViewDateRenderer(string varianttype, wxDataViewCellMode mode, int align)
   The ctor. */
PHP_METHOD(php_wxDataViewDateRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewDateRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewDateRenderer* current_object;
	wxDataViewDateRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sll' (&varianttype0, &varianttype_len0, &mode0, &align0)\n");
		#endif

		char parse_parameters_string[] = "|sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewDateRenderer_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8))\n");
				#endif

				native_object = new wxDataViewDateRenderer_php(wxString(varianttype0, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0)\n");
				#endif

				native_object = new wxDataViewDateRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif

				native_object = new wxDataViewDateRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewDateRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewDateRenderer::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewCustomRenderer_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewCustomRenderer* custom_object = (zo_wxDataViewCustomRenderer*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewCustomRenderer_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewCustomRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewCustomRenderer_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewCustomRenderer_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewCustomRenderer* custom_object;
    custom_object = (zo_wxDataViewCustomRenderer*) emalloc(sizeof(zo_wxDataViewCustomRenderer));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewCustomRenderer_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWCUSTOMRENDERER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxDataViewCustomRenderer::ActivateCell(wxRect cell, wxDataViewModel &model, wxDataViewItem item, int col, wxMouseEvent mouseEvent)
   Override this to react to cell activation. */
PHP_METHOD(php_wxDataViewCustomRenderer, ActivateCell)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::ActivateCell\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewCustomRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewCustomRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewCustomRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewCustomRenderer::ActivateCell call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* cell0 = 0;
	wxRect* object_pointer0_0 = 0;
	zval* model0 = 0;
	wxDataViewModel* object_pointer0_1 = 0;
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_2 = 0;
	long col0;
	zval* mouseEvent0 = 0;
	wxMouseEvent* object_pointer0_4 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OzOlz' (&cell0, php_wxRect_entry, &model0, &item0, php_wxDataViewItem_entry, &col0, &mouseEvent0)\n");
		#endif

		char parse_parameters_string[] = "OzOlz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cell0, php_wxRect_entry, &model0, &item0, php_wxDataViewItem_entry, &col0, &mouseEvent0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cell0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRect*) zend_object_store_get_object(cell0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRect*) zend_object_store_get_object(cell0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxRect*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'cell' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cell0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cell' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(model0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewModel*) zend_object_store_get_object(model0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewModel*) zend_object_store_get_object(model0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxDataViewModel*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXDATAVIEWMODEL_TYPE && argument_type != PHP_WXDATAVIEWLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWINDEXLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWLISTSTORE_TYPE && argument_type != PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWTREESTORE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'model' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(model0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'model' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(mouseEvent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxMouseEvent*) zend_object_store_get_object(mouseEvent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxMouseEvent*) zend_object_store_get_object(mouseEvent0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxMouseEvent*) argument_native_object;
					if (!object_pointer0_4 || (argument_type != PHP_WXMOUSEEVENT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'mouseEvent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(mouseEvent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'mouseEvent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewCustomRenderer::ActivateCell(*(wxRect*) object_pointer0_0, (wxDataViewModel*) object_pointer0_1, *(wxDataViewItem*) object_pointer0_2, (unsigned int) col0, (const wxMouseEvent*) object_pointer0_4))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewSpinRenderer_php*)native_object)->ActivateCell(*(wxRect*) object_pointer0_0, (wxDataViewModel*) object_pointer0_1, *(wxDataViewItem*) object_pointer0_2, (unsigned int) col0, (const wxMouseEvent*) object_pointer0_4));
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewCustomRenderer_php*)native_object)->ActivateCell(*(wxRect*) object_pointer0_0, (wxDataViewModel*) object_pointer0_1, *(wxDataViewItem*) object_pointer0_2, (unsigned int) col0, (const wxMouseEvent*) object_pointer0_4));
				}

				references->AddReference(cell0, "wxDataViewCustomRenderer::ActivateCell at call with 5 argument(s)");
				references->AddReference(model0, "wxDataViewCustomRenderer::ActivateCell at call with 5 argument(s)");
				references->AddReference(item0, "wxDataViewCustomRenderer::ActivateCell at call with 5 argument(s)");
				references->AddReference(mouseEvent0, "wxDataViewCustomRenderer::ActivateCell at call with 5 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewCustomRenderer::ActivateCell\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxDataViewCustomRenderer::CreateEditorCtrl(wxWindow &parent, wxRect labelRect, wxVariant value)
   Override this to create the actual editor control once editing is about to start. */
PHP_METHOD(php_wxDataViewCustomRenderer, CreateEditorCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::CreateEditorCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewCustomRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewCustomRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewCustomRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewCustomRenderer::CreateEditorCtrl call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	zval* labelRect0 = 0;
	wxRect* object_pointer0_1 = 0;
	zval* value0 = 0;
	wxVariant* object_pointer0_2 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zOO' (&parent0, &labelRect0, php_wxRect_entry, &value0, php_wxVariant_entry)\n");
		#endif

		char parse_parameters_string[] = "zOO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &labelRect0, php_wxRect_entry, &value0, php_wxVariant_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(labelRect0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRect*) zend_object_store_get_object(labelRect0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRect*) zend_object_store_get_object(labelRect0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxRect*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'labelRect' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(labelRect0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'labelRect' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(value0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxVariant*) zend_object_store_get_object(value0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxVariant*) zend_object_store_get_object(value0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxVariant*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'value' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(value0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'value' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewCustomRenderer::CreateEditorCtrl((wxWindow*) object_pointer0_0, *(wxRect*) object_pointer0_1, *(wxVariant*) object_pointer0_2) to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return3;
				if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					value_to_return3 = (wxWindow_php*) ((wxDataViewSpinRenderer_php*)native_object)->CreateEditorCtrl((wxWindow*) object_pointer0_0, *(wxRect*) object_pointer0_1, *(wxVariant*) object_pointer0_2);

				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					value_to_return3 = (wxWindow_php*) ((wxDataViewCustomRenderer_php*)native_object)->CreateEditorCtrl((wxWindow*) object_pointer0_0, *(wxRect*) object_pointer0_1, *(wxVariant*) object_pointer0_2);

				}
				if(value_to_return3 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return3->references.IsUserInitialized()){
					if(value_to_return3->phpObj != NULL){
						*return_value = *value_to_return3->phpObj;
						zval_add_ref(&value_to_return3->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return3;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxDataViewCustomRenderer::CreateEditorCtrl at call with 3 argument(s)");
				}

				references->AddReference(parent0, "wxDataViewCustomRenderer::CreateEditorCtrl at call with 3 argument(s)");
				references->AddReference(value0, "wxDataViewCustomRenderer::CreateEditorCtrl at call with 3 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewCustomRenderer::CreateEditorCtrl\n");
	}
}
/* }}} */

/* {{{ proto wxDataViewItemAttr wxDataViewCustomRenderer::GetAttr()
   Return the attribute to be used for rendering. */
PHP_METHOD(php_wxDataViewCustomRenderer, GetAttr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::GetAttr\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewCustomRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewCustomRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewCustomRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewCustomRenderer::GetAttr call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewCustomRenderer::GetAttr() to return object reference\n\n");
				#endif

				wxDataViewItemAttr_php* value_to_return0;
				if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					value_to_return0 = (wxDataViewItemAttr_php*) &((wxDataViewSpinRenderer_php*)native_object)->GetAttr();

				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					value_to_return0 = (wxDataViewItemAttr_php*) &((wxDataViewCustomRenderer_php*)native_object)->GetAttr();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxDataViewItemAttr_entry);
					((zo_wxDataViewItemAttr*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewItemAttr_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxDataViewCustomRenderer::GetAttr at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewCustomRenderer::GetAttr\n");
	}
}
/* }}} */

/* {{{ proto wxSize wxDataViewCustomRenderer::GetSize()
   Return size required to show content. */
wxSize wxDataViewCustomRenderer_php::GetSize()const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewCustomRenderer::GetSize\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval* arguments[1];
	arguments[0] = NULL;
	params[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetSize", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
		

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "GetSize", 7, &return_value, 0, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewCustomRenderer::GetSize'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	if(Z_TYPE_P(return_value) == IS_OBJECT)
	{
		return_object = (void*) ((zo_wxSize*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object;
	}

	//Threat it as a normal object on the calling function and not a php user space intiialized one
	((zo_wxSize*) zend_object_store_get_object(return_value TSRMLS_CC))->is_user_initialized = 0;
	wxSize_php* var = (wxSize_php*) return_object;
	var->references.UnInitialize();

	return *(wxSize*) return_object;
	
}
/* }}} */

/* {{{ proto bool wxDataViewCustomRenderer::GetValueFromEditorCtrl(wxWindow &editor, wxVariant &value)
   Override this so that the renderer can get the value from the editor control (pointed to by editor): */
PHP_METHOD(php_wxDataViewCustomRenderer, GetValueFromEditorCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::GetValueFromEditorCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewCustomRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewCustomRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewCustomRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewCustomRenderer::GetValueFromEditorCtrl call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* editor0 = 0;
	wxWindow* object_pointer0_0 = 0;
	zval* value0 = 0;
	wxVariant* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO' (&editor0, &value0, php_wxVariant_entry)\n");
		#endif

		char parse_parameters_string[] = "zO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &editor0, &value0, php_wxVariant_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(editor0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(editor0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(editor0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'editor' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(editor0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'editor' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(value0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxVariant*) zend_object_store_get_object(value0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxVariant*) zend_object_store_get_object(value0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxVariant*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'value' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(value0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'value' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewCustomRenderer::GetValueFromEditorCtrl((wxWindow*) object_pointer0_0, *(wxVariant*) object_pointer0_1))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewSpinRenderer_php*)native_object)->GetValueFromEditorCtrl((wxWindow*) object_pointer0_0, *(wxVariant*) object_pointer0_1));
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewCustomRenderer_php*)native_object)->GetValueFromEditorCtrl((wxWindow*) object_pointer0_0, *(wxVariant*) object_pointer0_1));
				}

				references->AddReference(editor0, "wxDataViewCustomRenderer::GetValueFromEditorCtrl at call with 2 argument(s)");
				references->AddReference(value0, "wxDataViewCustomRenderer::GetValueFromEditorCtrl at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewCustomRenderer::GetValueFromEditorCtrl\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewCustomRenderer::HasEditorCtrl()
   Override this and make it return true in order to indicate that this renderer supports in-place editing. */
PHP_METHOD(php_wxDataViewCustomRenderer, HasEditorCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::HasEditorCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewCustomRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewCustomRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewCustomRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewCustomRenderer::HasEditorCtrl call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewCustomRenderer::HasEditorCtrl())\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewSpinRenderer_php*)native_object)->HasEditorCtrl());
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewCustomRenderer_php*)native_object)->HasEditorCtrl());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewCustomRenderer::HasEditorCtrl\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewCustomRenderer::Render(wxRect cell, wxDC &dc, int state)
   Override this to render the cell. */
bool wxDataViewCustomRenderer_php::Render(wxRect cell, wxDC* dc, int state)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxDataViewCustomRenderer::Render\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[3];
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "Render", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxRect_entry);
	((zo_wxRect*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxRect_php*) &cell;
	object_init_ex(arguments[1], php_wxDC_entry);
	((zo_wxDC*) zend_object_store_get_object(arguments[1] TSRMLS_CC))->native_object = (wxDC_php*) dc;
	ZVAL_LONG(arguments[2], state);
		
	for(int i=0; i<3; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "Render", 6, &return_value, 3, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<3; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxDataViewCustomRenderer::Render'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto  wxDataViewCustomRenderer::RenderText(string text, int xoffset, wxRect cell, wxDC &dc, int state)
   This method should be called from within Render() whenever you need to render simple text. */
PHP_METHOD(php_wxDataViewCustomRenderer, RenderText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::RenderText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewCustomRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewCustomRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewCustomRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewCustomRenderer::RenderText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	long xoffset0;
	zval* cell0 = 0;
	wxRect* object_pointer0_2 = 0;
	zval* dc0 = 0;
	wxDC* object_pointer0_3 = 0;
	long state0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'slOzl' (&text0, &text_len0, &xoffset0, &cell0, php_wxRect_entry, &dc0, &state0)\n");
		#endif

		char parse_parameters_string[] = "slOzl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0, &xoffset0, &cell0, php_wxRect_entry, &dc0, &state0 ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(cell0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRect*) zend_object_store_get_object(cell0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRect*) zend_object_store_get_object(cell0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxRect*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'cell' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cell0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cell' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(dc0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDC*) zend_object_store_get_object(dc0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDC*) zend_object_store_get_object(dc0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxDC*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'dc' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dc0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'dc' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewCustomRenderer::RenderText(wxString(text0, wxConvUTF8), (int) xoffset0, *(wxRect*) object_pointer0_2, (wxDC*) object_pointer0_3, (int) state0)\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					((wxDataViewSpinRenderer_php*)native_object)->RenderText(wxString(text0, wxConvUTF8), (int) xoffset0, *(wxRect*) object_pointer0_2, (wxDC*) object_pointer0_3, (int) state0);
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					((wxDataViewCustomRenderer_php*)native_object)->RenderText(wxString(text0, wxConvUTF8), (int) xoffset0, *(wxRect*) object_pointer0_2, (wxDC*) object_pointer0_3, (int) state0);
				}

				references->AddReference(dc0, "wxDataViewCustomRenderer::RenderText at call with 5 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewCustomRenderer::RenderText\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewCustomRenderer::LeftClick(wxPoint cursor, wxRect cell, wxDataViewModel &model, wxDataViewItem item, int col)
   Override this to react to a left click. */
PHP_METHOD(php_wxDataViewCustomRenderer, LeftClick)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::LeftClick\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewCustomRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewCustomRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewCustomRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewCustomRenderer::LeftClick call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* cursor0 = 0;
	wxPoint* object_pointer0_0 = 0;
	zval* cell0 = 0;
	wxRect* object_pointer0_1 = 0;
	zval* model0 = 0;
	wxDataViewModel* object_pointer0_2 = 0;
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_3 = 0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOzOl' (&cursor0, php_wxPoint_entry, &cell0, php_wxRect_entry, &model0, &item0, php_wxDataViewItem_entry, &col0)\n");
		#endif

		char parse_parameters_string[] = "OOzOl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cursor0, php_wxPoint_entry, &cell0, php_wxRect_entry, &model0, &item0, php_wxDataViewItem_entry, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cursor0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(cursor0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(cursor0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxPoint*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'cursor' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cursor0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cursor' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(cell0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRect*) zend_object_store_get_object(cell0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRect*) zend_object_store_get_object(cell0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxRect*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'cell' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cell0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cell' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(model0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewModel*) zend_object_store_get_object(model0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewModel*) zend_object_store_get_object(model0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxDataViewModel*) argument_native_object;
					if (!object_pointer0_2 || (argument_type != PHP_WXDATAVIEWMODEL_TYPE && argument_type != PHP_WXDATAVIEWLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWINDEXLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWLISTSTORE_TYPE && argument_type != PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWTREESTORE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'model' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(model0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'model' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewCustomRenderer::LeftClick(*(wxPoint*) object_pointer0_0, *(wxRect*) object_pointer0_1, (wxDataViewModel*) object_pointer0_2, *(wxDataViewItem*) object_pointer0_3, (unsigned int) col0))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewSpinRenderer_php*)native_object)->LeftClick(*(wxPoint*) object_pointer0_0, *(wxRect*) object_pointer0_1, (wxDataViewModel*) object_pointer0_2, *(wxDataViewItem*) object_pointer0_3, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewCustomRenderer_php*)native_object)->LeftClick(*(wxPoint*) object_pointer0_0, *(wxRect*) object_pointer0_1, (wxDataViewModel*) object_pointer0_2, *(wxDataViewItem*) object_pointer0_3, (unsigned int) col0));
				}

				references->AddReference(model0, "wxDataViewCustomRenderer::LeftClick at call with 5 argument(s)");
				references->AddReference(item0, "wxDataViewCustomRenderer::LeftClick at call with 5 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewCustomRenderer::LeftClick\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewCustomRenderer::StartDrag(wxPoint cursor, wxRect cell, wxDataViewModel &model, wxDataViewItem item, int col)
   Override this to start a drag operation. */
PHP_METHOD(php_wxDataViewCustomRenderer, StartDrag)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewCustomRenderer::StartDrag\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewCustomRenderer* current_object;
	wxphp_object_type current_object_type;
	wxDataViewCustomRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewCustomRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewCustomRenderer::StartDrag call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE){
				references = &((wxDataViewCustomRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE) && (!reference_type_found)){
				references = &((wxDataViewSpinRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* cursor0 = 0;
	wxPoint* object_pointer0_0 = 0;
	zval* cell0 = 0;
	wxRect* object_pointer0_1 = 0;
	zval* model0 = 0;
	wxDataViewModel* object_pointer0_2 = 0;
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_3 = 0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOzOl' (&cursor0, php_wxPoint_entry, &cell0, php_wxRect_entry, &model0, &item0, php_wxDataViewItem_entry, &col0)\n");
		#endif

		char parse_parameters_string[] = "OOzOl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cursor0, php_wxPoint_entry, &cell0, php_wxRect_entry, &model0, &item0, php_wxDataViewItem_entry, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cursor0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(cursor0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(cursor0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxPoint*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'cursor' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cursor0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cursor' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(cell0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxRect*) zend_object_store_get_object(cell0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxRect*) zend_object_store_get_object(cell0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxRect*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'cell' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cell0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cell' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(model0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewModel*) zend_object_store_get_object(model0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewModel*) zend_object_store_get_object(model0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxDataViewModel*) argument_native_object;
					if (!object_pointer0_2 || (argument_type != PHP_WXDATAVIEWMODEL_TYPE && argument_type != PHP_WXDATAVIEWLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWINDEXLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWLISTSTORE_TYPE && argument_type != PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWTREESTORE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'model' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(model0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'model' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewCustomRenderer::StartDrag(*(wxPoint*) object_pointer0_0, *(wxRect*) object_pointer0_1, (wxDataViewModel*) object_pointer0_2, *(wxDataViewItem*) object_pointer0_3, (unsigned int) col0))\n\n");
				#endif

				if(current_object_type == PHP_WXDATAVIEWSPINRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewSpinRenderer_php*)native_object)->StartDrag(*(wxPoint*) object_pointer0_0, *(wxRect*) object_pointer0_1, (wxDataViewModel*) object_pointer0_2, *(wxDataViewItem*) object_pointer0_3, (unsigned int) col0));
				}
				else if(current_object_type == PHP_WXDATAVIEWCUSTOMRENDERER_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxDataViewCustomRenderer_php*)native_object)->StartDrag(*(wxPoint*) object_pointer0_0, *(wxRect*) object_pointer0_1, (wxDataViewModel*) object_pointer0_2, *(wxDataViewItem*) object_pointer0_3, (unsigned int) col0));
				}

				references->AddReference(cursor0, "wxDataViewCustomRenderer::StartDrag at call with 5 argument(s)");
				references->AddReference(cell0, "wxDataViewCustomRenderer::StartDrag at call with 5 argument(s)");
				references->AddReference(model0, "wxDataViewCustomRenderer::StartDrag at call with 5 argument(s)");
				references->AddReference(item0, "wxDataViewCustomRenderer::StartDrag at call with 5 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewCustomRenderer::StartDrag\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewBitmapRenderer_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewBitmapRenderer* custom_object = (zo_wxDataViewBitmapRenderer*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewBitmapRenderer_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewBitmapRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewBitmapRenderer_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewBitmapRenderer_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewBitmapRenderer* custom_object;
    custom_object = (zo_wxDataViewBitmapRenderer*) emalloc(sizeof(zo_wxDataViewBitmapRenderer));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewBitmapRenderer_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWBITMAPRENDERER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxDataViewBitmapRenderer::wxDataViewBitmapRenderer(string varianttype, wxDataViewCellMode mode, int align)
   The ctor. */
PHP_METHOD(php_wxDataViewBitmapRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewBitmapRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewBitmapRenderer* current_object;
	wxDataViewBitmapRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	long mode0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sll' (&varianttype0, &varianttype_len0, &mode0, &align0)\n");
		#endif

		char parse_parameters_string[] = "|sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0, &mode0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewBitmapRenderer_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8))\n");
				#endif

				native_object = new wxDataViewBitmapRenderer_php(wxString(varianttype0, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0)\n");
				#endif

				native_object = new wxDataViewBitmapRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0);

				native_object->references.Initialize();
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0)\n");
				#endif

				native_object = new wxDataViewBitmapRenderer_php(wxString(varianttype0, wxConvUTF8), (wxDataViewCellMode) mode0, (int) align0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewBitmapRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewBitmapRenderer::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewColumn_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewColumn* custom_object = (zo_wxDataViewColumn*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewColumn_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewColumn done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewColumn_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewColumn_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewColumn* custom_object;
    custom_object = (zo_wxDataViewColumn*) emalloc(sizeof(zo_wxDataViewColumn));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewColumn_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWCOLUMN_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxDataViewColumn::GetModelColumn()
   Returns the index of the column of the model, which this wxDataViewColumn is displaying. */
PHP_METHOD(php_wxDataViewColumn, GetModelColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewColumn::GetModelColumn\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewColumn* current_object;
	wxphp_object_type current_object_type;
	wxDataViewColumn_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewColumn*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewColumn::GetModelColumn call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCOLUMN_TYPE){
				references = &((wxDataViewColumn_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewColumn::GetModelColumn())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxDataViewColumn_php*)native_object)->GetModelColumn());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewColumn::GetModelColumn\n");
	}
}
/* }}} */

/* {{{ proto wxDataViewCtrl wxDataViewColumn::GetOwner()
   Returns the owning wxDataViewCtrl. */
PHP_METHOD(php_wxDataViewColumn, GetOwner)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewColumn::GetOwner\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewColumn* current_object;
	wxphp_object_type current_object_type;
	wxDataViewColumn_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewColumn*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewColumn::GetOwner call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCOLUMN_TYPE){
				references = &((wxDataViewColumn_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewColumn::GetOwner() to return object pointer\n\n");
				#endif

				wxDataViewCtrl_php* value_to_return0;
				value_to_return0 = (wxDataViewCtrl_php*) ((wxDataViewColumn_php*)native_object)->GetOwner();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxDataViewCtrl_entry);
					((zo_wxDataViewCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewCtrl_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxDataViewColumn::GetOwner at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewColumn::GetOwner\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewColumn::wxDataViewColumn(string title, wxDataViewRenderer &renderer, int model_column, int width, wxAlignment align, int flags)
   Constructs a text column. */
PHP_METHOD(php_wxDataViewColumn, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewColumn::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewColumn* current_object;
	wxDataViewColumn_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	char* title0;
	long title_len0;
	zval* renderer0 = 0;
	wxDataViewRenderer* object_pointer0_1 = 0;
	long model_column0;
	long width0;
	long align0;
	long flags0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* bitmap1 = 0;
	wxBitmap* object_pointer1_0 = 0;
	zval* renderer1 = 0;
	wxDataViewRenderer* object_pointer1_1 = 0;
	long model_column1;
	long width1;
	long align1;
	long flags1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'szl|lll' (&title0, &title_len0, &renderer0, &model_column0, &width0, &align0, &flags0)\n");
		#endif

		char parse_parameters_string[] = "szl|lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &title0, &title_len0, &renderer0, &model_column0, &width0, &align0, &flags0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(renderer0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewRenderer*) zend_object_store_get_object(renderer0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewRenderer*) zend_object_store_get_object(renderer0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxDataViewRenderer*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(renderer0) != IS_NULL)
				{
					goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ozl|lll' (&bitmap1, php_wxBitmap_entry, &renderer1, &model_column1, &width1, &align1, &flags1)\n");
		#endif

		char parse_parameters_string[] = "Ozl|lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bitmap1, php_wxBitmap_entry, &renderer1, &model_column1, &width1, &align1, &flags1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bitmap1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxBitmap*) zend_object_store_get_object(bitmap1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxBitmap*) zend_object_store_get_object(bitmap1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxBitmap*) argument_native_object;
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bitmap1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(renderer1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewRenderer*) zend_object_store_get_object(renderer1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewRenderer*) zend_object_store_get_object(renderer1 TSRMLS_CC))->native_object;
					object_pointer1_1 = (wxDataViewRenderer*) argument_native_object;
					if (!object_pointer1_1 || (argument_type != PHP_WXDATAVIEWRENDERER_TYPE && argument_type != PHP_WXDATAVIEWBITMAPRENDERER_TYPE && argument_type != PHP_WXDATAVIEWCHOICERENDERER_TYPE && argument_type != PHP_WXDATAVIEWCUSTOMRENDERER_TYPE && argument_type != PHP_WXDATAVIEWSPINRENDERER_TYPE && argument_type != PHP_WXDATAVIEWDATERENDERER_TYPE && argument_type != PHP_WXDATAVIEWICONTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWPROGRESSRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTEXTRENDERER_TYPE && argument_type != PHP_WXDATAVIEWTOGGLERENDERER_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'renderer' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(renderer1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'renderer' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0)\n");
				#endif

				native_object = new wxDataViewColumn_php(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0);

				native_object->references.Initialize();
				((wxDataViewColumn_php*) native_object)->references.AddReference(renderer0, "wxDataViewColumn::wxDataViewColumn at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0, (int) width0)\n");
				#endif

				native_object = new wxDataViewColumn_php(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0, (int) width0);

				native_object->references.Initialize();
				((wxDataViewColumn_php*) native_object)->references.AddReference(renderer0, "wxDataViewColumn::wxDataViewColumn at call with 4 argument(s)");
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0, (int) width0, (wxAlignment) align0)\n");
				#endif

				native_object = new wxDataViewColumn_php(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0, (int) width0, (wxAlignment) align0);

				native_object->references.Initialize();
				((wxDataViewColumn_php*) native_object)->references.AddReference(renderer0, "wxDataViewColumn::wxDataViewColumn at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0, (int) width0, (wxAlignment) align0, (int) flags0)\n");
				#endif

				native_object = new wxDataViewColumn_php(wxString(title0, wxConvUTF8), (wxDataViewRenderer*) object_pointer0_1, (unsigned int) model_column0, (int) width0, (wxAlignment) align0, (int) flags0);

				native_object->references.Initialize();
				((wxDataViewColumn_php*) native_object)->references.AddReference(renderer0, "wxDataViewColumn::wxDataViewColumn at call with 6 argument(s)");
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1)\n");
				#endif

				native_object = new wxDataViewColumn_php(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1);

				native_object->references.Initialize();
				((wxDataViewColumn_php*) native_object)->references.AddReference(bitmap1, "wxDataViewColumn::wxDataViewColumn at call with 3 argument(s)");
				((wxDataViewColumn_php*) native_object)->references.AddReference(renderer1, "wxDataViewColumn::wxDataViewColumn at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1, (int) width1)\n");
				#endif

				native_object = new wxDataViewColumn_php(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1, (int) width1);

				native_object->references.Initialize();
				((wxDataViewColumn_php*) native_object)->references.AddReference(bitmap1, "wxDataViewColumn::wxDataViewColumn at call with 4 argument(s)");
				((wxDataViewColumn_php*) native_object)->references.AddReference(renderer1, "wxDataViewColumn::wxDataViewColumn at call with 4 argument(s)");
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1, (int) width1, (wxAlignment) align1)\n");
				#endif

				native_object = new wxDataViewColumn_php(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1, (int) width1, (wxAlignment) align1);

				native_object->references.Initialize();
				((wxDataViewColumn_php*) native_object)->references.AddReference(bitmap1, "wxDataViewColumn::wxDataViewColumn at call with 5 argument(s)");
				((wxDataViewColumn_php*) native_object)->references.AddReference(renderer1, "wxDataViewColumn::wxDataViewColumn at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1, (int) width1, (wxAlignment) align1, (int) flags1)\n");
				#endif

				native_object = new wxDataViewColumn_php(*(wxBitmap*) object_pointer1_0, (wxDataViewRenderer*) object_pointer1_1, (unsigned int) model_column1, (int) width1, (wxAlignment) align1, (int) flags1);

				native_object->references.Initialize();
				((wxDataViewColumn_php*) native_object)->references.AddReference(bitmap1, "wxDataViewColumn::wxDataViewColumn at call with 6 argument(s)");
				((wxDataViewColumn_php*) native_object)->references.AddReference(renderer1, "wxDataViewColumn::wxDataViewColumn at call with 6 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewColumn*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewColumn::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto wxDataViewRenderer wxDataViewColumn::GetRenderer()
   Returns the renderer of this wxDataViewColumn. */
PHP_METHOD(php_wxDataViewColumn, GetRenderer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewColumn::GetRenderer\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewColumn* current_object;
	wxphp_object_type current_object_type;
	wxDataViewColumn_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewColumn*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewColumn::GetRenderer call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWCOLUMN_TYPE){
				references = &((wxDataViewColumn_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewColumn::GetRenderer() to return object pointer\n\n");
				#endif

				wxDataViewRenderer_php* value_to_return0;
				value_to_return0 = (wxDataViewRenderer_php*) ((wxDataViewColumn_php*)native_object)->GetRenderer();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxDataViewRenderer_entry);
					((zo_wxDataViewRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewRenderer_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxDataViewColumn::GetRenderer at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewColumn::GetRenderer\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewListStore_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewListStore* custom_object = (zo_wxDataViewListStore*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewListStore_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewListStore done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewListStore_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewListStore_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewListStore* custom_object;
    custom_object = (zo_wxDataViewListStore*) emalloc(sizeof(zo_wxDataViewListStore));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewListStore_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWLISTSTORE_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxDataViewListStore::AppendColumn(string varianttype)
   Appends a data column. */
PHP_METHOD(php_wxDataViewListStore, AppendColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::AppendColumn\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewListStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewListStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewListStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewListStore::AppendColumn call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&varianttype0, &varianttype_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewListStore::AppendColumn(wxString(varianttype0, wxConvUTF8))\n\n");
				#endif

				((wxDataViewListStore_php*)native_object)->AppendColumn(wxString(varianttype0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewListStore::AppendColumn\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewListStore::DeleteAllItems()
   Delete all item (=all rows) in the store. */
PHP_METHOD(php_wxDataViewListStore, DeleteAllItems)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::DeleteAllItems\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewListStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewListStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewListStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewListStore::DeleteAllItems call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewListStore::DeleteAllItems()\n\n");
				#endif

				((wxDataViewListStore_php*)native_object)->DeleteAllItems();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewListStore::DeleteAllItems\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewListStore::DeleteItem(int pos)
   Delete the item (=row) at position pos. */
PHP_METHOD(php_wxDataViewListStore, DeleteItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::DeleteItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewListStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewListStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewListStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewListStore::DeleteItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&pos0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewListStore::DeleteItem((unsigned) pos0)\n\n");
				#endif

				((wxDataViewListStore_php*)native_object)->DeleteItem((unsigned) pos0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewListStore::DeleteItem\n");
	}
}
/* }}} */

/* {{{ proto int wxDataViewListStore::GetColumnCount()
   Overridden from wxDataViewModel. */
PHP_METHOD(php_wxDataViewListStore, GetColumnCount)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::GetColumnCount\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewListStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewListStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewListStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewListStore::GetColumnCount call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewListStore::GetColumnCount())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxDataViewListStore_php*)native_object)->GetColumnCount());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewListStore::GetColumnCount\n");
	}
}
/* }}} */

/* {{{ proto string wxDataViewListStore::GetColumnType(int col)
   Overridden from wxDataViewModel. */
PHP_METHOD(php_wxDataViewListStore, GetColumnType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::GetColumnType\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewListStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewListStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewListStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewListStore::GetColumnType call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&col0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &col0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxDataViewListStore::GetColumnType((unsigned int) col0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = ((wxDataViewListStore_php*)native_object)->GetColumnType((unsigned int) col0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewListStore::GetColumnType\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewListStore::GetValueByRow(wxVariant &value, int row, int col)
   Overridden from wxDataViewIndexListModel. */
PHP_METHOD(php_wxDataViewListStore, GetValueByRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::GetValueByRow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewListStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewListStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewListStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewListStore::GetValueByRow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* value0 = 0;
	wxVariant* object_pointer0_0 = 0;
	long row0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Oll' (&value0, php_wxVariant_entry, &row0, &col0)\n");
		#endif

		char parse_parameters_string[] = "Oll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &value0, php_wxVariant_entry, &row0, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(value0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxVariant*) zend_object_store_get_object(value0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxVariant*) zend_object_store_get_object(value0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxVariant*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'value' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(value0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'value' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewListStore::GetValueByRow(*(wxVariant*) object_pointer0_0, (unsigned int) row0, (unsigned int) col0)\n\n");
				#endif

				((wxDataViewListStore_php*)native_object)->GetValueByRow(*(wxVariant*) object_pointer0_0, (unsigned int) row0, (unsigned int) col0);

				references->AddReference(value0, "wxDataViewListStore::GetValueByRow at call with 3 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewListStore::GetValueByRow\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewListStore::InsertColumn(int pos, string varianttype)
   Inserts a data column before pos. */
PHP_METHOD(php_wxDataViewListStore, InsertColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::InsertColumn\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewListStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewListStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewListStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewListStore::InsertColumn call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long pos0;
	char* varianttype0;
	long varianttype_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ls' (&pos0, &varianttype0, &varianttype_len0)\n");
		#endif

		char parse_parameters_string[] = "ls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0, &varianttype0, &varianttype_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewListStore::InsertColumn((unsigned int) pos0, wxString(varianttype0, wxConvUTF8))\n\n");
				#endif

				((wxDataViewListStore_php*)native_object)->InsertColumn((unsigned int) pos0, wxString(varianttype0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewListStore::InsertColumn\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewListStore::PrependColumn(string varianttype)
   Prepends a data column. */
PHP_METHOD(php_wxDataViewListStore, PrependColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::PrependColumn\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewListStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewListStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewListStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewListStore::PrependColumn call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* varianttype0;
	long varianttype_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&varianttype0, &varianttype_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &varianttype0, &varianttype_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewListStore::PrependColumn(wxString(varianttype0, wxConvUTF8))\n\n");
				#endif

				((wxDataViewListStore_php*)native_object)->PrependColumn(wxString(varianttype0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewListStore::PrependColumn\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewListStore::SetValueByRow(wxVariant value, int row, int col)
   Overridden from wxDataViewIndexListModel. */
PHP_METHOD(php_wxDataViewListStore, SetValueByRow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::SetValueByRow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewListStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewListStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewListStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewListStore::SetValueByRow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWLISTSTORE_TYPE){
				references = &((wxDataViewListStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* value0 = 0;
	wxVariant* object_pointer0_0 = 0;
	long row0;
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Oll' (&value0, php_wxVariant_entry, &row0, &col0)\n");
		#endif

		char parse_parameters_string[] = "Oll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &value0, php_wxVariant_entry, &row0, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(value0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxVariant*) zend_object_store_get_object(value0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxVariant*) zend_object_store_get_object(value0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxVariant*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'value' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(value0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'value' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewListStore::SetValueByRow(*(wxVariant*) object_pointer0_0, (unsigned int) row0, (unsigned int) col0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxDataViewListStore_php*)native_object)->SetValueByRow(*(wxVariant*) object_pointer0_0, (unsigned int) row0, (unsigned int) col0));

				references->AddReference(value0, "wxDataViewListStore::SetValueByRow at call with 3 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewListStore::SetValueByRow\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewListStore::wxDataViewListStore()
   Constructor. */
PHP_METHOD(php_wxDataViewListStore, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewListStore::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewListStore* current_object;
	wxDataViewListStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewListStore_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewListStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewListStore::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewTreeStore_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewTreeStore* custom_object = (zo_wxDataViewTreeStore*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewTreeStore_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewTreeStore done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewTreeStore_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewTreeStore_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewTreeStore* custom_object;
    custom_object = (zo_wxDataViewTreeStore*) emalloc(sizeof(zo_wxDataViewTreeStore));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewTreeStore_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWTREESTORE_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxDataViewItem wxDataViewTreeStore::AppendContainer(wxDataViewItem parent, string text, wxIcon icon, wxIcon expanded, wxClientData &data)
   Append a container. */
PHP_METHOD(php_wxDataViewTreeStore, AppendContainer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::AppendContainer\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::AppendContainer call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	wxIcon* object_pointer0_2 = 0;
	zval* expanded0 = 0;
	wxIcon* object_pointer0_3 = 0;
	zval* data0 = 0;
	wxClientData* object_pointer0_4 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Os|OOz' (&parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &expanded0, php_wxIcon_entry, &data0)\n");
		#endif

		char parse_parameters_string[] = "Os|OOz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &expanded0, php_wxIcon_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(icon0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxIcon*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(expanded0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(expanded0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(expanded0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxIcon*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'expanded' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(expanded0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'expanded' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(data0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxClientData*) argument_native_object;
					if (!object_pointer0_4 || (argument_type != PHP_WXCLIENTDATA_TYPE && argument_type != PHP_WXTREEITEMDATA_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'data' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'data' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8)) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return2;
				value_to_return2 = ((wxDataViewTreeStore_php*)native_object)->AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo2 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo2->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::AppendContainer at call with 2 argument(s)");

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return3;
				value_to_return3 = ((wxDataViewTreeStore_php*)native_object)->AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo3 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo3->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::AppendContainer at call with 3 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::AppendContainer at call with 3 argument(s)");

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return4;
				value_to_return4 = ((wxDataViewTreeStore_php*)native_object)->AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo4 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo4->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::AppendContainer at call with 4 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::AppendContainer at call with 4 argument(s)");
				references->AddReference(expanded0, "wxDataViewTreeStore::AppendContainer at call with 4 argument(s)");

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3, (wxClientData*) object_pointer0_4) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return5;
				value_to_return5 = ((wxDataViewTreeStore_php*)native_object)->AppendContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3, (wxClientData*) object_pointer0_4);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return5, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo5 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo5->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::AppendContainer at call with 5 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::AppendContainer at call with 5 argument(s)");
				references->AddReference(expanded0, "wxDataViewTreeStore::AppendContainer at call with 5 argument(s)");
				references->AddReference(data0, "wxDataViewTreeStore::AppendContainer at call with 5 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::AppendContainer\n");
	}
}
/* }}} */

/* {{{ proto wxDataViewItem wxDataViewTreeStore::AppendItem(wxDataViewItem parent, string text, wxIcon icon, wxClientData &data)
   Append an item. */
PHP_METHOD(php_wxDataViewTreeStore, AppendItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::AppendItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::AppendItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	wxIcon* object_pointer0_2 = 0;
	zval* data0 = 0;
	wxClientData* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Os|Oz' (&parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &data0)\n");
		#endif

		char parse_parameters_string[] = "Os|Oz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(icon0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxIcon*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(data0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxClientData*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXCLIENTDATA_TYPE && argument_type != PHP_WXTREEITEMDATA_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'data' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'data' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8)) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return2;
				value_to_return2 = ((wxDataViewTreeStore_php*)native_object)->AppendItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo2 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo2->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::AppendItem at call with 2 argument(s)");

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return3;
				value_to_return3 = ((wxDataViewTreeStore_php*)native_object)->AppendItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo3 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo3->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::AppendItem at call with 3 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::AppendItem at call with 3 argument(s)");

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::AppendItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, (wxClientData*) object_pointer0_3) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return4;
				value_to_return4 = ((wxDataViewTreeStore_php*)native_object)->AppendItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, (wxClientData*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo4 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo4->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::AppendItem at call with 4 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::AppendItem at call with 4 argument(s)");
				references->AddReference(data0, "wxDataViewTreeStore::AppendItem at call with 4 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::AppendItem\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewTreeStore::DeleteAllItems()
   Delete all item in the model. */
PHP_METHOD(php_wxDataViewTreeStore, DeleteAllItems)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::DeleteAllItems\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::DeleteAllItems call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::DeleteAllItems()\n\n");
				#endif

				((wxDataViewTreeStore_php*)native_object)->DeleteAllItems();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::DeleteAllItems\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewTreeStore::DeleteChildren(wxDataViewItem item)
   Delete all children of the item, but not the item itself. */
PHP_METHOD(php_wxDataViewTreeStore, DeleteChildren)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::DeleteChildren\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::DeleteChildren call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::DeleteChildren(*(wxDataViewItem*) object_pointer0_0)\n\n");
				#endif

				((wxDataViewTreeStore_php*)native_object)->DeleteChildren(*(wxDataViewItem*) object_pointer0_0);

				references->AddReference(item0, "wxDataViewTreeStore::DeleteChildren at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::DeleteChildren\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewTreeStore::DeleteItem(wxDataViewItem item)
   Delete this item. */
PHP_METHOD(php_wxDataViewTreeStore, DeleteItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::DeleteItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::DeleteItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::DeleteItem(*(wxDataViewItem*) object_pointer0_0)\n\n");
				#endif

				((wxDataViewTreeStore_php*)native_object)->DeleteItem(*(wxDataViewItem*) object_pointer0_0);

				references->AddReference(item0, "wxDataViewTreeStore::DeleteItem at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::DeleteItem\n");
	}
}
/* }}} */

/* {{{ proto int wxDataViewTreeStore::GetChildCount(wxDataViewItem parent)
   Return the number of children of item. */
PHP_METHOD(php_wxDataViewTreeStore, GetChildCount)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::GetChildCount\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::GetChildCount call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&parent0, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewTreeStore::GetChildCount(*(wxDataViewItem*) object_pointer0_0))\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxDataViewTreeStore_php*)native_object)->GetChildCount(*(wxDataViewItem*) object_pointer0_0));

				references->AddReference(parent0, "wxDataViewTreeStore::GetChildCount at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::GetChildCount\n");
	}
}
/* }}} */

/* {{{ proto wxClientData wxDataViewTreeStore::GetItemData(wxDataViewItem item)
   Returns the client data associated with the item. */
PHP_METHOD(php_wxDataViewTreeStore, GetItemData)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::GetItemData\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::GetItemData call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::GetItemData(*(wxDataViewItem*) object_pointer0_0) to return object pointer\n\n");
				#endif

				wxClientData_php* value_to_return1;
				value_to_return1 = (wxClientData_php*) ((wxDataViewTreeStore_php*)native_object)->GetItemData(*(wxDataViewItem*) object_pointer0_0);

				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxClientData_entry);
					((zo_wxClientData*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxClientData_php*) value_to_return1;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return1 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxDataViewTreeStore::GetItemData at call with 1 argument(s)");
				}

				references->AddReference(item0, "wxDataViewTreeStore::GetItemData at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::GetItemData\n");
	}
}
/* }}} */

/* {{{ proto wxIcon wxDataViewTreeStore::GetItemExpandedIcon(wxDataViewItem item)
   Returns the icon to display in expanded containers. */
PHP_METHOD(php_wxDataViewTreeStore, GetItemExpandedIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::GetItemExpandedIcon\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::GetItemExpandedIcon call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::GetItemExpandedIcon(*(wxDataViewItem*) object_pointer0_0) to return object reference\n\n");
				#endif

				wxIcon_php* value_to_return1;
				value_to_return1 = (wxIcon_php*) &((wxDataViewTreeStore_php*)native_object)->GetItemExpandedIcon(*(wxDataViewItem*) object_pointer0_0);

				if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxIcon_entry);
					((zo_wxIcon*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxIcon_php*) value_to_return1;
				}

				if((void*)value_to_return1 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxDataViewTreeStore::GetItemExpandedIcon at call with 1 argument(s)");
				}

				references->AddReference(item0, "wxDataViewTreeStore::GetItemExpandedIcon at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::GetItemExpandedIcon\n");
	}
}
/* }}} */

/* {{{ proto wxIcon wxDataViewTreeStore::GetItemIcon(wxDataViewItem item)
   Returns the icon of the item. */
PHP_METHOD(php_wxDataViewTreeStore, GetItemIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::GetItemIcon\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::GetItemIcon call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::GetItemIcon(*(wxDataViewItem*) object_pointer0_0) to return object reference\n\n");
				#endif

				wxIcon_php* value_to_return1;
				value_to_return1 = (wxIcon_php*) &((wxDataViewTreeStore_php*)native_object)->GetItemIcon(*(wxDataViewItem*) object_pointer0_0);

				if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxIcon_entry);
					((zo_wxIcon*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxIcon_php*) value_to_return1;
				}

				if((void*)value_to_return1 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxDataViewTreeStore::GetItemIcon at call with 1 argument(s)");
				}

				references->AddReference(item0, "wxDataViewTreeStore::GetItemIcon at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::GetItemIcon\n");
	}
}
/* }}} */

/* {{{ proto string wxDataViewTreeStore::GetItemText(wxDataViewItem item)
   Returns the text of the item. */
PHP_METHOD(php_wxDataViewTreeStore, GetItemText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::GetItemText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::GetItemText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxDataViewTreeStore::GetItemText(*(wxDataViewItem*) object_pointer0_0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = ((wxDataViewTreeStore_php*)native_object)->GetItemText(*(wxDataViewItem*) object_pointer0_0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);

				references->AddReference(item0, "wxDataViewTreeStore::GetItemText at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::GetItemText\n");
	}
}
/* }}} */

/* {{{ proto wxDataViewItem wxDataViewTreeStore::GetNthChild(wxDataViewItem parent, int pos)
   Returns the nth child item of item. */
PHP_METHOD(php_wxDataViewTreeStore, GetNthChild)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::GetNthChild\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::GetNthChild call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	long pos0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ol' (&parent0, php_wxDataViewItem_entry, &pos0)\n");
		#endif

		char parse_parameters_string[] = "Ol";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &pos0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::GetNthChild(*(wxDataViewItem*) object_pointer0_0, (unsigned int) pos0) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return2;
				value_to_return2 = ((wxDataViewTreeStore_php*)native_object)->GetNthChild(*(wxDataViewItem*) object_pointer0_0, (unsigned int) pos0);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo2 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo2->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::GetNthChild at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::GetNthChild\n");
	}
}
/* }}} */

/* {{{ proto wxDataViewItem wxDataViewTreeStore::InsertContainer(wxDataViewItem parent, wxDataViewItem previous, string text, wxIcon icon, wxIcon expanded, wxClientData &data)
   Inserts a container after previous. */
PHP_METHOD(php_wxDataViewTreeStore, InsertContainer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::InsertContainer\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::InsertContainer call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	zval* previous0 = 0;
	wxDataViewItem* object_pointer0_1 = 0;
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	wxIcon* object_pointer0_3 = 0;
	zval* expanded0 = 0;
	wxIcon* object_pointer0_4 = 0;
	zval* data0 = 0;
	wxClientData* object_pointer0_5 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOs|OOz' (&parent0, php_wxDataViewItem_entry, &previous0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &expanded0, php_wxIcon_entry, &data0)\n");
		#endif

		char parse_parameters_string[] = "OOs|OOz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &previous0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &expanded0, php_wxIcon_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(previous0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(previous0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(previous0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'previous' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(previous0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'previous' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(icon0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxIcon*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(expanded0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(expanded0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(expanded0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxIcon*) argument_native_object;
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter 'expanded' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(expanded0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'expanded' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 6){
				if(Z_TYPE_P(data0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->native_object;
					object_pointer0_5 = (wxClientData*) argument_native_object;
					if (!object_pointer0_5 || (argument_type != PHP_WXCLIENTDATA_TYPE && argument_type != PHP_WXTREEITEMDATA_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'data' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'data' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8)) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return3;
				value_to_return3 = ((wxDataViewTreeStore_php*)native_object)->InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo3 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo3->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::InsertContainer at call with 3 argument(s)");
				references->AddReference(previous0, "wxDataViewTreeStore::InsertContainer at call with 3 argument(s)");

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return4;
				value_to_return4 = ((wxDataViewTreeStore_php*)native_object)->InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo4 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo4->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::InsertContainer at call with 4 argument(s)");
				references->AddReference(previous0, "wxDataViewTreeStore::InsertContainer at call with 4 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::InsertContainer at call with 4 argument(s)");

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3, *(wxIcon*) object_pointer0_4) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return5;
				value_to_return5 = ((wxDataViewTreeStore_php*)native_object)->InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3, *(wxIcon*) object_pointer0_4);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return5, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo5 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo5->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::InsertContainer at call with 5 argument(s)");
				references->AddReference(previous0, "wxDataViewTreeStore::InsertContainer at call with 5 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::InsertContainer at call with 5 argument(s)");
				references->AddReference(expanded0, "wxDataViewTreeStore::InsertContainer at call with 5 argument(s)");

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3, *(wxIcon*) object_pointer0_4, (wxClientData*) object_pointer0_5) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return6;
				value_to_return6 = ((wxDataViewTreeStore_php*)native_object)->InsertContainer(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3, *(wxIcon*) object_pointer0_4, (wxClientData*) object_pointer0_5);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return6, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo6 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo6->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::InsertContainer at call with 6 argument(s)");
				references->AddReference(previous0, "wxDataViewTreeStore::InsertContainer at call with 6 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::InsertContainer at call with 6 argument(s)");
				references->AddReference(expanded0, "wxDataViewTreeStore::InsertContainer at call with 6 argument(s)");
				references->AddReference(data0, "wxDataViewTreeStore::InsertContainer at call with 6 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::InsertContainer\n");
	}
}
/* }}} */

/* {{{ proto wxDataViewItem wxDataViewTreeStore::InsertItem(wxDataViewItem parent, wxDataViewItem previous, string text, wxIcon icon, wxClientData &data)
   Inserts an item after previous. */
PHP_METHOD(php_wxDataViewTreeStore, InsertItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::InsertItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::InsertItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	zval* previous0 = 0;
	wxDataViewItem* object_pointer0_1 = 0;
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	wxIcon* object_pointer0_3 = 0;
	zval* data0 = 0;
	wxClientData* object_pointer0_4 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOs|Oz' (&parent0, php_wxDataViewItem_entry, &previous0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &data0)\n");
		#endif

		char parse_parameters_string[] = "OOs|Oz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &previous0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(previous0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(previous0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(previous0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'previous' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(previous0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'previous' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(icon0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxIcon*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(data0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxClientData*) argument_native_object;
					if (!object_pointer0_4 || (argument_type != PHP_WXCLIENTDATA_TYPE && argument_type != PHP_WXTREEITEMDATA_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'data' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'data' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertItem(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8)) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return3;
				value_to_return3 = ((wxDataViewTreeStore_php*)native_object)->InsertItem(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo3 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo3->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::InsertItem at call with 3 argument(s)");
				references->AddReference(previous0, "wxDataViewTreeStore::InsertItem at call with 3 argument(s)");

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertItem(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return4;
				value_to_return4 = ((wxDataViewTreeStore_php*)native_object)->InsertItem(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo4 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo4->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::InsertItem at call with 4 argument(s)");
				references->AddReference(previous0, "wxDataViewTreeStore::InsertItem at call with 4 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::InsertItem at call with 4 argument(s)");

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::InsertItem(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3, (wxClientData*) object_pointer0_4) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return5;
				value_to_return5 = ((wxDataViewTreeStore_php*)native_object)->InsertItem(*(wxDataViewItem*) object_pointer0_0, *(wxDataViewItem*) object_pointer0_1, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_3, (wxClientData*) object_pointer0_4);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return5, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo5 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo5->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::InsertItem at call with 5 argument(s)");
				references->AddReference(previous0, "wxDataViewTreeStore::InsertItem at call with 5 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::InsertItem at call with 5 argument(s)");
				references->AddReference(data0, "wxDataViewTreeStore::InsertItem at call with 5 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::InsertItem\n");
	}
}
/* }}} */

/* {{{ proto wxDataViewItem wxDataViewTreeStore::PrependContainer(wxDataViewItem parent, string text, wxIcon icon, wxIcon expanded, wxClientData &data)
   Inserts a container before the first child item or parent. */
PHP_METHOD(php_wxDataViewTreeStore, PrependContainer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::PrependContainer\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::PrependContainer call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	wxIcon* object_pointer0_2 = 0;
	zval* expanded0 = 0;
	wxIcon* object_pointer0_3 = 0;
	zval* data0 = 0;
	wxClientData* object_pointer0_4 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Os|OOz' (&parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &expanded0, php_wxIcon_entry, &data0)\n");
		#endif

		char parse_parameters_string[] = "Os|OOz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &expanded0, php_wxIcon_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(icon0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxIcon*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(expanded0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(expanded0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(expanded0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxIcon*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'expanded' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(expanded0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'expanded' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(data0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxClientData*) argument_native_object;
					if (!object_pointer0_4 || (argument_type != PHP_WXCLIENTDATA_TYPE && argument_type != PHP_WXTREEITEMDATA_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'data' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'data' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8)) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return2;
				value_to_return2 = ((wxDataViewTreeStore_php*)native_object)->PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo2 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo2->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::PrependContainer at call with 2 argument(s)");

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return3;
				value_to_return3 = ((wxDataViewTreeStore_php*)native_object)->PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo3 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo3->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::PrependContainer at call with 3 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::PrependContainer at call with 3 argument(s)");

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return4;
				value_to_return4 = ((wxDataViewTreeStore_php*)native_object)->PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo4 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo4->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::PrependContainer at call with 4 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::PrependContainer at call with 4 argument(s)");
				references->AddReference(expanded0, "wxDataViewTreeStore::PrependContainer at call with 4 argument(s)");

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3, (wxClientData*) object_pointer0_4) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return5;
				value_to_return5 = ((wxDataViewTreeStore_php*)native_object)->PrependContainer(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, *(wxIcon*) object_pointer0_3, (wxClientData*) object_pointer0_4);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return5, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo5 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo5->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::PrependContainer at call with 5 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::PrependContainer at call with 5 argument(s)");
				references->AddReference(expanded0, "wxDataViewTreeStore::PrependContainer at call with 5 argument(s)");
				references->AddReference(data0, "wxDataViewTreeStore::PrependContainer at call with 5 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::PrependContainer\n");
	}
}
/* }}} */

/* {{{ proto wxDataViewItem wxDataViewTreeStore::PrependItem(wxDataViewItem parent, string text, wxIcon icon, wxClientData &data)
   Inserts an item before the first child item or parent. */
PHP_METHOD(php_wxDataViewTreeStore, PrependItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::PrependItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::PrependItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	wxIcon* object_pointer0_2 = 0;
	zval* data0 = 0;
	wxClientData* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Os|Oz' (&parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &data0)\n");
		#endif

		char parse_parameters_string[] = "Os|Oz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, php_wxDataViewItem_entry, &text0, &text_len0, &icon0, php_wxIcon_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(icon0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxIcon*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(data0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxClientData*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXCLIENTDATA_TYPE && argument_type != PHP_WXTREEITEMDATA_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'data' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'data' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8)) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return2;
				value_to_return2 = ((wxDataViewTreeStore_php*)native_object)->PrependItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo2 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo2->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::PrependItem at call with 2 argument(s)");

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return3;
				value_to_return3 = ((wxDataViewTreeStore_php*)native_object)->PrependItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo3 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo3->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::PrependItem at call with 3 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::PrependItem at call with 3 argument(s)");

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::PrependItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, (wxClientData*) object_pointer0_3) to return new object\n\n");
				#endif

				wxDataViewItem value_to_return4;
				value_to_return4 = ((wxDataViewTreeStore_php*)native_object)->PrependItem(*(wxDataViewItem*) object_pointer0_0, wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_2, (wxClientData*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo4 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo4->native_object = (wxDataViewItem_php*) ptr;

				references->AddReference(parent0, "wxDataViewTreeStore::PrependItem at call with 4 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::PrependItem at call with 4 argument(s)");
				references->AddReference(data0, "wxDataViewTreeStore::PrependItem at call with 4 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::PrependItem\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewTreeStore::SetItemData(wxDataViewItem item, wxClientData &data)
   Sets the client data associated with the item. */
PHP_METHOD(php_wxDataViewTreeStore, SetItemData)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::SetItemData\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::SetItemData call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	zval* data0 = 0;
	wxClientData* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Oz' (&item0, php_wxDataViewItem_entry, &data0)\n");
		#endif

		char parse_parameters_string[] = "Oz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(data0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxClientData*) zend_object_store_get_object(data0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxClientData*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXCLIENTDATA_TYPE && argument_type != PHP_WXTREEITEMDATA_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'data' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'data' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::SetItemData(*(wxDataViewItem*) object_pointer0_0, (wxClientData*) object_pointer0_1)\n\n");
				#endif

				((wxDataViewTreeStore_php*)native_object)->SetItemData(*(wxDataViewItem*) object_pointer0_0, (wxClientData*) object_pointer0_1);

				references->AddReference(item0, "wxDataViewTreeStore::SetItemData at call with 2 argument(s)");
				references->AddReference(data0, "wxDataViewTreeStore::SetItemData at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::SetItemData\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewTreeStore::SetItemExpandedIcon(wxDataViewItem item, wxIcon icon)
   Sets the expanded icon for the item. */
PHP_METHOD(php_wxDataViewTreeStore, SetItemExpandedIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::SetItemExpandedIcon\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::SetItemExpandedIcon call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	zval* icon0 = 0;
	wxIcon* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&item0, php_wxDataViewItem_entry, &icon0, php_wxIcon_entry)\n");
		#endif

		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &icon0, php_wxIcon_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(icon0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxIcon*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::SetItemExpandedIcon(*(wxDataViewItem*) object_pointer0_0, *(wxIcon*) object_pointer0_1)\n\n");
				#endif

				((wxDataViewTreeStore_php*)native_object)->SetItemExpandedIcon(*(wxDataViewItem*) object_pointer0_0, *(wxIcon*) object_pointer0_1);

				references->AddReference(item0, "wxDataViewTreeStore::SetItemExpandedIcon at call with 2 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::SetItemExpandedIcon at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::SetItemExpandedIcon\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewTreeStore::SetItemIcon(wxDataViewItem item, wxIcon icon)
   Sets the icon for the item. */
PHP_METHOD(php_wxDataViewTreeStore, SetItemIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::SetItemIcon\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxphp_object_type current_object_type;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewTreeStore::SetItemIcon call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWTREESTORE_TYPE){
				references = &((wxDataViewTreeStore_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	zval* icon0 = 0;
	wxIcon* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&item0, php_wxDataViewItem_entry, &icon0, php_wxIcon_entry)\n");
		#endif

		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry, &icon0, php_wxIcon_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(icon0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxIcon*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewTreeStore::SetItemIcon(*(wxDataViewItem*) object_pointer0_0, *(wxIcon*) object_pointer0_1)\n\n");
				#endif

				((wxDataViewTreeStore_php*)native_object)->SetItemIcon(*(wxDataViewItem*) object_pointer0_0, *(wxIcon*) object_pointer0_1);

				references->AddReference(item0, "wxDataViewTreeStore::SetItemIcon at call with 2 argument(s)");
				references->AddReference(icon0, "wxDataViewTreeStore::SetItemIcon at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewTreeStore::SetItemIcon\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewTreeStore::wxDataViewTreeStore()
   Constructor. */
PHP_METHOD(php_wxDataViewTreeStore, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewTreeStore::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewTreeStore* current_object;
	wxDataViewTreeStore_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewTreeStore_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewTreeStore*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewTreeStore::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewIconText_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewIconText* custom_object = (zo_wxDataViewIconText*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewIconText_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewIconText done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewIconText_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewIconText_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewIconText* custom_object;
    custom_object = (zo_wxDataViewIconText*) emalloc(sizeof(zo_wxDataViewIconText));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewIconText_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWICONTEXT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxIcon wxDataViewIconText::GetIcon()
   Gets the icon. */
PHP_METHOD(php_wxDataViewIconText, GetIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewIconText::GetIcon\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewIconText* current_object;
	wxphp_object_type current_object_type;
	wxDataViewIconText_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewIconText*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewIconText::GetIcon call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWICONTEXT_TYPE){
				references = &((wxDataViewIconText_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewIconText::GetIcon() to return object reference\n\n");
				#endif

				wxIcon_php* value_to_return0;
				value_to_return0 = (wxIcon_php*) &((wxDataViewIconText_php*)native_object)->GetIcon();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxIcon_entry);
					((zo_wxIcon*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxIcon_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxDataViewIconText::GetIcon at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewIconText::GetIcon\n");
	}
}
/* }}} */

/* {{{ proto string wxDataViewIconText::GetText()
   Gets the text. */
PHP_METHOD(php_wxDataViewIconText, GetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewIconText::GetText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewIconText* current_object;
	wxphp_object_type current_object_type;
	wxDataViewIconText_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewIconText*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewIconText::GetText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWICONTEXT_TYPE){
				references = &((wxDataViewIconText_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxDataViewIconText::GetText().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxDataViewIconText_php*)native_object)->GetText();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewIconText::GetText\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewIconText::SetIcon(wxIcon icon)
   Set the icon. */
PHP_METHOD(php_wxDataViewIconText, SetIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewIconText::SetIcon\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewIconText* current_object;
	wxphp_object_type current_object_type;
	wxDataViewIconText_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewIconText*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewIconText::SetIcon call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWICONTEXT_TYPE){
				references = &((wxDataViewIconText_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* icon0 = 0;
	wxIcon* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&icon0, php_wxIcon_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &icon0, php_wxIcon_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(icon0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxIcon*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewIconText::SetIcon(*(wxIcon*) object_pointer0_0)\n\n");
				#endif

				((wxDataViewIconText_php*)native_object)->SetIcon(*(wxIcon*) object_pointer0_0);

				references->AddReference(icon0, "wxDataViewIconText::SetIcon at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewIconText::SetIcon\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewIconText::SetText(string text)
   Set the text. */
PHP_METHOD(php_wxDataViewIconText, SetText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewIconText::SetText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewIconText* current_object;
	wxphp_object_type current_object_type;
	wxDataViewIconText_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewIconText*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewIconText::SetText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWICONTEXT_TYPE){
				references = &((wxDataViewIconText_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&text0, &text_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewIconText::SetText(wxString(text0, wxConvUTF8))\n\n");
				#endif

				((wxDataViewIconText_php*)native_object)->SetText(wxString(text0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewIconText::SetText\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewIconText::wxDataViewIconText(string text, wxIcon icon)
   Constructor. */
PHP_METHOD(php_wxDataViewIconText, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewIconText::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewIconText* current_object;
	wxDataViewIconText_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	zval* icon0 = 0;
	wxIcon* object_pointer0_1 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* other1 = 0;
	wxDataViewIconText* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sO' (&text0, &text_len0, &icon0, php_wxIcon_entry)\n");
		#endif

		char parse_parameters_string[] = "|sO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0, &icon0, php_wxIcon_entry ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(icon0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxIcon*) argument_native_object;
					if (!object_pointer0_1 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
					goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&other1, php_wxDataViewIconText_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &other1, php_wxDataViewIconText_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(other1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewIconText*) zend_object_store_get_object(other1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewIconText*) zend_object_store_get_object(other1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxDataViewIconText*) argument_native_object;
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter 'other' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(other1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'other' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewIconText_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(text0, wxConvUTF8))\n");
				#endif

				native_object = new wxDataViewIconText_php(wxString(text0, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_1)\n");
				#endif

				native_object = new wxDataViewIconText_php(wxString(text0, wxConvUTF8), *(wxIcon*) object_pointer0_1);

				native_object->references.Initialize();
				((wxDataViewIconText_php*) native_object)->references.AddReference(icon0, "wxDataViewIconText::wxDataViewIconText at call with 2 argument(s)");
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxDataViewIconText*) object_pointer1_0)\n");
				#endif

				native_object = new wxDataViewIconText_php(*(wxDataViewIconText*) object_pointer1_0);

				native_object->references.Initialize();
				((wxDataViewIconText_php*) native_object)->references.AddReference(other1, "wxDataViewIconText::wxDataViewIconText at call with 1 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewIconText*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewIconText::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxDataViewEvent_free(void *object TSRMLS_DC) 
{
    zo_wxDataViewEvent* custom_object = (zo_wxDataViewEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxDataViewEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxDataViewEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxDataViewEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxDataViewEvent* custom_object;
    custom_object = (zo_wxDataViewEvent*) emalloc(sizeof(zo_wxDataViewEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxDataViewEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXDATAVIEWEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxDataViewItem wxDataViewEvent::GetItem() */
PHP_METHOD(php_wxDataViewEvent, GetItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::GetItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetItem() to return new object\n\n");
				#endif

				wxDataViewItem value_to_return0;
				value_to_return0 = ((wxDataViewEvent_php*)native_object)->GetItem();
				void* ptr = safe_emalloc(1, sizeof(wxDataViewItem_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxDataViewItem));
				object_init_ex(return_value, php_wxDataViewItem_entry);
				((wxDataViewItem_php*)ptr)->phpObj = return_value;
				zo_wxDataViewItem* zo0 = (zo_wxDataViewItem*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxDataViewItem_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::GetItem\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewEvent::SetItem(wxDataViewItem item) */
PHP_METHOD(php_wxDataViewEvent, SetItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::SetItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* item0 = 0;
	wxDataViewItem* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&item0, php_wxDataViewItem_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &item0, php_wxDataViewItem_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(item0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewItem*) zend_object_store_get_object(item0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewItem*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'item' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(item0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'item' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetItem(*(wxDataViewItem*) object_pointer0_0)\n\n");
				#endif

				((wxDataViewEvent_php*)native_object)->SetItem(*(wxDataViewItem*) object_pointer0_0);

				references->AddReference(item0, "wxDataViewEvent::SetItem at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::SetItem\n");
	}
}
/* }}} */

/* {{{ proto int wxDataViewEvent::GetCacheFrom()
   Return the first row that will be displayed. */
PHP_METHOD(php_wxDataViewEvent, GetCacheFrom)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetCacheFrom\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::GetCacheFrom call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewEvent::GetCacheFrom())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxDataViewEvent_php*)native_object)->GetCacheFrom());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::GetCacheFrom\n");
	}
}
/* }}} */

/* {{{ proto int wxDataViewEvent::GetCacheTo()
   Return the last row that will be displayed. */
PHP_METHOD(php_wxDataViewEvent, GetCacheTo)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetCacheTo\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::GetCacheTo call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewEvent::GetCacheTo())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxDataViewEvent_php*)native_object)->GetCacheTo());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::GetCacheTo\n");
	}
}
/* }}} */

/* {{{ proto int wxDataViewEvent::GetColumn()
   Returns the position of the column in the control or -1 if no column field was set by the event emitter. */
PHP_METHOD(php_wxDataViewEvent, GetColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetColumn\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::GetColumn call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewEvent::GetColumn())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxDataViewEvent_php*)native_object)->GetColumn());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::GetColumn\n");
	}
}
/* }}} */

/* {{{ proto void wxDataViewEvent::GetDataBuffer()
   Gets the data buffer for a drop data transfer. */
PHP_METHOD(php_wxDataViewEvent, GetDataBuffer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetDataBuffer\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::GetDataBuffer call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetDataBuffer()\n\n");
				#endif

				ZVAL_STRING(return_value, (char*) ((wxDataViewEvent_php*)native_object)->GetDataBuffer(), 1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::GetDataBuffer\n");
	}
}
/* }}} */

/* {{{ proto wxDataFormat wxDataViewEvent::GetDataFormat()
   Gets the wxDataFormat during a drop operation. */
PHP_METHOD(php_wxDataViewEvent, GetDataFormat)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetDataFormat\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::GetDataFormat call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetDataFormat() to return new object\n\n");
				#endif

				wxDataFormat value_to_return0;
				value_to_return0 = ((wxDataViewEvent_php*)native_object)->GetDataFormat();
				void* ptr = safe_emalloc(1, sizeof(wxDataFormat_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxDataFormat));
				object_init_ex(return_value, php_wxDataFormat_entry);
				((wxDataFormat_php*)ptr)->phpObj = return_value;
				zo_wxDataFormat* zo0 = (zo_wxDataFormat*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxDataFormat_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::GetDataFormat\n");
	}
}
/* }}} */

/* {{{ proto int wxDataViewEvent::GetDataSize()
   Gets the data size for a drop data transfer. */
PHP_METHOD(php_wxDataViewEvent, GetDataSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetDataSize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::GetDataSize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxDataViewEvent::GetDataSize())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxDataViewEvent_php*)native_object)->GetDataSize());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::GetDataSize\n");
	}
}
/* }}} */

/* {{{ proto wxDataViewColumn wxDataViewEvent::GetDataViewColumn()
   Returns a pointer to the wxDataViewColumn from which the event was emitted or NULL. */
PHP_METHOD(php_wxDataViewEvent, GetDataViewColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetDataViewColumn\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::GetDataViewColumn call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetDataViewColumn() to return object pointer\n\n");
				#endif

				wxDataViewColumn_php* value_to_return0;
				value_to_return0 = (wxDataViewColumn_php*) ((wxDataViewEvent_php*)native_object)->GetDataViewColumn();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxDataViewColumn_entry);
					((zo_wxDataViewColumn*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewColumn_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxDataViewEvent::GetDataViewColumn at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::GetDataViewColumn\n");
	}
}
/* }}} */

/* {{{ proto wxDataViewModel wxDataViewEvent::GetModel()
   Returns the wxDataViewModel associated with the event. */
PHP_METHOD(php_wxDataViewEvent, GetModel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetModel\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::GetModel call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetModel() to return object pointer\n\n");
				#endif

				wxDataViewModel_php* value_to_return0;
				value_to_return0 = (wxDataViewModel_php*) ((wxDataViewEvent_php*)native_object)->GetModel();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxDataViewModel_entry);
					((zo_wxDataViewModel*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewModel_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxDataViewEvent::GetModel at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::GetModel\n");
	}
}
/* }}} */

/* {{{ proto wxPoint wxDataViewEvent::GetPosition()
   Returns the position of a context menu event in screen coordinates. */
PHP_METHOD(php_wxDataViewEvent, GetPosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetPosition\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::GetPosition call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetPosition() to return new object\n\n");
				#endif

				wxPoint value_to_return0;
				value_to_return0 = ((wxDataViewEvent_php*)native_object)->GetPosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				((wxPoint_php*)ptr)->phpObj = return_value;
				((wxPoint_php*)ptr)->InitProperties();
				zo_wxPoint* zo0 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxPoint_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::GetPosition\n");
	}
}
/* }}} */

/* {{{ proto wxVariant wxDataViewEvent::GetValue()
   Returns a reference to a value. */
PHP_METHOD(php_wxDataViewEvent, GetValue)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::GetValue\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::GetValue call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::GetValue() to return object reference\n\n");
				#endif

				wxVariant_php* value_to_return0;
				value_to_return0 = (wxVariant_php*) &((wxDataViewEvent_php*)native_object)->GetValue();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxVariant_entry);
					((zo_wxVariant*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxVariant_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxDataViewEvent::GetValue at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::GetValue\n");
	}
}
/* }}} */

/* {{{ proto bool wxDataViewEvent::IsEditCancelled()
   Can be used to determine whether the new value is going to be accepted in wxEVT_DATAVIEW_ITEM_EDITING_DONE handler. */
PHP_METHOD(php_wxDataViewEvent, IsEditCancelled)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::IsEditCancelled\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::IsEditCancelled call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxDataViewEvent::IsEditCancelled())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxDataViewEvent_php*)native_object)->IsEditCancelled());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::IsEditCancelled\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewEvent::SetColumn(int col)
   Sets the column index associated with this event. */
PHP_METHOD(php_wxDataViewEvent, SetColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetColumn\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::SetColumn call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long col0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&col0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &col0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetColumn((int) col0)\n\n");
				#endif

				((wxDataViewEvent_php*)native_object)->SetColumn((int) col0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::SetColumn\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewEvent::SetDataObject(wxDataObject &obj)
   Set wxDataObject for data transfer within a drag operation. */
PHP_METHOD(php_wxDataViewEvent, SetDataObject)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetDataObject\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::SetDataObject call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* obj0 = 0;
	wxDataObject* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&obj0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &obj0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(obj0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataObject*) zend_object_store_get_object(obj0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataObject*) zend_object_store_get_object(obj0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataObject*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXDATAOBJECT_TYPE && argument_type != PHP_WXDATAOBJECTCOMPOSITE_TYPE && argument_type != PHP_WXDATAOBJECTSIMPLE_TYPE && argument_type != PHP_WXTEXTDATAOBJECT_TYPE && argument_type != PHP_WXURLDATAOBJECT_TYPE && argument_type != PHP_WXFILEDATAOBJECT_TYPE && argument_type != PHP_WXBITMAPDATAOBJECT_TYPE && argument_type != PHP_WXCUSTOMDATAOBJECT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'obj' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(obj0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'obj' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetDataObject((wxDataObject*) object_pointer0_0)\n\n");
				#endif

				((wxDataViewEvent_php*)native_object)->SetDataObject((wxDataObject*) object_pointer0_0);

				references->AddReference(obj0, "wxDataViewEvent::SetDataObject at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::SetDataObject\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewEvent::SetDataViewColumn(wxDataViewColumn &col)
   For wxEVT_DATAVIEW_COLUMN_HEADER_CLICK only. */
PHP_METHOD(php_wxDataViewEvent, SetDataViewColumn)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetDataViewColumn\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::SetDataViewColumn call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* col0 = 0;
	wxDataViewColumn* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&col0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &col0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(col0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewColumn*) zend_object_store_get_object(col0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewColumn*) zend_object_store_get_object(col0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewColumn*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXDATAVIEWCOLUMN_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'col' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(col0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'col' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetDataViewColumn((wxDataViewColumn*) object_pointer0_0)\n\n");
				#endif

				((wxDataViewEvent_php*)native_object)->SetDataViewColumn((wxDataViewColumn*) object_pointer0_0);

				references->AddReference(col0, "wxDataViewEvent::SetDataViewColumn at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::SetDataViewColumn\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewEvent::SetModel(wxDataViewModel &model)
   Sets the dataview model associated with this event. */
PHP_METHOD(php_wxDataViewEvent, SetModel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetModel\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::SetModel call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* model0 = 0;
	wxDataViewModel* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&model0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &model0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(model0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDataViewModel*) zend_object_store_get_object(model0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDataViewModel*) zend_object_store_get_object(model0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDataViewModel*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXDATAVIEWMODEL_TYPE && argument_type != PHP_WXDATAVIEWLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWINDEXLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWLISTSTORE_TYPE && argument_type != PHP_WXDATAVIEWVIRTUALLISTMODEL_TYPE && argument_type != PHP_WXDATAVIEWTREESTORE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'model' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(model0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'model' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetModel((wxDataViewModel*) object_pointer0_0)\n\n");
				#endif

				((wxDataViewEvent_php*)native_object)->SetModel((wxDataViewModel*) object_pointer0_0);

				references->AddReference(model0, "wxDataViewEvent::SetModel at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::SetModel\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewEvent::SetValue(wxVariant value)
   Sets the value associated with this event. */
PHP_METHOD(php_wxDataViewEvent, SetValue)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::SetValue\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxphp_object_type current_object_type;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxDataViewEvent::SetValue call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXDATAVIEWEVENT_TYPE){
				references = &((wxDataViewEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* value0 = 0;
	wxVariant* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&value0, php_wxVariant_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &value0, php_wxVariant_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(value0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxVariant*) zend_object_store_get_object(value0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxVariant*) zend_object_store_get_object(value0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxVariant*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'value' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(value0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'value' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxDataViewEvent::SetValue(*(wxVariant*) object_pointer0_0)\n\n");
				#endif

				((wxDataViewEvent_php*)native_object)->SetValue(*(wxVariant*) object_pointer0_0);

				references->AddReference(value0, "wxDataViewEvent::SetValue at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxDataViewEvent::SetValue\n");
	}
}
/* }}} */

/* {{{ proto  wxDataViewEvent::wxDataViewEvent(int commandType, int winid)
   Constructor. */
PHP_METHOD(php_wxDataViewEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxDataViewEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxDataViewEvent* current_object;
	wxDataViewEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandType0;
	long winid0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&commandType0, &winid0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &winid0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxDataViewEvent_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0)\n");
				#endif

				native_object = new wxDataViewEvent_php((wxEventType) commandType0);

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) winid0)\n");
				#endif

				native_object = new wxDataViewEvent_php((wxEventType) commandType0, (int) winid0);

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxDataViewEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxDataViewEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

