/*
 * @author Mário Soares
 * @contributors Jefferson González
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @description
 * File that holds the functions code of the wxWidgets extension
 * 
 * @note
 * Some parts of this file are auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "functions.h"

#ifdef __WXMAC__
/* Header for process type transformation functions */
#include <ApplicationServices/ApplicationServices.h>
#endif

#include "appmanagement.h"
#include "aui.h"
#include "bookctrl.h"
#include "cfg.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "dnd.h"
#include "docview.h"
#include "dvc.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "help.h"
#include "html.h"
#include "logging.h"
#include "managedwnd.h"
#include "media.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "net.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "webview.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "others.h"

/**
 * Forwards some or all of the function parameters to PHP's sprintf.
 * Returns a formatted string or NULL.
 */
zval * wxphp_sprintf(INTERNAL_FUNCTION_PARAMETERS, int offset = 0)
{
	int		argc = ZEND_NUM_ARGS();
	zval	***argv;
	zval	funcName, *string, *retVal = NULL;
	
	if (argc < 1) {
		WRONG_PARAM_COUNT_WITH_RETVAL(NULL);
	}
	
	argv = (zval ***) safe_emalloc(argc, sizeof(zval **), 0);
	
	if (zend_get_parameters_array_ex(argc, argv) == FAILURE) {
		efree(argv);
		WRONG_PARAM_COUNT_WITH_RETVAL(NULL);
	}
		
	ZVAL_STRINGL(&funcName, "sprintf", sizeof("sprintf") - 1, 0);

	if (call_user_function_ex(EG(function_table), NULL, &funcName, &string,
		argc - offset, argv + offset, 0, NULL TSRMLS_CC) == SUCCESS)
	{
		if (Z_TYPE_P(string) == IS_STRING)
			retVal = string;
		else
			zval_ptr_dtor(&string);
	}
	
	efree(argv);
	
	return retVal;
}

/**
 * Predefined handcoded set of functions
 */
 
/* {{{ proto int wxExecute(string command)
   Executes another program in Unix or Windows. */
PHP_FUNCTION(php_wxExecute)
{
	char* _argStr0;
	int _argStr0_len;
	
	char parse_parameters[] = "s";
    
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, parse_parameters, &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		long ret0;
		ret0 = wxExecute(wxString(_argStr0, wxConvUTF8));
		
		RETURN_LONG((long)ret0)
	}
}
/* }}} */

/* {{{ proto int wxEntry()
   This function initializes wxWidgets in a platform-dependent way. */
PHP_FUNCTION(php_wxEntry)
{
	#ifdef __WXMAC__
    /* In order to correctly receive keyboard input we need to explicitly
     * tell mac to convert this console process to a gui process.
     *
     * Solution found at: 
     * http://stackoverflow.com/questions/4341098/wxwidgets-commandline-gui-hybrid-application-fails-to-get-dialog-input
     */
    ProcessSerialNumber PSN;
    GetCurrentProcess(&PSN);
    TransformProcessType(&PSN,kProcessTransformToForegroundApplication);
    #endif

	int argc = 1;
	char application_name[] = "wxPHP";
	char *argv[2] = { application_name, NULL };
	
	RETVAL_LONG(wxEntry(argc, argv));
}
/* }}} */

/* {{{ proto object wxC2D(object wxwidgets_object_constant)
   Converts a wxWidgets constant object to dynamic in order to be able to access its methods like wxC2D(wxNORMAL_FONT)->GetPointSize(). */
PHP_FUNCTION(php_wxC2D)
{	
	zval* constant_object = 0;
	
	char parse_parameters[] = "z";
    
    if(ZEND_NUM_ARGS() == 1)
    {
		if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, parse_parameters, &constant_object ) == SUCCESS)
		{	
			*return_value = *constant_object;
			zval_add_ref(&constant_object);
			return;
		}
	}
	
	zend_error(E_ERROR, "Ivalid count or type of parameters for wxC2D(), you should pass a constant object to transform to dynamic\n");
}
/* }}} */

/* {{{ proto void wxLogError(string formatString, ...)
   The function to use for error messages, i.e. the messages that must be shown to the user. The default processing is to pop up a message box to inform the user about it. */
PHP_FUNCTION(php_wxLogError)
{
	zval *message;
	
	if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU))
	{
		wxLogError(Z_STRVAL_P(message));
		zval_ptr_dtor(&message);
	}
}
/* }}} */

/* {{{ proto void wxLogFatalError(string formatString, ...)
   Like wxLogError(), but also terminates the program with the exit code 3. */
PHP_FUNCTION(php_wxLogFatalError)
{
	zval *message;
	
	if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU))
	{
		wxLogFatalError(Z_STRVAL_P(message));
		zval_ptr_dtor(&message);
	}
}
/* }}} */

/* {{{ proto void wxLogGeneric(int level, string formatString, ...)
   Logs a message with the given wxLogLevel. */
PHP_FUNCTION(php_wxLogGeneric)
{
	char	parse[] = "l";
	long 	logLevel;
	zval	*message;
	
	if (ZEND_NUM_ARGS() < 2) {
		WRONG_PARAM_COUNT;
	}
	
	if (zend_parse_parameters(1 TSRMLS_CC, parse, &logLevel) == SUCCESS)
	{
		if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1))
		{
			wxLogGeneric(logLevel, Z_STRVAL_P(message));
			zval_ptr_dtor(&message);
		}
	}
}
/* }}} */

/* {{{ proto void wxLogMessage(string formatString, ...)
   For all normal, informational messages. */
PHP_FUNCTION(php_wxLogMessage)
{
	zval *message;
	
	if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU))
	{
		wxLogMessage(Z_STRVAL_P(message));
		zval_ptr_dtor(&message);
	}
}
/* }}} */

/* {{{ proto void wxLogStatus([wxFrame frame,] string formatString, ...)
   Messages logged by this function will appear in the statusbar of the frame or of the top level application window. */
PHP_FUNCTION(php_wxLogStatus)
{
	char		parse[] = "O";
	wxFrame 	*frame = NULL;
	zval		*zFrame;
	zval		*message;
	
	if (ZEND_NUM_ARGS() < 1) {
		WRONG_PARAM_COUNT;
	}
	
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, 1 TSRMLS_CC,
		parse, &zFrame, php_wxFrame_entry) == SUCCESS)
	{
		// Called with wxFrame as first parameter
	
		frame = (wxFrame*)
			((zo_wxFrame*) zend_object_store_get_object(zFrame TSRMLS_CC))->native_object;

		message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1);
	}
	else
		message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU);

	if (message)
	{
		if (frame)
			wxLogStatus(frame, Z_STRVAL_P(message));
		else
			wxLogStatus(Z_STRVAL_P(message));
	
		zval_ptr_dtor(&message);
	}
}
/* }}} */

/* {{{ proto void wxLogSysError(string formatString, ...)
   Logs the specified message text as well as the last system error code (errno or GetLastError() depending on the platform) and the corresponding error message. */
PHP_FUNCTION(php_wxLogSysError)
{
	zval *message;
	
	if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU))
	{
		wxLogSysError(Z_STRVAL_P(message));
		zval_ptr_dtor(&message);
	}
}
/* }}} */

/* {{{ proto void wxLogVerbose(string formatString, ...)
   For verbose output. Normally, it is suppressed, but might be activated if the user wishes to know more details about the program progress (another, but possibly confusing name for the same function could be wxLogInfo). */
PHP_FUNCTION(php_wxLogVerbose)
{
	zval *message;
	
	if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU))
	{
		wxLogVerbose(Z_STRVAL_P(message));
		zval_ptr_dtor(&message);
	}
}
/* }}} */

/* {{{ proto void wxLogWarning(string formatString, ...)
   For warnings - they are also normally shown to the user, but don't interrupt the program work. */
PHP_FUNCTION(php_wxLogWarning)
{
	zval *message;
	
	if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU))
	{
		wxLogWarning(Z_STRVAL_P(message));
		zval_ptr_dtor(&message);
	}
}
/* }}} */

/**
 * Space reserved for autogenerated functions
 */
 
/* {{{ proto bool wxHandleFatalExceptions(bool doIt)
   If doIt is true, the fatal exceptions (also known as general protection faults under Windows or segmentation violations in the Unix world) will be caught and passed to wxApp::OnFatalException. */
PHP_FUNCTION(php_wxHandleFatalExceptions)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxHandleFatalExceptions\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool doIt0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&doIt0)\n");
		#endif

		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &doIt0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxHandleFatalExceptions())\n\n");
				#endif

				ZVAL_BOOL(return_value, wxHandleFatalExceptions());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxHandleFatalExceptions(doIt0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxHandleFatalExceptions(doIt0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxHandleFatalExceptions()\n");
	}
}
/* }}} */

/* {{{ proto bool wxInitialize()
   Initialize the library (may be called as many times as needed, but each call to wxInitialize() must be matched by wxUninitialize()). */
PHP_FUNCTION(php_wxInitialize)
{
	wxInitAllImageHandlers();
	RETVAL_BOOL(wxInitialize());
}
/* }}} */

/* {{{ proto  wxUninitialize()
   This function is for use in console (wxBase) programs only. */
PHP_FUNCTION(php_wxUninitialize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxUninitialize\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload1_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxUninitialize()\n\n");
				#endif

				wxUninitialize();


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxUninitialize()\n\n");
				#endif

				wxUninitialize();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxUninitialize()\n");
	}
}
/* }}} */

/* {{{ proto  wxWakeUpIdle()
   This function wakes up the (internal and platform dependent) idle system, i.e. */
PHP_FUNCTION(php_wxWakeUpIdle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxWakeUpIdle\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxWakeUpIdle()\n\n");
				#endif

				wxWakeUpIdle();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxWakeUpIdle()\n");
	}
}
/* }}} */

/* {{{ proto bool wxYield()
   Calls wxAppConsole::Yield. */
PHP_FUNCTION(php_wxYield)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxYield\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxYield())\n\n");
				#endif

				ZVAL_BOOL(return_value, wxYield());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxYield()\n");
	}
}
/* }}} */

/* {{{ proto bool wxSafeYield(wxWindow &win, bool onlyIfNeeded)
   Calls wxApp::SafeYield. */
PHP_FUNCTION(php_wxSafeYield)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSafeYield\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* win0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool onlyIfNeeded0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|zb' (&win0, &onlyIfNeeded0)\n");
		#endif

		char parse_parameters_string[] = "|zb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0, &onlyIfNeeded0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'win' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'win' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSafeYield())\n\n");
				#endif

				ZVAL_BOOL(return_value, wxSafeYield());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSafeYield((wxWindow*) object_pointer0_0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxSafeYield((wxWindow*) object_pointer0_0));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSafeYield((wxWindow*) object_pointer0_0, onlyIfNeeded0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxSafeYield((wxWindow*) object_pointer0_0, onlyIfNeeded0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxSafeYield()\n");
	}
}
/* }}} */

/* {{{ proto  wxExit()
   Exits application after calling wxApp::OnExit. */
PHP_FUNCTION(php_wxExit)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxExit\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxExit()\n\n");
				#endif

				wxExit();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxExit()\n");
	}
}
/* }}} */

/* {{{ proto bool wxIsDragResultOk(wxDragResult res)
   Returns true if res indicates that something was done during a DnD operation, i.e. */
PHP_FUNCTION(php_wxIsDragResultOk)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsDragResultOk\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long res0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&res0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &res0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsDragResultOk((wxDragResult) res0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsDragResultOk((wxDragResult) res0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxIsDragResultOk()\n");
	}
}
/* }}} */

/* {{{ proto bool wxFromString(string string, wxFont &font)
   Converts string to a wxFont best represented by the given string. */
PHP_FUNCTION(php_wxFromString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFromString\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* string0;
	long string_len0;
	zval* font0 = 0;
	wxFont* object_pointer0_1 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* string1;
	long string_len1;
	zval* colour1 = 0;
	wxColour* object_pointer1_1 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sz' (&string0, &string_len0, &font0)\n");
		#endif

		char parse_parameters_string[] = "sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string0, &string_len0, &font0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(font0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxFont*) zend_object_store_get_object(font0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxFont*) zend_object_store_get_object(font0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxFont*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXFONT_TYPE))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(font0) != IS_NULL)
				{
					goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sz' (&string1, &string_len1, &colour1)\n");
		#endif

		char parse_parameters_string[] = "sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string1, &string_len1, &colour1 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(colour1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(colour1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(colour1 TSRMLS_CC))->native_object;
					object_pointer1_1 = (wxColour*) argument_native_object;
					if (!object_pointer1_1 || (argument_type != PHP_WXCOLOUR_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'colour' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'colour' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxFromString(wxString(string0, wxConvUTF8), (wxFont*) object_pointer0_1))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxFromString(wxString(string0, wxConvUTF8), (wxFont*) object_pointer0_1));


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxFromString(wxString(string1, wxConvUTF8), (wxColour*) object_pointer1_1))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxFromString(wxString(string1, wxConvUTF8), (wxColour*) object_pointer1_1));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxFromString()\n");
	}
}
/* }}} */

/* {{{ proto string wxToString(wxFont font)
   Converts the given wxFont into a string. */
PHP_FUNCTION(php_wxToString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxToString\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* font0 = 0;
	wxFont* object_pointer0_0 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* colour1 = 0;
	wxColour* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&font0, php_wxFont_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &font0, php_wxFont_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(font0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxFont*) zend_object_store_get_object(font0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxFont*) zend_object_store_get_object(font0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxFont*) argument_native_object;
					if (!object_pointer0_0 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(font0) != IS_NULL)
				{
					goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&colour1, php_wxColour_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &colour1, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(colour1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(colour1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(colour1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxColour*) argument_native_object;
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter 'colour' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'colour' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxToString(*(wxFont*) object_pointer0_0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxToString(*(wxFont*) object_pointer0_0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxToString(*(wxColour*) object_pointer1_0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxToString(*(wxColour*) object_pointer1_0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxToString()\n");
	}
}
/* }}} */

/* {{{ proto  wxSafeShowMessage(string title, string text)
   This function shows a message to the user in a safe way and should be safe to call even before the application has been initialized or if it is currently in some other strange state (for example, about to crash). */
PHP_FUNCTION(php_wxSafeShowMessage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSafeShowMessage\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* title0;
	long title_len0;
	char* text0;
	long text_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&title0, &title_len0, &text0, &text_len0)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &title0, &title_len0, &text0, &text_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSafeShowMessage(wxString(title0, wxConvUTF8), wxString(text0, wxConvUTF8))\n\n");
				#endif

				wxSafeShowMessage(wxString(title0, wxConvUTF8), wxString(text0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxSafeShowMessage()\n");
	}
}
/* }}} */

/* {{{ proto int wxSysErrorCode()
   Returns the error code from the last system call. */
PHP_FUNCTION(php_wxSysErrorCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSysErrorCode\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxSysErrorCode())\n\n");
				#endif

				ZVAL_LONG(return_value, wxSysErrorCode());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxSysErrorCode()\n");
	}
}
/* }}} */

/* {{{ proto bool wxIsMainThread()
   Returns true if this thread is the main one. */
PHP_FUNCTION(php_wxIsMainThread)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsMainThread\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsMainThread())\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsMainThread());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxIsMainThread()\n");
	}
}
/* }}} */

/* {{{ proto  wxMutexGuiEnter()
   This function must be called when any thread other than the main GUI thread wants to get access to the GUI library. */
PHP_FUNCTION(php_wxMutexGuiEnter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMutexGuiEnter\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxMutexGuiEnter()\n\n");
				#endif

				wxMutexGuiEnter();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxMutexGuiEnter()\n");
	}
}
/* }}} */

/* {{{ proto  wxMutexGuiLeave()
   This function is only defined on platforms which support preemptive threads. */
PHP_FUNCTION(php_wxMutexGuiLeave)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMutexGuiLeave\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxMutexGuiLeave()\n\n");
				#endif

				wxMutexGuiLeave();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxMutexGuiLeave()\n");
	}
}
/* }}} */

/* {{{ proto void wxAboutBox(wxAboutDialogInfo info, wxWindow parent)
   This function shows the standard about dialog containing the information specified in info. */
PHP_FUNCTION(php_wxAboutBox)
{
	wxAboutDialogInfo *info;
	zval *object;
	
	char parse_parameters[] = "O";
	
	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, parse_parameters, &object, php_wxAboutDialogInfo_entry) == FAILURE)
	{
		RETURN_NULL();
	}
	
	info = (wxAboutDialogInfo*) ((zo_wxAboutDialogInfo*) zend_object_store_get_object(object TSRMLS_CC))->native_object;
	
	wxAboutBox(*info);
}
/* }}} */

/* {{{ proto int wxBase64Encode(string &dst, int dstLen, void src, int srcLen)
   This function encodes the given data using base64. */
PHP_FUNCTION(php_wxBase64Encode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBase64Encode\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dst0;
	long dst_len0;
	zval* dst0_ref;
	long dstLen0;
	char* src0;
	long src_len0;
	long srcLen0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* src1;
	long src_len1;
	long srcLen1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'slsl' (&dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0)\n");
		#endif

		char parse_parameters_string[] = "slsl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dst0_ref, &dummy, &dummy, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&src1, &src_len1, &srcLen1)\n");
		#endif

		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &src1, &src_len1, &srcLen1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Encode(dst0, (size_t) dstLen0, (const void*) src0, (size_t) srcLen0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxBase64Encode(dst0, (size_t) dstLen0, (const void*) src0, (size_t) srcLen0));

				ZVAL_STRING(dst0_ref, dst0, 1);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxBase64Encode((const void*) src1, (size_t) srcLen1).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				value_to_return2 = wxBase64Encode((const void*) src1, (size_t) srcLen1);
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxBase64Encode()\n");
	}
}
/* }}} */

/* {{{ proto int wxBase64DecodedSize(int srcLen)
   Returns the size of the buffer necessary to contain the data encoded in a base64 string of length srcLen. */
PHP_FUNCTION(php_wxBase64DecodedSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBase64DecodedSize\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long srcLen0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&srcLen0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &srcLen0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64DecodedSize((size_t) srcLen0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxBase64DecodedSize((size_t) srcLen0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxBase64DecodedSize()\n");
	}
}
/* }}} */

/* {{{ proto int wxBase64EncodedSize(int len)
   Returns the length of the string with base64 representation of a buffer of specified size len. */
PHP_FUNCTION(php_wxBase64EncodedSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBase64EncodedSize\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&len0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64EncodedSize((size_t) len0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxBase64EncodedSize((size_t) len0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxBase64EncodedSize()\n");
	}
}
/* }}} */

/* {{{ proto int wxBase64Decode(void dst, int dstLen, string src, int srcLen, wxBase64DecodeMode mode, int &posErr)
   This function decodes a Base64-encoded string. */
PHP_FUNCTION(php_wxBase64Decode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBase64Decode\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dst0;
	long dst_len0;
	zval* dst0_ref;
	long dstLen0;
	char* src0;
	long src_len0;
	long srcLen0;
	long mode0;
	long* posErr0;
	zval* posErr0_ref;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dst1;
	long dst_len1;
	zval* dst1_ref;
	long dstLen1;
	char* str1;
	long str_len1;
	long mode1;
	long* posErr1;
	zval* posErr1_ref;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sls|lll' (&dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0, &mode0, posErr0)\n");
		#endif

		char parse_parameters_string[] = "sls|lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0, &mode0, posErr0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz|zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dst0_ref, &dummy, &dummy, &dummy, &dummy, &posErr0_ref );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sls|ll' (&dst1, &dst_len1, &dstLen1, &str1, &str_len1, &mode1, posErr1)\n");
		#endif

		char parse_parameters_string[] = "sls|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dst1, &dst_len1, &dstLen1, &str1, &str_len1, &mode1, posErr1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zzz|zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dst1_ref, &dummy, &dummy, &dummy, &posErr1_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxBase64Decode((void*) dst0, (size_t) dstLen0, src0));

				ZVAL_STRING(dst0_ref, (char*) dst0, 1);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0));

				ZVAL_STRING(dst0_ref, (char*) dst0, 1);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0));

				ZVAL_STRING(dst0_ref, (char*) dst0, 1);

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0, (size_t*) posErr0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0, (size_t*) posErr0));

				ZVAL_STRING(dst0_ref, (char*) dst0, 1);
				size_t elements_returned0_5 = sizeof(posErr0)/sizeof(*posErr0);
				array_init(posErr0_ref);
				for(size_t i=0; i<elements_returned0_5; i++)
				{
					add_next_index_long(posErr0_ref, posErr0[i]);
				}

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8)))\n\n");
				#endif

				ZVAL_LONG(return_value, wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8)));

				ZVAL_STRING(dst1_ref, (char*) dst1, 1);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1))\n\n");
				#endif

				ZVAL_LONG(return_value, wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1));

				ZVAL_STRING(dst1_ref, (char*) dst1, 1);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1, (size_t*) posErr1))\n\n");
				#endif

				ZVAL_LONG(return_value, wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1, (size_t*) posErr1));

				ZVAL_STRING(dst1_ref, (char*) dst1, 1);
				size_t elements_returned1_4 = sizeof(posErr1)/sizeof(*posErr1);
				array_init(posErr1_ref);
				for(size_t i=0; i<elements_returned1_4; i++)
				{
					add_next_index_long(posErr1_ref, posErr1[i]);
				}

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxBase64Decode()\n");
	}
}
/* }}} */

/* {{{ proto int wxGetSingleChoiceIndex(string message, string caption, array aChoices, wxWindow &parent, int x, int y, bool centre, int width, int height, int initialSelection)
   Same as wxGetSingleChoice() but returns the index representing the selected string. */
PHP_FUNCTION(php_wxGetSingleChoiceIndex)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetSingleChoiceIndex\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	zval* aChoices0 = 0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool centre0;
	long width0;
	long height0;
	long initialSelection0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* message1;
	long message_len1;
	char* caption1;
	long caption_len1;
	long n1;
	zval* choices1;
	zval* parent1 = 0;
	wxWindow* object_pointer1_4 = 0;
	long x1;
	long y1;
	bool centre1;
	long width1;
	long height1;
	long initialSelection1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* message2;
	long message_len2;
	char* caption2;
	long caption_len2;
	zval* choices2 = 0;
	long initialSelection2;
	zval* parent2 = 0;
	wxWindow* object_pointer2_4 = 0;
	bool overload2_called = false;
	//Parameters for overload 3
	char* message3;
	long message_len3;
	char* caption3;
	long caption_len3;
	long n3;
	zval* choices3;
	long initialSelection3;
	zval* parent3 = 0;
	wxWindow* object_pointer3_5 = 0;
	bool overload3_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 10)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssa|zllblll' (&message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0)\n");
		#endif

		char parse_parameters_string[] = "ssa|zllblll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxWindow*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 4  && arguments_received <= 11)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssla|zllblll' (&message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1)\n");
		#endif

		char parse_parameters_string[] = "ssla|zllblll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(parent1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->native_object;
					object_pointer1_4 = (wxWindow*) argument_native_object;
					if (!object_pointer1_4 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
					goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received >= 4  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssal|z' (&message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2)\n");
		#endif

		char parse_parameters_string[] = "ssal|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(parent2) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent2 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent2 TSRMLS_CC))->native_object;
					object_pointer2_4 = (wxWindow*) argument_native_object;
					if (!object_pointer2_4 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						goto overload3;
					}
				}
				else if(Z_TYPE_P(parent2) != IS_NULL)
				{
					goto overload3;
				}
			}

			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received >= 5  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sslal|z' (&message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3)\n");
		#endif

		char parse_parameters_string[] = "sslal|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3 ) == SUCCESS)
		{
			if(arguments_received >= 6){
				if(Z_TYPE_P(parent3) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent3 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent3 TSRMLS_CC))->native_object;
					object_pointer3_5 = (wxWindow*) argument_native_object;
					if (!object_pointer3_5 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent3) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload3_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		wxArrayString strings_array0_2;
		bool strings_continue0_2 = true;

		switch(arguments_received)
		{
			case 3:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2));


				return;
				break;
			}
			case 4:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3));


				return;
				break;
			}
			case 5:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0));


				return;
				break;
			}
			case 6:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0));


				return;
				break;
			}
			case 7:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0));


				return;
				break;
			}
			case 8:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0));


				return;
				break;
			}
			case 9:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0));


				return;
				break;
			}
			case 10:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0));


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		int array_count1_3 = 1;
		HashTable* arr_hash1_3;
		if(arguments_received > 3)
		{
			arr_hash1_3 = Z_ARRVAL_P(choices1);
			array_count1_3 = zend_hash_num_elements(arr_hash1_3);
		}
		wxString* strings_array1_3 = new wxString[array_count1_3];
		bool strings_continue1_3 = true;

		switch(arguments_received)
		{
			case 4:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 5:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 6:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 7:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 8:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 9:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 10:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1));

				delete[] strings_array1_3;

				return;
				break;
			}
			case 11:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1));

				delete[] strings_array1_3;

				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		wxArrayString strings_array2_2;
		bool strings_continue2_2 = true;

		switch(arguments_received)
		{
			case 4:
			{
				int array_index2_2 = 0;
				zval** temp_array_value2_2 = 0;
				while(strings_continue2_2)
				{
					if(zend_hash_index_find(HASH_OF(choices2), array_index2_2, (void**)&temp_array_value2_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value2_2);
						strings_array2_2.Add(wxString(Z_STRVAL_PP(temp_array_value2_2), wxConvUTF8));
						array_index2_2++;
					}
					else
					{
						strings_continue2_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2));


				return;
				break;
			}
			case 5:
			{
				int array_index2_2 = 0;
				zval** temp_array_value2_2 = 0;
				while(strings_continue2_2)
				{
					if(zend_hash_index_find(HASH_OF(choices2), array_index2_2, (void**)&temp_array_value2_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value2_2);
						strings_array2_2.Add(wxString(Z_STRVAL_PP(temp_array_value2_2), wxConvUTF8));
						array_index2_2++;
					}
					else
					{
						strings_continue2_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4));


				return;
				break;
			}
		}
	}

	if(overload3_called)
	{
		int array_count3_3 = 1;
		HashTable* arr_hash3_3;
		if(arguments_received > 3)
		{
			arr_hash3_3 = Z_ARRVAL_P(choices3);
			array_count3_3 = zend_hash_num_elements(arr_hash3_3);
		}
		wxString* strings_array3_3 = new wxString[array_count3_3];
		bool strings_continue3_3 = true;

		switch(arguments_received)
		{
			case 5:
			{
				int array_index3_3 = 0;
				zval** temp_array_value3_3 = 0;
				while(strings_continue3_3)
				{
					if(zend_hash_index_find(HASH_OF(choices3), array_index3_3, (void**)&temp_array_value3_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value3_3);
						strings_array3_3[array_index3_3] = wxString(Z_STRVAL_PP(temp_array_value3_3), wxConvUTF8);
						array_index3_3++;
					}
					else
					{
						strings_continue3_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3));

				delete[] strings_array3_3;

				return;
				break;
			}
			case 6:
			{
				int array_index3_3 = 0;
				zval** temp_array_value3_3 = 0;
				while(strings_continue3_3)
				{
					if(zend_hash_index_find(HASH_OF(choices3), array_index3_3, (void**)&temp_array_value3_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value3_3);
						strings_array3_3[array_index3_3] = wxString(Z_STRVAL_PP(temp_array_value3_3), wxConvUTF8);
						array_index3_3++;
					}
					else
					{
						strings_continue3_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5));

				delete[] strings_array3_3;

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetSingleChoiceIndex()\n");
	}
}
/* }}} */

/* {{{ proto string wxGetSingleChoice(string message, string caption, array aChoices, wxWindow &parent, int x, int y, bool centre, int width, int height, int initialSelection)
   Pops up a dialog box containing a message, OK/Cancel buttons and a single-selection listbox. */
PHP_FUNCTION(php_wxGetSingleChoice)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetSingleChoice\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	zval* aChoices0 = 0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool centre0;
	long width0;
	long height0;
	long initialSelection0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* message1;
	long message_len1;
	char* caption1;
	long caption_len1;
	long n1;
	zval* choices1;
	zval* parent1 = 0;
	wxWindow* object_pointer1_4 = 0;
	long x1;
	long y1;
	bool centre1;
	long width1;
	long height1;
	long initialSelection1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* message2;
	long message_len2;
	char* caption2;
	long caption_len2;
	zval* choices2 = 0;
	long initialSelection2;
	zval* parent2 = 0;
	wxWindow* object_pointer2_4 = 0;
	bool overload2_called = false;
	//Parameters for overload 3
	char* message3;
	long message_len3;
	char* caption3;
	long caption_len3;
	long n3;
	zval* choices3;
	long initialSelection3;
	zval* parent3 = 0;
	wxWindow* object_pointer3_5 = 0;
	bool overload3_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 10)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssa|zllblll' (&message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0)\n");
		#endif

		char parse_parameters_string[] = "ssa|zllblll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxWindow*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 4  && arguments_received <= 11)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssla|zllblll' (&message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1)\n");
		#endif

		char parse_parameters_string[] = "ssla|zllblll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(parent1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->native_object;
					object_pointer1_4 = (wxWindow*) argument_native_object;
					if (!object_pointer1_4 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
					goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received >= 4  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssal|z' (&message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2)\n");
		#endif

		char parse_parameters_string[] = "ssal|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(parent2) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent2 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent2 TSRMLS_CC))->native_object;
					object_pointer2_4 = (wxWindow*) argument_native_object;
					if (!object_pointer2_4 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						goto overload3;
					}
				}
				else if(Z_TYPE_P(parent2) != IS_NULL)
				{
					goto overload3;
				}
			}

			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received >= 5  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sslal|z' (&message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3)\n");
		#endif

		char parse_parameters_string[] = "sslal|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3 ) == SUCCESS)
		{
			if(arguments_received >= 6){
				if(Z_TYPE_P(parent3) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent3 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent3 TSRMLS_CC))->native_object;
					object_pointer3_5 = (wxWindow*) argument_native_object;
					if (!object_pointer3_5 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent3) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload3_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		wxArrayString strings_array0_2;
		bool strings_continue0_2 = true;

		switch(arguments_received)
		{
			case 3:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return3;
				value_to_return3 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2);
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return4;
				value_to_return4 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return5;
				value_to_return5 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return6;
				value_to_return6 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return7;
				value_to_return7 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
			case 8:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return8;
				value_to_return8 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0);
				char* temp_string8;
				temp_string8 = (char*)malloc(sizeof(wxChar)*(value_to_return8.size()+1));
				strcpy (temp_string8, (const char *) value_to_return8.char_str() );
				ZVAL_STRING(return_value, temp_string8, 1);
				free(temp_string8);


				return;
				break;
			}
			case 9:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return9;
				value_to_return9 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0);
				char* temp_string9;
				temp_string9 = (char*)malloc(sizeof(wxChar)*(value_to_return9.size()+1));
				strcpy (temp_string9, (const char *) value_to_return9.char_str() );
				ZVAL_STRING(return_value, temp_string9, 1);
				free(temp_string9);


				return;
				break;
			}
			case 10:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return10;
				value_to_return10 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0);
				char* temp_string10;
				temp_string10 = (char*)malloc(sizeof(wxChar)*(value_to_return10.size()+1));
				strcpy (temp_string10, (const char *) value_to_return10.char_str() );
				ZVAL_STRING(return_value, temp_string10, 1);
				free(temp_string10);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		int array_count1_3 = 1;
		HashTable* arr_hash1_3;
		if(arguments_received > 3)
		{
			arr_hash1_3 = Z_ARRVAL_P(choices1);
			array_count1_3 = zend_hash_num_elements(arr_hash1_3);
		}
		wxString* strings_array1_3 = new wxString[array_count1_3];
		bool strings_continue1_3 = true;

		switch(arguments_received)
		{
			case 4:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return4;
				value_to_return4 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 5:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return5;
				value_to_return5 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 6:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return6;
				value_to_return6 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 7:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return7;
				value_to_return7 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 8:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return8;
				value_to_return8 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1);
				char* temp_string8;
				temp_string8 = (char*)malloc(sizeof(wxChar)*(value_to_return8.size()+1));
				strcpy (temp_string8, (const char *) value_to_return8.char_str() );
				ZVAL_STRING(return_value, temp_string8, 1);
				free(temp_string8);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 9:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return9;
				value_to_return9 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1);
				char* temp_string9;
				temp_string9 = (char*)malloc(sizeof(wxChar)*(value_to_return9.size()+1));
				strcpy (temp_string9, (const char *) value_to_return9.char_str() );
				ZVAL_STRING(return_value, temp_string9, 1);
				free(temp_string9);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 10:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return10;
				value_to_return10 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1);
				char* temp_string10;
				temp_string10 = (char*)malloc(sizeof(wxChar)*(value_to_return10.size()+1));
				strcpy (temp_string10, (const char *) value_to_return10.char_str() );
				ZVAL_STRING(return_value, temp_string10, 1);
				free(temp_string10);

				delete[] strings_array1_3;

				return;
				break;
			}
			case 11:
			{
				int array_index1_3 = 0;
				zval** temp_array_value1_3 = 0;
				while(strings_continue1_3)
				{
					if(zend_hash_index_find(HASH_OF(choices1), array_index1_3, (void**)&temp_array_value1_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value1_3);
						strings_array1_3[array_index1_3] = wxString(Z_STRVAL_PP(temp_array_value1_3), wxConvUTF8);
						array_index1_3++;
					}
					else
					{
						strings_continue1_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return11;
				value_to_return11 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1);
				char* temp_string11;
				temp_string11 = (char*)malloc(sizeof(wxChar)*(value_to_return11.size()+1));
				strcpy (temp_string11, (const char *) value_to_return11.char_str() );
				ZVAL_STRING(return_value, temp_string11, 1);
				free(temp_string11);

				delete[] strings_array1_3;

				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		wxArrayString strings_array2_2;
		bool strings_continue2_2 = true;

		switch(arguments_received)
		{
			case 4:
			{
				int array_index2_2 = 0;
				zval** temp_array_value2_2 = 0;
				while(strings_continue2_2)
				{
					if(zend_hash_index_find(HASH_OF(choices2), array_index2_2, (void**)&temp_array_value2_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value2_2);
						strings_array2_2.Add(wxString(Z_STRVAL_PP(temp_array_value2_2), wxConvUTF8));
						array_index2_2++;
					}
					else
					{
						strings_continue2_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return4;
				value_to_return4 = wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				int array_index2_2 = 0;
				zval** temp_array_value2_2 = 0;
				while(strings_continue2_2)
				{
					if(zend_hash_index_find(HASH_OF(choices2), array_index2_2, (void**)&temp_array_value2_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value2_2);
						strings_array2_2.Add(wxString(Z_STRVAL_PP(temp_array_value2_2), wxConvUTF8));
						array_index2_2++;
					}
					else
					{
						strings_continue2_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return5;
				value_to_return5 = wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
		}
	}

	if(overload3_called)
	{
		int array_count3_3 = 1;
		HashTable* arr_hash3_3;
		if(arguments_received > 3)
		{
			arr_hash3_3 = Z_ARRVAL_P(choices3);
			array_count3_3 = zend_hash_num_elements(arr_hash3_3);
		}
		wxString* strings_array3_3 = new wxString[array_count3_3];
		bool strings_continue3_3 = true;

		switch(arguments_received)
		{
			case 5:
			{
				int array_index3_3 = 0;
				zval** temp_array_value3_3 = 0;
				while(strings_continue3_3)
				{
					if(zend_hash_index_find(HASH_OF(choices3), array_index3_3, (void**)&temp_array_value3_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value3_3);
						strings_array3_3[array_index3_3] = wxString(Z_STRVAL_PP(temp_array_value3_3), wxConvUTF8);
						array_index3_3++;
					}
					else
					{
						strings_continue3_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return5;
				value_to_return5 = wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);

				delete[] strings_array3_3;

				return;
				break;
			}
			case 6:
			{
				int array_index3_3 = 0;
				zval** temp_array_value3_3 = 0;
				while(strings_continue3_3)
				{
					if(zend_hash_index_find(HASH_OF(choices3), array_index3_3, (void**)&temp_array_value3_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value3_3);
						strings_array3_3[array_index3_3] = wxString(Z_STRVAL_PP(temp_array_value3_3), wxConvUTF8);
						array_index3_3++;
					}
					else
					{
						strings_continue3_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return6;
				value_to_return6 = wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);

				delete[] strings_array3_3;

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetSingleChoice()\n");
	}
}
/* }}} */

/* {{{ proto wxColour wxGetColourFromUser(wxWindow &parent, wxColour colInit, string caption, wxColourData &data)
   Shows the colour selection dialog and returns the colour selected by user or invalid colour (use wxColour::IsOk() to test whether a colour is valid) if the dialog was cancelled. */
PHP_FUNCTION(php_wxGetColourFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetColourFromUser\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	zval* colInit0 = 0;
	wxColour* object_pointer0_1 = 0;
	char* caption0;
	long caption_len0;
	zval* data0 = 0;
	wxColourData* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO|sz' (&parent0, &colInit0, php_wxColour_entry, &caption0, &caption_len0, &data0)\n");
		#endif

		char parse_parameters_string[] = "zO|sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &colInit0, php_wxColour_entry, &caption0, &caption_len0, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(colInit0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(colInit0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(colInit0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxColour*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'colInit' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colInit0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'colInit' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(data0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColourData*) zend_object_store_get_object(data0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColourData*) zend_object_store_get_object(data0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxColourData*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXCOLOURDATA_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'data' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'data' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1) to return new object\n\n");
				#endif

				wxColour value_to_return2;
				value_to_return2 = wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1);
				((wxRefCounter *) value_to_return2.GetRefData())->IncRef();
				void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxColour));
				object_init_ex(return_value, php_wxColour_entry);
				((wxColour_php*)ptr)->phpObj = return_value;
				zo_wxColour* zo2 = (zo_wxColour*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo2->native_object = (wxColour_php*) ptr;


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8)) to return new object\n\n");
				#endif

				wxColour value_to_return3;
				value_to_return3 = wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8));
				((wxRefCounter *) value_to_return3.GetRefData())->IncRef();
				void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxColour));
				object_init_ex(return_value, php_wxColour_entry);
				((wxColour_php*)ptr)->phpObj = return_value;
				zo_wxColour* zo3 = (zo_wxColour*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo3->native_object = (wxColour_php*) ptr;


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8), (wxColourData*) object_pointer0_3) to return new object\n\n");
				#endif

				wxColour value_to_return4;
				value_to_return4 = wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8), (wxColourData*) object_pointer0_3);
				((wxRefCounter *) value_to_return4.GetRefData())->IncRef();
				void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxColour));
				object_init_ex(return_value, php_wxColour_entry);
				((wxColour_php*)ptr)->phpObj = return_value;
				zo_wxColour* zo4 = (zo_wxColour*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo4->native_object = (wxColour_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetColourFromUser()\n");
	}
}
/* }}} */

/* {{{ proto wxDC wxAutoBufferedPaintDCFactory(wxWindow &window)
   Check if the window is natively double buffered and will return a wxPaintDC if it is, a wxBufferedPaintDC otherwise. */
PHP_FUNCTION(php_wxAutoBufferedPaintDCFactory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxAutoBufferedPaintDCFactory\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* window0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&window0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(window0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(window0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'window' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'window' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxAutoBufferedPaintDCFactory((wxWindow*) object_pointer0_0) to return object pointer\n\n");
				#endif

				wxDC_php* value_to_return1;
				value_to_return1 = (wxDC_php*) wxAutoBufferedPaintDCFactory((wxWindow*) object_pointer0_0);
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxDC_entry);
					((zo_wxDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDC_php*) value_to_return1;
				}



				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxAutoBufferedPaintDCFactory()\n");
	}
}
/* }}} */

/* {{{ proto  wxAbort()
   Exits the program immediately. */
PHP_FUNCTION(php_wxAbort)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxAbort\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxAbort()\n\n");
				#endif

				wxAbort();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxAbort()\n");
	}
}
/* }}} */

/* {{{ proto  wxDisableAsserts()
   Disable the condition checks in the assertions. */
PHP_FUNCTION(php_wxDisableAsserts)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDisableAsserts\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxDisableAsserts()\n\n");
				#endif

				wxDisableAsserts();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxDisableAsserts()\n");
	}
}
/* }}} */

/* {{{ proto bool wxIsDebuggerRunning()
   Returns true if the program is running under debugger, false otherwise. */
PHP_FUNCTION(php_wxIsDebuggerRunning)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsDebuggerRunning\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsDebuggerRunning())\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsDebuggerRunning());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxIsDebuggerRunning()\n");
	}
}
/* }}} */

/* {{{ proto  wxSetDefaultAssertHandler()
   Reset the assert handler to default function which shows a message box when an assert happens. */
PHP_FUNCTION(php_wxSetDefaultAssertHandler)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetDefaultAssertHandler\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSetDefaultAssertHandler()\n\n");
				#endif

				wxSetDefaultAssertHandler();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxSetDefaultAssertHandler()\n");
	}
}
/* }}} */

/* {{{ proto  wxTrap()
   Generate a debugger exception meaning that the control is passed to the debugger if one is attached to the process. */
PHP_FUNCTION(php_wxTrap)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTrap\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxTrap()\n\n");
				#endif

				wxTrap();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxTrap()\n");
	}
}
/* }}} */

/* {{{ proto string wxDirSelector(string message, string default_path, int style, wxPoint pos, wxWindow &parent)
   Pops up a directory selector dialog. */
PHP_FUNCTION(php_wxDirSelector)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDirSelector\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* default_path0;
	long default_path_len0;
	long style0;
	zval* pos0 = 0;
	wxPoint* object_pointer0_3 = 0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_4 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sslOz' (&message0, &message_len0, &default_path0, &default_path_len0, &style0, &pos0, php_wxPoint_entry, &parent0)\n");
		#endif

		char parse_parameters_string[] = "|sslOz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &default_path0, &default_path_len0, &style0, &pos0, php_wxPoint_entry, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxPoint*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxWindow*) argument_native_object;
					if (!object_pointer0_4 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = wxDirSelector();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxDirSelector(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				value_to_return2 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return3;
				value_to_return3 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0);
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return4;
				value_to_return4 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3, (wxWindow*) object_pointer0_4).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return5;
				value_to_return5 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3, (wxWindow*) object_pointer0_4);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxDirSelector()\n");
	}
}
/* }}} */

/* {{{ proto int wxNewEventType()
   Generates a new unique event type. */
PHP_FUNCTION(php_wxNewEventType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxNewEventType\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxNewEventType())\n\n");
				#endif

				ZVAL_LONG(return_value, wxNewEventType());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxNewEventType()\n");
	}
}
/* }}} */

/* {{{ proto  wxPostEvent(wxEvtHandler &dest, wxEvent event)
   In a GUI application, this function posts event to the specified dest object using wxEvtHandler::AddPendingEvent(). */
PHP_FUNCTION(php_wxPostEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxPostEvent\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* dest0 = 0;
	wxEvtHandler* object_pointer0_0 = 0;
	zval* event0 = 0;
	wxEvent* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zo' (&dest0, &event0)\n");
		#endif

		char parse_parameters_string[] = "zo";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &event0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dest0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEvtHandler*) zend_object_store_get_object(dest0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEvtHandler*) zend_object_store_get_object(dest0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxEvtHandler*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'dest' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dest0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'dest' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(event0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxEvent*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'event' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'event' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxPostEvent((wxEvtHandler*) object_pointer0_0, *(wxEvent*) object_pointer0_1)\n\n");
				#endif

				wxPostEvent((wxEvtHandler*) object_pointer0_0, *(wxEvent*) object_pointer0_1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxPostEvent()\n");
	}
}
/* }}} */

/* {{{ proto  wxQueueEvent(wxEvtHandler &dest, wxEvent &event)
   Queue an event for processing on the given object. */
PHP_FUNCTION(php_wxQueueEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxQueueEvent\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* dest0 = 0;
	wxEvtHandler* object_pointer0_0 = 0;
	zval* event0 = 0;
	wxEvent* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zz' (&dest0, &event0)\n");
		#endif

		char parse_parameters_string[] = "zz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &event0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dest0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEvtHandler*) zend_object_store_get_object(dest0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEvtHandler*) zend_object_store_get_object(dest0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxEvtHandler*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'dest' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dest0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'dest' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(event0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxEvent*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'event' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'event' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxQueueEvent((wxEvtHandler*) object_pointer0_0, (wxEvent*) object_pointer0_1)\n\n");
				#endif

				wxQueueEvent((wxEvtHandler*) object_pointer0_0, (wxEvent*) object_pointer0_1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxQueueEvent()\n");
	}
}
/* }}} */

/* {{{ proto string wxFileSelector(string message, string default_path, string default_filename, string default_extension, string wildcard, int flags, wxWindow &parent, int x, int y)
   Pops up a file selector box. */
PHP_FUNCTION(php_wxFileSelector)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFileSelector\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* default_path0;
	long default_path_len0;
	char* default_filename0;
	long default_filename_len0;
	char* default_extension0;
	long default_extension_len0;
	char* wildcard0;
	long wildcard_len0;
	long flags0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_6 = 0;
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 9)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sssslzll' (&message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, &default_extension0, &default_extension_len0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0)\n");
		#endif

		char parse_parameters_string[] = "s|sssslzll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, &default_extension0, &default_extension_len0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0 ) == SUCCESS)
		{
			if(arguments_received >= 7){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_6 = (wxWindow*) argument_native_object;
					if (!object_pointer0_6 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxFileSelector(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				value_to_return2 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return3;
				value_to_return3 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return4;
				value_to_return4 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8));
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return5;
				value_to_return5 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8));
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return6;
				value_to_return6 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return7;
				value_to_return7 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return8;
				value_to_return8 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0);
				char* temp_string8;
				temp_string8 = (char*)malloc(sizeof(wxChar)*(value_to_return8.size()+1));
				strcpy (temp_string8, (const char *) value_to_return8.char_str() );
				ZVAL_STRING(return_value, temp_string8, 1);
				free(temp_string8);


				return;
				break;
			}
			case 9:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return9;
				value_to_return9 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0);
				char* temp_string9;
				temp_string9 = (char*)malloc(sizeof(wxChar)*(value_to_return9.size()+1));
				strcpy (temp_string9, (const char *) value_to_return9.char_str() );
				ZVAL_STRING(return_value, temp_string9, 1);
				free(temp_string9);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxFileSelector()\n");
	}
}
/* }}} */

/* {{{ proto string wxFileSelectorEx(string message, string default_path, string default_filename, int &indexDefaultExtension, string wildcard, int flags, wxWindow &parent, int x, int y)
   An extended version of wxFileSelector. */
PHP_FUNCTION(php_wxFileSelectorEx)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFileSelectorEx\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* default_path0;
	long default_path_len0;
	char* default_filename0;
	long default_filename_len0;
	long* indexDefaultExtension0;
	zval* indexDefaultExtension0_ref;
	char* wildcard0;
	long wildcard_len0;
	long flags0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_6 = 0;
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 9)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ssslslzll' (&message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, indexDefaultExtension0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0)\n");
		#endif

		char parse_parameters_string[] = "|ssslslzll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, indexDefaultExtension0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0 ) == SUCCESS)
		{
			if(arguments_received >= 7){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_6 = (wxWindow*) argument_native_object;
					if (!object_pointer0_6 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "|zzzzzzzzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dummy, &dummy, &dummy, &indexDefaultExtension0_ref, &dummy, &dummy, &dummy, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = wxFileSelectorEx();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxFileSelectorEx(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				value_to_return2 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return3;
				value_to_return3 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return4;
				value_to_return4 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);

				size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
				array_init(indexDefaultExtension0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(indexDefaultExtension0_ref, indexDefaultExtension0[i]);
				}

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return5;
				value_to_return5 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8));
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);

				size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
				array_init(indexDefaultExtension0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(indexDefaultExtension0_ref, indexDefaultExtension0[i]);
				}

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return6;
				value_to_return6 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);

				size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
				array_init(indexDefaultExtension0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(indexDefaultExtension0_ref, indexDefaultExtension0[i]);
				}

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return7;
				value_to_return7 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);

				size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
				array_init(indexDefaultExtension0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(indexDefaultExtension0_ref, indexDefaultExtension0[i]);
				}

				return;
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return8;
				value_to_return8 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0);
				char* temp_string8;
				temp_string8 = (char*)malloc(sizeof(wxChar)*(value_to_return8.size()+1));
				strcpy (temp_string8, (const char *) value_to_return8.char_str() );
				ZVAL_STRING(return_value, temp_string8, 1);
				free(temp_string8);

				size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
				array_init(indexDefaultExtension0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(indexDefaultExtension0_ref, indexDefaultExtension0[i]);
				}

				return;
				break;
			}
			case 9:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return9;
				value_to_return9 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0);
				char* temp_string9;
				temp_string9 = (char*)malloc(sizeof(wxChar)*(value_to_return9.size()+1));
				strcpy (temp_string9, (const char *) value_to_return9.char_str() );
				ZVAL_STRING(return_value, temp_string9, 1);
				free(temp_string9);

				size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
				array_init(indexDefaultExtension0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(indexDefaultExtension0_ref, indexDefaultExtension0[i]);
				}

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxFileSelectorEx()\n");
	}
}
/* }}} */

/* {{{ proto string wxLoadFileSelector(string what, string extension, string default_name, wxWindow &parent)
   Ask for filename to load. */
PHP_FUNCTION(php_wxLoadFileSelector)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxLoadFileSelector\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* what0;
	long what_len0;
	char* extension0;
	long extension_len0;
	char* default_name0;
	long default_name_len0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|sz' (&what0, &what_len0, &extension0, &extension_len0, &default_name0, &default_name_len0, &parent0)\n");
		#endif

		char parse_parameters_string[] = "ss|sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &what0, &what_len0, &extension0, &extension_len0, &default_name0, &default_name_len0, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxWindow*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				value_to_return2 = wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return3;
				value_to_return3 = wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return4;
				value_to_return4 = wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8), (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxLoadFileSelector()\n");
	}
}
/* }}} */

/* {{{ proto string wxSaveFileSelector(string what, string extension, string default_name, wxWindow &parent)
   Ask for filename to save. */
PHP_FUNCTION(php_wxSaveFileSelector)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSaveFileSelector\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* what0;
	long what_len0;
	char* extension0;
	long extension_len0;
	char* default_name0;
	long default_name_len0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|sz' (&what0, &what_len0, &extension0, &extension_len0, &default_name0, &default_name_len0, &parent0)\n");
		#endif

		char parse_parameters_string[] = "ss|sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &what0, &what_len0, &extension0, &extension_len0, &default_name0, &default_name_len0, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxWindow*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				value_to_return2 = wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return3;
				value_to_return3 = wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return4;
				value_to_return4 = wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8), (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxSaveFileSelector()\n");
	}
}
/* }}} */

/* {{{ proto string wxGetOSDirectory()
   Returns the Windows directory under Windows; other platforms return an empty string. */
PHP_FUNCTION(php_wxGetOSDirectory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetOSDirectory\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetOSDirectory().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = wxGetOSDirectory();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetOSDirectory()\n");
	}
}
/* }}} */

/* {{{ proto int wxParseCommonDialogsFilter(string wildCard, array &descriptions, array &filters)
   Parses the wildCard, returning the number of filters. */
PHP_FUNCTION(php_wxParseCommonDialogsFilter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxParseCommonDialogsFilter\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* wildCard0;
	long wildCard_len0;
	zval* descriptions0 = 0;
	zval* descriptions0_ref;
	zval* filters0 = 0;
	zval* filters0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'saa' (&wildCard0, &wildCard_len0, &descriptions0, &filters0)\n");
		#endif

		char parse_parameters_string[] = "saa";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &wildCard0, &wildCard_len0, &descriptions0, &filters0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		wxArrayString strings_array0_1;
		bool strings_continue0_1 = true;

		wxArrayString strings_array0_2;
		bool strings_continue0_2 = true;

		switch(arguments_received)
		{
			case 3:
			{
				int array_index0_1 = 0;
				zval** temp_array_value0_1 = 0;
				while(strings_continue0_1)
				{
					if(zend_hash_index_find(HASH_OF(descriptions0), array_index0_1, (void**)&temp_array_value0_1) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_1);
						strings_array0_1.Add(wxString(Z_STRVAL_PP(temp_array_value0_1), wxConvUTF8));
						array_index0_1++;
					}
					else
					{
						strings_continue0_1 = false;
					}
				}
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(filters0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxParseCommonDialogsFilter(wxString(wildCard0, wxConvUTF8), strings_array0_1, strings_array0_2))\n\n");
				#endif

				ZVAL_LONG(return_value, wxParseCommonDialogsFilter(wxString(wildCard0, wxConvUTF8), strings_array0_1, strings_array0_2));

				char* temp_string0_1;
				array_init(descriptions0);
				for(size_t i=0; i<strings_array0_1.GetCount(); i++)
				{
					temp_string0_1 = (char*)malloc(sizeof(wxChar)*(strings_array0_1[i].size()+1));
					strcpy (temp_string0_1, (const char *) strings_array0_1[i].char_str() );
					add_next_index_string(descriptions0, (char*) temp_string0_1, 1);
					free(temp_string0_1);

				}
				char* temp_string0_2;
				array_init(filters0);
				for(size_t i=0; i<strings_array0_2.GetCount(); i++)
				{
					temp_string0_2 = (char*)malloc(sizeof(wxChar)*(strings_array0_2[i].size()+1));
					strcpy (temp_string0_2, (const char *) strings_array0_2[i].char_str() );
					add_next_index_string(filters0, (char*) temp_string0_2, 1);
					free(temp_string0_2);

				}

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxParseCommonDialogsFilter()\n");
	}
}
/* }}} */

/* {{{ proto bool wxDirExists(string dirname)
   Returns true if dirname exists and is a directory. */
PHP_FUNCTION(php_wxDirExists)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDirExists\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dirname0;
	long dirname_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&dirname0, &dirname_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dirname0, &dirname_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxDirExists(wxString(dirname0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxDirExists(wxString(dirname0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxDirExists()\n");
	}
}
/* }}} */

/* {{{ proto  wxSplitPath(string fullname, string &path, string &name, string &ext) */
PHP_FUNCTION(php_wxSplitPath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSplitPath\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* fullname0;
	long fullname_len0;
	char* path0;
	long path_len0;
	zval* path0_ref;
	char* name0;
	long name_len0;
	zval* name0_ref;
	char* ext0;
	long ext_len0;
	zval* ext0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssss' (&fullname0, &fullname_len0, &path0, &path_len0, &name0, &name_len0, &ext0, &ext_len0)\n");
		#endif

		char parse_parameters_string[] = "ssss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &fullname0, &fullname_len0, &path0, &path_len0, &name0, &name_len0, &ext0, &ext_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dummy, &path0_ref, &name0_ref, &ext0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				wxString string_arg0_1 = wxString(path0, wxConvUTF8);
				wxString string_arg0_2 = wxString(name0, wxConvUTF8);
				wxString string_arg0_3 = wxString(ext0, wxConvUTF8);
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSplitPath(wxString(fullname0, wxConvUTF8), &string_arg0_1, &string_arg0_2, &string_arg0_3)\n\n");
				#endif

				wxSplitPath(wxString(fullname0, wxConvUTF8), &string_arg0_1, &string_arg0_2, &string_arg0_3);

				char* temp_string0_1;
				temp_string0_1 = (char*)malloc(sizeof(wxChar)*(string_arg0_1.size()+1));
				strcpy (temp_string0_1, (const char *) string_arg0_1.char_str() );
				ZVAL_STRING(path0_ref, (char*) temp_string0_1, 1);
				free(temp_string0_1);

				char* temp_string0_2;
				temp_string0_2 = (char*)malloc(sizeof(wxChar)*(string_arg0_2.size()+1));
				strcpy (temp_string0_2, (const char *) string_arg0_2.char_str() );
				ZVAL_STRING(name0_ref, (char*) temp_string0_2, 1);
				free(temp_string0_2);

				char* temp_string0_3;
				temp_string0_3 = (char*)malloc(sizeof(wxChar)*(string_arg0_3.size()+1));
				strcpy (temp_string0_3, (const char *) string_arg0_3.char_str() );
				ZVAL_STRING(ext0_ref, (char*) temp_string0_3, 1);
				free(temp_string0_3);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxSplitPath()\n");
	}
}
/* }}} */

/* {{{ proto bool wxRenameFile(string file1, string file2, bool overwrite)
   Renames file1 to file2, returning true if successful. */
PHP_FUNCTION(php_wxRenameFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRenameFile\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* file10;
	long file1_len0;
	char* file20;
	long file2_len0;
	bool overwrite0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|b' (&file10, &file1_len0, &file20, &file2_len0, &overwrite0)\n");
		#endif

		char parse_parameters_string[] = "ss|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &file10, &file1_len0, &file20, &file2_len0, &overwrite0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxRenameFile()\n");
	}
}
/* }}} */

/* {{{ proto bool wxCopyFile(string file1, string file2, bool overwrite)
   Copies file1 to file2, returning true if successful. */
PHP_FUNCTION(php_wxCopyFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxCopyFile\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* file10;
	long file1_len0;
	char* file20;
	long file2_len0;
	bool overwrite0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|b' (&file10, &file1_len0, &file20, &file2_len0, &overwrite0)\n");
		#endif

		char parse_parameters_string[] = "ss|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &file10, &file1_len0, &file20, &file2_len0, &overwrite0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxCopyFile()\n");
	}
}
/* }}} */

/* {{{ proto bool wxFileExists(string filename)
   Returns true if the file exists and is a plain file. */
PHP_FUNCTION(php_wxFileExists)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFileExists\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* filename0;
	long filename_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&filename0, &filename_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &filename0, &filename_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxFileExists(wxString(filename0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxFileExists(wxString(filename0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxFileExists()\n");
	}
}
/* }}} */

/* {{{ proto bool wxMatchWild(string pattern, string text, bool dot_special)
   Returns true if the pattern matches the text; if dot_special is true, filenames beginning with a dot are not matched with wildcard characters. */
PHP_FUNCTION(php_wxMatchWild)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMatchWild\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* pattern0;
	long pattern_len0;
	char* text0;
	long text_len0;
	bool dot_special0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssb' (&pattern0, &pattern_len0, &text0, &text_len0, &dot_special0)\n");
		#endif

		char parse_parameters_string[] = "ssb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pattern0, &pattern_len0, &text0, &text_len0, &dot_special0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxMatchWild(wxString(pattern0, wxConvUTF8), wxString(text0, wxConvUTF8), dot_special0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxMatchWild(wxString(pattern0, wxConvUTF8), wxString(text0, wxConvUTF8), dot_special0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxMatchWild()\n");
	}
}
/* }}} */

/* {{{ proto string wxPathOnly(string path)
   Returns the directory part of the filename. */
PHP_FUNCTION(php_wxPathOnly)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxPathOnly\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* path0;
	long path_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&path0, &path_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &path0, &path_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxPathOnly(wxString(path0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxPathOnly(wxString(path0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxPathOnly()\n");
	}
}
/* }}} */

/* {{{ proto bool wxIsWild(string pattern)
   Returns true if the pattern contains wildcards. */
PHP_FUNCTION(php_wxIsWild)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsWild\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* pattern0;
	long pattern_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&pattern0, &pattern_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pattern0, &pattern_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsWild(wxString(pattern0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsWild(wxString(pattern0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxIsWild()\n");
	}
}
/* }}} */

/* {{{ proto bool wxIsAbsolutePath(string filename)
   Returns true if the argument is an absolute filename, i.e. with a slash or drive name at the beginning. */
PHP_FUNCTION(php_wxIsAbsolutePath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsAbsolutePath\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* filename0;
	long filename_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&filename0, &filename_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &filename0, &filename_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsAbsolutePath(wxString(filename0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsAbsolutePath(wxString(filename0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxIsAbsolutePath()\n");
	}
}
/* }}} */

/* {{{ proto string wxGetCwd()
   Returns a string containing the current (or working) directory. */
PHP_FUNCTION(php_wxGetCwd)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetCwd\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetCwd().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = wxGetCwd();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetCwd()\n");
	}
}
/* }}} */

/* {{{ proto bool wxSetWorkingDirectory(string dir)
   Sets the current working directory, returning true if the operation succeeded. */
PHP_FUNCTION(php_wxSetWorkingDirectory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetWorkingDirectory\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dir0;
	long dir_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&dir0, &dir_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dir0, &dir_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSetWorkingDirectory(wxString(dir0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxSetWorkingDirectory(wxString(dir0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxSetWorkingDirectory()\n");
	}
}
/* }}} */

/* {{{ proto bool wxConcatFiles(string file1, string file2, string file3)
   Concatenates file1 and file2 to file3, returning true if successful. */
PHP_FUNCTION(php_wxConcatFiles)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxConcatFiles\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* file10;
	long file1_len0;
	char* file20;
	long file2_len0;
	char* file30;
	long file3_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sss' (&file10, &file1_len0, &file20, &file2_len0, &file30, &file3_len0)\n");
		#endif

		char parse_parameters_string[] = "sss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &file10, &file1_len0, &file20, &file2_len0, &file30, &file3_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxConcatFiles(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), wxString(file30, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxConcatFiles(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), wxString(file30, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxConcatFiles()\n");
	}
}
/* }}} */

/* {{{ proto bool wxRemoveFile(string file)
   Removes file, returning true if successful. */
PHP_FUNCTION(php_wxRemoveFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRemoveFile\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* file0;
	long file_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&file0, &file_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &file0, &file_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRemoveFile(wxString(file0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxRemoveFile(wxString(file0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxRemoveFile()\n");
	}
}
/* }}} */

/* {{{ proto bool wxMkdir(string dir, int perm)
   Makes the directory dir, returning true if successful. */
PHP_FUNCTION(php_wxMkdir)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMkdir\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dir0;
	long dir_len0;
	long perm0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&dir0, &dir_len0, &perm0)\n");
		#endif

		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dir0, &dir_len0, &perm0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxMkdir(wxString(dir0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxMkdir(wxString(dir0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxMkdir(wxString(dir0, wxConvUTF8), (int) perm0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxMkdir(wxString(dir0, wxConvUTF8), (int) perm0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxMkdir()\n");
	}
}
/* }}} */

/* {{{ proto bool wxRmdir(string dir, int flags)
   Removes the directory dir, returning true if successful. */
PHP_FUNCTION(php_wxRmdir)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRmdir\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dir0;
	long dir_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&dir0, &dir_len0, &flags0)\n");
		#endif

		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dir0, &dir_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRmdir(wxString(dir0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxRmdir(wxString(dir0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRmdir(wxString(dir0, wxConvUTF8), (int) flags0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxRmdir(wxString(dir0, wxConvUTF8), (int) flags0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxRmdir()\n");
	}
}
/* }}} */

/* {{{ proto string wxFindNextFile()
   Returns the next file that matches the path passed to wxFindFirstFile(). */
PHP_FUNCTION(php_wxFindNextFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindNextFile\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFindNextFile().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = wxFindNextFile();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxFindNextFile()\n");
	}
}
/* }}} */

/* {{{ proto string wxFindFirstFile(string spec, int flags)
   This function does directory searching; returns the first file that matches the path spec, or the empty string. */
PHP_FUNCTION(php_wxFindFirstFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindFirstFile\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* spec0;
	long spec_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&spec0, &spec_len0, &flags0)\n");
		#endif

		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &spec0, &spec_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFindFirstFile(wxString(spec0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxFindFirstFile(wxString(spec0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFindFirstFile(wxString(spec0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				value_to_return2 = wxFindFirstFile(wxString(spec0, wxConvUTF8), (int) flags0);
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxFindFirstFile()\n");
	}
}
/* }}} */

/* {{{ proto wxFileKind wxGetFileKind(int fd)
   Returns the type of an open file. */
PHP_FUNCTION(php_wxGetFileKind)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetFileKind\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long fd0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&fd0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &fd0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetFileKind((int) fd0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetFileKind((int) fd0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetFileKind()\n");
	}
}
/* }}} */

/* {{{ proto wxFont wxGetFontFromUser(wxWindow &parent, wxFont fontInit, string caption)
   Shows the font selection dialog and returns the font selected by user or invalid font (use wxFont::IsOk() to test whether a font is valid) if the dialog was cancelled. */
PHP_FUNCTION(php_wxGetFontFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetFontFromUser\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	zval* fontInit0 = 0;
	wxFont* object_pointer0_1 = 0;
	char* caption0;
	long caption_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO|s' (&parent0, &fontInit0, php_wxFont_entry, &caption0, &caption_len0)\n");
		#endif

		char parse_parameters_string[] = "zO|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &fontInit0, php_wxFont_entry, &caption0, &caption_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(fontInit0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxFont*) zend_object_store_get_object(fontInit0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxFont*) zend_object_store_get_object(fontInit0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxFont*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'fontInit' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(fontInit0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'fontInit' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1) to return new object\n\n");
				#endif

				wxFont value_to_return2;
				value_to_return2 = wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1);
				((wxRefCounter *) value_to_return2.GetRefData())->IncRef();
				void* ptr = safe_emalloc(1, sizeof(wxFont_php), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxFont));
				object_init_ex(return_value, php_wxFont_entry);
				((wxFont_php*)ptr)->phpObj = return_value;
				zo_wxFont* zo2 = (zo_wxFont*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo2->native_object = (wxFont_php*) ptr;


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1, wxString(caption0, wxConvUTF8)) to return new object\n\n");
				#endif

				wxFont value_to_return3;
				value_to_return3 = wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1, wxString(caption0, wxConvUTF8));
				((wxRefCounter *) value_to_return3.GetRefData())->IncRef();
				void* ptr = safe_emalloc(1, sizeof(wxFont_php), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxFont));
				object_init_ex(return_value, php_wxFont_entry);
				((wxFont_php*)ptr)->phpObj = return_value;
				zo_wxFont* zo3 = (zo_wxFont*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo3->native_object = (wxFont_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetFontFromUser()\n");
	}
}
/* }}} */

/* {{{ proto bool wxColourDisplay()
   Returns true if the display is colour, false otherwise. */
PHP_FUNCTION(php_wxColourDisplay)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxColourDisplay\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxColourDisplay())\n\n");
				#endif

				ZVAL_BOOL(return_value, wxColourDisplay());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxColourDisplay()\n");
	}
}
/* }}} */

/* {{{ proto int wxDisplayDepth()
   Returns the depth of the display (a value of 1 denotes a monochrome display). */
PHP_FUNCTION(php_wxDisplayDepth)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDisplayDepth\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxDisplayDepth())\n\n");
				#endif

				ZVAL_LONG(return_value, wxDisplayDepth());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxDisplayDepth()\n");
	}
}
/* }}} */

/* {{{ proto  wxSetCursor(wxCursor cursor)
   Globally sets the cursor; only has an effect on Windows, Mac and GTK+. */
PHP_FUNCTION(php_wxSetCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetCursor\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* cursor0 = 0;
	wxCursor* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&cursor0, php_wxCursor_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cursor0, php_wxCursor_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cursor0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxCursor*) zend_object_store_get_object(cursor0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxCursor*) zend_object_store_get_object(cursor0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxCursor*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'cursor' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cursor0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cursor' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSetCursor(*(wxCursor*) object_pointer0_0)\n\n");
				#endif

				wxSetCursor(*(wxCursor*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxSetCursor()\n");
	}
}
/* }}} */

/* {{{ proto  wxClientDisplayRect(int &x, int &y, int &width, int &height)
   Returns the dimensions of the work area on the display. */
PHP_FUNCTION(php_wxClientDisplayRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxClientDisplayRect\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long* x0;
	zval* x0_ref;
	long* y0;
	zval* y0_ref;
	long* width0;
	zval* width0_ref;
	long* height0;
	zval* height0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llll' (x0, y0, width0, height0)\n");
		#endif

		char parse_parameters_string[] = "llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, x0, y0, width0, height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &x0_ref, &y0_ref, &width0_ref, &height0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxClientDisplayRect((int*) x0, (int*) y0, (int*) width0, (int*) height0)\n\n");
				#endif

				wxClientDisplayRect((int*) x0, (int*) y0, (int*) width0, (int*) height0);

				size_t elements_returned0_0 = sizeof(x0)/sizeof(*x0);
				array_init(x0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(x0_ref, x0[i]);
				}
				size_t elements_returned0_1 = sizeof(y0)/sizeof(*y0);
				array_init(y0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(y0_ref, y0[i]);
				}
				size_t elements_returned0_2 = sizeof(width0)/sizeof(*width0);
				array_init(width0_ref);
				for(size_t i=0; i<elements_returned0_2; i++)
				{
					add_next_index_long(width0_ref, width0[i]);
				}
				size_t elements_returned0_3 = sizeof(height0)/sizeof(*height0);
				array_init(height0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(height0_ref, height0[i]);
				}

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxClientDisplayRect()\n");
	}
}
/* }}} */

/* {{{ proto wxRect wxGetClientDisplayRect()
   Returns the dimensions of the work area on the display. */
PHP_FUNCTION(php_wxGetClientDisplayRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetClientDisplayRect\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetClientDisplayRect() to return new object\n\n");
				#endif

				wxRect value_to_return0;
				value_to_return0 = wxGetClientDisplayRect();
				void* ptr = safe_emalloc(1, sizeof(wxRect_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxRect));
				object_init_ex(return_value, php_wxRect_entry);
				((wxRect_php*)ptr)->phpObj = return_value;
				((wxRect_php*)ptr)->InitProperties();
				zo_wxRect* zo0 = (zo_wxRect*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxRect_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetClientDisplayRect()\n");
	}
}
/* }}} */

/* {{{ proto wxSize wxGetDisplayPPI()
   Returns the display resolution in pixels per inch. */
PHP_FUNCTION(php_wxGetDisplayPPI)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetDisplayPPI\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetDisplayPPI() to return new object\n\n");
				#endif

				wxSize value_to_return0;
				value_to_return0 = wxGetDisplayPPI();
				void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				((wxSize_php*)ptr)->phpObj = return_value;
				zo_wxSize* zo0 = (zo_wxSize*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxSize_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetDisplayPPI()\n");
	}
}
/* }}} */

/* {{{ proto  wxDisplaySize(int &width, int &height)
   Returns the display size in pixels. */
PHP_FUNCTION(php_wxDisplaySize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDisplaySize\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long* width0;
	zval* width0_ref;
	long* height0;
	zval* height0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (width0, height0)\n");
		#endif

		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, width0, height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &width0_ref, &height0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxDisplaySize((int*) width0, (int*) height0)\n\n");
				#endif

				wxDisplaySize((int*) width0, (int*) height0);

				size_t elements_returned0_0 = sizeof(width0)/sizeof(*width0);
				array_init(width0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(width0_ref, width0[i]);
				}
				size_t elements_returned0_1 = sizeof(height0)/sizeof(*height0);
				array_init(height0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(height0_ref, height0[i]);
				}

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxDisplaySize()\n");
	}
}
/* }}} */

/* {{{ proto wxSize wxGetDisplaySize()
   Returns the display size in pixels. */
PHP_FUNCTION(php_wxGetDisplaySize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetDisplaySize\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetDisplaySize() to return new object\n\n");
				#endif

				wxSize value_to_return0;
				value_to_return0 = wxGetDisplaySize();
				void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				((wxSize_php*)ptr)->phpObj = return_value;
				zo_wxSize* zo0 = (zo_wxSize*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxSize_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetDisplaySize()\n");
	}
}
/* }}} */

/* {{{ proto  wxDisplaySizeMM(int &width, int &height)
   Returns the display size in millimeters. */
PHP_FUNCTION(php_wxDisplaySizeMM)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDisplaySizeMM\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long* width0;
	zval* width0_ref;
	long* height0;
	zval* height0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (width0, height0)\n");
		#endif

		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, width0, height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &width0_ref, &height0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxDisplaySizeMM((int*) width0, (int*) height0)\n\n");
				#endif

				wxDisplaySizeMM((int*) width0, (int*) height0);

				size_t elements_returned0_0 = sizeof(width0)/sizeof(*width0);
				array_init(width0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(width0_ref, width0[i]);
				}
				size_t elements_returned0_1 = sizeof(height0)/sizeof(*height0);
				array_init(height0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(height0_ref, height0[i]);
				}

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxDisplaySizeMM()\n");
	}
}
/* }}} */

/* {{{ proto wxSize wxGetDisplaySizeMM()
   Returns the display size in millimeters. */
PHP_FUNCTION(php_wxGetDisplaySizeMM)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetDisplaySizeMM\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetDisplaySizeMM() to return new object\n\n");
				#endif

				wxSize value_to_return0;
				value_to_return0 = wxGetDisplaySizeMM();
				void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				((wxSize_php*)ptr)->phpObj = return_value;
				zo_wxSize* zo0 = (zo_wxSize*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxSize_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetDisplaySizeMM()\n");
	}
}
/* }}} */

/* {{{ proto void wxInitAllImageHandlers()
   Initializes all available image handlers. */
PHP_FUNCTION(php_wxInitAllImageHandlers)
{
	wxInitAllImageHandlers();
	RETVAL_TRUE;
}
/* }}} */

/* {{{ proto  wxEntryCleanup()
   Free resources allocated by a successful call to wxEntryStart(). */
PHP_FUNCTION(php_wxEntryCleanup)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxEntryCleanup\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxEntryCleanup()\n\n");
				#endif

				wxEntryCleanup();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxEntryCleanup()\n");
	}
}
/* }}} */

/* {{{ proto int wxFinite(float x)
   Returns a non-zero value if x is neither infinite nor NaN (not a number), returns 0 otherwise. */
PHP_FUNCTION(php_wxFinite)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFinite\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	double x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&x0)\n");
		#endif

		char parse_parameters_string[] = "d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxFinite(x0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxFinite(x0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxFinite()\n");
	}
}
/* }}} */

/* {{{ proto bool wxIsNaN(float x)
   Returns a non-zero value if x is NaN (not a number), returns 0 otherwise. */
PHP_FUNCTION(php_wxIsNaN)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsNaN\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	double x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&x0)\n");
		#endif

		char parse_parameters_string[] = "d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsNaN(x0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsNaN(x0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxIsNaN()\n");
	}
}
/* }}} */

/* {{{ proto int wxRound(float x)
   Small wrapper around round(). */
PHP_FUNCTION(php_wxRound)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRound\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	double x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&x0)\n");
		#endif

		char parse_parameters_string[] = "d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxRound(x0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxRound(x0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxRound()\n");
	}
}
/* }}} */

/* {{{ proto bool wxIsSameDouble(float x, float y)
   Returns true if both double values are identical. */
PHP_FUNCTION(php_wxIsSameDouble)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsSameDouble\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	double x0;
	double y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'dd' (&x0, &y0)\n");
		#endif

		char parse_parameters_string[] = "dd";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsSameDouble(x0, y0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsSameDouble(x0, y0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxIsSameDouble()\n");
	}
}
/* }}} */

/* {{{ proto bool wxIsNullDouble(float x)
   Return true of x is exactly zero. */
PHP_FUNCTION(php_wxIsNullDouble)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsNullDouble\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	double x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&x0)\n");
		#endif

		char parse_parameters_string[] = "d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsNullDouble(x0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsNullDouble(x0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxIsNullDouble()\n");
	}
}
/* }}} */

/* {{{ proto int wxMessageBox(string message, string caption, int style, wxWindow &parent, int x, int y)
   Show a general purpose message dialog. */
PHP_FUNCTION(php_wxMessageBox)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMessageBox\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	long style0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|slzll' (&message0, &message_len0, &caption0, &caption_len0, &style0, &parent0, &x0, &y0)\n");
		#endif

		char parse_parameters_string[] = "s|slzll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &style0, &parent0, &x0, &y0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxWindow*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0));


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3))\n\n");
				#endif

				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3));


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0));


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0, (int) y0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0, (int) y0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxMessageBox()\n");
	}
}
/* }}} */

/* {{{ proto int wxGetNumberFromUser(string message, string prompt, string caption, int value, int min, int max, wxWindow &parent, wxPoint pos)
   Shows a dialog asking the user for numeric input. */
PHP_FUNCTION(php_wxGetNumberFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetNumberFromUser\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* prompt0;
	long prompt_len0;
	char* caption0;
	long caption_len0;
	long value0;
	long min0;
	long max0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_6 = 0;
	zval* pos0 = 0;
	wxPoint* object_pointer0_7 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 4  && arguments_received <= 8)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sssl|llzO' (&message0, &message_len0, &prompt0, &prompt_len0, &caption0, &caption_len0, &value0, &min0, &max0, &parent0, &pos0, php_wxPoint_entry)\n");
		#endif

		char parse_parameters_string[] = "sssl|llzO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &prompt0, &prompt_len0, &caption0, &caption_len0, &value0, &min0, &max0, &parent0, &pos0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 7){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_6 = (wxWindow*) argument_native_object;
					if (!object_pointer0_6 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 8){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_7 = (wxPoint*) argument_native_object;
					if (!object_pointer0_7 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0));


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0));


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0, (long) max0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0, (long) max0));


				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0, (long) max0, (wxWindow*) object_pointer0_6))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0, (long) max0, (wxWindow*) object_pointer0_6));


				return;
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0, (long) max0, (wxWindow*) object_pointer0_6, *(wxPoint*) object_pointer0_7))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0, (long) max0, (wxWindow*) object_pointer0_6, *(wxPoint*) object_pointer0_7));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetNumberFromUser()\n");
	}
}
/* }}} */

/* {{{ proto wxObject wxCreateDynamicObject(string className)
   Creates and returns an object of the given class, if the class has been registered with the dynamic class system using DECLARE... */
PHP_FUNCTION(php_wxCreateDynamicObject)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxCreateDynamicObject\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* className0;
	long className_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&className0, &className_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &className0, &className_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxCreateDynamicObject(wxString(className0, wxConvUTF8)) to return object pointer\n\n");
				#endif

				wxObject_php* value_to_return1;
				value_to_return1 = (wxObject_php*) wxCreateDynamicObject(wxString(className0, wxConvUTF8));
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxObject_entry);
					((zo_wxObject*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxObject_php*) value_to_return1;
				}



				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxCreateDynamicObject()\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxFindWindowAtPointer(wxPoint &pt)
   Find the deepest window at the mouse pointer position, returning the window and current pointer position in screen coordinates. */
PHP_FUNCTION(php_wxFindWindowAtPointer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindWindowAtPointer\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* pt0 = 0;
	wxPoint* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pt0, php_wxPoint_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pt0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pt0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxPoint*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowAtPointer(*(wxPoint*) object_pointer0_0) to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) wxFindWindowAtPointer(*(wxPoint*) object_pointer0_0);
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return1;
				}



				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxFindWindowAtPointer()\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxGetActiveWindow()
   Gets the currently active window (implemented for MSW and GTK only currently, always returns NULL in the other ports). */
PHP_FUNCTION(php_wxGetActiveWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetActiveWindow\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetActiveWindow() to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) wxGetActiveWindow();
				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return0;
				}



				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetActiveWindow()\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxGetTopLevelParent(wxWindow &window)
   Returns the first top level parent of the given window, or in other words, the frame or dialog containing it, or NULL. */
PHP_FUNCTION(php_wxGetTopLevelParent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetTopLevelParent\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* window0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&window0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(window0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(window0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'window' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'window' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetTopLevelParent((wxWindow*) object_pointer0_0) to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) wxGetTopLevelParent((wxWindow*) object_pointer0_0);
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return1;
				}



				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetTopLevelParent()\n");
	}
}
/* }}} */

/* {{{ proto bool wxRichTextHasStyle(int flags, int style) */
PHP_FUNCTION(php_wxRichTextHasStyle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRichTextHasStyle\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long flags0;
	long style0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&flags0, &style0)\n");
		#endif

		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0, &style0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRichTextHasStyle((int) flags0, (int) style0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxRichTextHasStyle((int) flags0, (int) style0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxRichTextHasStyle()\n");
	}
}
/* }}} */

/* {{{ proto bool wxRichTextCombineBitlists(int &valueA, int valueB, int &flagsA, int flagsB)
   Combine two bitlists. */
PHP_FUNCTION(php_wxRichTextCombineBitlists)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRichTextCombineBitlists\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long valueA0;
	zval* valueA0_ref;
	long valueB0;
	long flagsA0;
	zval* flagsA0_ref;
	long flagsB0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llll' (&valueA0, &valueB0, &flagsA0, &flagsB0)\n");
		#endif

		char parse_parameters_string[] = "llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &valueA0, &valueB0, &flagsA0, &flagsB0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &valueA0_ref, &dummy, &flagsA0_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRichTextCombineBitlists((int&) valueA0, (int) valueB0, (int&) flagsA0, (int) flagsB0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxRichTextCombineBitlists((int&) valueA0, (int) valueB0, (int&) flagsA0, (int) flagsB0));

				ZVAL_LONG(valueA0_ref, valueA0);
				ZVAL_LONG(flagsA0_ref, flagsA0);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxRichTextCombineBitlists()\n");
	}
}
/* }}} */

/* {{{ proto bool wxRichTextBitlistsEqPartial(int valueA, int valueB, int flags)
   Compare two bitlists. */
PHP_FUNCTION(php_wxRichTextBitlistsEqPartial)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRichTextBitlistsEqPartial\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long valueA0;
	long valueB0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lll' (&valueA0, &valueB0, &flags0)\n");
		#endif

		char parse_parameters_string[] = "lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &valueA0, &valueB0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRichTextBitlistsEqPartial((int) valueA0, (int) valueB0, (int) flags0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxRichTextBitlistsEqPartial((int) valueA0, (int) valueB0, (int) flags0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxRichTextBitlistsEqPartial()\n");
	}
}
/* }}} */

/* {{{ proto string wxRichTextDecimalToRoman(int n)
   Convert a decimal to Roman numerals. */
PHP_FUNCTION(php_wxRichTextDecimalToRoman)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRichTextDecimalToRoman\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long n0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&n0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxRichTextDecimalToRoman((long) n0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxRichTextDecimalToRoman((long) n0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxRichTextDecimalToRoman()\n");
	}
}
/* }}} */

/* {{{ proto  wxTextAttrCollectCommonAttributes(wxTextAttr &currentStyle, wxTextAttr attr, wxTextAttr &clashingAttr, wxTextAttr &absentAttr) */
PHP_FUNCTION(php_wxTextAttrCollectCommonAttributes)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTextAttrCollectCommonAttributes\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* currentStyle0 = 0;
	wxTextAttr* object_pointer0_0 = 0;
	zval* attr0 = 0;
	wxTextAttr* object_pointer0_1 = 0;
	zval* clashingAttr0 = 0;
	wxTextAttr* object_pointer0_2 = 0;
	zval* absentAttr0 = 0;
	wxTextAttr* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OOOO' (&currentStyle0, php_wxTextAttr_entry, &attr0, php_wxTextAttr_entry, &clashingAttr0, php_wxTextAttr_entry, &absentAttr0, php_wxTextAttr_entry)\n");
		#endif

		char parse_parameters_string[] = "OOOO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &currentStyle0, php_wxTextAttr_entry, &attr0, php_wxTextAttr_entry, &clashingAttr0, php_wxTextAttr_entry, &absentAttr0, php_wxTextAttr_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(currentStyle0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxTextAttr*) zend_object_store_get_object(currentStyle0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxTextAttr*) zend_object_store_get_object(currentStyle0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxTextAttr*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'currentStyle' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(currentStyle0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'currentStyle' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(attr0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxTextAttr*) zend_object_store_get_object(attr0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxTextAttr*) zend_object_store_get_object(attr0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxTextAttr*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'attr' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(attr0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'attr' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(clashingAttr0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxTextAttr*) zend_object_store_get_object(clashingAttr0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxTextAttr*) zend_object_store_get_object(clashingAttr0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxTextAttr*) argument_native_object;
					if (!object_pointer0_2 )
					{
						zend_error(E_ERROR, "Parameter 'clashingAttr' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(clashingAttr0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'clashingAttr' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(absentAttr0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxTextAttr*) zend_object_store_get_object(absentAttr0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxTextAttr*) zend_object_store_get_object(absentAttr0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxTextAttr*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'absentAttr' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(absentAttr0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'absentAttr' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxTextAttrCollectCommonAttributes(*(wxTextAttr*) object_pointer0_0, *(wxTextAttr*) object_pointer0_1, *(wxTextAttr*) object_pointer0_2, *(wxTextAttr*) object_pointer0_3)\n\n");
				#endif

				wxTextAttrCollectCommonAttributes(*(wxTextAttr*) object_pointer0_0, *(wxTextAttr*) object_pointer0_1, *(wxTextAttr*) object_pointer0_2, *(wxTextAttr*) object_pointer0_3);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxTextAttrCollectCommonAttributes()\n");
	}
}
/* }}} */

/* {{{ proto  wxRichTextModuleInit() */
PHP_FUNCTION(php_wxRichTextModuleInit)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRichTextModuleInit\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxRichTextModuleInit()\n\n");
				#endif

				wxRichTextModuleInit();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxRichTextModuleInit()\n");
	}
}
/* }}} */

/* {{{ proto string wxGetStockLabel(int id, int flags)
   Returns label that should be used for given id element. */
PHP_FUNCTION(php_wxGetStockLabel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetStockLabel\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long id0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l|l' (&id0, &flags0)\n");
		#endif

		char parse_parameters_string[] = "l|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetStockLabel((wxWindowID) id0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxGetStockLabel((wxWindowID) id0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetStockLabel((wxWindowID) id0, (long) flags0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				value_to_return2 = wxGetStockLabel((wxWindowID) id0, (long) flags0);
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetStockLabel()\n");
	}
}
/* }}} */

/* {{{ proto string wxGetTextFromUser(string message, string caption, string default_value, wxWindow &parent, int x, int y, bool centre)
   Pop up a dialog box with title set to caption, message, and a default_value. */
PHP_FUNCTION(php_wxGetTextFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetTextFromUser\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	char* default_value0;
	long default_value_len0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool centre0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sszllb' (&message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0)\n");
		#endif

		char parse_parameters_string[] = "s|sszllb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxWindow*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxGetTextFromUser(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				value_to_return2 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return3;
				value_to_return3 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return4;
				value_to_return4 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return5;
				value_to_return5 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return6;
				value_to_return6 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return7;
				value_to_return7 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetTextFromUser()\n");
	}
}
/* }}} */

/* {{{ proto string wxGetPasswordFromUser(string message, string caption, string default_value, wxWindow &parent, int x, int y, bool centre)
   Similar to wxGetTextFromUser() but the text entered in the dialog is not shown on screen but replaced with stars. */
PHP_FUNCTION(php_wxGetPasswordFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetPasswordFromUser\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	char* default_value0;
	long default_value_len0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool centre0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sszllb' (&message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0)\n");
		#endif

		char parse_parameters_string[] = "s|sszllb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxWindow*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				value_to_return2 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return3;
				value_to_return3 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return4;
				value_to_return4 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return5;
				value_to_return5 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return6;
				value_to_return6 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return7;
				value_to_return7 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetPasswordFromUser()\n");
	}
}
/* }}} */

/* {{{ proto int wxGetTimeZone()
   Returns the difference between UTC and local time in seconds. */
PHP_FUNCTION(php_wxGetTimeZone)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetTimeZone\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetTimeZone())\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetTimeZone());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetTimeZone()\n");
	}
}
/* }}} */

/* {{{ proto int wxGetLocalTime()
   Returns the number of seconds since local time 00:00:00 Jan 1st 1970. */
PHP_FUNCTION(php_wxGetLocalTime)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetLocalTime\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetLocalTime())\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetLocalTime());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetLocalTime()\n");
	}
}
/* }}} */

/* {{{ proto int wxGetUTCTime()
   Returns the number of seconds since GMT 00:00:00 Jan 1st 1970. */
PHP_FUNCTION(php_wxGetUTCTime)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetUTCTime\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetUTCTime())\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetUTCTime());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetUTCTime()\n");
	}
}
/* }}} */

/* {{{ proto array wxStringTokenize(string str, string delims, wxStringTokenizerMode mode)
   This is a convenience function wrapping wxStringTokenizer which simply returns all tokens found in the given str as an array. */
PHP_FUNCTION(php_wxStringTokenize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStringTokenize\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	char* delims0;
	long delims_len0;
	long mode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sl' (&str0, &str_len0, &delims0, &delims_len0, &mode0)\n");
		#endif

		char parse_parameters_string[] = "s|sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0, &delims0, &delims_len0, &mode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxStringTokenize(wxString(str0, wxConvUTF8)) to return strings array\n\n");
				#endif

				wxArrayString value_to_return1;
				value_to_return1 = wxStringTokenize(wxString(str0, wxConvUTF8));
				char* temp_string1;
				array_init(return_value);
				for(size_t i=0; i<value_to_return1.GetCount(); i++)
				{
					temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1[i].size()+1));
					strcpy (temp_string1, (const char *) value_to_return1[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string1, 1);
					free(temp_string1);
				}


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8)) to return strings array\n\n");
				#endif

				wxArrayString value_to_return2;
				value_to_return2 = wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8));
				char* temp_string2;
				array_init(return_value);
				for(size_t i=0; i<value_to_return2.GetCount(); i++)
				{
					temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2[i].size()+1));
					strcpy (temp_string2, (const char *) value_to_return2[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string2, 1);
					free(temp_string2);
				}


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8), (wxStringTokenizerMode) mode0) to return strings array\n\n");
				#endif

				wxArrayString value_to_return3;
				value_to_return3 = wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8), (wxStringTokenizerMode) mode0);
				char* temp_string3;
				array_init(return_value);
				for(size_t i=0; i<value_to_return3.GetCount(); i++)
				{
					temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3[i].size()+1));
					strcpy (temp_string3, (const char *) value_to_return3[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string3, 1);
					free(temp_string3);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStringTokenize()\n");
	}
}
/* }}} */

/* {{{ proto string wxGetTranslation(string string, string domain)
   This function returns the translation of string in the current locale(). */
PHP_FUNCTION(php_wxGetTranslation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetTranslation\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* string0;
	long string_len0;
	char* domain0;
	long domain_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* string1;
	long string_len1;
	char* plural1;
	long plural_len1;
	long n1;
	char* domain1;
	long domain_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|s' (&string0, &string_len0, &domain0, &domain_len0)\n");
		#endif

		char parse_parameters_string[] = "s|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string0, &string_len0, &domain0, &domain_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl|s' (&string1, &string_len1, &plural1, &plural_len1, &n1, &domain1, &domain_len1)\n");
		#endif

		char parse_parameters_string[] = "ssl|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &string1, &string_len1, &plural1, &plural_len1, &n1, &domain1, &domain_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxGetTranslation(wxString(string0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string0, wxConvUTF8), wxString(domain0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				value_to_return2 = wxGetTranslation(wxString(string0, wxConvUTF8), wxString(domain0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return3;
				value_to_return3 = wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1);
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1, wxString(domain1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return4;
				value_to_return4 = wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1, wxString(domain1, wxConvUTF8));
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetTranslation()\n");
	}
}
/* }}} */

/* {{{ proto  wxBeginBusyCursor(wxCursor cursor)
   Changes the cursor to the given cursor for all windows in the application. */
PHP_FUNCTION(php_wxBeginBusyCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBeginBusyCursor\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* cursor0 = 0;
	wxCursor* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|z' (&cursor0)\n");
		#endif

		char parse_parameters_string[] = "|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cursor0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cursor0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxCursor*) zend_object_store_get_object(cursor0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxCursor*) zend_object_store_get_object(cursor0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxCursor*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXCURSOR_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'cursor' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cursor0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cursor' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxBeginBusyCursor()\n\n");
				#endif

				wxBeginBusyCursor();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxBeginBusyCursor((const wxCursor*) object_pointer0_0)\n\n");
				#endif

				wxBeginBusyCursor((const wxCursor*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxBeginBusyCursor()\n");
	}
}
/* }}} */

/* {{{ proto  wxEndBusyCursor()
   Changes the cursor back to the original cursor, for all windows in the application. */
PHP_FUNCTION(php_wxEndBusyCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxEndBusyCursor\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxEndBusyCursor()\n\n");
				#endif

				wxEndBusyCursor();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxEndBusyCursor()\n");
	}
}
/* }}} */

/* {{{ proto bool wxIsBusy()
   Returns true if between two wxBeginBusyCursor() and wxEndBusyCursor() calls. */
PHP_FUNCTION(php_wxIsBusy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsBusy\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsBusy())\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsBusy());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxIsBusy()\n");
	}
}
/* }}} */

/* {{{ proto  wxBell()
   Ring the system bell. */
PHP_FUNCTION(php_wxBell)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBell\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxBell()\n\n");
				#endif

				wxBell();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxBell()\n");
	}
}
/* }}} */

/* {{{ proto  wxInfoMessageBox(wxWindow &parent)
   Shows a message box with the information about the wxWidgets build used, including its version, most important build parameters and the version of the underlying GUI toolkit. */
PHP_FUNCTION(php_wxInfoMessageBox)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxInfoMessageBox\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&parent0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxInfoMessageBox((wxWindow*) object_pointer0_0)\n\n");
				#endif

				wxInfoMessageBox((wxWindow*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxInfoMessageBox()\n");
	}
}
/* }}} */

/* {{{ proto wxVersionInfo wxGetLibraryVersionInfo()
   Get wxWidgets version information. */
PHP_FUNCTION(php_wxGetLibraryVersionInfo)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetLibraryVersionInfo\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetLibraryVersionInfo() to return new object\n\n");
				#endif

				wxVersionInfo value_to_return0;
				value_to_return0 = wxGetLibraryVersionInfo();
				void* ptr = safe_emalloc(1, sizeof(wxVersionInfo_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxVersionInfo));
				object_init_ex(return_value, php_wxVersionInfo_entry);
				((wxVersionInfo_php*)ptr)->phpObj = return_value;
				zo_wxVersionInfo* zo0 = (zo_wxVersionInfo*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxVersionInfo_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetLibraryVersionInfo()\n");
	}
}
/* }}} */

/* {{{ proto string wxGetenv(string name) */
PHP_FUNCTION(php_wxGetenv)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetenv\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* name0;
	long name_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* name1;
	long name_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&name0, &name_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &name0, &name_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&name1, &name_len1)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &name1, &name_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetenv(name0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return1;
				value_to_return1 = wxGetenv(name0);
				ZVAL_STRING(return_value, value_to_return1, 1);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetenv(wxString(name1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				char* value_to_return1;
				value_to_return1 = wxGetenv(wxString(name1, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return1, 1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetenv()\n");
	}
}
/* }}} */

/* {{{ proto bool wxSetEnv(string var, string value)
   Sets the value of the environment variable var (adding it if necessary) to value. */
PHP_FUNCTION(php_wxSetEnv)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetEnv\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* var0;
	long var_len0;
	char* value0;
	long value_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&var0, &var_len0, &value0, &value_len0)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &var0, &var_len0, &value0, &value_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSetEnv(wxString(var0, wxConvUTF8), wxString(value0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxSetEnv(wxString(var0, wxConvUTF8), wxString(value0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxSetEnv()\n");
	}
}
/* }}} */

/* {{{ proto bool wxUnsetEnv(string var)
   Removes the variable var from the environment. */
PHP_FUNCTION(php_wxUnsetEnv)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxUnsetEnv\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* var0;
	long var_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&var0, &var_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &var0, &var_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxUnsetEnv(wxString(var0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxUnsetEnv(wxString(var0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxUnsetEnv()\n");
	}
}
/* }}} */

/* {{{ proto wxBatteryState wxGetBatteryState()
   Returns battery state as one of wxBATTERY_NORMAL_STATE, wxBATTERY_LOW_STATE, wxBATTERY_CRITICAL_STATE, wxBATTERY_SHUTDOWN_STATE or wxBATTERY_UNKNOWN_STATE. */
PHP_FUNCTION(php_wxGetBatteryState)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetBatteryState\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetBatteryState())\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetBatteryState());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetBatteryState()\n");
	}
}
/* }}} */

/* {{{ proto wxPowerType wxGetPowerType()
   Returns the type of power source as one of wxPOWER_SOCKET, wxPOWER_BATTERY or wxPOWER_UNKNOWN. */
PHP_FUNCTION(php_wxGetPowerType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetPowerType\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetPowerType())\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetPowerType());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetPowerType()\n");
	}
}
/* }}} */

/* {{{ proto bool wxGetKeyState(wxKeyCode key)
   For normal keys, returns true if the specified key is currently down. */
PHP_FUNCTION(php_wxGetKeyState)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetKeyState\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long key0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&key0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &key0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxGetKeyState((wxKeyCode) key0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxGetKeyState((wxKeyCode) key0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetKeyState()\n");
	}
}
/* }}} */

/* {{{ proto wxPoint wxGetMousePosition()
   Returns the mouse position in screen coordinates. */
PHP_FUNCTION(php_wxGetMousePosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetMousePosition\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetMousePosition() to return new object\n\n");
				#endif

				wxPoint value_to_return0;
				value_to_return0 = wxGetMousePosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				((wxPoint_php*)ptr)->phpObj = return_value;
				((wxPoint_php*)ptr)->InitProperties();
				zo_wxPoint* zo0 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxPoint_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetMousePosition()\n");
	}
}
/* }}} */

/* {{{ proto wxMouseState wxGetMouseState()
   Returns the current state of the mouse. */
PHP_FUNCTION(php_wxGetMouseState)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetMouseState\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetMouseState() to return new object\n\n");
				#endif

				wxMouseState value_to_return0;
				value_to_return0 = wxGetMouseState();
				void* ptr = safe_emalloc(1, sizeof(wxMouseState_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxMouseState));
				object_init_ex(return_value, php_wxMouseState_entry);
				((wxMouseState_php*)ptr)->phpObj = return_value;
				zo_wxMouseState* zo0 = (zo_wxMouseState*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxMouseState_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetMouseState()\n");
	}
}
/* }}} */

/* {{{ proto  wxEnableTopLevelWindows(bool enable)
   This function enables or disables all top level windows. */
PHP_FUNCTION(php_wxEnableTopLevelWindows)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxEnableTopLevelWindows\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool enable0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&enable0)\n");
		#endif

		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &enable0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxEnableTopLevelWindows()\n\n");
				#endif

				wxEnableTopLevelWindows();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxEnableTopLevelWindows(enable0)\n\n");
				#endif

				wxEnableTopLevelWindows(enable0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxEnableTopLevelWindows()\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxFindWindowAtPoint(wxPoint pt)
   Find the deepest window at the given mouse position in screen coordinates, returning the window if found, or NULL if not. */
PHP_FUNCTION(php_wxFindWindowAtPoint)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindWindowAtPoint\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* pt0 = 0;
	wxPoint* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pt0, php_wxPoint_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pt0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pt0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pt0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxPoint*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowAtPoint(*(wxPoint*) object_pointer0_0) to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) wxFindWindowAtPoint(*(wxPoint*) object_pointer0_0);
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return1;
				}



				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxFindWindowAtPoint()\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxFindWindowByLabel(string label, wxWindow &parent) */
PHP_FUNCTION(php_wxFindWindowByLabel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindWindowByLabel\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* label0;
	long label_len0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|z' (&label0, &label_len0, &parent0)\n");
		#endif

		char parse_parameters_string[] = "s|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &label0, &label_len0, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxWindow*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowByLabel(wxString(label0, wxConvUTF8)) to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) wxFindWindowByLabel(wxString(label0, wxConvUTF8));
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return1;
				}



				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowByLabel(wxString(label0, wxConvUTF8), (wxWindow*) object_pointer0_1) to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return2;
				value_to_return2 = (wxWindow_php*) wxFindWindowByLabel(wxString(label0, wxConvUTF8), (wxWindow*) object_pointer0_1);
				if(value_to_return2 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return2->references.IsUserInitialized()){
					if(value_to_return2->phpObj != NULL){
						*return_value = *value_to_return2->phpObj;
						zval_add_ref(&value_to_return2->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return2;
				}



				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxFindWindowByLabel()\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxFindWindowByName(string name, wxWindow &parent) */
PHP_FUNCTION(php_wxFindWindowByName)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindWindowByName\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* name0;
	long name_len0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|z' (&name0, &name_len0, &parent0)\n");
		#endif

		char parse_parameters_string[] = "s|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &name0, &name_len0, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxWindow*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowByName(wxString(name0, wxConvUTF8)) to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) wxFindWindowByName(wxString(name0, wxConvUTF8));
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return1;
				}



				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowByName(wxString(name0, wxConvUTF8), (wxWindow*) object_pointer0_1) to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return2;
				value_to_return2 = (wxWindow_php*) wxFindWindowByName(wxString(name0, wxConvUTF8), (wxWindow*) object_pointer0_1);
				if(value_to_return2 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return2->references.IsUserInitialized()){
					if(value_to_return2->phpObj != NULL){
						*return_value = *value_to_return2->phpObj;
						zval_add_ref(&value_to_return2->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return2;
				}



				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxFindWindowByName()\n");
	}
}
/* }}} */

/* {{{ proto int wxFindMenuItemId(wxFrame &frame, string menuString, string itemString)
   Find a menu item identifier associated with the given frame's menu bar. */
PHP_FUNCTION(php_wxFindMenuItemId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindMenuItemId\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	zval* frame0 = 0;
	wxFrame* object_pointer0_0 = 0;
	char* menuString0;
	long menuString_len0;
	char* itemString0;
	long itemString_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zss' (&frame0, &menuString0, &menuString_len0, &itemString0, &itemString_len0)\n");
		#endif

		char parse_parameters_string[] = "zss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &frame0, &menuString0, &menuString_len0, &itemString0, &itemString_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(frame0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxFrame*) zend_object_store_get_object(frame0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxFrame*) zend_object_store_get_object(frame0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxFrame*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'frame' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(frame0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'frame' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxFindMenuItemId((wxFrame*) object_pointer0_0, wxString(menuString0, wxConvUTF8), wxString(itemString0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_LONG(return_value, wxFindMenuItemId((wxFrame*) object_pointer0_0, wxString(menuString0, wxConvUTF8), wxString(itemString0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxFindMenuItemId()\n");
	}
}
/* }}} */

/* {{{ proto int wxNewId() */
PHP_FUNCTION(php_wxNewId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxNewId\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxNewId())\n\n");
				#endif

				ZVAL_LONG(return_value, wxNewId());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxNewId()\n");
	}
}
/* }}} */

/* {{{ proto  wxRegisterId(int id)
   Ensures that Ids subsequently generated by wxNewId() do not clash with the given id. */
PHP_FUNCTION(php_wxRegisterId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRegisterId\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&id0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxRegisterId((int) id0)\n\n");
				#endif

				wxRegisterId((int) id0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxRegisterId()\n");
	}
}
/* }}} */

/* {{{ proto bool wxLaunchDefaultApplication(string document, int flags)
   Opens the document in the application associated with the files of this type. */
PHP_FUNCTION(php_wxLaunchDefaultApplication)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxLaunchDefaultApplication\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* document0;
	long document_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&document0, &document_len0, &flags0)\n");
		#endif

		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &document0, &document_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxLaunchDefaultApplication(wxString(document0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxLaunchDefaultApplication(wxString(document0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxLaunchDefaultApplication(wxString(document0, wxConvUTF8), (int) flags0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxLaunchDefaultApplication(wxString(document0, wxConvUTF8), (int) flags0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxLaunchDefaultApplication()\n");
	}
}
/* }}} */

/* {{{ proto bool wxLaunchDefaultBrowser(string url, int flags)
   Opens the url in user's default browser. */
PHP_FUNCTION(php_wxLaunchDefaultBrowser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxLaunchDefaultBrowser\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* url0;
	long url_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&url0, &url_len0, &flags0)\n");
		#endif

		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &url0, &url_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8), (int) flags0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8), (int) flags0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxLaunchDefaultBrowser()\n");
	}
}
/* }}} */

/* {{{ proto string wxStripMenuCodes(string str, int flags)
   Strips any menu codes from str and returns the result. */
PHP_FUNCTION(php_wxStripMenuCodes)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStripMenuCodes\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&str0, &str_len0, &flags0)\n");
		#endif

		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStripMenuCodes(wxString(str0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxStripMenuCodes(wxString(str0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStripMenuCodes(wxString(str0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				value_to_return2 = wxStripMenuCodes(wxString(str0, wxConvUTF8), (int) flags0);
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStripMenuCodes()\n");
	}
}
/* }}} */

/* {{{ proto string wxGetHomeDir()
   Return the (current) user's home directory. */
PHP_FUNCTION(php_wxGetHomeDir)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetHomeDir\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetHomeDir().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = wxGetHomeDir();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetHomeDir()\n");
	}
}
/* }}} */

/* {{{ proto string wxGetFullHostName()
   Returns the FQDN (fully qualified domain host name) or an empty string on error. */
PHP_FUNCTION(php_wxGetFullHostName)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetFullHostName\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetFullHostName().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = wxGetFullHostName();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetFullHostName()\n");
	}
}
/* }}} */

/* {{{ proto string wxGetUserHome(string user)
   Returns the home directory for the given user. */
PHP_FUNCTION(php_wxGetUserHome)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetUserHome\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* user0;
	long user_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|s' (&user0, &user_len0)\n");
		#endif

		char parse_parameters_string[] = "|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &user0, &user_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetUserHome().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = wxGetUserHome();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetUserHome(wxString(user0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				value_to_return1 = wxGetUserHome(wxString(user0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetUserHome()\n");
	}
}
/* }}} */

/* {{{ proto string wxGetOsDescription()
   Returns the string containing the description of the current platform in a user-readable form. */
PHP_FUNCTION(php_wxGetOsDescription)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetOsDescription\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetOsDescription().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = wxGetOsDescription();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetOsDescription()\n");
	}
}
/* }}} */

/* {{{ proto wxOperatingSystemId wxGetOsVersion(int &major, int &minor)
   Gets the version and the operating system ID for currently running OS. */
PHP_FUNCTION(php_wxGetOsVersion)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetOsVersion\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long* major0;
	zval* major0_ref;
	long* minor0;
	zval* minor0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (major0, minor0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, major0, minor0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "|zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &major0_ref, &minor0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetOsVersion())\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetOsVersion());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetOsVersion((int*) major0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetOsVersion((int*) major0));

				size_t elements_returned0_0 = sizeof(major0)/sizeof(*major0);
				array_init(major0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(major0_ref, major0[i]);
				}

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetOsVersion((int*) major0, (int*) minor0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetOsVersion((int*) major0, (int*) minor0));

				size_t elements_returned0_0 = sizeof(major0)/sizeof(*major0);
				array_init(major0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(major0_ref, major0[i]);
				}
				size_t elements_returned0_1 = sizeof(minor0)/sizeof(*minor0);
				array_init(minor0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(minor0_ref, minor0[i]);
				}

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetOsVersion()\n");
	}
}
/* }}} */

/* {{{ proto bool wxIsPlatform64Bit()
   Returns true if the operating system the program is running under is 64 bit. */
PHP_FUNCTION(php_wxIsPlatform64Bit)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsPlatform64Bit\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsPlatform64Bit())\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsPlatform64Bit());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxIsPlatform64Bit()\n");
	}
}
/* }}} */

/* {{{ proto bool wxIsPlatformLittleEndian()
   Returns true if the current platform is little endian (instead of big endian). */
PHP_FUNCTION(php_wxIsPlatformLittleEndian)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsPlatformLittleEndian\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsPlatformLittleEndian())\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsPlatformLittleEndian());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxIsPlatformLittleEndian()\n");
	}
}
/* }}} */

/* {{{ proto int wxGetProcessId()
   Returns the number uniquely identifying the current process in the system. */
PHP_FUNCTION(php_wxGetProcessId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetProcessId\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetProcessId())\n\n");
				#endif

				ZVAL_LONG(return_value, wxGetProcessId());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxGetProcessId()\n");
	}
}
/* }}} */

/* {{{ proto int wxKill(int pid, wxSignal sig, wxKillError &rc, int flags)
   Equivalent to the Unix kill function: send the given signal sig to the process with PID pid. */
PHP_FUNCTION(php_wxKill)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxKill\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long pid0;
	long sig0;
	long* rc0;
	zval* rc0_ref;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l|lll' (&pid0, &sig0, rc0, &flags0)\n");
		#endif

		char parse_parameters_string[] = "l|lll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pid0, &sig0, rc0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "z|zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dummy, &dummy, &rc0_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxKill((long) pid0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxKill((long) pid0));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxKill((long) pid0, (wxSignal) sig0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxKill((long) pid0, (wxSignal) sig0));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0));

				size_t elements_returned0_2 = sizeof(rc0)/sizeof(*rc0);
				array_init(rc0_ref);
				for(size_t i=0; i<elements_returned0_2; i++)
				{
					add_next_index_long(rc0_ref, rc0[i]);
				}

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0, (int) flags0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0, (int) flags0));

				size_t elements_returned0_2 = sizeof(rc0)/sizeof(*rc0);
				array_init(rc0_ref);
				for(size_t i=0; i<elements_returned0_2; i++)
				{
					add_next_index_long(rc0_ref, rc0[i]);
				}

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxKill()\n");
	}
}
/* }}} */

/* {{{ proto bool wxShell(string command)
   Executes a command in an interactive shell window. */
PHP_FUNCTION(php_wxShell)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxShell\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* command0;
	long command_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|s' (&command0, &command_len0)\n");
		#endif

		char parse_parameters_string[] = "|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &command0, &command_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxShell())\n\n");
				#endif

				ZVAL_BOOL(return_value, wxShell());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxShell(wxString(command0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxShell(wxString(command0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxShell()\n");
	}
}
/* }}} */

/* {{{ proto bool wxShutdown(int flags)
   This function shuts down or reboots the computer depending on the value of the flags. */
PHP_FUNCTION(php_wxShutdown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxShutdown\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&flags0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxShutdown())\n\n");
				#endif

				ZVAL_BOOL(return_value, wxShutdown());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxShutdown((int) flags0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxShutdown((int) flags0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxShutdown()\n");
	}
}
/* }}} */

/* {{{ proto  wxMicroSleep(int microseconds)
   Sleeps for the specified number of microseconds. */
PHP_FUNCTION(php_wxMicroSleep)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMicroSleep\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long microseconds0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&microseconds0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &microseconds0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxMicroSleep((unsigned long) microseconds0)\n\n");
				#endif

				wxMicroSleep((unsigned long) microseconds0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxMicroSleep()\n");
	}
}
/* }}} */

/* {{{ proto  wxMilliSleep(int milliseconds)
   Sleeps for the specified number of milliseconds. */
PHP_FUNCTION(php_wxMilliSleep)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMilliSleep\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long milliseconds0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&milliseconds0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &milliseconds0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxMilliSleep((unsigned long) milliseconds0)\n\n");
				#endif

				wxMilliSleep((unsigned long) milliseconds0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxMilliSleep()\n");
	}
}
/* }}} */

/* {{{ proto string wxNow()
   Returns a string representing the current date and time. */
PHP_FUNCTION(php_wxNow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxNow\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxNow().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = wxNow();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxNow()\n");
	}
}
/* }}} */

/* {{{ proto  wxSleep(int secs)
   Sleeps for the specified number of seconds. */
PHP_FUNCTION(php_wxSleep)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSleep\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long secs0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&secs0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &secs0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSleep((int) secs0)\n\n");
				#endif

				wxSleep((int) secs0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxSleep()\n");
	}
}
/* }}} */

/* {{{ proto  wxUsleep(int milliseconds) */
PHP_FUNCTION(php_wxUsleep)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxUsleep\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long milliseconds0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&milliseconds0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &milliseconds0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxUsleep((unsigned long) milliseconds0)\n\n");
				#endif

				wxUsleep((unsigned long) milliseconds0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxUsleep()\n");
	}
}
/* }}} */

/* {{{ proto bool wxIsEmpty(string s) */
PHP_FUNCTION(php_wxIsEmpty)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsEmpty\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* s1;
	long s_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&s0, &s_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&s1, &s_len1)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s1, &s_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsEmpty(s0))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsEmpty(s0));


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsEmpty(wxString(s1, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxIsEmpty(wxString(s1, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxIsEmpty()\n");
	}
}
/* }}} */

/* {{{ proto string wxTmemchr(string s, string c, int len) */
PHP_FUNCTION(php_wxTmemchr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemchr\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	long c0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sll' (&s0, &s_len0, &c0, &len0)\n");
		#endif

		char parse_parameters_string[] = "sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0, &c0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxTmemchr(s0, (char) c0, (size_t) len0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return3;
				value_to_return3 = wxTmemchr(s0, (char) c0, (size_t) len0);
				ZVAL_STRING(return_value, value_to_return3, 1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxTmemchr()\n");
	}
}
/* }}} */

/* {{{ proto int wxTmemcmp(string sz1, string sz2, int len) */
PHP_FUNCTION(php_wxTmemcmp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemcmp\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* sz10;
	long sz1_len0;
	char* sz20;
	long sz2_len0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&sz10, &sz1_len0, &sz20, &sz2_len0, &len0)\n");
		#endif

		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &sz10, &sz1_len0, &sz20, &sz2_len0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxTmemcmp(sz10, sz20, (size_t) len0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxTmemcmp(sz10, sz20, (size_t) len0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxTmemcmp()\n");
	}
}
/* }}} */

/* {{{ proto string wxTmemcpy(string &szOut, string szIn, int len) */
PHP_FUNCTION(php_wxTmemcpy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemcpy\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* szOut0;
	long szOut_len0;
	zval* szOut0_ref;
	char* szIn0;
	long szIn_len0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0)\n");
		#endif

		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &szOut0_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxTmemcpy(szOut0, szIn0, (size_t) len0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return3;
				value_to_return3 = wxTmemcpy(szOut0, szIn0, (size_t) len0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(szOut0_ref, szOut0, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxTmemcpy()\n");
	}
}
/* }}} */

/* {{{ proto string wxTmemmove(string &szOut, string szIn, int len) */
PHP_FUNCTION(php_wxTmemmove)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemmove\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* szOut0;
	long szOut_len0;
	zval* szOut0_ref;
	char* szIn0;
	long szIn_len0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0)\n");
		#endif

		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &szOut0_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxTmemmove(szOut0, szIn0, (size_t) len0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return3;
				value_to_return3 = wxTmemmove(szOut0, szIn0, (size_t) len0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(szOut0_ref, szOut0, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxTmemmove()\n");
	}
}
/* }}} */

/* {{{ proto string wxTmemset(string &szOut, string cIn, int len) */
PHP_FUNCTION(php_wxTmemset)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemset\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* szOut0;
	long szOut_len0;
	zval* szOut0_ref;
	long cIn0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sll' (&szOut0, &szOut_len0, &cIn0, &len0)\n");
		#endif

		char parse_parameters_string[] = "sll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &szOut0, &szOut_len0, &cIn0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &szOut0_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxTmemset(szOut0, (const char) cIn0, (size_t) len0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return3;
				value_to_return3 = wxTmemset(szOut0, (const char) cIn0, (size_t) len0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(szOut0_ref, szOut0, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxTmemset()\n");
	}
}
/* }}} */

/* {{{ proto string wxSetlocale(int category, string locale) */
PHP_FUNCTION(php_wxSetlocale)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetlocale\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	long category0;
	char* locale0;
	long locale_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ls' (&category0, &locale0, &locale_len0)\n");
		#endif

		char parse_parameters_string[] = "ls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &category0, &locale0, &locale_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxSetlocale((int) category0, wxString(locale0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = wxSetlocale((int) category0, wxString(locale0, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxSetlocale()\n");
	}
}
/* }}} */

/* {{{ proto int wxStrlen(string s) */
PHP_FUNCTION(php_wxStrlen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrlen\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&s0, &s_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrlen(wxString(s0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_LONG(return_value, wxStrlen(wxString(s0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrlen()\n");
	}
}
/* }}} */

/* {{{ proto int wxStrnlen(string str, int maxlen) */
PHP_FUNCTION(php_wxStrnlen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrnlen\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	long maxlen0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&str0, &str_len0, &maxlen0)\n");
		#endif

		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0, &maxlen0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrnlen(str0, (size_t) maxlen0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxStrnlen(str0, (size_t) maxlen0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrnlen()\n");
	}
}
/* }}} */

/* {{{ proto string wxStrdup(string s) */
PHP_FUNCTION(php_wxStrdup)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrdup\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&s0, &s_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrdup(wxString(s0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				char* value_to_return1;
				value_to_return1 = wxStrdup(wxString(s0, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return1, 1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrdup()\n");
	}
}
/* }}} */

/* {{{ proto string wxStrcpy(string &dest, string src) */
PHP_FUNCTION(php_wxStrcpy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrcpy\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&dest0, &dest_len0, &src0, &src_len0)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest0_ref, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&dest1, &dest_len1, &src1, &src_len1)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest1_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrcpy(dest0, src0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = wxStrcpy(dest0, src0);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrcpy(dest1, wxString(src1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = wxStrcpy(dest1, wxString(src1, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrcpy()\n");
	}
}
/* }}} */

/* {{{ proto string wxStrncpy(string &dest, string src, int n) */
PHP_FUNCTION(php_wxStrncpy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrncpy\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	long n0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	long n1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
		#endif

		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest0_ref, &dummy, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest1, &dest_len1, &src1, &src_len1, &n1)\n");
		#endif

		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1, &n1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest1_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrncpy(dest0, src0, (size_t) n0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return3;
				value_to_return3 = wxStrncpy(dest0, src0, (size_t) n0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrncpy(dest1, wxString(src1, wxConvUTF8), (size_t) n1).fn_str(), 1)\n\n");
				#endif

				char* value_to_return3;
				value_to_return3 = wxStrncpy(dest1, wxString(src1, wxConvUTF8), (size_t) n1);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrncpy()\n");
	}
}
/* }}} */

/* {{{ proto int wxStrlcpy(string &dest, string src, int n) */
PHP_FUNCTION(php_wxStrlcpy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrlcpy\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	long n0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
		#endif

		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest0_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrlcpy(dest0, src0, (size_t) n0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxStrlcpy(dest0, src0, (size_t) n0));

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrlcpy()\n");
	}
}
/* }}} */

/* {{{ proto string wxStrcat(string &dest, string src) */
PHP_FUNCTION(php_wxStrcat)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrcat\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&dest0, &dest_len0, &src0, &src_len0)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest0_ref, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&dest1, &dest_len1, &src1, &src_len1)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest1_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrcat(dest0, src0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = wxStrcat(dest0, src0);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrcat(dest1, wxString(src1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = wxStrcat(dest1, wxString(src1, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrcat()\n");
	}
}
/* }}} */

/* {{{ proto string wxStrncat(string &dest, string src, int n) */
PHP_FUNCTION(php_wxStrncat)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrncat\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	long n0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	long n1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
		#endif

		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest0_ref, &dummy, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest1, &dest_len1, &src1, &src_len1, &n1)\n");
		#endif

		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1, &n1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest1_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrncat(dest0, src0, (size_t) n0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return3;
				value_to_return3 = wxStrncat(dest0, src0, (size_t) n0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrncat(dest1, wxString(src1, wxConvUTF8), (size_t) n1).fn_str(), 1)\n\n");
				#endif

				char* value_to_return3;
				value_to_return3 = wxStrncat(dest1, wxString(src1, wxConvUTF8), (size_t) n1);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrncat()\n");
	}
}
/* }}} */

/* {{{ proto int wxStrxfrm(string &dest, string src, int n) */
PHP_FUNCTION(php_wxStrxfrm)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrxfrm\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	long n0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	long n1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
		#endif

		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest0_ref, &dummy, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest1, &dest_len1, &src1, &src_len1, &n1)\n");
		#endif

		char parse_parameters_string[] = "ssl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1, &n1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dest1_ref, &dummy, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrxfrm(dest0, src0, (size_t) n0))\n\n");
				#endif

				ZVAL_LONG(return_value, wxStrxfrm(dest0, src0, (size_t) n0));

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrxfrm(dest1, wxString(src1, wxConvUTF8), (size_t) n1))\n\n");
				#endif

				ZVAL_LONG(return_value, wxStrxfrm(dest1, wxString(src1, wxConvUTF8), (size_t) n1));

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrxfrm()\n");
	}
}
/* }}} */

/* {{{ proto string wxStrstr(string haystack, string needle) */
PHP_FUNCTION(php_wxStrstr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrstr\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* haystack0;
	long haystack_len0;
	char* needle0;
	long needle_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* haystack1;
	long haystack_len1;
	char* needle1;
	long needle_len1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* haystack2;
	long haystack_len2;
	char* needle2;
	long needle_len2;
	bool overload2_called = false;
	//Parameters for overload 3
	char* haystack3;
	long haystack_len3;
	char* needle3;
	long needle_len3;
	bool overload3_called = false;
	//Parameters for overload 4
	char* haystack4;
	long haystack_len4;
	zval* haystack4_ref;
	char* needle4;
	long needle_len4;
	bool overload4_called = false;
	//Parameters for overload 5
	char* haystack5;
	long haystack_len5;
	zval* haystack5_ref;
	char* needle5;
	long needle_len5;
	bool overload5_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack0, &haystack_len0, &needle0, &needle_len0)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &haystack0, &haystack_len0, &needle0, &needle_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack1, &haystack_len1, &needle1, &needle_len1)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &haystack1, &haystack_len1, &needle1, &needle_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack2, &haystack_len2, &needle2, &needle_len2)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &haystack2, &haystack_len2, &needle2, &needle_len2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack3, &haystack_len3, &needle3, &needle_len3)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &haystack3, &haystack_len3, &needle3, &needle_len3 ) == SUCCESS)
		{
			overload3_called = true;
			already_called = true;
		}
	}

	//Overload 4
	overload4:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack4, &haystack_len4, &needle4, &needle_len4)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &haystack4, &haystack_len4, &needle4, &needle_len4 ) == SUCCESS)
		{
			overload4_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &haystack4_ref, &dummy );
		}
	}

	//Overload 5
	overload5:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack5, &haystack_len5, &needle5, &needle_len5)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &haystack5, &haystack_len5, &needle5, &needle_len5 ) == SUCCESS)
		{
			overload5_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &haystack5_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(haystack0, needle0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrstr(haystack0, needle0));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(haystack1, wxString(needle1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrstr(haystack1, wxString(needle1, wxConvUTF8)));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(wxString(haystack2, wxConvUTF8), wxString(needle2, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrstr(wxString(haystack2, wxConvUTF8), wxString(needle2, wxConvUTF8)));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(wxString(haystack3, wxConvUTF8), needle3).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrstr(wxString(haystack3, wxConvUTF8), needle3));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload4_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(haystack4, needle4).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = wxStrstr(haystack4, needle4);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(haystack4_ref, haystack4, 1);

				return;
				break;
			}
		}
	}

	if(overload5_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(haystack5, wxString(needle5, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = wxStrstr(haystack5, wxString(needle5, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(haystack5_ref, haystack5, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrstr()\n");
	}
}
/* }}} */

/* {{{ proto string wxStrchr(string s, string c) */
PHP_FUNCTION(php_wxStrchr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrchr\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	long c0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* s1;
	long s_len1;
	long c1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* s2;
	long s_len2;
	long c2;
	bool overload2_called = false;
	//Parameters for overload 3
	char* s3;
	long s_len3;
	zval* s3_ref;
	long c3;
	bool overload3_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s0, &s_len0, &c0)\n");
		#endif

		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0, &c0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s1, &s_len1, &c1)\n");
		#endif

		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s1, &s_len1, &c1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s2, &s_len2, &c2)\n");
		#endif

		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s2, &s_len2, &c2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s3, &s_len3, &c3)\n");
		#endif

		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s3, &s_len3, &c3 ) == SUCCESS)
		{
			overload3_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &s3_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrchr(s0, (char) c0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrchr(s0, (char) c0));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrchr(wxString(s1, wxConvUTF8), (char) c1).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrchr(wxString(s1, wxConvUTF8), (char) c1));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrchr(wxString(s2, wxConvUTF8), (int) c2).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrchr(wxString(s2, wxConvUTF8), (int) c2));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrchr(s3, (char) c3).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = wxStrchr(s3, (char) c3);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(s3_ref, s3, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrchr()\n");
	}
}
/* }}} */

/* {{{ proto string wxStrrchr(string s, string c) */
PHP_FUNCTION(php_wxStrrchr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrrchr\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	long c0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* s1;
	long s_len1;
	long c1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* s2;
	long s_len2;
	long c2;
	bool overload2_called = false;
	//Parameters for overload 3
	char* s3;
	long s_len3;
	zval* s3_ref;
	long c3;
	bool overload3_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s0, &s_len0, &c0)\n");
		#endif

		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0, &c0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s1, &s_len1, &c1)\n");
		#endif

		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s1, &s_len1, &c1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s2, &s_len2, &c2)\n");
		#endif

		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s2, &s_len2, &c2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s3, &s_len3, &c3)\n");
		#endif

		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s3, &s_len3, &c3 ) == SUCCESS)
		{
			overload3_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &s3_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrrchr(s0, (char) c0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrrchr(s0, (char) c0));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrrchr(wxString(s1, wxConvUTF8), (char) c1).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrrchr(wxString(s1, wxConvUTF8), (char) c1));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrrchr(wxString(s2, wxConvUTF8), (int) c2).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrrchr(wxString(s2, wxConvUTF8), (int) c2));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrrchr(s3, (char) c3).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = wxStrrchr(s3, (char) c3);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(s3_ref, s3, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrrchr()\n");
	}
}
/* }}} */

/* {{{ proto string wxStrpbrk(string s, string accept) */
PHP_FUNCTION(php_wxStrpbrk)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrpbrk\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	char* accept0;
	long accept_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* s1;
	long s_len1;
	char* accept1;
	long accept_len1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* s2;
	long s_len2;
	char* accept2;
	long accept_len2;
	bool overload2_called = false;
	//Parameters for overload 3
	char* s3;
	long s_len3;
	char* accept3;
	long accept_len3;
	bool overload3_called = false;
	//Parameters for overload 4
	char* s4;
	long s_len4;
	zval* s4_ref;
	char* accept4;
	long accept_len4;
	bool overload4_called = false;
	//Parameters for overload 5
	char* s5;
	long s_len5;
	zval* s5_ref;
	char* accept5;
	long accept_len5;
	bool overload5_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s0, &s_len0, &accept0, &accept_len0)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0, &s_len0, &accept0, &accept_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s1, &s_len1, &accept1, &accept_len1)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s1, &s_len1, &accept1, &accept_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s2, &s_len2, &accept2, &accept_len2)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s2, &s_len2, &accept2, &accept_len2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s3, &s_len3, &accept3, &accept_len3)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s3, &s_len3, &accept3, &accept_len3 ) == SUCCESS)
		{
			overload3_called = true;
			already_called = true;
		}
	}

	//Overload 4
	overload4:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s4, &s_len4, &accept4, &accept_len4)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s4, &s_len4, &accept4, &accept_len4 ) == SUCCESS)
		{
			overload4_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &s4_ref, &dummy );
		}
	}

	//Overload 5
	overload5:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s5, &s_len5, &accept5, &accept_len5)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s5, &s_len5, &accept5, &accept_len5 ) == SUCCESS)
		{
			overload5_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &s5_ref, &dummy );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(s0, accept0).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrpbrk(s0, accept0));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(s1, wxString(accept1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrpbrk(s1, wxString(accept1, wxConvUTF8)));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(wxString(s2, wxConvUTF8), wxString(accept2, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrpbrk(wxString(s2, wxConvUTF8), wxString(accept2, wxConvUTF8)));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(wxString(s3, wxConvUTF8), accept3).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = const_cast<char*>(wxStrpbrk(wxString(s3, wxConvUTF8), accept3));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	if(overload4_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(s4, accept4).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = wxStrpbrk(s4, accept4);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(s4_ref, s4, 1);

				return;
				break;
			}
		}
	}

	if(overload5_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(s5, wxString(accept5, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				char* value_to_return2;
				value_to_return2 = wxStrpbrk(s5, wxString(accept5, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(s5_ref, s5, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxStrpbrk()\n");
	}
}
/* }}} */

/* {{{ proto int wxRemove(string path) */
PHP_FUNCTION(php_wxRemove)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRemove\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* path0;
	long path_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&path0, &path_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &path0, &path_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxRemove(wxString(path0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_LONG(return_value, wxRemove(wxString(path0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxRemove()\n");
	}
}
/* }}} */

/* {{{ proto int wxRename(string oldpath, string newpath) */
PHP_FUNCTION(php_wxRename)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRename\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* oldpath0;
	long oldpath_len0;
	char* newpath0;
	long newpath_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&oldpath0, &oldpath_len0, &newpath0, &newpath_len0)\n");
		#endif

		char parse_parameters_string[] = "ss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &oldpath0, &oldpath_len0, &newpath0, &newpath_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxRename(wxString(oldpath0, wxConvUTF8), wxString(newpath0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_LONG(return_value, wxRename(wxString(oldpath0, wxConvUTF8), wxString(newpath0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxRename()\n");
	}
}
/* }}} */

/* {{{ proto int wxAtoi(string str) */
PHP_FUNCTION(php_wxAtoi)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxAtoi\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxAtoi(wxString(str0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_LONG(return_value, wxAtoi(wxString(str0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxAtoi()\n");
	}
}
/* }}} */

/* {{{ proto int wxAtol(string str) */
PHP_FUNCTION(php_wxAtol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxAtol\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxAtol(wxString(str0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_LONG(return_value, wxAtol(wxString(str0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxAtol()\n");
	}
}
/* }}} */

/* {{{ proto float wxAtof(string str) */
PHP_FUNCTION(php_wxAtof)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxAtof\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxAtof(wxString(str0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_DOUBLE(return_value, wxAtof(wxString(str0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxAtof()\n");
	}
}
/* }}} */

/* {{{ proto int wxSystem(string str) */
PHP_FUNCTION(php_wxSystem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSystem\n");
	php_printf("===========================================\n");
	#endif
	
	void* argument_native_object = NULL;
	
	//Variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	bool return_is_user_initialized = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxSystem(wxString(str0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_LONG(return_value, wxSystem(wxString(str0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to wxSystem()\n");
	}
}
/* }}} */

/* {{{ proto  wxDynamicCast() */
PHP_FUNCTION(php_wxDynamicCast)
{
	zval* object = 0;
	char* object_type;
	int object_type_len = 0;
	void* native_object = 0;
	
	char parse_parameters[] = "z!s!";
	
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, parse_parameters, &object , &object_type , &object_type_len ) == SUCCESS)
	{
		if(Z_TYPE_P(object) == IS_OBJECT)
		{
			native_object = (void*) ((zo_wxObject*) zend_object_store_get_object(object TSRMLS_CC))->native_object;
			
			if(!native_object)
			{
				zend_error(E_ERROR, "Could not retreive native object of argument 1\n");
			}
		}
		else
		{
			zend_error(E_ERROR, "Argument 1 is not an object\n");
		}
		
		if(!strcmp(object_type, "wxScrolledWindow"))
		{
			object_init_ex(return_value, php_wxScrolledWindow_entry);
			wxScrolledWindow* return_native_object = wxDynamicCast(native_object, wxScrolledWindow_php);
			((zo_wxScrolledWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxScrolledWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFrame"))
		{
			object_init_ex(return_value, php_wxFrame_entry);
			wxFrame* return_native_object = wxDynamicCast(native_object, wxFrame_php);
			((zo_wxFrame*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFrame_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTopLevelWindow"))
		{
			object_init_ex(return_value, php_wxTopLevelWindow_entry);
			wxTopLevelWindow* return_native_object = wxDynamicCast(native_object, wxTopLevelWindow_php);
			((zo_wxTopLevelWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTopLevelWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxNonOwnedWindow"))
		{
			object_init_ex(return_value, php_wxNonOwnedWindow_entry);
			wxNonOwnedWindow* return_native_object = wxDynamicCast(native_object, wxNonOwnedWindow_php);
			((zo_wxNonOwnedWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxNonOwnedWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxWindow"))
		{
			object_init_ex(return_value, php_wxWindow_entry);
			wxWindow* return_native_object = wxDynamicCast(native_object, wxWindow_php);
			((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxEvtHandler"))
		{
			object_init_ex(return_value, php_wxEvtHandler_entry);
			wxEvtHandler* return_native_object = wxDynamicCast(native_object, wxEvtHandler_php);
			((zo_wxEvtHandler*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxEvtHandler_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxStatusBar"))
		{
			object_init_ex(return_value, php_wxStatusBar_entry);
			wxStatusBar* return_native_object = wxDynamicCast(native_object, wxStatusBar_php);
			((zo_wxStatusBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStatusBar_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxButton"))
		{
			object_init_ex(return_value, php_wxButton_entry);
			wxButton* return_native_object = wxDynamicCast(native_object, wxButton_php);
			((zo_wxButton*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxButton_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxAnyButton"))
		{
			object_init_ex(return_value, php_wxAnyButton_entry);
			wxAnyButton* return_native_object = wxDynamicCast(native_object, wxAnyButton_php);
			((zo_wxAnyButton*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxAnyButton_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxControl"))
		{
			object_init_ex(return_value, php_wxControl_entry);
			wxControl* return_native_object = wxDynamicCast(native_object, wxControl_php);
			((zo_wxControl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxControl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxValidator"))
		{
			object_init_ex(return_value, php_wxValidator_entry);
			wxValidator* return_native_object = wxDynamicCast(native_object, wxValidator_php);
			((zo_wxValidator*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxValidator_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxBitmapHandler"))
		{
			object_init_ex(return_value, php_wxBitmapHandler_entry);
			wxBitmapHandler* return_native_object = wxDynamicCast(native_object, wxBitmapHandler_php);
			((zo_wxBitmapHandler*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBitmapHandler_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxBitmap"))
		{
			object_init_ex(return_value, php_wxBitmap_entry);
			wxBitmap* return_native_object = wxDynamicCast(native_object, wxBitmap_php);
			((zo_wxBitmap*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBitmap_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPalette"))
		{
			object_init_ex(return_value, php_wxPalette_entry);
			wxPalette* return_native_object = wxDynamicCast(native_object, wxPalette_php);
			((zo_wxPalette*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPalette_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxImage"))
		{
			object_init_ex(return_value, php_wxImage_entry);
			wxImage* return_native_object = wxDynamicCast(native_object, wxImage_php);
			((zo_wxImage*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxImage_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxIcon"))
		{
			object_init_ex(return_value, php_wxIcon_entry);
			wxIcon* return_native_object = wxDynamicCast(native_object, wxIcon_php);
			((zo_wxIcon*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxIcon_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSplitterWindow"))
		{
			object_init_ex(return_value, php_wxSplitterWindow_entry);
			wxSplitterWindow* return_native_object = wxDynamicCast(native_object, wxSplitterWindow_php);
			((zo_wxSplitterWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSplitterWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxBoxSizer"))
		{
			object_init_ex(return_value, php_wxBoxSizer_entry);
			wxBoxSizer* return_native_object = wxDynamicCast(native_object, wxBoxSizer_php);
			((zo_wxBoxSizer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBoxSizer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSizer"))
		{
			object_init_ex(return_value, php_wxSizer_entry);
			wxSizer* return_native_object = wxDynamicCast(native_object, wxSizer_php);
			((zo_wxSizer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSizer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSizerItem"))
		{
			object_init_ex(return_value, php_wxSizerItem_entry);
			wxSizerItem* return_native_object = wxDynamicCast(native_object, wxSizerItem_php);
			((zo_wxSizerItem*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSizerItem_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTreeCtrl"))
		{
			object_init_ex(return_value, php_wxTreeCtrl_entry);
			wxTreeCtrl* return_native_object = wxDynamicCast(native_object, wxTreeCtrl_php);
			((zo_wxTreeCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTreeCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxImageList"))
		{
			object_init_ex(return_value, php_wxImageList_entry);
			wxImageList* return_native_object = wxDynamicCast(native_object, wxImageList_php);
			((zo_wxImageList*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxImageList_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDC"))
		{
			object_init_ex(return_value, php_wxDC_entry);
			wxDC* return_native_object = wxDynamicCast(native_object, wxDC_php);
			((zo_wxDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDC_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxColour"))
		{
			object_init_ex(return_value, php_wxColour_entry);
			wxColour* return_native_object = wxDynamicCast(native_object, wxColour_php);
			((zo_wxColour*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxColour_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFont"))
		{
			object_init_ex(return_value, php_wxFont_entry);
			wxFont* return_native_object = wxDynamicCast(native_object, wxFont_php);
			((zo_wxFont*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFont_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPanel"))
		{
			object_init_ex(return_value, php_wxPanel_entry);
			wxPanel* return_native_object = wxDynamicCast(native_object, wxPanel_php);
			((zo_wxPanel*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPanel_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxCheckListBox"))
		{
			object_init_ex(return_value, php_wxCheckListBox_entry);
			wxCheckListBox* return_native_object = wxDynamicCast(native_object, wxCheckListBox_php);
			((zo_wxCheckListBox*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxCheckListBox_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxListBox"))
		{
			object_init_ex(return_value, php_wxListBox_entry);
			wxListBox* return_native_object = wxDynamicCast(native_object, wxListBox_php);
			((zo_wxListBox*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxListBox_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxControlWithItems"))
		{
			object_init_ex(return_value, php_wxControlWithItems_entry);
			wxControlWithItems* return_native_object = wxDynamicCast(native_object, wxControlWithItems_php);
			((zo_wxControlWithItems*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxControlWithItems_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMenuBar"))
		{
			object_init_ex(return_value, php_wxMenuBar_entry);
			wxMenuBar* return_native_object = wxDynamicCast(native_object, wxMenuBar_php);
			((zo_wxMenuBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMenuBar_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMenuEvent"))
		{
			object_init_ex(return_value, php_wxMenuEvent_entry);
			wxMenuEvent* return_native_object = wxDynamicCast(native_object, wxMenuEvent_php);
			((zo_wxMenuEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMenuEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMenuItem"))
		{
			object_init_ex(return_value, php_wxMenuItem_entry);
			wxMenuItem* return_native_object = wxDynamicCast(native_object, wxMenuItem_php);
			((zo_wxMenuItem*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMenuItem_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMenu"))
		{
			object_init_ex(return_value, php_wxMenu_entry);
			wxMenu* return_native_object = wxDynamicCast(native_object, wxMenu_php);
			((zo_wxMenu*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMenu_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxEvent"))
		{
			object_init_ex(return_value, php_wxEvent_entry);
			wxEvent* return_native_object = wxDynamicCast(native_object, wxEvent_php);
			((zo_wxEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTreeEvent"))
		{
			object_init_ex(return_value, php_wxTreeEvent_entry);
			wxTreeEvent* return_native_object = wxDynamicCast(native_object, wxTreeEvent_php);
			((zo_wxTreeEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTreeEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxKeyEvent"))
		{
			object_init_ex(return_value, php_wxKeyEvent_entry);
			wxKeyEvent* return_native_object = wxDynamicCast(native_object, wxKeyEvent_php);
			((zo_wxKeyEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxKeyEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxNotifyEvent"))
		{
			object_init_ex(return_value, php_wxNotifyEvent_entry);
			wxNotifyEvent* return_native_object = wxDynamicCast(native_object, wxNotifyEvent_php);
			((zo_wxNotifyEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxNotifyEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxCommandEvent"))
		{
			object_init_ex(return_value, php_wxCommandEvent_entry);
			wxCommandEvent* return_native_object = wxDynamicCast(native_object, wxCommandEvent_php);
			((zo_wxCommandEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxCommandEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxCloseEvent"))
		{
			object_init_ex(return_value, php_wxCloseEvent_entry);
			wxCloseEvent* return_native_object = wxDynamicCast(native_object, wxCloseEvent_php);
			((zo_wxCloseEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxCloseEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxActivateEvent"))
		{
			object_init_ex(return_value, php_wxActivateEvent_entry);
			wxActivateEvent* return_native_object = wxDynamicCast(native_object, wxActivateEvent_php);
			((zo_wxActivateEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxActivateEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxAuiManager"))
		{
			object_init_ex(return_value, php_wxAuiManager_entry);
			wxAuiManager* return_native_object = wxDynamicCast(native_object, wxAuiManager_php);
			((zo_wxAuiManager*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxAuiManager_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxAuiManagerEvent"))
		{
			object_init_ex(return_value, php_wxAuiManagerEvent_entry);
			wxAuiManagerEvent* return_native_object = wxDynamicCast(native_object, wxAuiManagerEvent_php);
			((zo_wxAuiManagerEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxAuiManagerEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxAuiNotebook"))
		{
			object_init_ex(return_value, php_wxAuiNotebook_entry);
			wxAuiNotebook* return_native_object = wxDynamicCast(native_object, wxAuiNotebook_php);
			((zo_wxAuiNotebook*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxAuiNotebook_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxAuiNotebookEvent"))
		{
			object_init_ex(return_value, php_wxAuiNotebookEvent_entry);
			wxAuiNotebookEvent* return_native_object = wxDynamicCast(native_object, wxAuiNotebookEvent_php);
			((zo_wxAuiNotebookEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxAuiNotebookEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxBookCtrlEvent"))
		{
			object_init_ex(return_value, php_wxBookCtrlEvent_entry);
			wxBookCtrlEvent* return_native_object = wxDynamicCast(native_object, wxBookCtrlEvent_php);
			((zo_wxBookCtrlEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBookCtrlEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxBookCtrlBase"))
		{
			object_init_ex(return_value, php_wxBookCtrlBase_entry);
			wxBookCtrlBase* return_native_object = wxDynamicCast(native_object, wxBookCtrlBase_php);
			((zo_wxBookCtrlBase*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBookCtrlBase_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxAcceleratorTable"))
		{
			object_init_ex(return_value, php_wxAcceleratorTable_entry);
			wxAcceleratorTable* return_native_object = wxDynamicCast(native_object, wxAcceleratorTable_php);
			((zo_wxAcceleratorTable*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxAcceleratorTable_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGDIObject"))
		{
			object_init_ex(return_value, php_wxGDIObject_entry);
			wxGDIObject* return_native_object = wxDynamicCast(native_object, wxGDIObject_php);
			((zo_wxGDIObject*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGDIObject_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxAnimation"))
		{
			object_init_ex(return_value, php_wxAnimation_entry);
			wxAnimation* return_native_object = wxDynamicCast(native_object, wxAnimation_php);
			((zo_wxAnimation*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxAnimation_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxAnimationCtrl"))
		{
			object_init_ex(return_value, php_wxAnimationCtrl_entry);
			wxAnimationCtrl* return_native_object = wxDynamicCast(native_object, wxAnimationCtrl_php);
			((zo_wxAnimationCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxAnimationCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxArtProvider"))
		{
			object_init_ex(return_value, php_wxArtProvider_entry);
			wxArtProvider* return_native_object = wxDynamicCast(native_object, wxArtProvider_php);
			((zo_wxArtProvider*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxArtProvider_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxIconBundle"))
		{
			object_init_ex(return_value, php_wxIconBundle_entry);
			wxIconBundle* return_native_object = wxDynamicCast(native_object, wxIconBundle_php);
			((zo_wxIconBundle*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxIconBundle_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxStyledTextCtrl"))
		{
			object_init_ex(return_value, php_wxStyledTextCtrl_entry);
			wxStyledTextCtrl* return_native_object = wxDynamicCast(native_object, wxStyledTextCtrl_php);
			((zo_wxStyledTextCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStyledTextCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxStyledTextEvent"))
		{
			object_init_ex(return_value, php_wxStyledTextEvent_entry);
			wxStyledTextEvent* return_native_object = wxDynamicCast(native_object, wxStyledTextEvent_php);
			((zo_wxStyledTextEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStyledTextEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxScrollBar"))
		{
			object_init_ex(return_value, php_wxScrollBar_entry);
			wxScrollBar* return_native_object = wxDynamicCast(native_object, wxScrollBar_php);
			((zo_wxScrollBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxScrollBar_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxStaticText"))
		{
			object_init_ex(return_value, php_wxStaticText_entry);
			wxStaticText* return_native_object = wxDynamicCast(native_object, wxStaticText_php);
			((zo_wxStaticText*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStaticText_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxStaticLine"))
		{
			object_init_ex(return_value, php_wxStaticLine_entry);
			wxStaticLine* return_native_object = wxDynamicCast(native_object, wxStaticLine_php);
			((zo_wxStaticLine*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStaticLine_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxStaticBoxSizer"))
		{
			object_init_ex(return_value, php_wxStaticBoxSizer_entry);
			wxStaticBoxSizer* return_native_object = wxDynamicCast(native_object, wxStaticBoxSizer_php);
			((zo_wxStaticBoxSizer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStaticBoxSizer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxStaticBox"))
		{
			object_init_ex(return_value, php_wxStaticBox_entry);
			wxStaticBox* return_native_object = wxDynamicCast(native_object, wxStaticBox_php);
			((zo_wxStaticBox*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStaticBox_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxStaticBitmap"))
		{
			object_init_ex(return_value, php_wxStaticBitmap_entry);
			wxStaticBitmap* return_native_object = wxDynamicCast(native_object, wxStaticBitmap_php);
			((zo_wxStaticBitmap*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStaticBitmap_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxCheckBox"))
		{
			object_init_ex(return_value, php_wxCheckBox_entry);
			wxCheckBox* return_native_object = wxDynamicCast(native_object, wxCheckBox_php);
			((zo_wxCheckBox*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxCheckBox_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxWrapSizer"))
		{
			object_init_ex(return_value, php_wxWrapSizer_entry);
			wxWrapSizer* return_native_object = wxDynamicCast(native_object, wxWrapSizer_php);
			((zo_wxWrapSizer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWrapSizer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxBitmapButton"))
		{
			object_init_ex(return_value, php_wxBitmapButton_entry);
			wxBitmapButton* return_native_object = wxDynamicCast(native_object, wxBitmapButton_php);
			((zo_wxBitmapButton*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBitmapButton_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTextCtrl"))
		{
			object_init_ex(return_value, php_wxTextCtrl_entry);
			wxTextCtrl* return_native_object = wxDynamicCast(native_object, wxTextCtrl_php);
			((zo_wxTextCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTextCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTextEntryDialog"))
		{
			object_init_ex(return_value, php_wxTextEntryDialog_entry);
			wxTextEntryDialog* return_native_object = wxDynamicCast(native_object, wxTextEntryDialog_php);
			((zo_wxTextEntryDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTextEntryDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxComboBox"))
		{
			object_init_ex(return_value, php_wxComboBox_entry);
			wxComboBox* return_native_object = wxDynamicCast(native_object, wxComboBox_php);
			((zo_wxComboBox*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxComboBox_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxBitmapComboBox"))
		{
			object_init_ex(return_value, php_wxBitmapComboBox_entry);
			wxBitmapComboBox* return_native_object = wxDynamicCast(native_object, wxBitmapComboBox_php);
			((zo_wxBitmapComboBox*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBitmapComboBox_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxAuiToolBarEvent"))
		{
			object_init_ex(return_value, php_wxAuiToolBarEvent_entry);
			wxAuiToolBarEvent* return_native_object = wxDynamicCast(native_object, wxAuiToolBarEvent_php);
			((zo_wxAuiToolBarEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxAuiToolBarEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxAuiToolBar"))
		{
			object_init_ex(return_value, php_wxAuiToolBar_entry);
			wxAuiToolBar* return_native_object = wxDynamicCast(native_object, wxAuiToolBar_php);
			((zo_wxAuiToolBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxAuiToolBar_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxBannerWindow"))
		{
			object_init_ex(return_value, php_wxBannerWindow_entry);
			wxBannerWindow* return_native_object = wxDynamicCast(native_object, wxBannerWindow_php);
			((zo_wxBannerWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBannerWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxChoice"))
		{
			object_init_ex(return_value, php_wxChoice_entry);
			wxChoice* return_native_object = wxDynamicCast(native_object, wxChoice_php);
			((zo_wxChoice*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxChoice_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxListEvent"))
		{
			object_init_ex(return_value, php_wxListEvent_entry);
			wxListEvent* return_native_object = wxDynamicCast(native_object, wxListEvent_php);
			((zo_wxListEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxListEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxListCtrl"))
		{
			object_init_ex(return_value, php_wxListCtrl_entry);
			wxListCtrl* return_native_object = wxDynamicCast(native_object, wxListCtrl_php);
			((zo_wxListCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxListCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxListbook"))
		{
			object_init_ex(return_value, php_wxListbook_entry);
			wxListbook* return_native_object = wxDynamicCast(native_object, wxListbook_php);
			((zo_wxListbook*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxListbook_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxChildFocusEvent"))
		{
			object_init_ex(return_value, php_wxChildFocusEvent_entry);
			wxChildFocusEvent* return_native_object = wxDynamicCast(native_object, wxChildFocusEvent_php);
			((zo_wxChildFocusEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxChildFocusEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxChoicebook"))
		{
			object_init_ex(return_value, php_wxChoicebook_entry);
			wxChoicebook* return_native_object = wxDynamicCast(native_object, wxChoicebook_php);
			((zo_wxChoicebook*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxChoicebook_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRadioBox"))
		{
			object_init_ex(return_value, php_wxRadioBox_entry);
			wxRadioBox* return_native_object = wxDynamicCast(native_object, wxRadioBox_php);
			((zo_wxRadioBox*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRadioBox_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRadioButton"))
		{
			object_init_ex(return_value, php_wxRadioButton_entry);
			wxRadioButton* return_native_object = wxDynamicCast(native_object, wxRadioButton_php);
			((zo_wxRadioButton*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRadioButton_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRearrangeList"))
		{
			object_init_ex(return_value, php_wxRearrangeList_entry);
			wxRearrangeList* return_native_object = wxDynamicCast(native_object, wxRearrangeList_php);
			((zo_wxRearrangeList*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRearrangeList_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSlider"))
		{
			object_init_ex(return_value, php_wxSlider_entry);
			wxSlider* return_native_object = wxDynamicCast(native_object, wxSlider_php);
			((zo_wxSlider*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSlider_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSpinCtrl"))
		{
			object_init_ex(return_value, php_wxSpinCtrl_entry);
			wxSpinCtrl* return_native_object = wxDynamicCast(native_object, wxSpinCtrl_php);
			((zo_wxSpinCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSpinCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSpinButton"))
		{
			object_init_ex(return_value, php_wxSpinButton_entry);
			wxSpinButton* return_native_object = wxDynamicCast(native_object, wxSpinButton_php);
			((zo_wxSpinButton*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSpinButton_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSpinEvent"))
		{
			object_init_ex(return_value, php_wxSpinEvent_entry);
			wxSpinEvent* return_native_object = wxDynamicCast(native_object, wxSpinEvent_php);
			((zo_wxSpinEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSpinEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSplitterEvent"))
		{
			object_init_ex(return_value, php_wxSplitterEvent_entry);
			wxSplitterEvent* return_native_object = wxDynamicCast(native_object, wxSplitterEvent_php);
			((zo_wxSplitterEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSplitterEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSplashScreen"))
		{
			object_init_ex(return_value, php_wxSplashScreen_entry);
			wxSplashScreen* return_native_object = wxDynamicCast(native_object, wxSplashScreen_php);
			((zo_wxSplashScreen*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSplashScreen_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSizeEvent"))
		{
			object_init_ex(return_value, php_wxSizeEvent_entry);
			wxSizeEvent* return_native_object = wxDynamicCast(native_object, wxSizeEvent_php);
			((zo_wxSizeEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSizeEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGauge"))
		{
			object_init_ex(return_value, php_wxGauge_entry);
			wxGauge* return_native_object = wxDynamicCast(native_object, wxGauge_php);
			((zo_wxGauge*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGauge_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlWindow"))
		{
			object_init_ex(return_value, php_wxHtmlWindow_entry);
			wxHtmlWindow* return_native_object = wxDynamicCast(native_object, wxHtmlWindow_php);
			((zo_wxHtmlWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlContainerCell"))
		{
			object_init_ex(return_value, php_wxHtmlContainerCell_entry);
			wxHtmlContainerCell* return_native_object = wxDynamicCast(native_object, wxHtmlContainerCell_php);
			((zo_wxHtmlContainerCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlContainerCell_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlCell"))
		{
			object_init_ex(return_value, php_wxHtmlCell_entry);
			wxHtmlCell* return_native_object = wxDynamicCast(native_object, wxHtmlCell_php);
			((zo_wxHtmlCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlCell_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlCellEvent"))
		{
			object_init_ex(return_value, php_wxHtmlCellEvent_entry);
			wxHtmlCellEvent* return_native_object = wxDynamicCast(native_object, wxHtmlCellEvent_php);
			((zo_wxHtmlCellEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlCellEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlColourCell"))
		{
			object_init_ex(return_value, php_wxHtmlColourCell_entry);
			wxHtmlColourCell* return_native_object = wxDynamicCast(native_object, wxHtmlColourCell_php);
			((zo_wxHtmlColourCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlColourCell_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlEasyPrinting"))
		{
			object_init_ex(return_value, php_wxHtmlEasyPrinting_entry);
			wxHtmlEasyPrinting* return_native_object = wxDynamicCast(native_object, wxHtmlEasyPrinting_php);
			((zo_wxHtmlEasyPrinting*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlEasyPrinting_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlLinkEvent"))
		{
			object_init_ex(return_value, php_wxHtmlLinkEvent_entry);
			wxHtmlLinkEvent* return_native_object = wxDynamicCast(native_object, wxHtmlLinkEvent_php);
			((zo_wxHtmlLinkEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlLinkEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlLinkInfo"))
		{
			object_init_ex(return_value, php_wxHtmlLinkInfo_entry);
			wxHtmlLinkInfo* return_native_object = wxDynamicCast(native_object, wxHtmlLinkInfo_php);
			((zo_wxHtmlLinkInfo*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlLinkInfo_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMouseEvent"))
		{
			object_init_ex(return_value, php_wxMouseEvent_entry);
			wxMouseEvent* return_native_object = wxDynamicCast(native_object, wxMouseEvent_php);
			((zo_wxMouseEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMouseEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMoveEvent"))
		{
			object_init_ex(return_value, php_wxMoveEvent_entry);
			wxMoveEvent* return_native_object = wxDynamicCast(native_object, wxMoveEvent_php);
			((zo_wxMoveEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMoveEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMouseEventsManager"))
		{
			object_init_ex(return_value, php_wxMouseEventsManager_entry);
			wxMouseEventsManager* return_native_object = wxDynamicCast(native_object, wxMouseEventsManager_php);
			((zo_wxMouseEventsManager*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMouseEventsManager_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMessageDialog"))
		{
			object_init_ex(return_value, php_wxMessageDialog_entry);
			wxMessageDialog* return_native_object = wxDynamicCast(native_object, wxMessageDialog_php);
			((zo_wxMessageDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMessageDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHyperlinkCtrl"))
		{
			object_init_ex(return_value, php_wxHyperlinkCtrl_entry);
			wxHyperlinkCtrl* return_native_object = wxDynamicCast(native_object, wxHyperlinkCtrl_php);
			((zo_wxHyperlinkCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHyperlinkCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHyperlinkEvent"))
		{
			object_init_ex(return_value, php_wxHyperlinkEvent_entry);
			wxHyperlinkEvent* return_native_object = wxDynamicCast(native_object, wxHyperlinkEvent_php);
			((zo_wxHyperlinkEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHyperlinkEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxCursor"))
		{
			object_init_ex(return_value, php_wxCursor_entry);
			wxCursor* return_native_object = wxDynamicCast(native_object, wxCursor_php);
			((zo_wxCursor*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxCursor_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxToggleButton"))
		{
			object_init_ex(return_value, php_wxToggleButton_entry);
			wxToggleButton* return_native_object = wxDynamicCast(native_object, wxToggleButton_php);
			((zo_wxToggleButton*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxToggleButton_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTimer"))
		{
			object_init_ex(return_value, php_wxTimer_entry);
			wxTimer* return_native_object = wxDynamicCast(native_object, wxTimer_php);
			((zo_wxTimer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTimer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTimerEvent"))
		{
			object_init_ex(return_value, php_wxTimerEvent_entry);
			wxTimerEvent* return_native_object = wxDynamicCast(native_object, wxTimerEvent_php);
			((zo_wxTimerEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTimerEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxThreadEvent"))
		{
			object_init_ex(return_value, php_wxThreadEvent_entry);
			wxThreadEvent* return_native_object = wxDynamicCast(native_object, wxThreadEvent_php);
			((zo_wxThreadEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxThreadEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSearchCtrl"))
		{
			object_init_ex(return_value, php_wxSearchCtrl_entry);
			wxSearchCtrl* return_native_object = wxDynamicCast(native_object, wxSearchCtrl_php);
			((zo_wxSearchCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSearchCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxColourPickerEvent"))
		{
			object_init_ex(return_value, php_wxColourPickerEvent_entry);
			wxColourPickerEvent* return_native_object = wxDynamicCast(native_object, wxColourPickerEvent_php);
			((zo_wxColourPickerEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxColourPickerEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxColourPickerCtrl"))
		{
			object_init_ex(return_value, php_wxColourPickerCtrl_entry);
			wxColourPickerCtrl* return_native_object = wxDynamicCast(native_object, wxColourPickerCtrl_php);
			((zo_wxColourPickerCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxColourPickerCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFontPickerCtrl"))
		{
			object_init_ex(return_value, php_wxFontPickerCtrl_entry);
			wxFontPickerCtrl* return_native_object = wxDynamicCast(native_object, wxFontPickerCtrl_php);
			((zo_wxFontPickerCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFontPickerCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFontPickerEvent"))
		{
			object_init_ex(return_value, php_wxFontPickerEvent_entry);
			wxFontPickerEvent* return_native_object = wxDynamicCast(native_object, wxFontPickerEvent_php);
			((zo_wxFontPickerEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFontPickerEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFilePickerCtrl"))
		{
			object_init_ex(return_value, php_wxFilePickerCtrl_entry);
			wxFilePickerCtrl* return_native_object = wxDynamicCast(native_object, wxFilePickerCtrl_php);
			((zo_wxFilePickerCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFilePickerCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFindReplaceDialog"))
		{
			object_init_ex(return_value, php_wxFindReplaceDialog_entry);
			wxFindReplaceDialog* return_native_object = wxDynamicCast(native_object, wxFindReplaceDialog_php);
			((zo_wxFindReplaceDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFindReplaceDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFindReplaceData"))
		{
			object_init_ex(return_value, php_wxFindReplaceData_entry);
			wxFindReplaceData* return_native_object = wxDynamicCast(native_object, wxFindReplaceData_php);
			((zo_wxFindReplaceData*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFindReplaceData_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDirPickerCtrl"))
		{
			object_init_ex(return_value, php_wxDirPickerCtrl_entry);
			wxDirPickerCtrl* return_native_object = wxDynamicCast(native_object, wxDirPickerCtrl_php);
			((zo_wxDirPickerCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDirPickerCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDirDialog"))
		{
			object_init_ex(return_value, php_wxDirDialog_entry);
			wxDirDialog* return_native_object = wxDynamicCast(native_object, wxDirDialog_php);
			((zo_wxDirDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDirDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSpinDoubleEvent"))
		{
			object_init_ex(return_value, php_wxSpinDoubleEvent_entry);
			wxSpinDoubleEvent* return_native_object = wxDynamicCast(native_object, wxSpinDoubleEvent_php);
			((zo_wxSpinDoubleEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSpinDoubleEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSpinCtrlDouble"))
		{
			object_init_ex(return_value, php_wxSpinCtrlDouble_entry);
			wxSpinCtrlDouble* return_native_object = wxDynamicCast(native_object, wxSpinCtrlDouble_php);
			((zo_wxSpinCtrlDouble*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSpinCtrlDouble_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGenericDirCtrl"))
		{
			object_init_ex(return_value, php_wxGenericDirCtrl_entry);
			wxGenericDirCtrl* return_native_object = wxDynamicCast(native_object, wxGenericDirCtrl_php);
			((zo_wxGenericDirCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGenericDirCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGridSizeEvent"))
		{
			object_init_ex(return_value, php_wxGridSizeEvent_entry);
			wxGridSizeEvent* return_native_object = wxDynamicCast(native_object, wxGridSizeEvent_php);
			((zo_wxGridSizeEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGridSizeEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGridSizer"))
		{
			object_init_ex(return_value, php_wxGridSizer_entry);
			wxGridSizer* return_native_object = wxDynamicCast(native_object, wxGridSizer_php);
			((zo_wxGridSizer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGridSizer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFlexGridSizer"))
		{
			object_init_ex(return_value, php_wxFlexGridSizer_entry);
			wxFlexGridSizer* return_native_object = wxDynamicCast(native_object, wxFlexGridSizer_php);
			((zo_wxFlexGridSizer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFlexGridSizer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGridBagSizer"))
		{
			object_init_ex(return_value, php_wxGridBagSizer_entry);
			wxGridBagSizer* return_native_object = wxDynamicCast(native_object, wxGridBagSizer_php);
			((zo_wxGridBagSizer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGridBagSizer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxStdDialogButtonSizer"))
		{
			object_init_ex(return_value, php_wxStdDialogButtonSizer_entry);
			wxStdDialogButtonSizer* return_native_object = wxDynamicCast(native_object, wxStdDialogButtonSizer_php);
			((zo_wxStdDialogButtonSizer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStdDialogButtonSizer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxScrollEvent"))
		{
			object_init_ex(return_value, php_wxScrollEvent_entry);
			wxScrollEvent* return_native_object = wxDynamicCast(native_object, wxScrollEvent_php);
			((zo_wxScrollEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxScrollEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxScrollWinEvent"))
		{
			object_init_ex(return_value, php_wxScrollWinEvent_entry);
			wxScrollWinEvent* return_native_object = wxDynamicCast(native_object, wxScrollWinEvent_php);
			((zo_wxScrollWinEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxScrollWinEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxNotebook"))
		{
			object_init_ex(return_value, php_wxNotebook_entry);
			wxNotebook* return_native_object = wxDynamicCast(native_object, wxNotebook_php);
			((zo_wxNotebook*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxNotebook_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDialog"))
		{
			object_init_ex(return_value, php_wxDialog_entry);
			wxDialog* return_native_object = wxDynamicCast(native_object, wxDialog_php);
			((zo_wxDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSysColourChangedEvent"))
		{
			object_init_ex(return_value, php_wxSysColourChangedEvent_entry);
			wxSysColourChangedEvent* return_native_object = wxDynamicCast(native_object, wxSysColourChangedEvent_php);
			((zo_wxSysColourChangedEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSysColourChangedEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSymbolPickerDialog"))
		{
			object_init_ex(return_value, php_wxSymbolPickerDialog_entry);
			wxSymbolPickerDialog* return_native_object = wxDynamicCast(native_object, wxSymbolPickerDialog_php);
			((zo_wxSymbolPickerDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSymbolPickerDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGBSizerItem"))
		{
			object_init_ex(return_value, php_wxGBSizerItem_entry);
			wxGBSizerItem* return_native_object = wxDynamicCast(native_object, wxGBSizerItem_php);
			((zo_wxGBSizerItem*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGBSizerItem_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPopupWindow"))
		{
			object_init_ex(return_value, php_wxPopupWindow_entry);
			wxPopupWindow* return_native_object = wxDynamicCast(native_object, wxPopupWindow_php);
			((zo_wxPopupWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPopupWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMDIChildFrame"))
		{
			object_init_ex(return_value, php_wxMDIChildFrame_entry);
			wxMDIChildFrame* return_native_object = wxDynamicCast(native_object, wxMDIChildFrame_php);
			((zo_wxMDIChildFrame*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMDIChildFrame_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMDIClientWindow"))
		{
			object_init_ex(return_value, php_wxMDIClientWindow_entry);
			wxMDIClientWindow* return_native_object = wxDynamicCast(native_object, wxMDIClientWindow_php);
			((zo_wxMDIClientWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMDIClientWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMDIParentFrame"))
		{
			object_init_ex(return_value, php_wxMDIParentFrame_entry);
			wxMDIParentFrame* return_native_object = wxDynamicCast(native_object, wxMDIParentFrame_php);
			((zo_wxMDIParentFrame*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMDIParentFrame_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMiniFrame"))
		{
			object_init_ex(return_value, php_wxMiniFrame_entry);
			wxMiniFrame* return_native_object = wxDynamicCast(native_object, wxMiniFrame_php);
			((zo_wxMiniFrame*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMiniFrame_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPropertySheetDialog"))
		{
			object_init_ex(return_value, php_wxPropertySheetDialog_entry);
			wxPropertySheetDialog* return_native_object = wxDynamicCast(native_object, wxPropertySheetDialog_php);
			((zo_wxPropertySheetDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPropertySheetDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxWizard"))
		{
			object_init_ex(return_value, php_wxWizard_entry);
			wxWizard* return_native_object = wxDynamicCast(native_object, wxWizard_php);
			((zo_wxWizard*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWizard_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxWizardEvent"))
		{
			object_init_ex(return_value, php_wxWizardEvent_entry);
			wxWizardEvent* return_native_object = wxDynamicCast(native_object, wxWizardEvent_php);
			((zo_wxWizardEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWizardEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxWizardPage"))
		{
			object_init_ex(return_value, php_wxWizardPage_entry);
			wxWizardPage* return_native_object = wxDynamicCast(native_object, wxWizardPage_php);
			((zo_wxWizardPage*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWizardPage_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxWizardPageSimple"))
		{
			object_init_ex(return_value, php_wxWizardPageSimple_entry);
			wxWizardPageSimple* return_native_object = wxDynamicCast(native_object, wxWizardPageSimple_php);
			((zo_wxWizardPageSimple*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWizardPageSimple_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxWindowModalDialogEvent"))
		{
			object_init_ex(return_value, php_wxWindowModalDialogEvent_entry);
			wxWindowModalDialogEvent* return_native_object = wxDynamicCast(native_object, wxWindowModalDialogEvent_php);
			((zo_wxWindowModalDialogEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindowModalDialogEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTreebook"))
		{
			object_init_ex(return_value, php_wxTreebook_entry);
			wxTreebook* return_native_object = wxDynamicCast(native_object, wxTreebook_php);
			((zo_wxTreebook*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTreebook_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTreeListCtrl"))
		{
			object_init_ex(return_value, php_wxTreeListCtrl_entry);
			wxTreeListCtrl* return_native_object = wxDynamicCast(native_object, wxTreeListCtrl_php);
			((zo_wxTreeListCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTreeListCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSound"))
		{
			object_init_ex(return_value, php_wxSound_entry);
			wxSound* return_native_object = wxDynamicCast(native_object, wxSound_php);
			((zo_wxSound*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSound_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFileSystem"))
		{
			object_init_ex(return_value, php_wxFileSystem_entry);
			wxFileSystem* return_native_object = wxDynamicCast(native_object, wxFileSystem_php);
			((zo_wxFileSystem*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFileSystem_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFileSystemHandler"))
		{
			object_init_ex(return_value, php_wxFileSystemHandler_entry);
			wxFileSystemHandler* return_native_object = wxDynamicCast(native_object, wxFileSystemHandler_php);
			((zo_wxFileSystemHandler*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFileSystemHandler_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDateEvent"))
		{
			object_init_ex(return_value, php_wxDateEvent_entry);
			wxDateEvent* return_native_object = wxDynamicCast(native_object, wxDateEvent_php);
			((zo_wxDateEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDateEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxBitmapToggleButton"))
		{
			object_init_ex(return_value, php_wxBitmapToggleButton_entry);
			wxBitmapToggleButton* return_native_object = wxDynamicCast(native_object, wxBitmapToggleButton_php);
			((zo_wxBitmapToggleButton*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBitmapToggleButton_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxCalendarCtrl"))
		{
			object_init_ex(return_value, php_wxCalendarCtrl_entry);
			wxCalendarCtrl* return_native_object = wxDynamicCast(native_object, wxCalendarCtrl_php);
			((zo_wxCalendarCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxCalendarCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMask"))
		{
			object_init_ex(return_value, php_wxMask_entry);
			wxMask* return_native_object = wxDynamicCast(native_object, wxMask_php);
			((zo_wxMask*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMask_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxToolTip"))
		{
			object_init_ex(return_value, php_wxToolTip_entry);
			wxToolTip* return_native_object = wxDynamicCast(native_object, wxToolTip_php);
			((zo_wxToolTip*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxToolTip_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRegion"))
		{
			object_init_ex(return_value, php_wxRegion_entry);
			wxRegion* return_native_object = wxDynamicCast(native_object, wxRegion_php);
			((zo_wxRegion*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRegion_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPopupTransientWindow"))
		{
			object_init_ex(return_value, php_wxPopupTransientWindow_entry);
			wxPopupTransientWindow* return_native_object = wxDynamicCast(native_object, wxPopupTransientWindow_php);
			((zo_wxPopupTransientWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPopupTransientWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxProcessEvent"))
		{
			object_init_ex(return_value, php_wxProcessEvent_entry);
			wxProcessEvent* return_native_object = wxDynamicCast(native_object, wxProcessEvent_php);
			((zo_wxProcessEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxProcessEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxProgressDialog"))
		{
			object_init_ex(return_value, php_wxProgressDialog_entry);
			wxProgressDialog* return_native_object = wxDynamicCast(native_object, wxProgressDialog_php);
			((zo_wxProgressDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxProgressDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGraphicsRenderer"))
		{
			object_init_ex(return_value, php_wxGraphicsRenderer_entry);
			wxGraphicsRenderer* return_native_object = wxDynamicCast(native_object, wxGraphicsRenderer_php);
			((zo_wxGraphicsRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGraphicsRenderer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxWindowDC"))
		{
			object_init_ex(return_value, php_wxWindowDC_entry);
			wxWindowDC* return_native_object = wxDynamicCast(native_object, wxWindowDC_php);
			((zo_wxWindowDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindowDC_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxWindowCreateEvent"))
		{
			object_init_ex(return_value, php_wxWindowCreateEvent_entry);
			wxWindowCreateEvent* return_native_object = wxDynamicCast(native_object, wxWindowCreateEvent_php);
			((zo_wxWindowCreateEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindowCreateEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxWindowDestroyEvent"))
		{
			object_init_ex(return_value, php_wxWindowDestroyEvent_entry);
			wxWindowDestroyEvent* return_native_object = wxDynamicCast(native_object, wxWindowDestroyEvent_php);
			((zo_wxWindowDestroyEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindowDestroyEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxEventBlocker"))
		{
			object_init_ex(return_value, php_wxEventBlocker_entry);
			wxEventBlocker* return_native_object = wxDynamicCast(native_object, wxEventBlocker_php);
			((zo_wxEventBlocker*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxEventBlocker_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxEraseEvent"))
		{
			object_init_ex(return_value, php_wxEraseEvent_entry);
			wxEraseEvent* return_native_object = wxDynamicCast(native_object, wxEraseEvent_php);
			((zo_wxEraseEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxEraseEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPickerBase"))
		{
			object_init_ex(return_value, php_wxPickerBase_entry);
			wxPickerBase* return_native_object = wxDynamicCast(native_object, wxPickerBase_php);
			((zo_wxPickerBase*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPickerBase_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGridEvent"))
		{
			object_init_ex(return_value, php_wxGridEvent_entry);
			wxGridEvent* return_native_object = wxDynamicCast(native_object, wxGridEvent_php);
			((zo_wxGridEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGridEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxUpdateUIEvent"))
		{
			object_init_ex(return_value, php_wxUpdateUIEvent_entry);
			wxUpdateUIEvent* return_native_object = wxDynamicCast(native_object, wxUpdateUIEvent_php);
			((zo_wxUpdateUIEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxUpdateUIEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHelpEvent"))
		{
			object_init_ex(return_value, php_wxHelpEvent_entry);
			wxHelpEvent* return_native_object = wxDynamicCast(native_object, wxHelpEvent_php);
			((zo_wxHelpEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHelpEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxLayoutConstraints"))
		{
			object_init_ex(return_value, php_wxLayoutConstraints_entry);
			wxLayoutConstraints* return_native_object = wxDynamicCast(native_object, wxLayoutConstraints_php);
			((zo_wxLayoutConstraints*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxLayoutConstraints_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFSFile"))
		{
			object_init_ex(return_value, php_wxFSFile_entry);
			wxFSFile* return_native_object = wxDynamicCast(native_object, wxFSFile_php);
			((zo_wxFSFile*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFSFile_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTimePickerCtrl"))
		{
			object_init_ex(return_value, php_wxTimePickerCtrl_entry);
			wxTimePickerCtrl* return_native_object = wxDynamicCast(native_object, wxTimePickerCtrl_php);
			((zo_wxTimePickerCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTimePickerCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxColourDialog"))
		{
			object_init_ex(return_value, php_wxColourDialog_entry);
			wxColourDialog* return_native_object = wxDynamicCast(native_object, wxColourDialog_php);
			((zo_wxColourDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxColourDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxColourData"))
		{
			object_init_ex(return_value, php_wxColourData_entry);
			wxColourData* return_native_object = wxDynamicCast(native_object, wxColourData_php);
			((zo_wxColourData*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxColourData_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFileDialog"))
		{
			object_init_ex(return_value, php_wxFileDialog_entry);
			wxFileDialog* return_native_object = wxDynamicCast(native_object, wxFileDialog_php);
			((zo_wxFileDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFileDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFontData"))
		{
			object_init_ex(return_value, php_wxFontData_entry);
			wxFontData* return_native_object = wxDynamicCast(native_object, wxFontData_php);
			((zo_wxFontData*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFontData_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFontDialog"))
		{
			object_init_ex(return_value, php_wxFontDialog_entry);
			wxFontDialog* return_native_object = wxDynamicCast(native_object, wxFontDialog_php);
			((zo_wxFontDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFontDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxToolBar"))
		{
			object_init_ex(return_value, php_wxToolBar_entry);
			wxToolBar* return_native_object = wxDynamicCast(native_object, wxToolBar_php);
			((zo_wxToolBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxToolBar_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxCalendarEvent"))
		{
			object_init_ex(return_value, php_wxCalendarEvent_entry);
			wxCalendarEvent* return_native_object = wxDynamicCast(native_object, wxCalendarEvent_php);
			((zo_wxCalendarEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxCalendarEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGrid"))
		{
			object_init_ex(return_value, php_wxGrid_entry);
			wxGrid* return_native_object = wxDynamicCast(native_object, wxGrid_php);
			((zo_wxGrid*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGrid_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGridEditorCreatedEvent"))
		{
			object_init_ex(return_value, php_wxGridEditorCreatedEvent_entry);
			wxGridEditorCreatedEvent* return_native_object = wxDynamicCast(native_object, wxGridEditorCreatedEvent_php);
			((zo_wxGridEditorCreatedEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGridEditorCreatedEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGridRangeSelectEvent"))
		{
			object_init_ex(return_value, php_wxGridRangeSelectEvent_entry);
			wxGridRangeSelectEvent* return_native_object = wxDynamicCast(native_object, wxGridRangeSelectEvent_php);
			((zo_wxGridRangeSelectEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGridRangeSelectEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGridTableBase"))
		{
			object_init_ex(return_value, php_wxGridTableBase_entry);
			wxGridTableBase* return_native_object = wxDynamicCast(native_object, wxGridTableBase_php);
			((zo_wxGridTableBase*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGridTableBase_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDatePickerCtrl"))
		{
			object_init_ex(return_value, php_wxDatePickerCtrl_entry);
			wxDatePickerCtrl* return_native_object = wxDynamicCast(native_object, wxDatePickerCtrl_php);
			((zo_wxDatePickerCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDatePickerCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPasswordEntryDialog"))
		{
			object_init_ex(return_value, php_wxPasswordEntryDialog_entry);
			wxPasswordEntryDialog* return_native_object = wxDynamicCast(native_object, wxPasswordEntryDialog_php);
			((zo_wxPasswordEntryDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPasswordEntryDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxScreenDC"))
		{
			object_init_ex(return_value, php_wxScreenDC_entry);
			wxScreenDC* return_native_object = wxDynamicCast(native_object, wxScreenDC_php);
			((zo_wxScreenDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxScreenDC_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxCollapsiblePane"))
		{
			object_init_ex(return_value, php_wxCollapsiblePane_entry);
			wxCollapsiblePane* return_native_object = wxDynamicCast(native_object, wxCollapsiblePane_php);
			((zo_wxCollapsiblePane*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxCollapsiblePane_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxCollapsiblePaneEvent"))
		{
			object_init_ex(return_value, php_wxCollapsiblePaneEvent_entry);
			wxCollapsiblePaneEvent* return_native_object = wxDynamicCast(native_object, wxCollapsiblePaneEvent_php);
			((zo_wxCollapsiblePaneEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxCollapsiblePaneEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxComboCtrl"))
		{
			object_init_ex(return_value, php_wxComboCtrl_entry);
			wxComboCtrl* return_native_object = wxDynamicCast(native_object, wxComboCtrl_php);
			((zo_wxComboCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxComboCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewCtrl"))
		{
			object_init_ex(return_value, php_wxDataViewCtrl_entry);
			wxDataViewCtrl* return_native_object = wxDynamicCast(native_object, wxDataViewCtrl_php);
			((zo_wxDataViewCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewRenderer"))
		{
			object_init_ex(return_value, php_wxDataViewRenderer_entry);
			wxDataViewRenderer* return_native_object = wxDynamicCast(native_object, wxDataViewRenderer_php);
			((zo_wxDataViewRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewRenderer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewListCtrl"))
		{
			object_init_ex(return_value, php_wxDataViewListCtrl_entry);
			wxDataViewListCtrl* return_native_object = wxDynamicCast(native_object, wxDataViewListCtrl_php);
			((zo_wxDataViewListCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewListCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewEvent"))
		{
			object_init_ex(return_value, php_wxDataViewEvent_entry);
			wxDataViewEvent* return_native_object = wxDynamicCast(native_object, wxDataViewEvent_php);
			((zo_wxDataViewEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewBitmapRenderer"))
		{
			object_init_ex(return_value, php_wxDataViewBitmapRenderer_entry);
			wxDataViewBitmapRenderer* return_native_object = wxDynamicCast(native_object, wxDataViewBitmapRenderer_php);
			((zo_wxDataViewBitmapRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewBitmapRenderer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewChoiceRenderer"))
		{
			object_init_ex(return_value, php_wxDataViewChoiceRenderer_entry);
			wxDataViewChoiceRenderer* return_native_object = wxDynamicCast(native_object, wxDataViewChoiceRenderer_php);
			((zo_wxDataViewChoiceRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewChoiceRenderer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewCustomRenderer"))
		{
			object_init_ex(return_value, php_wxDataViewCustomRenderer_entry);
			wxDataViewCustomRenderer* return_native_object = wxDynamicCast(native_object, wxDataViewCustomRenderer_php);
			((zo_wxDataViewCustomRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewCustomRenderer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewDateRenderer"))
		{
			object_init_ex(return_value, php_wxDataViewDateRenderer_entry);
			wxDataViewDateRenderer* return_native_object = wxDynamicCast(native_object, wxDataViewDateRenderer_php);
			((zo_wxDataViewDateRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewDateRenderer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewIconText"))
		{
			object_init_ex(return_value, php_wxDataViewIconText_entry);
			wxDataViewIconText* return_native_object = wxDynamicCast(native_object, wxDataViewIconText_php);
			((zo_wxDataViewIconText*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewIconText_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewIconTextRenderer"))
		{
			object_init_ex(return_value, php_wxDataViewIconTextRenderer_entry);
			wxDataViewIconTextRenderer* return_native_object = wxDynamicCast(native_object, wxDataViewIconTextRenderer_php);
			((zo_wxDataViewIconTextRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewIconTextRenderer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewProgressRenderer"))
		{
			object_init_ex(return_value, php_wxDataViewProgressRenderer_entry);
			wxDataViewProgressRenderer* return_native_object = wxDynamicCast(native_object, wxDataViewProgressRenderer_php);
			((zo_wxDataViewProgressRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewProgressRenderer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewSpinRenderer"))
		{
			object_init_ex(return_value, php_wxDataViewSpinRenderer_entry);
			wxDataViewSpinRenderer* return_native_object = wxDynamicCast(native_object, wxDataViewSpinRenderer_php);
			((zo_wxDataViewSpinRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewSpinRenderer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewTextRenderer"))
		{
			object_init_ex(return_value, php_wxDataViewTextRenderer_entry);
			wxDataViewTextRenderer* return_native_object = wxDynamicCast(native_object, wxDataViewTextRenderer_php);
			((zo_wxDataViewTextRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewTextRenderer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewToggleRenderer"))
		{
			object_init_ex(return_value, php_wxDataViewToggleRenderer_entry);
			wxDataViewToggleRenderer* return_native_object = wxDynamicCast(native_object, wxDataViewToggleRenderer_php);
			((zo_wxDataViewToggleRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewToggleRenderer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDataViewTreeCtrl"))
		{
			object_init_ex(return_value, php_wxDataViewTreeCtrl_entry);
			wxDataViewTreeCtrl* return_native_object = wxDynamicCast(native_object, wxDataViewTreeCtrl_php);
			((zo_wxDataViewTreeCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDataViewTreeCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxVariant"))
		{
			object_init_ex(return_value, php_wxVariant_entry);
			wxVariant* return_native_object = wxDynamicCast(native_object, wxVariant_php);
			((zo_wxVariant*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxVariant_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxClipboard"))
		{
			object_init_ex(return_value, php_wxClipboard_entry);
			wxClipboard* return_native_object = wxDynamicCast(native_object, wxClipboard_php);
			((zo_wxClipboard*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxClipboard_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxClipboardTextEvent"))
		{
			object_init_ex(return_value, php_wxClipboardTextEvent_entry);
			wxClipboardTextEvent* return_native_object = wxDynamicCast(native_object, wxClipboardTextEvent_php);
			((zo_wxClipboardTextEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxClipboardTextEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxListView"))
		{
			object_init_ex(return_value, php_wxListView_entry);
			wxListView* return_native_object = wxDynamicCast(native_object, wxListView_php);
			((zo_wxListView*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxListView_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxConfigBase"))
		{
			object_init_ex(return_value, php_wxConfigBase_entry);
			wxConfigBase* return_native_object = wxDynamicCast(native_object, wxConfigBase_php);
			((zo_wxConfigBase*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxConfigBase_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHeaderCtrlEvent"))
		{
			object_init_ex(return_value, php_wxHeaderCtrlEvent_entry);
			wxHeaderCtrlEvent* return_native_object = wxDynamicCast(native_object, wxHeaderCtrlEvent_php);
			((zo_wxHeaderCtrlEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHeaderCtrlEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHeaderCtrl"))
		{
			object_init_ex(return_value, php_wxHeaderCtrl_entry);
			wxHeaderCtrl* return_native_object = wxDynamicCast(native_object, wxHeaderCtrl_php);
			((zo_wxHeaderCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHeaderCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHeaderCtrlSimple"))
		{
			object_init_ex(return_value, php_wxHeaderCtrlSimple_entry);
			wxHeaderCtrlSimple* return_native_object = wxDynamicCast(native_object, wxHeaderCtrlSimple_php);
			((zo_wxHeaderCtrlSimple*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHeaderCtrlSimple_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSetCursorEvent"))
		{
			object_init_ex(return_value, php_wxSetCursorEvent_entry);
			wxSetCursorEvent* return_native_object = wxDynamicCast(native_object, wxSetCursorEvent_php);
			((zo_wxSetCursorEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSetCursorEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxIdleEvent"))
		{
			object_init_ex(return_value, php_wxIdleEvent_entry);
			wxIdleEvent* return_native_object = wxDynamicCast(native_object, wxIdleEvent_php);
			((zo_wxIdleEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxIdleEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPen"))
		{
			object_init_ex(return_value, php_wxPen_entry);
			wxPen* return_native_object = wxDynamicCast(native_object, wxPen_php);
			((zo_wxPen*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPen_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxEditableListBox"))
		{
			object_init_ex(return_value, php_wxEditableListBox_entry);
			wxEditableListBox* return_native_object = wxDynamicCast(native_object, wxEditableListBox_php);
			((zo_wxEditableListBox*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxEditableListBox_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFileCtrlEvent"))
		{
			object_init_ex(return_value, php_wxFileCtrlEvent_entry);
			wxFileCtrlEvent* return_native_object = wxDynamicCast(native_object, wxFileCtrlEvent_php);
			((zo_wxFileCtrlEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFileCtrlEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFileCtrl"))
		{
			object_init_ex(return_value, php_wxFileCtrl_entry);
			wxFileCtrl* return_native_object = wxDynamicCast(native_object, wxFileCtrl_php);
			((zo_wxFileCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFileCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxProcess"))
		{
			object_init_ex(return_value, php_wxProcess_entry);
			wxProcess* return_native_object = wxDynamicCast(native_object, wxProcess_php);
			((zo_wxProcess*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxProcess_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTextValidator"))
		{
			object_init_ex(return_value, php_wxTextValidator_entry);
			wxTextValidator* return_native_object = wxDynamicCast(native_object, wxTextValidator_php);
			((zo_wxTextValidator*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTextValidator_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHScrolledWindow"))
		{
			object_init_ex(return_value, php_wxHScrolledWindow_entry);
			wxHScrolledWindow* return_native_object = wxDynamicCast(native_object, wxHScrolledWindow_php);
			((zo_wxHScrolledWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHScrolledWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxInfoBar"))
		{
			object_init_ex(return_value, php_wxInfoBar_entry);
			wxInfoBar* return_native_object = wxDynamicCast(native_object, wxInfoBar_php);
			((zo_wxInfoBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxInfoBar_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxXmlResource"))
		{
			object_init_ex(return_value, php_wxXmlResource_entry);
			wxXmlResource* return_native_object = wxDynamicCast(native_object, wxXmlResource_php);
			((zo_wxXmlResource*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxXmlResource_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGenericValidator"))
		{
			object_init_ex(return_value, php_wxGenericValidator_entry);
			wxGenericValidator* return_native_object = wxDynamicCast(native_object, wxGenericValidator_php);
			((zo_wxGenericValidator*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGenericValidator_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSashWindow"))
		{
			object_init_ex(return_value, php_wxSashWindow_entry);
			wxSashWindow* return_native_object = wxDynamicCast(native_object, wxSashWindow_php);
			((zo_wxSashWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSashWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSashEvent"))
		{
			object_init_ex(return_value, php_wxSashEvent_entry);
			wxSashEvent* return_native_object = wxDynamicCast(native_object, wxSashEvent_php);
			((zo_wxSashEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSashEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSashLayoutWindow"))
		{
			object_init_ex(return_value, php_wxSashLayoutWindow_entry);
			wxSashLayoutWindow* return_native_object = wxDynamicCast(native_object, wxSashLayoutWindow_php);
			((zo_wxSashLayoutWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSashLayoutWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxBrush"))
		{
			object_init_ex(return_value, php_wxBrush_entry);
			wxBrush* return_native_object = wxDynamicCast(native_object, wxBrush_php);
			((zo_wxBrush*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBrush_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPageSetupDialog"))
		{
			object_init_ex(return_value, php_wxPageSetupDialog_entry);
			wxPageSetupDialog* return_native_object = wxDynamicCast(native_object, wxPageSetupDialog_php);
			((zo_wxPageSetupDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPageSetupDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPageSetupDialogData"))
		{
			object_init_ex(return_value, php_wxPageSetupDialogData_entry);
			wxPageSetupDialogData* return_native_object = wxDynamicCast(native_object, wxPageSetupDialogData_php);
			((zo_wxPageSetupDialogData*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPageSetupDialogData_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPrintDialog"))
		{
			object_init_ex(return_value, php_wxPrintDialog_entry);
			wxPrintDialog* return_native_object = wxDynamicCast(native_object, wxPrintDialog_php);
			((zo_wxPrintDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPrintDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPrintDialogData"))
		{
			object_init_ex(return_value, php_wxPrintDialogData_entry);
			wxPrintDialogData* return_native_object = wxDynamicCast(native_object, wxPrintDialogData_php);
			((zo_wxPrintDialogData*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPrintDialogData_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPrintData"))
		{
			object_init_ex(return_value, php_wxPrintData_entry);
			wxPrintData* return_native_object = wxDynamicCast(native_object, wxPrintData_php);
			((zo_wxPrintData*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPrintData_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPostScriptDC"))
		{
			object_init_ex(return_value, php_wxPostScriptDC_entry);
			wxPostScriptDC* return_native_object = wxDynamicCast(native_object, wxPostScriptDC_php);
			((zo_wxPostScriptDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPostScriptDC_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPrintPreview"))
		{
			object_init_ex(return_value, php_wxPrintPreview_entry);
			wxPrintPreview* return_native_object = wxDynamicCast(native_object, wxPrintPreview_php);
			((zo_wxPrintPreview*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPrintPreview_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPrinter"))
		{
			object_init_ex(return_value, php_wxPrinter_entry);
			wxPrinter* return_native_object = wxDynamicCast(native_object, wxPrinter_php);
			((zo_wxPrinter*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPrinter_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPrinterDC"))
		{
			object_init_ex(return_value, php_wxPrinterDC_entry);
			wxPrinterDC* return_native_object = wxDynamicCast(native_object, wxPrinterDC_php);
			((zo_wxPrinterDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPrinterDC_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPrintout"))
		{
			object_init_ex(return_value, php_wxPrintout_entry);
			wxPrintout* return_native_object = wxDynamicCast(native_object, wxPrintout_php);
			((zo_wxPrintout*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPrintout_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPreviewFrame"))
		{
			object_init_ex(return_value, php_wxPreviewFrame_entry);
			wxPreviewFrame* return_native_object = wxDynamicCast(native_object, wxPreviewFrame_php);
			((zo_wxPreviewFrame*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPreviewFrame_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPreviewControlBar"))
		{
			object_init_ex(return_value, php_wxPreviewControlBar_entry);
			wxPreviewControlBar* return_native_object = wxDynamicCast(native_object, wxPreviewControlBar_php);
			((zo_wxPreviewControlBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPreviewControlBar_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPreviewCanvas"))
		{
			object_init_ex(return_value, php_wxPreviewCanvas_entry);
			wxPreviewCanvas* return_native_object = wxDynamicCast(native_object, wxPreviewCanvas_php);
			((zo_wxPreviewCanvas*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPreviewCanvas_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxSingleChoiceDialog"))
		{
			object_init_ex(return_value, php_wxSingleChoiceDialog_entry);
			wxSingleChoiceDialog* return_native_object = wxDynamicCast(native_object, wxSingleChoiceDialog_php);
			((zo_wxSingleChoiceDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSingleChoiceDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlDCRenderer"))
		{
			object_init_ex(return_value, php_wxHtmlDCRenderer_entry);
			wxHtmlDCRenderer* return_native_object = wxDynamicCast(native_object, wxHtmlDCRenderer_php);
			((zo_wxHtmlDCRenderer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlDCRenderer_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlFilter"))
		{
			object_init_ex(return_value, php_wxHtmlFilter_entry);
			wxHtmlFilter* return_native_object = wxDynamicCast(native_object, wxHtmlFilter_php);
			((zo_wxHtmlFilter*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlFilter_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlHelpData"))
		{
			object_init_ex(return_value, php_wxHtmlHelpData_entry);
			wxHtmlHelpData* return_native_object = wxDynamicCast(native_object, wxHtmlHelpData_php);
			((zo_wxHtmlHelpData*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlHelpData_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlHelpDialog"))
		{
			object_init_ex(return_value, php_wxHtmlHelpDialog_entry);
			wxHtmlHelpDialog* return_native_object = wxDynamicCast(native_object, wxHtmlHelpDialog_php);
			((zo_wxHtmlHelpDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlHelpDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlHelpFrame"))
		{
			object_init_ex(return_value, php_wxHtmlHelpFrame_entry);
			wxHtmlHelpFrame* return_native_object = wxDynamicCast(native_object, wxHtmlHelpFrame_php);
			((zo_wxHtmlHelpFrame*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlHelpFrame_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlHelpWindow"))
		{
			object_init_ex(return_value, php_wxHtmlHelpWindow_entry);
			wxHtmlHelpWindow* return_native_object = wxDynamicCast(native_object, wxHtmlHelpWindow_php);
			((zo_wxHtmlHelpWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlHelpWindow_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlPrintout"))
		{
			object_init_ex(return_value, php_wxHtmlPrintout_entry);
			wxHtmlPrintout* return_native_object = wxDynamicCast(native_object, wxHtmlPrintout_php);
			((zo_wxHtmlPrintout*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlPrintout_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlTagHandler"))
		{
			object_init_ex(return_value, php_wxHtmlTagHandler_entry);
			wxHtmlTagHandler* return_native_object = wxDynamicCast(native_object, wxHtmlTagHandler_php);
			((zo_wxHtmlTagHandler*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlTagHandler_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlTagsModule"))
		{
			object_init_ex(return_value, php_wxHtmlTagsModule_entry);
			wxHtmlTagsModule* return_native_object = wxDynamicCast(native_object, wxHtmlTagsModule_php);
			((zo_wxHtmlTagsModule*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlTagsModule_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxModule"))
		{
			object_init_ex(return_value, php_wxModule_entry);
			wxModule* return_native_object = wxDynamicCast(native_object, wxModule_php);
			((zo_wxModule*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxModule_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlWidgetCell"))
		{
			object_init_ex(return_value, php_wxHtmlWidgetCell_entry);
			wxHtmlWidgetCell* return_native_object = wxDynamicCast(native_object, wxHtmlWidgetCell_php);
			((zo_wxHtmlWidgetCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlWidgetCell_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxHtmlWinTagHandler"))
		{
			object_init_ex(return_value, php_wxHtmlWinTagHandler_entry);
			wxHtmlWinTagHandler* return_native_object = wxDynamicCast(native_object, wxHtmlWinTagHandler_php);
			((zo_wxHtmlWinTagHandler*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlWinTagHandler_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxAutoBufferedPaintDC"))
		{
			object_init_ex(return_value, php_wxAutoBufferedPaintDC_entry);
			wxAutoBufferedPaintDC* return_native_object = wxDynamicCast(native_object, wxAutoBufferedPaintDC_php);
			((zo_wxAutoBufferedPaintDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxAutoBufferedPaintDC_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxBufferedDC"))
		{
			object_init_ex(return_value, php_wxBufferedDC_entry);
			wxBufferedDC* return_native_object = wxDynamicCast(native_object, wxBufferedDC_php);
			((zo_wxBufferedDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBufferedDC_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxBufferedPaintDC"))
		{
			object_init_ex(return_value, php_wxBufferedPaintDC_entry);
			wxBufferedPaintDC* return_native_object = wxDynamicCast(native_object, wxBufferedPaintDC_php);
			((zo_wxBufferedPaintDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBufferedPaintDC_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxClientDC"))
		{
			object_init_ex(return_value, php_wxClientDC_entry);
			wxClientDC* return_native_object = wxDynamicCast(native_object, wxClientDC_php);
			((zo_wxClientDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxClientDC_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPaintEvent"))
		{
			object_init_ex(return_value, php_wxPaintEvent_entry);
			wxPaintEvent* return_native_object = wxDynamicCast(native_object, wxPaintEvent_php);
			((zo_wxPaintEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPaintEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPaintDC"))
		{
			object_init_ex(return_value, php_wxPaintDC_entry);
			wxPaintDC* return_native_object = wxDynamicCast(native_object, wxPaintDC_php);
			((zo_wxPaintDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPaintDC_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMemoryDC"))
		{
			object_init_ex(return_value, php_wxMemoryDC_entry);
			wxMemoryDC* return_native_object = wxDynamicCast(native_object, wxMemoryDC_php);
			((zo_wxMemoryDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMemoryDC_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMirrorDC"))
		{
			object_init_ex(return_value, php_wxMirrorDC_entry);
			wxMirrorDC* return_native_object = wxDynamicCast(native_object, wxMirrorDC_php);
			((zo_wxMirrorDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMirrorDC_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxPaletteChangedEvent"))
		{
			object_init_ex(return_value, php_wxPaletteChangedEvent_entry);
			wxPaletteChangedEvent* return_native_object = wxDynamicCast(native_object, wxPaletteChangedEvent_php);
			((zo_wxPaletteChangedEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPaletteChangedEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxImageHandler"))
		{
			object_init_ex(return_value, php_wxImageHandler_entry);
			wxImageHandler* return_native_object = wxDynamicCast(native_object, wxImageHandler_php);
			((zo_wxImageHandler*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxImageHandler_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxInitDialogEvent"))
		{
			object_init_ex(return_value, php_wxInitDialogEvent_entry);
			wxInitDialogEvent* return_native_object = wxDynamicCast(native_object, wxInitDialogEvent_php);
			((zo_wxInitDialogEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxInitDialogEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMaximizeEvent"))
		{
			object_init_ex(return_value, php_wxMaximizeEvent_entry);
			wxMaximizeEvent* return_native_object = wxDynamicCast(native_object, wxMaximizeEvent_php);
			((zo_wxMaximizeEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMaximizeEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxNavigationKeyEvent"))
		{
			object_init_ex(return_value, php_wxNavigationKeyEvent_entry);
			wxNavigationKeyEvent* return_native_object = wxDynamicCast(native_object, wxNavigationKeyEvent_php);
			((zo_wxNavigationKeyEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxNavigationKeyEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxXmlResourceHandler"))
		{
			object_init_ex(return_value, php_wxXmlResourceHandler_entry);
			wxXmlResourceHandler* return_native_object = wxDynamicCast(native_object, wxXmlResourceHandler_php);
			((zo_wxXmlResourceHandler*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxXmlResourceHandler_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxXmlDocument"))
		{
			object_init_ex(return_value, php_wxXmlDocument_entry);
			wxXmlDocument* return_native_object = wxDynamicCast(native_object, wxXmlDocument_php);
			((zo_wxXmlDocument*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxXmlDocument_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxLayoutAlgorithm"))
		{
			object_init_ex(return_value, php_wxLayoutAlgorithm_entry);
			wxLayoutAlgorithm* return_native_object = wxDynamicCast(native_object, wxLayoutAlgorithm_php);
			((zo_wxLayoutAlgorithm*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxLayoutAlgorithm_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFocusEvent"))
		{
			object_init_ex(return_value, php_wxFocusEvent_entry);
			wxFocusEvent* return_native_object = wxDynamicCast(native_object, wxFocusEvent_php);
			((zo_wxFocusEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFocusEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFileConfig"))
		{
			object_init_ex(return_value, php_wxFileConfig_entry);
			wxFileConfig* return_native_object = wxDynamicCast(native_object, wxFileConfig_php);
			((zo_wxFileConfig*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFileConfig_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFileDirPickerEvent"))
		{
			object_init_ex(return_value, php_wxFileDirPickerEvent_entry);
			wxFileDirPickerEvent* return_native_object = wxDynamicCast(native_object, wxFileDirPickerEvent_php);
			((zo_wxFileDirPickerEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFileDirPickerEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFileHistory"))
		{
			object_init_ex(return_value, php_wxFileHistory_entry);
			wxFileHistory* return_native_object = wxDynamicCast(native_object, wxFileHistory_php);
			((zo_wxFileHistory*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFileHistory_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFileSystemWatcher"))
		{
			object_init_ex(return_value, php_wxFileSystemWatcher_entry);
			wxFileSystemWatcher* return_native_object = wxDynamicCast(native_object, wxFileSystemWatcher_php);
			((zo_wxFileSystemWatcher*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFileSystemWatcher_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxFileSystemWatcherEvent"))
		{
			object_init_ex(return_value, php_wxFileSystemWatcherEvent_entry);
			wxFileSystemWatcherEvent* return_native_object = wxDynamicCast(native_object, wxFileSystemWatcherEvent_php);
			((zo_wxFileSystemWatcherEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFileSystemWatcherEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxDisplayChangedEvent"))
		{
			object_init_ex(return_value, php_wxDisplayChangedEvent_entry);
			wxDisplayChangedEvent* return_native_object = wxDynamicCast(native_object, wxDisplayChangedEvent_php);
			((zo_wxDisplayChangedEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDisplayChangedEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxCalculateLayoutEvent"))
		{
			object_init_ex(return_value, php_wxCalculateLayoutEvent_entry);
			wxCalculateLayoutEvent* return_native_object = wxDynamicCast(native_object, wxCalculateLayoutEvent_php);
			((zo_wxCalculateLayoutEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxCalculateLayoutEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxContextMenuEvent"))
		{
			object_init_ex(return_value, php_wxContextMenuEvent_entry);
			wxContextMenuEvent* return_native_object = wxDynamicCast(native_object, wxContextMenuEvent_php);
			((zo_wxContextMenuEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxContextMenuEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxQueryLayoutInfoEvent"))
		{
			object_init_ex(return_value, php_wxQueryLayoutInfoEvent_entry);
			wxQueryLayoutInfoEvent* return_native_object = wxDynamicCast(native_object, wxQueryLayoutInfoEvent_php);
			((zo_wxQueryLayoutInfoEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxQueryLayoutInfoEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxToolbook"))
		{
			object_init_ex(return_value, php_wxToolbook_entry);
			wxToolbook* return_native_object = wxDynamicCast(native_object, wxToolbook_php);
			((zo_wxToolbook*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxToolbook_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRibbonControl"))
		{
			object_init_ex(return_value, php_wxRibbonControl_entry);
			wxRibbonControl* return_native_object = wxDynamicCast(native_object, wxRibbonControl_php);
			((zo_wxRibbonControl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonControl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRibbonBar"))
		{
			object_init_ex(return_value, php_wxRibbonBar_entry);
			wxRibbonBar* return_native_object = wxDynamicCast(native_object, wxRibbonBar_php);
			((zo_wxRibbonBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonBar_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRibbonBarEvent"))
		{
			object_init_ex(return_value, php_wxRibbonBarEvent_entry);
			wxRibbonBarEvent* return_native_object = wxDynamicCast(native_object, wxRibbonBarEvent_php);
			((zo_wxRibbonBarEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonBarEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRibbonButtonBar"))
		{
			object_init_ex(return_value, php_wxRibbonButtonBar_entry);
			wxRibbonButtonBar* return_native_object = wxDynamicCast(native_object, wxRibbonButtonBar_php);
			((zo_wxRibbonButtonBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonButtonBar_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRibbonButtonBarEvent"))
		{
			object_init_ex(return_value, php_wxRibbonButtonBarEvent_entry);
			wxRibbonButtonBarEvent* return_native_object = wxDynamicCast(native_object, wxRibbonButtonBarEvent_php);
			((zo_wxRibbonButtonBarEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonButtonBarEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRibbonGallery"))
		{
			object_init_ex(return_value, php_wxRibbonGallery_entry);
			wxRibbonGallery* return_native_object = wxDynamicCast(native_object, wxRibbonGallery_php);
			((zo_wxRibbonGallery*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonGallery_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRibbonGalleryEvent"))
		{
			object_init_ex(return_value, php_wxRibbonGalleryEvent_entry);
			wxRibbonGalleryEvent* return_native_object = wxDynamicCast(native_object, wxRibbonGalleryEvent_php);
			((zo_wxRibbonGalleryEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonGalleryEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRibbonPage"))
		{
			object_init_ex(return_value, php_wxRibbonPage_entry);
			wxRibbonPage* return_native_object = wxDynamicCast(native_object, wxRibbonPage_php);
			((zo_wxRibbonPage*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonPage_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRibbonPanel"))
		{
			object_init_ex(return_value, php_wxRibbonPanel_entry);
			wxRibbonPanel* return_native_object = wxDynamicCast(native_object, wxRibbonPanel_php);
			((zo_wxRibbonPanel*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonPanel_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxRibbonToolBar"))
		{
			object_init_ex(return_value, php_wxRibbonToolBar_entry);
			wxRibbonToolBar* return_native_object = wxDynamicCast(native_object, wxRibbonToolBar_php);
			((zo_wxRibbonToolBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxRibbonToolBar_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTaskBarIcon"))
		{
			object_init_ex(return_value, php_wxTaskBarIcon_entry);
			wxTaskBarIcon* return_native_object = wxDynamicCast(native_object, wxTaskBarIcon_php);
			((zo_wxTaskBarIcon*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTaskBarIcon_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxTaskBarIconEvent"))
		{
			object_init_ex(return_value, php_wxTaskBarIconEvent_entry);
			wxTaskBarIconEvent* return_native_object = wxDynamicCast(native_object, wxTaskBarIconEvent_php);
			((zo_wxTaskBarIconEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxTaskBarIconEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxNotificationMessage"))
		{
			object_init_ex(return_value, php_wxNotificationMessage_entry);
			wxNotificationMessage* return_native_object = wxDynamicCast(native_object, wxNotificationMessage_php);
			((zo_wxNotificationMessage*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxNotificationMessage_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxGenericProgressDialog"))
		{
			object_init_ex(return_value, php_wxGenericProgressDialog_entry);
			wxGenericProgressDialog* return_native_object = wxDynamicCast(native_object, wxGenericProgressDialog_php);
			((zo_wxGenericProgressDialog*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxGenericProgressDialog_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxToolBarToolBase"))
		{
			object_init_ex(return_value, php_wxToolBarToolBase_entry);
			wxToolBarToolBase* return_native_object = wxDynamicCast(native_object, wxToolBarToolBase_php);
			((zo_wxToolBarToolBase*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxToolBarToolBase_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxWebViewEvent"))
		{
			object_init_ex(return_value, php_wxWebViewEvent_entry);
			wxWebViewEvent* return_native_object = wxDynamicCast(native_object, wxWebViewEvent_php);
			((zo_wxWebViewEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWebViewEvent_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxWebView"))
		{
			object_init_ex(return_value, php_wxWebView_entry);
			wxWebView* return_native_object = wxDynamicCast(native_object, wxWebView_php);
			((zo_wxWebView*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWebView_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMediaCtrl"))
		{
			object_init_ex(return_value, php_wxMediaCtrl_entry);
			wxMediaCtrl* return_native_object = wxDynamicCast(native_object, wxMediaCtrl_php);
			((zo_wxMediaCtrl*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMediaCtrl_php*) return_native_object;
			return;
		}
		if(!strcmp(object_type, "wxMediaEvent"))
		{
			object_init_ex(return_value, php_wxMediaEvent_entry);
			wxMediaEvent* return_native_object = wxDynamicCast(native_object, wxMediaEvent_php);
			((zo_wxMediaEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMediaEvent_php*) return_native_object;
			return;
		}
		else
		{
			zend_error(E_ERROR, "Could not convert to object type %s", object_type);
		}
	}
	else
	{
		zend_error(E_ERROR, "Invalid parameters\n");
	}
}
/* }}} */


