/*
 * @author Mário Soares
 * @contributors Jefferson González
 * @contributors René Vögeli / Rangee GmbH
 *
 * @license
 * This file is part of wxPHP check the LICENSE file for information.
 *
 * @description
 * File that holds the functions code of the wxWidgets extension
 *
 * @note
 * Some parts of this file are auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "functions.h"

#ifdef __WXMAC__
/* Header for process type transformation functions */
#include <ApplicationServices/ApplicationServices.h>
#endif

#include "appmanagement.h"
#include "aui.h"
#include "bookctrl.h"
#include "cfg.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "dnd.h"
#include "docview.h"
#include "dvc.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "help.h"
#include "html.h"
#include "logging.h"
#include "managedwnd.h"
#include "media.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "net.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "webview.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "others.h"

/**
 * Forwards some or all of the function parameters to PHP's sprintf.
 * Returns a formatted string or NULL.
 */
zval * wxphp_sprintf(INTERNAL_FUNCTION_PARAMETERS, int offset = 0)
{
    int     argc = ZEND_NUM_ARGS();
    zval    *argv;
    zval    funcName, *string, *retVal;

    if (argc < 1) {
        WRONG_PARAM_COUNT_WITH_RETVAL(NULL);
    }

    if (zend_get_parameters_array_ex(argc, argv) == FAILURE) {
        efree(argv);
        WRONG_PARAM_COUNT_WITH_RETVAL(NULL);
    }

    ZVAL_STRINGL(&funcName, "sprintf", sizeof("sprintf") - 1);

    if (
        call_user_function(
            EG(function_table),
            NULL,
            &funcName,
            string,
            argc - offset,
            argv + offset
        ) == SUCCESS
    )
    {
        if (Z_TYPE_P(string) == IS_STRING)
            retVal = string;
        else
            zval_ptr_dtor(string);
    }

    efree(argv);

    return retVal;
}

/**
 * Predefined handcoded set of functions
 */

/* {{{ proto int wxExecute(string command)
   Executes another program in Unix or Windows. */
PHP_FUNCTION(php_wxExecute)
{
    char* _argStr0;
    size_t _argStr0_len;

    long flags = 0;
    zval z_process;
    wxProcess* process;

    long ret;

    char parse_parameters[] = "s|lO";

    if(
        zend_parse_parameters_ex(
            ZEND_PARSE_PARAMS_QUIET,
            ZEND_NUM_ARGS(),
            parse_parameters,
            &_argStr0, &_argStr0_len,
            &flags, &z_process, php_wxProcess_entry
        ) == SUCCESS
    )
    {

        switch(ZEND_NUM_ARGS())
        {
            case 1:
                ret = wxExecute(wxString(_argStr0, wxConvUTF8));
                RETURN_LONG(ret);
                break;

            case 2:
                ret = wxExecute(
                    wxString(_argStr0, wxConvUTF8), (int) flags
                );
                RETURN_LONG(ret);
                break;

            case 3:
                process = (wxProcess*)
                    Z_wxProcess_P(&z_process)->native_object
                ;
                ret = wxExecute(
                    wxString(_argStr0, wxConvUTF8),
                    (int) flags,
                    process
                );
                RETURN_LONG(ret);
                break;

            default:
                WRONG_PARAM_COUNT;
        }
    }

    RETURN_LONG((long) 0);
}
/* }}} */

/* {{{ proto int wxEntry()
   This function initializes wxWidgets in a platform-dependent way. */
PHP_FUNCTION(php_wxEntry)
{
    #ifdef __WXMAC__
    /* In order to correctly receive keyboard input we need to
     * explicitly tell mac to convert this console process to
     * a gui process.
     *
     * Solution found at:
     * http://stackoverflow.com/questions/4341098/wxwidgets-commandline-gui-hybrid-application-fails-to-get-dialog-input
     */
    ProcessSerialNumber PSN;
    GetCurrentProcess(&PSN);
    TransformProcessType(&PSN,kProcessTransformToForegroundApplication);
    #endif

    int argc = 1;
    char application_name[] = "wxPHP";
    char *argv[2] = { application_name, NULL };

    RETURN_LONG(wxEntry(argc, argv));
}
/* }}} */

/* {{{ proto object wxC2D(object wxwidgets_object_constant)
   Converts a wxWidgets constant object to dynamic in order to
   be able to access its methods like
   wxC2D(wxNORMAL_FONT)->GetPointSize(). */
PHP_FUNCTION(php_wxC2D)
{
    zval constant_object;

    char parse_parameters[] = "z";

    if(ZEND_NUM_ARGS() == 1)
    {
        if (
            zend_parse_parameters_ex(
                ZEND_PARSE_PARAMS_QUIET,
                ZEND_NUM_ARGS(),
                parse_parameters,
                &constant_object
            ) == SUCCESS
        )
        {
            ZVAL_COPY_VALUE(return_value, &constant_object);
            zval_add_ref(&constant_object);
            return;
        }
    }

    zend_error(
        E_ERROR,
        "Ivalid count or type of parameters "
        "for wxC2D(), you should pass a constant "
        "object to transform to dynamic\n"
    );
}
/* }}} */

/* {{{ proto void wxLogError(string formatString, ...)
   The function to use for error messages, i.e. the messages
   that must be shown to the user. The default processing is
   to pop up a message box to inform the user about it. */
PHP_FUNCTION(php_wxLogError)
{
    zval *message;

    if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU))
    {
        wxLogError(Z_STRVAL_P(message));
        zval_ptr_dtor(message);
    }
}
/* }}} */

/* {{{ proto void wxLogFatalError(string formatString, ...)
   Like wxLogError(), but also terminates the program with
   the exit code 3. */
PHP_FUNCTION(php_wxLogFatalError)
{
    zval *message;

    if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU))
    {
        wxLogFatalError(Z_STRVAL_P(message));
        zval_ptr_dtor(message);
    }
}
/* }}} */

/* {{{ proto void wxLogGeneric(int level, string formatString, ...)
   Logs a message with the given wxLogLevel. */
PHP_FUNCTION(php_wxLogGeneric)
{
    char    parse[] = "l";
    long     logLevel;
    zval    *message;

    if (ZEND_NUM_ARGS() < 2) {
        WRONG_PARAM_COUNT;
    }

    if (zend_parse_parameters(1, parse, &logLevel) == SUCCESS)
    {
        if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1))
        {
            wxLogGeneric(logLevel, Z_STRVAL_P(message));
            zval_ptr_dtor(message);
        }
    }
}
/* }}} */

/* {{{ proto void wxLogMessage(string formatString, ...)
   For all normal, informational messages. */
PHP_FUNCTION(php_wxLogMessage)
{
    zval *message;

    if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU))
    {
        wxLogMessage(Z_STRVAL_P(message));
        zval_ptr_dtor(message);
    }
}
/* }}} */

/* {{{ proto void wxLogStatus([wxFrame frame,] string formatString, ...)
   Messages logged by this function will appear in the statusbar
   of the frame or of the top level application window. */
PHP_FUNCTION(php_wxLogStatus)
{
    char        parse[] = "O";
    wxFrame     *frame = NULL;
    zval        zFrame;
    zval        *message;

    if (ZEND_NUM_ARGS() < 1) {
        WRONG_PARAM_COUNT;
    }

    if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, 1,
        parse, &zFrame, php_wxFrame_entry) == SUCCESS)
    {
        // Called with wxFrame as first parameter

        frame = (wxFrame*) Z_wxFrame_P(&zFrame)->native_object;

        message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1);
    }
    else
        message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU);

    if (message)
    {
        if (frame)
            wxLogStatus(frame, Z_STRVAL_P(message));
        else
            wxLogStatus(Z_STRVAL_P(message));

        zval_ptr_dtor(message);
    }
}
/* }}} */

/* {{{ proto void wxLogSysError(string formatString, ...)
   Logs the specified message text as well as the last system
   error code (errno or GetLastError() depending on the platform)
   and the corresponding error message. */
PHP_FUNCTION(php_wxLogSysError)
{
    zval *message;

    if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU))
    {
        wxLogSysError(Z_STRVAL_P(message));
        zval_ptr_dtor(message);
    }
}
/* }}} */

/* {{{ proto void wxLogVerbose(string formatString, ...)
   For verbose output. Normally, it is suppressed, but might
   be activated if the user wishes to know more details about
   the program progress (another, but possibly confusing name
   for the same function could be wxLogInfo). */
PHP_FUNCTION(php_wxLogVerbose)
{
    zval *message;

    if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU))
    {
        wxLogVerbose(Z_STRVAL_P(message));
        zval_ptr_dtor(message);
    }
}
/* }}} */

/* {{{ proto void wxLogWarning(string formatString, ...)
   For warnings - they are also normally shown to the user,
   but don't interrupt the program work. */
PHP_FUNCTION(php_wxLogWarning)
{
    zval *message;

    if (message = wxphp_sprintf(INTERNAL_FUNCTION_PARAM_PASSTHRU))
    {
        wxLogWarning(Z_STRVAL_P(message));
        zval_ptr_dtor(message);
    }
}
/* }}} */

/**
 * Space reserved for autogenerated functions
 */

/* {{{ proto bool wxHandleFatalExceptions(bool doIt)
   If doIt is true, the fatal exceptions (also known as general protection faults under Windows or segmentation violations in the Unix world) will be caught and passed to wxApp::OnFatalException. */
PHP_FUNCTION(php_wxHandleFatalExceptions)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxHandleFatalExceptions\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool doIt0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|b' (&doIt0)\n");
        #endif

        char parse_parameters_string[] = "|b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &doIt0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxHandleFatalExceptions())\n\n");
                #endif

                RETVAL_BOOL(wxHandleFatalExceptions());


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxHandleFatalExceptions(doIt0))\n\n");
                #endif

                RETVAL_BOOL(wxHandleFatalExceptions(doIt0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxHandleFatalExceptions()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxInitialize()
   Initialize the library (may be called as many times as needed,
   but each call to wxInitialize() must be matched by
   wxUninitialize()). */
PHP_FUNCTION(php_wxInitialize)
{
    wxInitAllImageHandlers();
    RETVAL_BOOL(wxInitialize());
}
/* }}} */

/* {{{ proto  wxUninitialize()
   This function is for use in console (wxBase) programs only. */
PHP_FUNCTION(php_wxUninitialize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxUninitialize\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    //Parameters for overload 1
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload1_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxUninitialize()\n\n");
                #endif

                wxUninitialize();


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxUninitialize()\n\n");
                #endif

                wxUninitialize();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxUninitialize()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxWakeUpIdle()
   This function wakes up the (internal and platform dependent) idle system, i.e. */
PHP_FUNCTION(php_wxWakeUpIdle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxWakeUpIdle\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxWakeUpIdle()\n\n");
                #endif

                wxWakeUpIdle();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxWakeUpIdle()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxSafeYield(wxWindow &win, bool onlyIfNeeded)
   Calls wxApp::SafeYield. */
PHP_FUNCTION(php_wxSafeYield)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxSafeYield\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* win0;
    wxWindow* object_pointer0_0 = 0;
    bool onlyIfNeeded0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|zb' (&win0, &onlyIfNeeded0)\n");
        #endif

        char parse_parameters_string[] = "|zb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &win0, &onlyIfNeeded0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(win0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(win0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(win0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'win' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(win0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'win' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxSafeYield())\n\n");
                #endif

                RETVAL_BOOL(wxSafeYield());


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxSafeYield((wxWindow*) object_pointer0_0))\n\n");
                #endif

                RETVAL_BOOL(wxSafeYield((wxWindow*) object_pointer0_0));


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxSafeYield((wxWindow*) object_pointer0_0, onlyIfNeeded0))\n\n");
                #endif

                RETVAL_BOOL(wxSafeYield((wxWindow*) object_pointer0_0, onlyIfNeeded0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxSafeYield()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxExit()
   Exits application after calling wxApp::OnExit. */
PHP_FUNCTION(php_wxExit)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxExit\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxExit()\n\n");
                #endif

                wxExit();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxExit()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxIsDragResultOk(wxDragResult res)
   Returns true if res indicates that something was done during a DnD operation, i.e. */
PHP_FUNCTION(php_wxIsDragResultOk)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxIsDragResultOk\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long res0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&res0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &res0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsDragResultOk((wxDragResult) res0))\n\n");
                #endif

                RETVAL_BOOL(wxIsDragResultOk((wxDragResult) res0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxIsDragResultOk()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxFromString(string string, wxFont &font)
   Converts string to a wxFont best represented by the given string. */
PHP_FUNCTION(php_wxFromString)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxFromString\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* string0;
    size_t string_len0;
    zval* font0;
    wxFont* object_pointer0_1 = 0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* string1;
    size_t string_len1;
    zval* colour1;
    wxColour* object_pointer1_1 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sz' (&string0, &string_len0, &font0)\n");
        #endif

        char parse_parameters_string[] = "sz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &string0, &string_len0, &font0 ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(font0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFont_P(font0)->object_type;
                    argument_native_object = (void*) Z_wxFont_P(font0)->native_object;
                    object_pointer0_1 = (wxFont*) argument_native_object;
                    if (!object_pointer0_1 || (argument_type != PHP_WXFONT_TYPE))
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(font0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sz' (&string1, &string_len1, &colour1)\n");
        #endif

        char parse_parameters_string[] = "sz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &string1, &string_len1, &colour1 ) == SUCCESS)
        {
            if(arguments_received >= 2){
                if(Z_TYPE_P(colour1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(colour1)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(colour1)->native_object;
                    object_pointer1_1 = (wxColour*) argument_native_object;
                    if (!object_pointer1_1 || (argument_type != PHP_WXCOLOUR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'colour' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(colour1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'colour' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxFromString(wxString(string0, wxConvUTF8), (wxFont*) object_pointer0_1))\n\n");
                #endif

                RETVAL_BOOL(wxFromString(wxString(string0, wxConvUTF8), (wxFont*) object_pointer0_1));


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxFromString(wxString(string1, wxConvUTF8), (wxColour*) object_pointer1_1))\n\n");
                #endif

                RETVAL_BOOL(wxFromString(wxString(string1, wxConvUTF8), (wxColour*) object_pointer1_1));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxFromString()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxToString(wxFont font)
   Converts the given wxFont into a string. */
PHP_FUNCTION(php_wxToString)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxToString\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* font0;
    wxFont* object_pointer0_0 = 0;
    bool overload0_called = false;

    //Parameters for overload 1
    zval* colour1;
    wxColour* object_pointer1_0 = 0;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&font0, php_wxFont_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &font0, php_wxFont_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(font0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFont_P(font0)->object_type;
                    argument_native_object = (void*) Z_wxFont_P(font0)->native_object;
                    object_pointer0_0 = (wxFont*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(font0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&colour1, php_wxColour_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &colour1, php_wxColour_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(colour1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(colour1)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(colour1)->native_object;
                    object_pointer1_0 = (wxColour*) argument_native_object;
                    if (!object_pointer1_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'colour' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(colour1) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'colour' not null, could not be retreived correctly.");
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxToString(*(wxFont*) object_pointer0_0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxToString(*(wxFont*) object_pointer0_0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxToString(*(wxColour*) object_pointer1_0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxToString(*(wxColour*) object_pointer1_0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxToString()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxSafeShowMessage(string title, string text)
   This function shows a message to the user in a safe way and should be safe to call even before the application has been initialized or if it is currently in some other strange state (for example, about to crash). */
PHP_FUNCTION(php_wxSafeShowMessage)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxSafeShowMessage\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* title0;
    size_t title_len0;
    char* text0;
    size_t text_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&title0, &title_len0, &text0, &text_len0)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &title0, &title_len0, &text0, &text_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxSafeShowMessage(wxString(title0, wxConvUTF8), wxString(text0, wxConvUTF8))\n\n");
                #endif

                wxSafeShowMessage(wxString(title0, wxConvUTF8), wxString(text0, wxConvUTF8));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxSafeShowMessage()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxSysErrorCode()
   Returns the error code from the last system call. */
PHP_FUNCTION(php_wxSysErrorCode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxSysErrorCode\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxSysErrorCode())\n\n");
                #endif

                RETVAL_LONG(wxSysErrorCode());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxSysErrorCode()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxIsMainThread()
   Returns true if this thread is the main one. */
PHP_FUNCTION(php_wxIsMainThread)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxIsMainThread\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsMainThread())\n\n");
                #endif

                RETVAL_BOOL(wxIsMainThread());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxIsMainThread()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxMutexGuiEnter()
   This function must be called when any thread other than the main GUI thread wants to get access to the GUI library. */
PHP_FUNCTION(php_wxMutexGuiEnter)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxMutexGuiEnter\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxMutexGuiEnter()\n\n");
                #endif

                wxMutexGuiEnter();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxMutexGuiEnter()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxMutexGuiLeave()
   This function is only defined on platforms which support preemptive threads. */
PHP_FUNCTION(php_wxMutexGuiLeave)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxMutexGuiLeave\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxMutexGuiLeave()\n\n");
                #endif

                wxMutexGuiLeave();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxMutexGuiLeave()\n"
        );
    }
}
/* }}} */

/* {{{ proto void wxAboutBox(wxAboutDialogInfo info, wxWindow parent)
   This function shows the standard about dialog containing
   the information specified in info. */
PHP_FUNCTION(php_wxAboutBox)
{
    wxAboutDialogInfo *info;
    zval* object;

    char parse_parameters[] = "O";

    if(
        zend_parse_parameters(
            ZEND_NUM_ARGS(),
            parse_parameters,
            &object,
            php_wxAboutDialogInfo_entry
        ) == FAILURE
    )
    {
        RETURN_NULL();
    }

    info = (wxAboutDialogInfo*)
        Z_wxAboutDialogInfo_P(object)->native_object
    ;

    wxAboutBox(*info);
}
/* }}} */

/* {{{ proto int wxBase64Encode(string &dst, int dstLen, void src, int srcLen)
   This function encodes the given data using base64. */
PHP_FUNCTION(php_wxBase64Encode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxBase64Encode\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* dst0;
    size_t dst_len0;
    zval dst0_ref;
    long dstLen0;
    char* src0;
    size_t src_len0;
    long srcLen0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* src1;
    size_t src_len1;
    long srcLen1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'slsl' (&dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0)\n");
        #endif

        char parse_parameters_string[] = "slsl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zzzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dst0_ref, dummy, dummy, dummy );
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sl' (&src1, &src_len1, &srcLen1)\n");
        #endif

        char parse_parameters_string[] = "sl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &src1, &src_len1, &srcLen1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxBase64Encode(dst0, (size_t) dstLen0, (const void*) src0, (size_t) srcLen0))\n\n");
                #endif

                RETVAL_LONG(wxBase64Encode(dst0, (size_t) dstLen0, (const void*) src0, (size_t) srcLen0));

                ZVAL_STRING(&dst0_ref, dst0);

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxBase64Encode((const void*) src1, (size_t) srcLen1).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = wxBase64Encode((const void*) src1, (size_t) srcLen1);
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxBase64Encode()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxBase64DecodedSize(int srcLen)
   Returns the size of the buffer necessary to contain the data encoded in a base64 string of length srcLen. */
PHP_FUNCTION(php_wxBase64DecodedSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxBase64DecodedSize\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long srcLen0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&srcLen0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &srcLen0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxBase64DecodedSize((size_t) srcLen0))\n\n");
                #endif

                RETVAL_LONG(wxBase64DecodedSize((size_t) srcLen0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxBase64DecodedSize()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxBase64EncodedSize(int len)
   Returns the length of the string with base64 representation of a buffer of specified size len. */
PHP_FUNCTION(php_wxBase64EncodedSize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxBase64EncodedSize\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&len0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxBase64EncodedSize((size_t) len0))\n\n");
                #endif

                RETVAL_LONG(wxBase64EncodedSize((size_t) len0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxBase64EncodedSize()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxBase64Decode(void dst, int dstLen, string src, int srcLen, wxBase64DecodeMode mode, int &posErr)
   This function decodes a Base64-encoded string. */
PHP_FUNCTION(php_wxBase64Decode)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxBase64Decode\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* dst0;
    size_t dst_len0;
    zval dst0_ref;
    long dstLen0;
    char* src0;
    size_t src_len0;
    long srcLen0;
    long mode0;
    long* posErr0;
    zval posErr0_ref;
    bool overload0_called = false;

    //Parameters for overload 1
    char* dst1;
    size_t dst_len1;
    zval dst1_ref;
    long dstLen1;
    char* str1;
    size_t str_len1;
    long mode1;
    long* posErr1;
    zval posErr1_ref;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 6)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sls|lll' (&dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0, &mode0, posErr0)\n");
        #endif

        char parse_parameters_string[] = "sls|lll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0, &mode0, posErr0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zzz|zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dst0_ref, dummy, dummy, dummy, dummy, posErr0_ref );
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 3  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sls|ll' (&dst1, &dst_len1, &dstLen1, &str1, &str_len1, &mode1, posErr1)\n");
        #endif

        char parse_parameters_string[] = "sls|ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dst1, &dst_len1, &dstLen1, &str1, &str_len1, &mode1, posErr1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;

            char parse_references_string[] = "zzz|zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dst1_ref, dummy, dummy, dummy, posErr1_ref );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0))\n\n");
                #endif

                RETVAL_LONG(wxBase64Decode((void*) dst0, (size_t) dstLen0, src0));

                ZVAL_STRING(&dst0_ref, (char*) dst0);

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0))\n\n");
                #endif

                RETVAL_LONG(wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0));

                ZVAL_STRING(&dst0_ref, (char*) dst0);

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0))\n\n");
                #endif

                RETVAL_LONG(wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0));

                ZVAL_STRING(&dst0_ref, (char*) dst0);

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0, (size_t*) posErr0))\n\n");
                #endif

                RETVAL_LONG(wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0, (size_t*) posErr0));

                ZVAL_STRING(&dst0_ref, (char*) dst0);
                size_t elements_returned0_5 = sizeof(posErr0)/sizeof(*posErr0);
                array_init(&posErr0_ref);
                for(size_t i=0; i<elements_returned0_5; i++)
                {
                    add_next_index_long(&posErr0_ref, posErr0[i]);
                }

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8)));

                ZVAL_STRING(&dst1_ref, (char*) dst1);

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1))\n\n");
                #endif

                RETVAL_LONG(wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1));

                ZVAL_STRING(&dst1_ref, (char*) dst1);

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1, (size_t*) posErr1))\n\n");
                #endif

                RETVAL_LONG(wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1, (size_t*) posErr1));

                ZVAL_STRING(&dst1_ref, (char*) dst1);
                size_t elements_returned1_4 = sizeof(posErr1)/sizeof(*posErr1);
                array_init(&posErr1_ref);
                for(size_t i=0; i<elements_returned1_4; i++)
                {
                    add_next_index_long(&posErr1_ref, posErr1[i]);
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxBase64Decode()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxGetSingleChoiceIndex(string message, string caption, array aChoices, wxWindow &parent, int x, int y, bool centre, int width, int height, int initialSelection)
   Same as wxGetSingleChoice() but returns the index representing the selected string. */
PHP_FUNCTION(php_wxGetSingleChoiceIndex)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetSingleChoiceIndex\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* message0;
    size_t message_len0;
    char* caption0;
    size_t caption_len0;
    zval* aChoices0;
    zval* parent0;
    wxWindow* object_pointer0_3 = 0;
    long x0;
    long y0;
    bool centre0;
    long width0;
    long height0;
    long initialSelection0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* message1;
    size_t message_len1;
    char* caption1;
    size_t caption_len1;
    long n1;
    zval* choices1;
    zval* parent1;
    wxWindow* object_pointer1_4 = 0;
    long x1;
    long y1;
    bool centre1;
    long width1;
    long height1;
    long initialSelection1;
    bool overload1_called = false;

    //Parameters for overload 2
    char* message2;
    size_t message_len2;
    char* caption2;
    size_t caption_len2;
    zval* choices2;
    long initialSelection2;
    zval* parent2;
    wxWindow* object_pointer2_4 = 0;
    bool overload2_called = false;

    //Parameters for overload 3
    char* message3;
    size_t message_len3;
    char* caption3;
    size_t caption_len3;
    long n3;
    zval* choices3;
    long initialSelection3;
    zval* parent3;
    wxWindow* object_pointer3_5 = 0;
    bool overload3_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 10)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssa|zllblll' (&message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0)\n");
        #endif

        char parse_parameters_string[] = "ssa|zllblll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0 ) == SUCCESS)
        {
            if(arguments_received >= 4){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_3 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 4  && arguments_received <= 11)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssla|zllblll' (&message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1)\n");
        #endif

        char parse_parameters_string[] = "ssla|zllblll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1 ) == SUCCESS)
        {
            if(arguments_received >= 5){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_4 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_4 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received >= 4  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssal|z' (&message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2)\n");
        #endif

        char parse_parameters_string[] = "ssal|z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2 ) == SUCCESS)
        {
            if(arguments_received >= 5){
                if(Z_TYPE_P(parent2) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent2)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent2)->native_object;
                    object_pointer2_4 = (wxWindow*) argument_native_object;
                    if (!object_pointer2_4 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        goto overload3;
                    }
                }
                else if(Z_TYPE_P(parent2) != IS_NULL)
                {
                    goto overload3;
                }
            }

            overload2_called = true;
            already_called = true;
        }
    }

    //Overload 3
    overload3:
    if(!already_called && arguments_received >= 5  && arguments_received <= 6)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sslal|z' (&message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3)\n");
        #endif

        char parse_parameters_string[] = "sslal|z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3 ) == SUCCESS)
        {
            if(arguments_received >= 6){
                if(Z_TYPE_P(parent3) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent3)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent3)->native_object;
                    object_pointer3_5 = (wxWindow*) argument_native_object;
                    if (!object_pointer3_5 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent3) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            overload3_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        wxArrayString strings_array0_2;
        bool strings_continue0_2 = true;

        switch(arguments_received)
        {
            case 3:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2));


                return;
                break;
            }
            case 4:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3));


                return;
                break;
            }
            case 5:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0));


                return;
                break;
            }
            case 6:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0));


                return;
                break;
            }
            case 7:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0));


                return;
                break;
            }
            case 8:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0));


                return;
                break;
            }
            case 9:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0));


                return;
                break;
            }
            case 10:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0));


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        int array_count1_3 = 1;
        HashTable* arr_hash1_3;
        if(arguments_received > 3)
        {
            arr_hash1_3 = Z_ARRVAL_P(choices1);
            array_count1_3 = zend_hash_num_elements(arr_hash1_3);
        }
        wxString* strings_array1_3 = new wxString[array_count1_3];
        bool strings_continue1_3 = true;

        switch(arguments_received)
        {
            case 4:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3));

                delete[] strings_array1_3;

                return;
                break;
            }
            case 5:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4));

                delete[] strings_array1_3;

                return;
                break;
            }
            case 6:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1));

                delete[] strings_array1_3;

                return;
                break;
            }
            case 7:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1));

                delete[] strings_array1_3;

                return;
                break;
            }
            case 8:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1));

                delete[] strings_array1_3;

                return;
                break;
            }
            case 9:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1));

                delete[] strings_array1_3;

                return;
                break;
            }
            case 10:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1));

                delete[] strings_array1_3;

                return;
                break;
            }
            case 11:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1));

                delete[] strings_array1_3;

                return;
                break;
            }
        }
    }

    if(overload2_called)
    {
        wxArrayString strings_array2_2;
        bool strings_continue2_2 = true;

        switch(arguments_received)
        {
            case 4:
            {
                int array_index2_2 = 0;
                zval* temp_array_value2_2 = 0;
                while(strings_continue2_2)
                {
                    if((temp_array_value2_2 = zend_hash_index_find(HASH_OF(choices2), array_index2_2)) != NULL)
                    {
                        convert_to_string(temp_array_value2_2);
                        strings_array2_2.Add(wxString(Z_STRVAL_P(temp_array_value2_2), wxConvUTF8));
                        array_index2_2++;
                    }
                    else
                    {
                        strings_continue2_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2));


                return;
                break;
            }
            case 5:
            {
                int array_index2_2 = 0;
                zval* temp_array_value2_2 = 0;
                while(strings_continue2_2)
                {
                    if((temp_array_value2_2 = zend_hash_index_find(HASH_OF(choices2), array_index2_2)) != NULL)
                    {
                        convert_to_string(temp_array_value2_2);
                        strings_array2_2.Add(wxString(Z_STRVAL_P(temp_array_value2_2), wxConvUTF8));
                        array_index2_2++;
                    }
                    else
                    {
                        strings_continue2_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4));


                return;
                break;
            }
        }
    }

    if(overload3_called)
    {
        int array_count3_3 = 1;
        HashTable* arr_hash3_3;
        if(arguments_received > 3)
        {
            arr_hash3_3 = Z_ARRVAL_P(choices3);
            array_count3_3 = zend_hash_num_elements(arr_hash3_3);
        }
        wxString* strings_array3_3 = new wxString[array_count3_3];
        bool strings_continue3_3 = true;

        switch(arguments_received)
        {
            case 5:
            {
                int array_index3_3 = 0;
                zval* temp_array_value3_3 = 0;
                while(strings_continue3_3)
                {
                    if((temp_array_value3_3 = zend_hash_index_find(HASH_OF(choices3), array_index3_3)) != NULL)
                    {
                        convert_to_string(temp_array_value3_3);
                        strings_array3_3[array_index3_3] = wxString(Z_STRVAL_P(temp_array_value3_3), wxConvUTF8);
                        array_index3_3++;
                    }
                    else
                    {
                        strings_continue3_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3));

                delete[] strings_array3_3;

                return;
                break;
            }
            case 6:
            {
                int array_index3_3 = 0;
                zval* temp_array_value3_3 = 0;
                while(strings_continue3_3)
                {
                    if((temp_array_value3_3 = zend_hash_index_find(HASH_OF(choices3), array_index3_3)) != NULL)
                    {
                        convert_to_string(temp_array_value3_3);
                        strings_array3_3[array_index3_3] = wxString(Z_STRVAL_P(temp_array_value3_3), wxConvUTF8);
                        array_index3_3++;
                    }
                    else
                    {
                        strings_continue3_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5))\n\n");
                #endif

                RETVAL_LONG(wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5));

                delete[] strings_array3_3;

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetSingleChoiceIndex()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxGetSingleChoice(string message, string caption, array aChoices, wxWindow &parent, int x, int y, bool centre, int width, int height, int initialSelection)
   Pops up a dialog box containing a message, OK/Cancel buttons and a single-selection listbox. */
PHP_FUNCTION(php_wxGetSingleChoice)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetSingleChoice\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* message0;
    size_t message_len0;
    char* caption0;
    size_t caption_len0;
    zval* aChoices0;
    zval* parent0;
    wxWindow* object_pointer0_3 = 0;
    long x0;
    long y0;
    bool centre0;
    long width0;
    long height0;
    long initialSelection0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* message1;
    size_t message_len1;
    char* caption1;
    size_t caption_len1;
    long n1;
    zval* choices1;
    zval* parent1;
    wxWindow* object_pointer1_4 = 0;
    long x1;
    long y1;
    bool centre1;
    long width1;
    long height1;
    long initialSelection1;
    bool overload1_called = false;

    //Parameters for overload 2
    char* message2;
    size_t message_len2;
    char* caption2;
    size_t caption_len2;
    zval* choices2;
    long initialSelection2;
    zval* parent2;
    wxWindow* object_pointer2_4 = 0;
    bool overload2_called = false;

    //Parameters for overload 3
    char* message3;
    size_t message_len3;
    char* caption3;
    size_t caption_len3;
    long n3;
    zval* choices3;
    long initialSelection3;
    zval* parent3;
    wxWindow* object_pointer3_5 = 0;
    bool overload3_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 3  && arguments_received <= 10)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssa|zllblll' (&message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0)\n");
        #endif

        char parse_parameters_string[] = "ssa|zllblll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0 ) == SUCCESS)
        {
            if(arguments_received >= 4){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_3 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        goto overload1;
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    goto overload1;
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 4  && arguments_received <= 11)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssla|zllblll' (&message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1)\n");
        #endif

        char parse_parameters_string[] = "ssla|zllblll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1 ) == SUCCESS)
        {
            if(arguments_received >= 5){
                if(Z_TYPE_P(parent1) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent1)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent1)->native_object;
                    object_pointer1_4 = (wxWindow*) argument_native_object;
                    if (!object_pointer1_4 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        goto overload2;
                    }
                }
                else if(Z_TYPE_P(parent1) != IS_NULL)
                {
                    goto overload2;
                }
            }

            overload1_called = true;
            already_called = true;
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received >= 4  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssal|z' (&message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2)\n");
        #endif

        char parse_parameters_string[] = "ssal|z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2 ) == SUCCESS)
        {
            if(arguments_received >= 5){
                if(Z_TYPE_P(parent2) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent2)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent2)->native_object;
                    object_pointer2_4 = (wxWindow*) argument_native_object;
                    if (!object_pointer2_4 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        goto overload3;
                    }
                }
                else if(Z_TYPE_P(parent2) != IS_NULL)
                {
                    goto overload3;
                }
            }

            overload2_called = true;
            already_called = true;
        }
    }

    //Overload 3
    overload3:
    if(!already_called && arguments_received >= 5  && arguments_received <= 6)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sslal|z' (&message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3)\n");
        #endif

        char parse_parameters_string[] = "sslal|z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3 ) == SUCCESS)
        {
            if(arguments_received >= 6){
                if(Z_TYPE_P(parent3) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent3)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent3)->native_object;
                    object_pointer3_5 = (wxWindow*) argument_native_object;
                    if (!object_pointer3_5 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent3) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            overload3_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        wxArrayString strings_array0_2;
        bool strings_continue0_2 = true;

        switch(arguments_received)
        {
            case 3:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return3;
                value_to_return3 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2);
                RETVAL_STRING(value_to_return3.ToUTF8().data());


                return;
                break;
            }
            case 4:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return4;
                value_to_return4 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3);
                RETVAL_STRING(value_to_return4.ToUTF8().data());


                return;
                break;
            }
            case 5:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return5;
                value_to_return5 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0);
                RETVAL_STRING(value_to_return5.ToUTF8().data());


                return;
                break;
            }
            case 6:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return6;
                value_to_return6 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0);
                RETVAL_STRING(value_to_return6.ToUTF8().data());


                return;
                break;
            }
            case 7:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return7;
                value_to_return7 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0);
                RETVAL_STRING(value_to_return7.ToUTF8().data());


                return;
                break;
            }
            case 8:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return8;
                value_to_return8 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0);
                RETVAL_STRING(value_to_return8.ToUTF8().data());


                return;
                break;
            }
            case 9:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return9;
                value_to_return9 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0);
                RETVAL_STRING(value_to_return9.ToUTF8().data());


                return;
                break;
            }
            case 10:
            {
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(aChoices0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return10;
                value_to_return10 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0);
                RETVAL_STRING(value_to_return10.ToUTF8().data());


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        int array_count1_3 = 1;
        HashTable* arr_hash1_3;
        if(arguments_received > 3)
        {
            arr_hash1_3 = Z_ARRVAL_P(choices1);
            array_count1_3 = zend_hash_num_elements(arr_hash1_3);
        }
        wxString* strings_array1_3 = new wxString[array_count1_3];
        bool strings_continue1_3 = true;

        switch(arguments_received)
        {
            case 4:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return4;
                value_to_return4 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3);
                RETVAL_STRING(value_to_return4.ToUTF8().data());

                delete[] strings_array1_3;

                return;
                break;
            }
            case 5:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return5;
                value_to_return5 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4);
                RETVAL_STRING(value_to_return5.ToUTF8().data());

                delete[] strings_array1_3;

                return;
                break;
            }
            case 6:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return6;
                value_to_return6 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1);
                RETVAL_STRING(value_to_return6.ToUTF8().data());

                delete[] strings_array1_3;

                return;
                break;
            }
            case 7:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return7;
                value_to_return7 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1);
                RETVAL_STRING(value_to_return7.ToUTF8().data());

                delete[] strings_array1_3;

                return;
                break;
            }
            case 8:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return8;
                value_to_return8 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1);
                RETVAL_STRING(value_to_return8.ToUTF8().data());

                delete[] strings_array1_3;

                return;
                break;
            }
            case 9:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return9;
                value_to_return9 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1);
                RETVAL_STRING(value_to_return9.ToUTF8().data());

                delete[] strings_array1_3;

                return;
                break;
            }
            case 10:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return10;
                value_to_return10 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1);
                RETVAL_STRING(value_to_return10.ToUTF8().data());

                delete[] strings_array1_3;

                return;
                break;
            }
            case 11:
            {
                int array_index1_3 = 0;
                zval* temp_array_value1_3 = 0;
                while(strings_continue1_3)
                {
                    if((temp_array_value1_3 = zend_hash_index_find(HASH_OF(choices1), array_index1_3)) != NULL)
                    {
                        convert_to_string(temp_array_value1_3);
                        strings_array1_3[array_index1_3] = wxString(Z_STRVAL_P(temp_array_value1_3), wxConvUTF8);
                        array_index1_3++;
                    }
                    else
                    {
                        strings_continue1_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return11;
                value_to_return11 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, strings_array1_3, (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1);
                RETVAL_STRING(value_to_return11.ToUTF8().data());

                delete[] strings_array1_3;

                return;
                break;
            }
        }
    }

    if(overload2_called)
    {
        wxArrayString strings_array2_2;
        bool strings_continue2_2 = true;

        switch(arguments_received)
        {
            case 4:
            {
                int array_index2_2 = 0;
                zval* temp_array_value2_2 = 0;
                while(strings_continue2_2)
                {
                    if((temp_array_value2_2 = zend_hash_index_find(HASH_OF(choices2), array_index2_2)) != NULL)
                    {
                        convert_to_string(temp_array_value2_2);
                        strings_array2_2.Add(wxString(Z_STRVAL_P(temp_array_value2_2), wxConvUTF8));
                        array_index2_2++;
                    }
                    else
                    {
                        strings_continue2_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return4;
                value_to_return4 = wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2);
                RETVAL_STRING(value_to_return4.ToUTF8().data());


                return;
                break;
            }
            case 5:
            {
                int array_index2_2 = 0;
                zval* temp_array_value2_2 = 0;
                while(strings_continue2_2)
                {
                    if((temp_array_value2_2 = zend_hash_index_find(HASH_OF(choices2), array_index2_2)) != NULL)
                    {
                        convert_to_string(temp_array_value2_2);
                        strings_array2_2.Add(wxString(Z_STRVAL_P(temp_array_value2_2), wxConvUTF8));
                        array_index2_2++;
                    }
                    else
                    {
                        strings_continue2_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return5;
                value_to_return5 = wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4);
                RETVAL_STRING(value_to_return5.ToUTF8().data());


                return;
                break;
            }
        }
    }

    if(overload3_called)
    {
        int array_count3_3 = 1;
        HashTable* arr_hash3_3;
        if(arguments_received > 3)
        {
            arr_hash3_3 = Z_ARRVAL_P(choices3);
            array_count3_3 = zend_hash_num_elements(arr_hash3_3);
        }
        wxString* strings_array3_3 = new wxString[array_count3_3];
        bool strings_continue3_3 = true;

        switch(arguments_received)
        {
            case 5:
            {
                int array_index3_3 = 0;
                zval* temp_array_value3_3 = 0;
                while(strings_continue3_3)
                {
                    if((temp_array_value3_3 = zend_hash_index_find(HASH_OF(choices3), array_index3_3)) != NULL)
                    {
                        convert_to_string(temp_array_value3_3);
                        strings_array3_3[array_index3_3] = wxString(Z_STRVAL_P(temp_array_value3_3), wxConvUTF8);
                        array_index3_3++;
                    }
                    else
                    {
                        strings_continue3_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return5;
                value_to_return5 = wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3);
                RETVAL_STRING(value_to_return5.ToUTF8().data());

                delete[] strings_array3_3;

                return;
                break;
            }
            case 6:
            {
                int array_index3_3 = 0;
                zval* temp_array_value3_3 = 0;
                while(strings_continue3_3)
                {
                    if((temp_array_value3_3 = zend_hash_index_find(HASH_OF(choices3), array_index3_3)) != NULL)
                    {
                        convert_to_string(temp_array_value3_3);
                        strings_array3_3[array_index3_3] = wxString(Z_STRVAL_P(temp_array_value3_3), wxConvUTF8);
                        array_index3_3++;
                    }
                    else
                    {
                        strings_continue3_3 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return6;
                value_to_return6 = wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5);
                RETVAL_STRING(value_to_return6.ToUTF8().data());

                delete[] strings_array3_3;

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetSingleChoice()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxColour wxGetColourFromUser(wxWindow &parent, wxColour colInit, string caption, wxColourData &data)
   Shows the colour selection dialog and returns the colour selected by user or invalid colour (use wxColour::IsOk() to test whether a colour is valid) if the dialog was cancelled. */
PHP_FUNCTION(php_wxGetColourFromUser)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetColourFromUser\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    zval* colInit0;
    wxColour* object_pointer0_1 = 0;
    char* caption0;
    size_t caption_len0;
    zval* data0;
    wxColourData* object_pointer0_3 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zO|sz' (&parent0, &colInit0, php_wxColour_entry, &caption0, &caption_len0, &data0)\n");
        #endif

        char parse_parameters_string[] = "zO|sz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &colInit0, php_wxColour_entry, &caption0, &caption_len0, &data0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(colInit0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColour_P(colInit0)->object_type;
                    argument_native_object = (void*) Z_wxColour_P(colInit0)->native_object;
                    object_pointer0_1 = (wxColour*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'colInit' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(colInit0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'colInit' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(data0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxColourData_P(data0)->object_type;
                    argument_native_object = (void*) Z_wxColourData_P(data0)->native_object;
                    object_pointer0_3 = (wxColourData*) argument_native_object;
                    if (!object_pointer0_3 || (argument_type != PHP_WXCOLOURDATA_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'data' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(data0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'data' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1) to return new object\n\n");
                #endif

                wxColour value_to_return2;
                value_to_return2 = wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1);
                ((wxRefCounter *) value_to_return2.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return2, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo2 = Z_wxColour_P(return_value);
                zo2->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8)) to return new object\n\n");
                #endif

                wxColour value_to_return3;
                value_to_return3 = wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8));
                ((wxRefCounter *) value_to_return3.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return3, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo3 = Z_wxColour_P(return_value);
                zo3->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8), (wxColourData*) object_pointer0_3) to return new object\n\n");
                #endif

                wxColour value_to_return4;
                value_to_return4 = wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8), (wxColourData*) object_pointer0_3);
                ((wxRefCounter *) value_to_return4.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
                memcpy(ptr, (void*) &value_to_return4, sizeof(wxColour));
                object_init_ex(return_value, php_wxColour_entry);
                ((wxColour_php*)ptr)->phpObj = *return_value;
                zo_wxColour* zo4 = Z_wxColour_P(return_value);
                zo4->native_object = (wxColour_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetColourFromUser()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxDC wxAutoBufferedPaintDCFactory(wxWindow &window)
   Check if the window is natively double buffered and will return a wxPaintDC if it is, a wxBufferedPaintDC otherwise. */
PHP_FUNCTION(php_wxAutoBufferedPaintDCFactory)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxAutoBufferedPaintDCFactory\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* window0;
    wxWindow* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&window0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &window0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(window0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(window0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(window0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'window' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(window0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'window' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxAutoBufferedPaintDCFactory((wxWindow*) object_pointer0_0) to return object pointer\n\n");
                #endif

                wxDC_php* value_to_return1;
                value_to_return1 = (wxDC_php*) wxAutoBufferedPaintDCFactory((wxWindow*) object_pointer0_0);
                if(value_to_return1 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return1->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return1->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return1->phpObj);
                        zval_add_ref(&value_to_return1->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxDC_entry);
                    Z_wxDC_P(return_value)->native_object = (wxDC_php*) value_to_return1;
                }



                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxAutoBufferedPaintDCFactory()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxAbort()
   Exits the program immediately. */
PHP_FUNCTION(php_wxAbort)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxAbort\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxAbort()\n\n");
                #endif

                wxAbort();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxAbort()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDisableAsserts()
   Disable the condition checks in the assertions. */
PHP_FUNCTION(php_wxDisableAsserts)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxDisableAsserts\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxDisableAsserts()\n\n");
                #endif

                wxDisableAsserts();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxDisableAsserts()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxIsDebuggerRunning()
   Returns true if the program is running under debugger, false otherwise. */
PHP_FUNCTION(php_wxIsDebuggerRunning)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxIsDebuggerRunning\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsDebuggerRunning())\n\n");
                #endif

                RETVAL_BOOL(wxIsDebuggerRunning());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxIsDebuggerRunning()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxSetDefaultAssertHandler()
   Reset the assert handler to default function which shows a message box when an assert happens. */
PHP_FUNCTION(php_wxSetDefaultAssertHandler)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxSetDefaultAssertHandler\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxSetDefaultAssertHandler()\n\n");
                #endif

                wxSetDefaultAssertHandler();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxSetDefaultAssertHandler()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxTrap()
   Generate a debugger exception meaning that the control is passed to the debugger if one is attached to the process. */
PHP_FUNCTION(php_wxTrap)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxTrap\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxTrap()\n\n");
                #endif

                wxTrap();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxTrap()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxDirSelector(string message, string default_path, int style, wxPoint pos, wxWindow &parent)
   Pops up a directory selector dialog. */
PHP_FUNCTION(php_wxDirSelector)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxDirSelector\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* message0;
    size_t message_len0;
    char* default_path0;
    size_t default_path_len0;
    long style0;
    zval* pos0;
    wxPoint* object_pointer0_3 = 0;
    zval* parent0;
    wxWindow* object_pointer0_4 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 5)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|sslOz' (&message0, &message_len0, &default_path0, &default_path_len0, &style0, &pos0, php_wxPoint_entry, &parent0)\n");
        #endif

        char parse_parameters_string[] = "|sslOz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message0, &message_len0, &default_path0, &default_path_len0, &style0, &pos0, php_wxPoint_entry, &parent0 ) == SUCCESS)
        {
            if(arguments_received >= 4){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_3 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 5){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_4 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_4 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxDirSelector().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = wxDirSelector();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxDirSelector(wxString(message0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8));
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return3;
                value_to_return3 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0);
                RETVAL_STRING(value_to_return3.ToUTF8().data());


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return4;
                value_to_return4 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3);
                RETVAL_STRING(value_to_return4.ToUTF8().data());


                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3, (wxWindow*) object_pointer0_4).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return5;
                value_to_return5 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3, (wxWindow*) object_pointer0_4);
                RETVAL_STRING(value_to_return5.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxDirSelector()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxNewEventType()
   Generates a new unique event type. */
PHP_FUNCTION(php_wxNewEventType)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxNewEventType\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxNewEventType())\n\n");
                #endif

                RETVAL_LONG(wxNewEventType());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxNewEventType()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxPostEvent(wxEvtHandler &dest, wxEvent event)
   In a GUI application, this function posts event to the specified dest object using wxEvtHandler::AddPendingEvent(). */
PHP_FUNCTION(php_wxPostEvent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxPostEvent\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* dest0;
    wxEvtHandler* object_pointer0_0 = 0;
    zval* event0;
    wxEvent* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zo' (&dest0, &event0)\n");
        #endif

        char parse_parameters_string[] = "zo";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest0, &event0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(dest0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxEvtHandler_P(dest0)->object_type;
                    argument_native_object = (void*) Z_wxEvtHandler_P(dest0)->native_object;
                    object_pointer0_0 = (wxEvtHandler*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'dest' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(dest0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'dest' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(event0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxEvent_P(event0)->object_type;
                    argument_native_object = (void*) Z_wxEvent_P(event0)->native_object;
                    object_pointer0_1 = (wxEvent*) argument_native_object;
                    if (!object_pointer0_1 || (argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'event' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(event0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'event' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxPostEvent((wxEvtHandler*) object_pointer0_0, *(wxEvent*) object_pointer0_1)\n\n");
                #endif

                wxPostEvent((wxEvtHandler*) object_pointer0_0, *(wxEvent*) object_pointer0_1);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxPostEvent()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxQueueEvent(wxEvtHandler &dest, wxEvent &event)
   Queue an event for processing on the given object. */
PHP_FUNCTION(php_wxQueueEvent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxQueueEvent\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* dest0;
    wxEvtHandler* object_pointer0_0 = 0;
    zval* event0;
    wxEvent* object_pointer0_1 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zz' (&dest0, &event0)\n");
        #endif

        char parse_parameters_string[] = "zz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest0, &event0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(dest0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxEvtHandler_P(dest0)->object_type;
                    argument_native_object = (void*) Z_wxEvtHandler_P(dest0)->native_object;
                    object_pointer0_0 = (wxEvtHandler*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXEVTHANDLER_TYPE && argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE && argument_type != PHP_WXVALIDATOR_TYPE && argument_type != PHP_WXTEXTVALIDATOR_TYPE && argument_type != PHP_WXGENERICVALIDATOR_TYPE && argument_type != PHP_WXMENU_TYPE && argument_type != PHP_WXAUIMANAGER_TYPE && argument_type != PHP_WXMOUSEEVENTSMANAGER_TYPE && argument_type != PHP_WXTIMER_TYPE && argument_type != PHP_WXEVENTBLOCKER_TYPE && argument_type != PHP_WXPROCESS_TYPE && argument_type != PHP_WXFILESYSTEMWATCHER_TYPE && argument_type != PHP_WXTASKBARICON_TYPE && argument_type != PHP_WXNOTIFICATIONMESSAGE_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'dest' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(dest0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'dest' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(event0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxEvent_P(event0)->object_type;
                    argument_native_object = (void*) Z_wxEvent_P(event0)->native_object;
                    object_pointer0_1 = (wxEvent*) argument_native_object;
                    if (!object_pointer0_1 || (argument_type != PHP_WXEVENT_TYPE && argument_type != PHP_WXMENUEVENT_TYPE && argument_type != PHP_WXKEYEVENT_TYPE && argument_type != PHP_WXCOMMANDEVENT_TYPE && argument_type != PHP_WXNOTIFYEVENT_TYPE && argument_type != PHP_WXTREEEVENT_TYPE && argument_type != PHP_WXBOOKCTRLEVENT_TYPE && argument_type != PHP_WXAUINOTEBOOKEVENT_TYPE && argument_type != PHP_WXAUITOOLBAREVENT_TYPE && argument_type != PHP_WXLISTEVENT_TYPE && argument_type != PHP_WXSPINEVENT_TYPE && argument_type != PHP_WXSPLITTEREVENT_TYPE && argument_type != PHP_WXSPINDOUBLEEVENT_TYPE && argument_type != PHP_WXGRIDSIZEEVENT_TYPE && argument_type != PHP_WXWIZARDEVENT_TYPE && argument_type != PHP_WXGRIDEVENT_TYPE && argument_type != PHP_WXGRIDRANGESELECTEVENT_TYPE && argument_type != PHP_WXDATAVIEWEVENT_TYPE && argument_type != PHP_WXHEADERCTRLEVENT_TYPE && argument_type != PHP_WXRIBBONBAREVENT_TYPE && argument_type != PHP_WXWEBVIEWEVENT_TYPE && argument_type != PHP_WXMEDIAEVENT_TYPE && argument_type != PHP_WXSTYLEDTEXTEVENT_TYPE && argument_type != PHP_WXCHILDFOCUSEVENT_TYPE && argument_type != PHP_WXHTMLCELLEVENT_TYPE && argument_type != PHP_WXHTMLLINKEVENT_TYPE && argument_type != PHP_WXHYPERLINKEVENT_TYPE && argument_type != PHP_WXCOLOURPICKEREVENT_TYPE && argument_type != PHP_WXFONTPICKEREVENT_TYPE && argument_type != PHP_WXSCROLLEVENT_TYPE && argument_type != PHP_WXWINDOWMODALDIALOGEVENT_TYPE && argument_type != PHP_WXDATEEVENT_TYPE && argument_type != PHP_WXCALENDAREVENT_TYPE && argument_type != PHP_WXWINDOWCREATEEVENT_TYPE && argument_type != PHP_WXWINDOWDESTROYEVENT_TYPE && argument_type != PHP_WXUPDATEUIEVENT_TYPE && argument_type != PHP_WXHELPEVENT_TYPE && argument_type != PHP_WXGRIDEDITORCREATEDEVENT_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANEEVENT_TYPE && argument_type != PHP_WXCLIPBOARDTEXTEVENT_TYPE && argument_type != PHP_WXFILECTRLEVENT_TYPE && argument_type != PHP_WXSASHEVENT_TYPE && argument_type != PHP_WXFILEDIRPICKEREVENT_TYPE && argument_type != PHP_WXCONTEXTMENUEVENT_TYPE && argument_type != PHP_WXRIBBONBUTTONBAREVENT_TYPE && argument_type != PHP_WXRIBBONGALLERYEVENT_TYPE && argument_type != PHP_WXCLOSEEVENT_TYPE && argument_type != PHP_WXACTIVATEEVENT_TYPE && argument_type != PHP_WXAUIMANAGEREVENT_TYPE && argument_type != PHP_WXSIZEEVENT_TYPE && argument_type != PHP_WXMOUSEEVENT_TYPE && argument_type != PHP_WXMOVEEVENT_TYPE && argument_type != PHP_WXTIMEREVENT_TYPE && argument_type != PHP_WXTHREADEVENT_TYPE && argument_type != PHP_WXSCROLLWINEVENT_TYPE && argument_type != PHP_WXSYSCOLOURCHANGEDEVENT_TYPE && argument_type != PHP_WXPROCESSEVENT_TYPE && argument_type != PHP_WXERASEEVENT_TYPE && argument_type != PHP_WXSETCURSOREVENT_TYPE && argument_type != PHP_WXIDLEEVENT_TYPE && argument_type != PHP_WXPAINTEVENT_TYPE && argument_type != PHP_WXPALETTECHANGEDEVENT_TYPE && argument_type != PHP_WXINITDIALOGEVENT_TYPE && argument_type != PHP_WXMAXIMIZEEVENT_TYPE && argument_type != PHP_WXNAVIGATIONKEYEVENT_TYPE && argument_type != PHP_WXFOCUSEVENT_TYPE && argument_type != PHP_WXFILESYSTEMWATCHEREVENT_TYPE && argument_type != PHP_WXDISPLAYCHANGEDEVENT_TYPE && argument_type != PHP_WXCALCULATELAYOUTEVENT_TYPE && argument_type != PHP_WXQUERYLAYOUTINFOEVENT_TYPE && argument_type != PHP_WXTASKBARICONEVENT_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'event' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(event0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'event' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxQueueEvent((wxEvtHandler*) object_pointer0_0, (wxEvent*) object_pointer0_1)\n\n");
                #endif

                wxQueueEvent((wxEvtHandler*) object_pointer0_0, (wxEvent*) object_pointer0_1);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxQueueEvent()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxFileSelector(string message, string default_path, string default_filename, string default_extension, string wildcard, int flags, wxWindow &parent, int x, int y)
   Pops up a file selector box. */
PHP_FUNCTION(php_wxFileSelector)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxFileSelector\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* message0;
    size_t message_len0;
    char* default_path0;
    size_t default_path_len0;
    char* default_filename0;
    size_t default_filename_len0;
    char* default_extension0;
    size_t default_extension_len0;
    char* wildcard0;
    size_t wildcard_len0;
    long flags0;
    zval* parent0;
    wxWindow* object_pointer0_6 = 0;
    long x0;
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 9)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|sssslzll' (&message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, &default_extension0, &default_extension_len0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "s|sssslzll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, &default_extension0, &default_extension_len0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0 ) == SUCCESS)
        {
            if(arguments_received >= 7){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_6 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_6 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxFileSelector(wxString(message0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8));
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return3;
                value_to_return3 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8));
                RETVAL_STRING(value_to_return3.ToUTF8().data());


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return4;
                value_to_return4 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8));
                RETVAL_STRING(value_to_return4.ToUTF8().data());


                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return5;
                value_to_return5 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8));
                RETVAL_STRING(value_to_return5.ToUTF8().data());


                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return6;
                value_to_return6 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0);
                RETVAL_STRING(value_to_return6.ToUTF8().data());


                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return7;
                value_to_return7 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6);
                RETVAL_STRING(value_to_return7.ToUTF8().data());


                return;
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return8;
                value_to_return8 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0);
                RETVAL_STRING(value_to_return8.ToUTF8().data());


                return;
                break;
            }
            case 9:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return9;
                value_to_return9 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0);
                RETVAL_STRING(value_to_return9.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxFileSelector()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxFileSelectorEx(string message, string default_path, string default_filename, int &indexDefaultExtension, string wildcard, int flags, wxWindow &parent, int x, int y)
   An extended version of wxFileSelector. */
PHP_FUNCTION(php_wxFileSelectorEx)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxFileSelectorEx\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* message0;
    size_t message_len0;
    char* default_path0;
    size_t default_path_len0;
    char* default_filename0;
    size_t default_filename_len0;
    long* indexDefaultExtension0;
    zval indexDefaultExtension0_ref;
    char* wildcard0;
    size_t wildcard_len0;
    long flags0;
    zval* parent0;
    wxWindow* object_pointer0_6 = 0;
    long x0;
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 9)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|ssslslzll' (&message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, indexDefaultExtension0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "|ssslslzll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, indexDefaultExtension0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0 ) == SUCCESS)
        {
            if(arguments_received >= 7){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_6 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_6 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "|zzzzzzzzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dummy, dummy, dummy, indexDefaultExtension0_ref, dummy, dummy, &dummy, dummy, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelectorEx().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = wxFileSelectorEx();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxFileSelectorEx(wxString(message0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8));
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return3;
                value_to_return3 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8));
                RETVAL_STRING(value_to_return3.ToUTF8().data());


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return4;
                value_to_return4 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0);
                RETVAL_STRING(value_to_return4.ToUTF8().data());

                size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
                array_init(&indexDefaultExtension0_ref);
                for(size_t i=0; i<elements_returned0_3; i++)
                {
                    add_next_index_long(&indexDefaultExtension0_ref, indexDefaultExtension0[i]);
                }

                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return5;
                value_to_return5 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8));
                RETVAL_STRING(value_to_return5.ToUTF8().data());

                size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
                array_init(&indexDefaultExtension0_ref);
                for(size_t i=0; i<elements_returned0_3; i++)
                {
                    add_next_index_long(&indexDefaultExtension0_ref, indexDefaultExtension0[i]);
                }

                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return6;
                value_to_return6 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0);
                RETVAL_STRING(value_to_return6.ToUTF8().data());

                size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
                array_init(&indexDefaultExtension0_ref);
                for(size_t i=0; i<elements_returned0_3; i++)
                {
                    add_next_index_long(&indexDefaultExtension0_ref, indexDefaultExtension0[i]);
                }

                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return7;
                value_to_return7 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6);
                RETVAL_STRING(value_to_return7.ToUTF8().data());

                size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
                array_init(&indexDefaultExtension0_ref);
                for(size_t i=0; i<elements_returned0_3; i++)
                {
                    add_next_index_long(&indexDefaultExtension0_ref, indexDefaultExtension0[i]);
                }

                return;
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return8;
                value_to_return8 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0);
                RETVAL_STRING(value_to_return8.ToUTF8().data());

                size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
                array_init(&indexDefaultExtension0_ref);
                for(size_t i=0; i<elements_returned0_3; i++)
                {
                    add_next_index_long(&indexDefaultExtension0_ref, indexDefaultExtension0[i]);
                }

                return;
                break;
            }
            case 9:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return9;
                value_to_return9 = wxFileSelectorEx(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), (int*) indexDefaultExtension0, wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0);
                RETVAL_STRING(value_to_return9.ToUTF8().data());

                size_t elements_returned0_3 = sizeof(indexDefaultExtension0)/sizeof(*indexDefaultExtension0);
                array_init(&indexDefaultExtension0_ref);
                for(size_t i=0; i<elements_returned0_3; i++)
                {
                    add_next_index_long(&indexDefaultExtension0_ref, indexDefaultExtension0[i]);
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxFileSelectorEx()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxLoadFileSelector(string what, string extension, string default_name, wxWindow &parent)
   Ask for filename to load. */
PHP_FUNCTION(php_wxLoadFileSelector)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxLoadFileSelector\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* what0;
    size_t what_len0;
    char* extension0;
    size_t extension_len0;
    char* default_name0;
    size_t default_name_len0;
    zval* parent0;
    wxWindow* object_pointer0_3 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss|sz' (&what0, &what_len0, &extension0, &extension_len0, &default_name0, &default_name_len0, &parent0)\n");
        #endif

        char parse_parameters_string[] = "ss|sz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &what0, &what_len0, &extension0, &extension_len0, &default_name0, &default_name_len0, &parent0 ) == SUCCESS)
        {
            if(arguments_received >= 4){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_3 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8));
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return3;
                value_to_return3 = wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8));
                RETVAL_STRING(value_to_return3.ToUTF8().data());


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return4;
                value_to_return4 = wxLoadFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8), (wxWindow*) object_pointer0_3);
                RETVAL_STRING(value_to_return4.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxLoadFileSelector()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxSaveFileSelector(string what, string extension, string default_name, wxWindow &parent)
   Ask for filename to save. */
PHP_FUNCTION(php_wxSaveFileSelector)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxSaveFileSelector\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* what0;
    size_t what_len0;
    char* extension0;
    size_t extension_len0;
    char* default_name0;
    size_t default_name_len0;
    zval* parent0;
    wxWindow* object_pointer0_3 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss|sz' (&what0, &what_len0, &extension0, &extension_len0, &default_name0, &default_name_len0, &parent0)\n");
        #endif

        char parse_parameters_string[] = "ss|sz";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &what0, &what_len0, &extension0, &extension_len0, &default_name0, &default_name_len0, &parent0 ) == SUCCESS)
        {
            if(arguments_received >= 4){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_3 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8));
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return3;
                value_to_return3 = wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8));
                RETVAL_STRING(value_to_return3.ToUTF8().data());


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return4;
                value_to_return4 = wxSaveFileSelector(wxString(what0, wxConvUTF8), wxString(extension0, wxConvUTF8), wxString(default_name0, wxConvUTF8), (wxWindow*) object_pointer0_3);
                RETVAL_STRING(value_to_return4.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxSaveFileSelector()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxGetOSDirectory()
   Returns the Windows directory under Windows; other platforms return an empty string. */
PHP_FUNCTION(php_wxGetOSDirectory)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetOSDirectory\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetOSDirectory().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = wxGetOSDirectory();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetOSDirectory()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxParseCommonDialogsFilter(string wildCard, array &descriptions, array &filters)
   Parses the wildCard, returning the number of filters. */
PHP_FUNCTION(php_wxParseCommonDialogsFilter)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxParseCommonDialogsFilter\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* wildCard0;
    size_t wildCard_len0;
    zval* descriptions0;
    zval descriptions0_ref;
    zval* filters0;
    zval filters0_ref;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'saa' (&wildCard0, &wildCard_len0, &descriptions0, &filters0)\n");
        #endif

        char parse_parameters_string[] = "saa";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &wildCard0, &wildCard_len0, &descriptions0, &filters0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        wxArrayString strings_array0_1;
        bool strings_continue0_1 = true;

        wxArrayString strings_array0_2;
        bool strings_continue0_2 = true;

        switch(arguments_received)
        {
            case 3:
            {
                int array_index0_1 = 0;
                zval* temp_array_value0_1 = 0;
                while(strings_continue0_1)
                {
                    if((temp_array_value0_1 = zend_hash_index_find(HASH_OF(descriptions0), array_index0_1)) != NULL)
                    {
                        convert_to_string(temp_array_value0_1);
                        strings_array0_1.Add(wxString(Z_STRVAL_P(temp_array_value0_1), wxConvUTF8));
                        array_index0_1++;
                    }
                    else
                    {
                        strings_continue0_1 = false;
                    }
                }
                int array_index0_2 = 0;
                zval* temp_array_value0_2 = 0;
                while(strings_continue0_2)
                {
                    if((temp_array_value0_2 = zend_hash_index_find(HASH_OF(filters0), array_index0_2)) != NULL)
                    {
                        convert_to_string(temp_array_value0_2);
                        strings_array0_2.Add(wxString(Z_STRVAL_P(temp_array_value0_2), wxConvUTF8));
                        array_index0_2++;
                    }
                    else
                    {
                        strings_continue0_2 = false;
                    }
                }
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxParseCommonDialogsFilter(wxString(wildCard0, wxConvUTF8), strings_array0_1, strings_array0_2))\n\n");
                #endif

                RETVAL_LONG(wxParseCommonDialogsFilter(wxString(wildCard0, wxConvUTF8), strings_array0_1, strings_array0_2));

                array_init(descriptions0);
                for(size_t i=0; i<strings_array0_1.GetCount(); i++)
                {
                    add_next_index_string(descriptions0, strings_array0_1[i].ToUTF8().data());
                }
                array_init(filters0);
                for(size_t i=0; i<strings_array0_2.GetCount(); i++)
                {
                    add_next_index_string(filters0, strings_array0_2[i].ToUTF8().data());
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxParseCommonDialogsFilter()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxDirExists(string dirname)
   Returns true if dirname exists and is a directory. */
PHP_FUNCTION(php_wxDirExists)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxDirExists\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* dirname0;
    size_t dirname_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&dirname0, &dirname_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dirname0, &dirname_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxDirExists(wxString(dirname0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxDirExists(wxString(dirname0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxDirExists()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRenameFile(string file1, string file2, bool overwrite)
   Renames file1 to file2, returning true if successful. */
PHP_FUNCTION(php_wxRenameFile)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxRenameFile\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* file10;
    size_t file1_len0;
    char* file20;
    size_t file2_len0;
    bool overwrite0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss|b' (&file10, &file1_len0, &file20, &file2_len0, &overwrite0)\n");
        #endif

        char parse_parameters_string[] = "ss|b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &file10, &file1_len0, &file20, &file2_len0, &overwrite0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)));


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0))\n\n");
                #endif

                RETVAL_BOOL(wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxRenameFile()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxCopyFile(string file1, string file2, bool overwrite)
   Copies file1 to file2, returning true if successful. */
PHP_FUNCTION(php_wxCopyFile)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxCopyFile\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* file10;
    size_t file1_len0;
    char* file20;
    size_t file2_len0;
    bool overwrite0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss|b' (&file10, &file1_len0, &file20, &file2_len0, &overwrite0)\n");
        #endif

        char parse_parameters_string[] = "ss|b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &file10, &file1_len0, &file20, &file2_len0, &overwrite0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)));


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0))\n\n");
                #endif

                RETVAL_BOOL(wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxCopyFile()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxFileExists(string filename)
   Returns true if the file exists and is a plain file. */
PHP_FUNCTION(php_wxFileExists)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxFileExists\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* filename0;
    size_t filename_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&filename0, &filename_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &filename0, &filename_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxFileExists(wxString(filename0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxFileExists(wxString(filename0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxFileExists()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxMatchWild(string pattern, string text, bool dot_special)
   Returns true if the pattern matches the text; if dot_special is true, filenames beginning with a dot are not matched with wildcard characters. */
PHP_FUNCTION(php_wxMatchWild)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxMatchWild\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* pattern0;
    size_t pattern_len0;
    char* text0;
    size_t text_len0;
    bool dot_special0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssb' (&pattern0, &pattern_len0, &text0, &text_len0, &dot_special0)\n");
        #endif

        char parse_parameters_string[] = "ssb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pattern0, &pattern_len0, &text0, &text_len0, &dot_special0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxMatchWild(wxString(pattern0, wxConvUTF8), wxString(text0, wxConvUTF8), dot_special0))\n\n");
                #endif

                RETVAL_BOOL(wxMatchWild(wxString(pattern0, wxConvUTF8), wxString(text0, wxConvUTF8), dot_special0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxMatchWild()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxPathOnly(string path)
   Returns the directory part of the filename. */
PHP_FUNCTION(php_wxPathOnly)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxPathOnly\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* path0;
    size_t path_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&path0, &path_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &path0, &path_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxPathOnly(wxString(path0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxPathOnly(wxString(path0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxPathOnly()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxIsWild(string pattern)
   Returns true if the pattern contains wildcards. */
PHP_FUNCTION(php_wxIsWild)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxIsWild\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* pattern0;
    size_t pattern_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&pattern0, &pattern_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pattern0, &pattern_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsWild(wxString(pattern0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxIsWild(wxString(pattern0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxIsWild()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxIsAbsolutePath(string filename)
   Returns true if the argument is an absolute filename, i.e. with a slash or drive name at the beginning. */
PHP_FUNCTION(php_wxIsAbsolutePath)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxIsAbsolutePath\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* filename0;
    size_t filename_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&filename0, &filename_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &filename0, &filename_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsAbsolutePath(wxString(filename0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxIsAbsolutePath(wxString(filename0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxIsAbsolutePath()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxGetCwd()
   Returns a string containing the current (or working) directory. */
PHP_FUNCTION(php_wxGetCwd)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetCwd\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetCwd().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = wxGetCwd();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetCwd()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxSetWorkingDirectory(string dir)
   Sets the current working directory, returning true if the operation succeeded. */
PHP_FUNCTION(php_wxSetWorkingDirectory)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxSetWorkingDirectory\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* dir0;
    size_t dir_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&dir0, &dir_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dir0, &dir_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxSetWorkingDirectory(wxString(dir0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxSetWorkingDirectory(wxString(dir0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxSetWorkingDirectory()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxConcatFiles(string file1, string file2, string file3)
   Concatenates file1 and file2 to file3, returning true if successful. */
PHP_FUNCTION(php_wxConcatFiles)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxConcatFiles\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* file10;
    size_t file1_len0;
    char* file20;
    size_t file2_len0;
    char* file30;
    size_t file3_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sss' (&file10, &file1_len0, &file20, &file2_len0, &file30, &file3_len0)\n");
        #endif

        char parse_parameters_string[] = "sss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &file10, &file1_len0, &file20, &file2_len0, &file30, &file3_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxConcatFiles(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), wxString(file30, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxConcatFiles(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), wxString(file30, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxConcatFiles()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRemoveFile(string file)
   Removes file, returning true if successful. */
PHP_FUNCTION(php_wxRemoveFile)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxRemoveFile\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* file0;
    size_t file_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&file0, &file_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &file0, &file_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxRemoveFile(wxString(file0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxRemoveFile(wxString(file0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxRemoveFile()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxMkdir(string dir, int perm)
   Makes the directory dir, returning true if successful. */
PHP_FUNCTION(php_wxMkdir)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxMkdir\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* dir0;
    size_t dir_len0;
    long perm0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|l' (&dir0, &dir_len0, &perm0)\n");
        #endif

        char parse_parameters_string[] = "s|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dir0, &dir_len0, &perm0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxMkdir(wxString(dir0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxMkdir(wxString(dir0, wxConvUTF8)));


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxMkdir(wxString(dir0, wxConvUTF8), (int) perm0))\n\n");
                #endif

                RETVAL_BOOL(wxMkdir(wxString(dir0, wxConvUTF8), (int) perm0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxMkdir()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRmdir(string dir, int flags)
   Removes the directory dir, returning true if successful. */
PHP_FUNCTION(php_wxRmdir)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxRmdir\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* dir0;
    size_t dir_len0;
    long flags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|l' (&dir0, &dir_len0, &flags0)\n");
        #endif

        char parse_parameters_string[] = "s|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dir0, &dir_len0, &flags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxRmdir(wxString(dir0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxRmdir(wxString(dir0, wxConvUTF8)));


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxRmdir(wxString(dir0, wxConvUTF8), (int) flags0))\n\n");
                #endif

                RETVAL_BOOL(wxRmdir(wxString(dir0, wxConvUTF8), (int) flags0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxRmdir()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxFindNextFile()
   Returns the next file that matches the path passed to wxFindFirstFile(). */
PHP_FUNCTION(php_wxFindNextFile)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxFindNextFile\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFindNextFile().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = wxFindNextFile();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxFindNextFile()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxFindFirstFile(string spec, int flags)
   This function does directory searching; returns the first file that matches the path spec, or the empty string. */
PHP_FUNCTION(php_wxFindFirstFile)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxFindFirstFile\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* spec0;
    size_t spec_len0;
    long flags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|l' (&spec0, &spec_len0, &flags0)\n");
        #endif

        char parse_parameters_string[] = "s|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &spec0, &spec_len0, &flags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFindFirstFile(wxString(spec0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxFindFirstFile(wxString(spec0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxFindFirstFile(wxString(spec0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = wxFindFirstFile(wxString(spec0, wxConvUTF8), (int) flags0);
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxFindFirstFile()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxFileKind wxGetFileKind(int fd)
   Returns the type of an open file. */
PHP_FUNCTION(php_wxGetFileKind)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetFileKind\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long fd0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&fd0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &fd0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetFileKind((int) fd0))\n\n");
                #endif

                RETVAL_LONG(wxGetFileKind((int) fd0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetFileKind()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxFont wxGetFontFromUser(wxWindow &parent, wxFont fontInit, string caption)
   Shows the font selection dialog and returns the font selected by user or invalid font (use wxFont::IsOk() to test whether a font is valid) if the dialog was cancelled. */
PHP_FUNCTION(php_wxGetFontFromUser)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetFontFromUser\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    zval* fontInit0;
    wxFont* object_pointer0_1 = 0;
    char* caption0;
    size_t caption_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 2  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zO|s' (&parent0, &fontInit0, php_wxFont_entry, &caption0, &caption_len0)\n");
        #endif

        char parse_parameters_string[] = "zO|s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0, &fontInit0, php_wxFont_entry, &caption0, &caption_len0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(fontInit0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFont_P(fontInit0)->object_type;
                    argument_native_object = (void*) Z_wxFont_P(fontInit0)->native_object;
                    object_pointer0_1 = (wxFont*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'fontInit' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(fontInit0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'fontInit' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1) to return new object\n\n");
                #endif

                wxFont value_to_return2;
                value_to_return2 = wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1);
                ((wxRefCounter *) value_to_return2.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxFont_php), 0);
                memcpy(ptr, (void*) &value_to_return2, sizeof(wxFont));
                object_init_ex(return_value, php_wxFont_entry);
                ((wxFont_php*)ptr)->phpObj = *return_value;
                zo_wxFont* zo2 = Z_wxFont_P(return_value);
                zo2->native_object = (wxFont_php*) ptr;


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1, wxString(caption0, wxConvUTF8)) to return new object\n\n");
                #endif

                wxFont value_to_return3;
                value_to_return3 = wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1, wxString(caption0, wxConvUTF8));
                ((wxRefCounter *) value_to_return3.GetRefData())->IncRef();
                void* ptr = safe_emalloc(1, sizeof(wxFont_php), 0);
                memcpy(ptr, (void*) &value_to_return3, sizeof(wxFont));
                object_init_ex(return_value, php_wxFont_entry);
                ((wxFont_php*)ptr)->phpObj = *return_value;
                zo_wxFont* zo3 = Z_wxFont_P(return_value);
                zo3->native_object = (wxFont_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetFontFromUser()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxColourDisplay()
   Returns true if the display is colour, false otherwise. */
PHP_FUNCTION(php_wxColourDisplay)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxColourDisplay\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxColourDisplay())\n\n");
                #endif

                RETVAL_BOOL(wxColourDisplay());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxColourDisplay()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxDisplayDepth()
   Returns the depth of the display (a value of 1 denotes a monochrome display). */
PHP_FUNCTION(php_wxDisplayDepth)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxDisplayDepth\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxDisplayDepth())\n\n");
                #endif

                RETVAL_LONG(wxDisplayDepth());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxDisplayDepth()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxSetCursor(wxCursor cursor)
   Globally sets the cursor; only has an effect on Windows, Mac and GTK+. */
PHP_FUNCTION(php_wxSetCursor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxSetCursor\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* cursor0;
    wxCursor* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&cursor0, php_wxCursor_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &cursor0, php_wxCursor_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(cursor0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxCursor_P(cursor0)->object_type;
                    argument_native_object = (void*) Z_wxCursor_P(cursor0)->native_object;
                    object_pointer0_0 = (wxCursor*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'cursor' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(cursor0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'cursor' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxSetCursor(*(wxCursor*) object_pointer0_0)\n\n");
                #endif

                wxSetCursor(*(wxCursor*) object_pointer0_0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxSetCursor()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxClientDisplayRect(int &x, int &y, int &width, int &height)
   Returns the dimensions of the work area on the display. */
PHP_FUNCTION(php_wxClientDisplayRect)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxClientDisplayRect\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long* x0;
    zval x0_ref;
    long* y0;
    zval y0_ref;
    long* width0;
    zval width0_ref;
    long* height0;
    zval height0_ref;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llll' (x0, y0, width0, height0)\n");
        #endif

        char parse_parameters_string[] = "llll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, x0, y0, width0, height0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zzzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, x0_ref, y0_ref, width0_ref, height0_ref );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxClientDisplayRect((int*) x0, (int*) y0, (int*) width0, (int*) height0)\n\n");
                #endif

                wxClientDisplayRect((int*) x0, (int*) y0, (int*) width0, (int*) height0);

                size_t elements_returned0_0 = sizeof(x0)/sizeof(*x0);
                array_init(&x0_ref);
                for(size_t i=0; i<elements_returned0_0; i++)
                {
                    add_next_index_long(&x0_ref, x0[i]);
                }
                size_t elements_returned0_1 = sizeof(y0)/sizeof(*y0);
                array_init(&y0_ref);
                for(size_t i=0; i<elements_returned0_1; i++)
                {
                    add_next_index_long(&y0_ref, y0[i]);
                }
                size_t elements_returned0_2 = sizeof(width0)/sizeof(*width0);
                array_init(&width0_ref);
                for(size_t i=0; i<elements_returned0_2; i++)
                {
                    add_next_index_long(&width0_ref, width0[i]);
                }
                size_t elements_returned0_3 = sizeof(height0)/sizeof(*height0);
                array_init(&height0_ref);
                for(size_t i=0; i<elements_returned0_3; i++)
                {
                    add_next_index_long(&height0_ref, height0[i]);
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxClientDisplayRect()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxRect wxGetClientDisplayRect()
   Returns the dimensions of the work area on the display. */
PHP_FUNCTION(php_wxGetClientDisplayRect)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetClientDisplayRect\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetClientDisplayRect() to return new object\n\n");
                #endif

                wxRect value_to_return0;
                value_to_return0 = wxGetClientDisplayRect();
                void* ptr = safe_emalloc(1, sizeof(wxRect_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxRect));
                object_init_ex(return_value, php_wxRect_entry);
                ((wxRect_php*)ptr)->phpObj = *return_value;
                ((wxRect_php*)ptr)->InitProperties();
                zo_wxRect* zo0 = Z_wxRect_P(return_value);
                zo0->native_object = (wxRect_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetClientDisplayRect()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxSize wxGetDisplayPPI()
   Returns the display resolution in pixels per inch. */
PHP_FUNCTION(php_wxGetDisplayPPI)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetDisplayPPI\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetDisplayPPI() to return new object\n\n");
                #endif

                wxSize value_to_return0;
                value_to_return0 = wxGetDisplayPPI();
                void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                object_init_ex(return_value, php_wxSize_entry);
                ((wxSize_php*)ptr)->phpObj = *return_value;
                zo_wxSize* zo0 = Z_wxSize_P(return_value);
                zo0->native_object = (wxSize_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetDisplayPPI()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDisplaySize(int &width, int &height)
   Returns the display size in pixels. */
PHP_FUNCTION(php_wxDisplaySize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxDisplaySize\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long* width0;
    zval width0_ref;
    long* height0;
    zval height0_ref;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (width0, height0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, width0, height0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, width0_ref, height0_ref );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxDisplaySize((int*) width0, (int*) height0)\n\n");
                #endif

                wxDisplaySize((int*) width0, (int*) height0);

                size_t elements_returned0_0 = sizeof(width0)/sizeof(*width0);
                array_init(&width0_ref);
                for(size_t i=0; i<elements_returned0_0; i++)
                {
                    add_next_index_long(&width0_ref, width0[i]);
                }
                size_t elements_returned0_1 = sizeof(height0)/sizeof(*height0);
                array_init(&height0_ref);
                for(size_t i=0; i<elements_returned0_1; i++)
                {
                    add_next_index_long(&height0_ref, height0[i]);
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxDisplaySize()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxSize wxGetDisplaySize()
   Returns the display size in pixels. */
PHP_FUNCTION(php_wxGetDisplaySize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetDisplaySize\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetDisplaySize() to return new object\n\n");
                #endif

                wxSize value_to_return0;
                value_to_return0 = wxGetDisplaySize();
                void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                object_init_ex(return_value, php_wxSize_entry);
                ((wxSize_php*)ptr)->phpObj = *return_value;
                zo_wxSize* zo0 = Z_wxSize_P(return_value);
                zo0->native_object = (wxSize_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetDisplaySize()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDisplaySizeMM(int &width, int &height)
   Returns the display size in millimeters. */
PHP_FUNCTION(php_wxDisplaySizeMM)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxDisplaySizeMM\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long* width0;
    zval width0_ref;
    long* height0;
    zval height0_ref;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (width0, height0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, width0, height0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, width0_ref, height0_ref );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxDisplaySizeMM((int*) width0, (int*) height0)\n\n");
                #endif

                wxDisplaySizeMM((int*) width0, (int*) height0);

                size_t elements_returned0_0 = sizeof(width0)/sizeof(*width0);
                array_init(&width0_ref);
                for(size_t i=0; i<elements_returned0_0; i++)
                {
                    add_next_index_long(&width0_ref, width0[i]);
                }
                size_t elements_returned0_1 = sizeof(height0)/sizeof(*height0);
                array_init(&height0_ref);
                for(size_t i=0; i<elements_returned0_1; i++)
                {
                    add_next_index_long(&height0_ref, height0[i]);
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxDisplaySizeMM()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxSize wxGetDisplaySizeMM()
   Returns the display size in millimeters. */
PHP_FUNCTION(php_wxGetDisplaySizeMM)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetDisplaySizeMM\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetDisplaySizeMM() to return new object\n\n");
                #endif

                wxSize value_to_return0;
                value_to_return0 = wxGetDisplaySizeMM();
                void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxSize));
                object_init_ex(return_value, php_wxSize_entry);
                ((wxSize_php*)ptr)->phpObj = *return_value;
                zo_wxSize* zo0 = Z_wxSize_P(return_value);
                zo0->native_object = (wxSize_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetDisplaySizeMM()\n"
        );
    }
}
/* }}} */

/* {{{ proto void wxInitAllImageHandlers()
   Initializes all available image handlers. */
PHP_FUNCTION(php_wxInitAllImageHandlers)
{
    wxInitAllImageHandlers();
    RETVAL_TRUE;
}
/* }}} */

/* {{{ proto  wxEntryCleanup()
   Free resources allocated by a successful call to wxEntryStart(). */
PHP_FUNCTION(php_wxEntryCleanup)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxEntryCleanup\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxEntryCleanup()\n\n");
                #endif

                wxEntryCleanup();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxEntryCleanup()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxFinite(float x)
   Returns a non-zero value if x is neither infinite nor NaN (not a number), returns 0 otherwise. */
PHP_FUNCTION(php_wxFinite)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxFinite\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    double x0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'd' (&x0)\n");
        #endif

        char parse_parameters_string[] = "d";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxFinite(x0))\n\n");
                #endif

                RETVAL_LONG(wxFinite(x0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxFinite()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxIsNaN(float x)
   Returns a non-zero value if x is NaN (not a number), returns 0 otherwise. */
PHP_FUNCTION(php_wxIsNaN)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxIsNaN\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    double x0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'd' (&x0)\n");
        #endif

        char parse_parameters_string[] = "d";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsNaN(x0))\n\n");
                #endif

                RETVAL_BOOL(wxIsNaN(x0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxIsNaN()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxRound(float x)
   Small wrapper around round(). */
PHP_FUNCTION(php_wxRound)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxRound\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    double x0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'd' (&x0)\n");
        #endif

        char parse_parameters_string[] = "d";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxRound(x0))\n\n");
                #endif

                RETVAL_LONG(wxRound(x0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxRound()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxIsSameDouble(float x, float y)
   Returns true if both double values are identical. */
PHP_FUNCTION(php_wxIsSameDouble)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxIsSameDouble\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    double x0;
    double y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'dd' (&x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "dd";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0, &y0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsSameDouble(x0, y0))\n\n");
                #endif

                RETVAL_BOOL(wxIsSameDouble(x0, y0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxIsSameDouble()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxIsNullDouble(float x)
   Return true of x is exactly zero. */
PHP_FUNCTION(php_wxIsNullDouble)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxIsNullDouble\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    double x0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'd' (&x0)\n");
        #endif

        char parse_parameters_string[] = "d";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &x0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsNullDouble(x0))\n\n");
                #endif

                RETVAL_BOOL(wxIsNullDouble(x0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxIsNullDouble()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxMessageBox(string message, string caption, int style, wxWindow &parent, int x, int y)
   Show a general purpose message dialog. */
PHP_FUNCTION(php_wxMessageBox)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxMessageBox\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* message0;
    size_t message_len0;
    char* caption0;
    size_t caption_len0;
    long style0;
    zval* parent0;
    wxWindow* object_pointer0_3 = 0;
    long x0;
    long y0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 6)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|slzll' (&message0, &message_len0, &caption0, &caption_len0, &style0, &parent0, &x0, &y0)\n");
        #endif

        char parse_parameters_string[] = "s|slzll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &style0, &parent0, &x0, &y0 ) == SUCCESS)
        {
            if(arguments_received >= 4){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_3 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(wxMessageBox(wxString(message0, wxConvUTF8)));


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)));


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0))\n\n");
                #endif

                RETVAL_LONG(wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0));


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3))\n\n");
                #endif

                RETVAL_LONG(wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3));


                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0))\n\n");
                #endif

                RETVAL_LONG(wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0));


                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0, (int) y0))\n\n");
                #endif

                RETVAL_LONG(wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0, (int) y0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxMessageBox()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxGetNumberFromUser(string message, string prompt, string caption, int value, int min, int max, wxWindow &parent, wxPoint pos)
   Shows a dialog asking the user for numeric input. */
PHP_FUNCTION(php_wxGetNumberFromUser)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetNumberFromUser\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* message0;
    size_t message_len0;
    char* prompt0;
    size_t prompt_len0;
    char* caption0;
    size_t caption_len0;
    long value0;
    long min0;
    long max0;
    zval* parent0;
    wxWindow* object_pointer0_6 = 0;
    zval* pos0;
    wxPoint* object_pointer0_7 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 4  && arguments_received <= 8)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sssl|llzO' (&message0, &message_len0, &prompt0, &prompt_len0, &caption0, &caption_len0, &value0, &min0, &max0, &parent0, &pos0, php_wxPoint_entry)\n");
        #endif

        char parse_parameters_string[] = "sssl|llzO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message0, &message_len0, &prompt0, &prompt_len0, &caption0, &caption_len0, &value0, &min0, &max0, &parent0, &pos0, php_wxPoint_entry ) == SUCCESS)
        {
            if(arguments_received >= 7){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_6 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_6 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 8){
                if(Z_TYPE_P(pos0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pos0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pos0)->native_object;
                    object_pointer0_7 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_7 )
                    {
                        zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pos0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0))\n\n");
                #endif

                RETVAL_LONG(wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0));


                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0))\n\n");
                #endif

                RETVAL_LONG(wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0));


                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0, (long) max0))\n\n");
                #endif

                RETVAL_LONG(wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0, (long) max0));


                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0, (long) max0, (wxWindow*) object_pointer0_6))\n\n");
                #endif

                RETVAL_LONG(wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0, (long) max0, (wxWindow*) object_pointer0_6));


                return;
                break;
            }
            case 8:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0, (long) max0, (wxWindow*) object_pointer0_6, *(wxPoint*) object_pointer0_7))\n\n");
                #endif

                RETVAL_LONG(wxGetNumberFromUser(wxString(message0, wxConvUTF8), wxString(prompt0, wxConvUTF8), wxString(caption0, wxConvUTF8), (long) value0, (long) min0, (long) max0, (wxWindow*) object_pointer0_6, *(wxPoint*) object_pointer0_7));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetNumberFromUser()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxObject wxCreateDynamicObject(string className)
   Creates and returns an object of the given class, if the class has been registered with the dynamic class system using DECLARE... */
PHP_FUNCTION(php_wxCreateDynamicObject)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxCreateDynamicObject\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* className0;
    size_t className_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&className0, &className_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &className0, &className_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxCreateDynamicObject(wxString(className0, wxConvUTF8)) to return object pointer\n\n");
                #endif

                wxObject_php* value_to_return1;
                value_to_return1 = (wxObject_php*) wxCreateDynamicObject(wxString(className0, wxConvUTF8));
                if(value_to_return1 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return1->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return1->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return1->phpObj);
                        zval_add_ref(&value_to_return1->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxObject_entry);
                    Z_wxObject_P(return_value)->native_object = (wxObject_php*) value_to_return1;
                }



                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxCreateDynamicObject()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxWindow wxFindWindowAtPointer(wxPoint &pt)
   Find the deepest window at the mouse pointer position, returning the window and current pointer position in screen coordinates. */
PHP_FUNCTION(php_wxFindWindowAtPointer)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxFindWindowAtPointer\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* pt0;
    wxPoint* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&pt0, php_wxPoint_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt0, php_wxPoint_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt0)->native_object;
                    object_pointer0_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxFindWindowAtPointer(*(wxPoint*) object_pointer0_0) to return object pointer\n\n");
                #endif

                wxWindow_php* value_to_return1;
                value_to_return1 = (wxWindow_php*) wxFindWindowAtPointer(*(wxPoint*) object_pointer0_0);
                if(value_to_return1 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return1->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return1->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return1->phpObj);
                        zval_add_ref(&value_to_return1->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxWindow_entry);
                    Z_wxWindow_P(return_value)->native_object = (wxWindow_php*) value_to_return1;
                }



                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxFindWindowAtPointer()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxWindow wxGetActiveWindow()
   Gets the currently active window (implemented for MSW and GTK only currently, always returns NULL in the other ports). */
PHP_FUNCTION(php_wxGetActiveWindow)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetActiveWindow\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetActiveWindow() to return object pointer\n\n");
                #endif

                wxWindow_php* value_to_return0;
                value_to_return0 = (wxWindow_php*) wxGetActiveWindow();
                if(value_to_return0 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return0->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return0->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return0->phpObj);
                        zval_add_ref(&value_to_return0->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxWindow_entry);
                    Z_wxWindow_P(return_value)->native_object = (wxWindow_php*) value_to_return0;
                }



                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetActiveWindow()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxWindow wxGetTopLevelParent(wxWindow &window)
   Returns the first top level parent of the given window, or in other words, the frame or dialog containing it, or NULL. */
PHP_FUNCTION(php_wxGetTopLevelParent)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetTopLevelParent\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* window0;
    wxWindow* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&window0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &window0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(window0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(window0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(window0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'window' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(window0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'window' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetTopLevelParent((wxWindow*) object_pointer0_0) to return object pointer\n\n");
                #endif

                wxWindow_php* value_to_return1;
                value_to_return1 = (wxWindow_php*) wxGetTopLevelParent((wxWindow*) object_pointer0_0);
                if(value_to_return1 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return1->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return1->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return1->phpObj);
                        zval_add_ref(&value_to_return1->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxWindow_entry);
                    Z_wxWindow_P(return_value)->native_object = (wxWindow_php*) value_to_return1;
                }



                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetTopLevelParent()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRichTextHasStyle(int flags, int style) */
PHP_FUNCTION(php_wxRichTextHasStyle)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxRichTextHasStyle\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long flags0;
    long style0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'll' (&flags0, &style0)\n");
        #endif

        char parse_parameters_string[] = "ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &flags0, &style0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxRichTextHasStyle((int) flags0, (int) style0))\n\n");
                #endif

                RETVAL_BOOL(wxRichTextHasStyle((int) flags0, (int) style0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxRichTextHasStyle()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRichTextCombineBitlists(int &valueA, int valueB, int &flagsA, int flagsB)
   Combine two bitlists. */
PHP_FUNCTION(php_wxRichTextCombineBitlists)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxRichTextCombineBitlists\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long valueA0;
    zval valueA0_ref;
    long valueB0;
    long flagsA0;
    zval flagsA0_ref;
    long flagsB0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'llll' (&valueA0, &valueB0, &flagsA0, &flagsB0)\n");
        #endif

        char parse_parameters_string[] = "llll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &valueA0, &valueB0, &flagsA0, &flagsB0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zzzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, valueA0_ref, dummy, flagsA0_ref, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxRichTextCombineBitlists((int&) valueA0, (int) valueB0, (int&) flagsA0, (int) flagsB0))\n\n");
                #endif

                RETVAL_BOOL(wxRichTextCombineBitlists((int&) valueA0, (int) valueB0, (int&) flagsA0, (int) flagsB0));

                ZVAL_LONG(&valueA0_ref, valueA0);
                ZVAL_LONG(&flagsA0_ref, flagsA0);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxRichTextCombineBitlists()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxRichTextBitlistsEqPartial(int valueA, int valueB, int flags)
   Compare two bitlists. */
PHP_FUNCTION(php_wxRichTextBitlistsEqPartial)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxRichTextBitlistsEqPartial\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long valueA0;
    long valueB0;
    long flags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'lll' (&valueA0, &valueB0, &flags0)\n");
        #endif

        char parse_parameters_string[] = "lll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &valueA0, &valueB0, &flags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxRichTextBitlistsEqPartial((int) valueA0, (int) valueB0, (int) flags0))\n\n");
                #endif

                RETVAL_BOOL(wxRichTextBitlistsEqPartial((int) valueA0, (int) valueB0, (int) flags0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxRichTextBitlistsEqPartial()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxRichTextDecimalToRoman(int n)
   Convert a decimal to Roman numerals. */
PHP_FUNCTION(php_wxRichTextDecimalToRoman)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxRichTextDecimalToRoman\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long n0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&n0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &n0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxRichTextDecimalToRoman((long) n0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxRichTextDecimalToRoman((long) n0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxRichTextDecimalToRoman()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxTextAttrCollectCommonAttributes(wxTextAttr &currentStyle, wxTextAttr attr, wxTextAttr &clashingAttr, wxTextAttr &absentAttr) */
PHP_FUNCTION(php_wxTextAttrCollectCommonAttributes)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxTextAttrCollectCommonAttributes\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* currentStyle0;
    wxTextAttr* object_pointer0_0 = 0;
    zval* attr0;
    wxTextAttr* object_pointer0_1 = 0;
    zval* clashingAttr0;
    wxTextAttr* object_pointer0_2 = 0;
    zval* absentAttr0;
    wxTextAttr* object_pointer0_3 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'OOOO' (&currentStyle0, php_wxTextAttr_entry, &attr0, php_wxTextAttr_entry, &clashingAttr0, php_wxTextAttr_entry, &absentAttr0, php_wxTextAttr_entry)\n");
        #endif

        char parse_parameters_string[] = "OOOO";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &currentStyle0, php_wxTextAttr_entry, &attr0, php_wxTextAttr_entry, &clashingAttr0, php_wxTextAttr_entry, &absentAttr0, php_wxTextAttr_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(currentStyle0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxTextAttr_P(currentStyle0)->object_type;
                    argument_native_object = (void*) Z_wxTextAttr_P(currentStyle0)->native_object;
                    object_pointer0_0 = (wxTextAttr*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'currentStyle' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(currentStyle0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'currentStyle' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 2){
                if(Z_TYPE_P(attr0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxTextAttr_P(attr0)->object_type;
                    argument_native_object = (void*) Z_wxTextAttr_P(attr0)->native_object;
                    object_pointer0_1 = (wxTextAttr*) argument_native_object;
                    if (!object_pointer0_1 )
                    {
                        zend_error(E_ERROR, "Parameter 'attr' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(attr0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'attr' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 3){
                if(Z_TYPE_P(clashingAttr0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxTextAttr_P(clashingAttr0)->object_type;
                    argument_native_object = (void*) Z_wxTextAttr_P(clashingAttr0)->native_object;
                    object_pointer0_2 = (wxTextAttr*) argument_native_object;
                    if (!object_pointer0_2 )
                    {
                        zend_error(E_ERROR, "Parameter 'clashingAttr' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(clashingAttr0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'clashingAttr' not null, could not be retreived correctly.");
                }
            }

            if(arguments_received >= 4){
                if(Z_TYPE_P(absentAttr0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxTextAttr_P(absentAttr0)->object_type;
                    argument_native_object = (void*) Z_wxTextAttr_P(absentAttr0)->native_object;
                    object_pointer0_3 = (wxTextAttr*) argument_native_object;
                    if (!object_pointer0_3 )
                    {
                        zend_error(E_ERROR, "Parameter 'absentAttr' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(absentAttr0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'absentAttr' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxTextAttrCollectCommonAttributes(*(wxTextAttr*) object_pointer0_0, *(wxTextAttr*) object_pointer0_1, *(wxTextAttr*) object_pointer0_2, *(wxTextAttr*) object_pointer0_3)\n\n");
                #endif

                wxTextAttrCollectCommonAttributes(*(wxTextAttr*) object_pointer0_0, *(wxTextAttr*) object_pointer0_1, *(wxTextAttr*) object_pointer0_2, *(wxTextAttr*) object_pointer0_3);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxTextAttrCollectCommonAttributes()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRichTextModuleInit() */
PHP_FUNCTION(php_wxRichTextModuleInit)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxRichTextModuleInit\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxRichTextModuleInit()\n\n");
                #endif

                wxRichTextModuleInit();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxRichTextModuleInit()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxGetStockLabel(int id, int flags)
   Returns label that should be used for given id element. */
PHP_FUNCTION(php_wxGetStockLabel)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetStockLabel\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long id0;
    long flags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l|l' (&id0, &flags0)\n");
        #endif

        char parse_parameters_string[] = "l|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &id0, &flags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetStockLabel((wxWindowID) id0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxGetStockLabel((wxWindowID) id0);
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetStockLabel((wxWindowID) id0, (long) flags0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = wxGetStockLabel((wxWindowID) id0, (long) flags0);
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetStockLabel()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxGetTextFromUser(string message, string caption, string default_value, wxWindow &parent, int x, int y, bool centre)
   Pop up a dialog box with title set to caption, message, and a default_value. */
PHP_FUNCTION(php_wxGetTextFromUser)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetTextFromUser\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* message0;
    size_t message_len0;
    char* caption0;
    size_t caption_len0;
    char* default_value0;
    size_t default_value_len0;
    zval* parent0;
    wxWindow* object_pointer0_3 = 0;
    long x0;
    long y0;
    bool centre0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 7)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|sszllb' (&message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0)\n");
        #endif

        char parse_parameters_string[] = "s|sszllb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0 ) == SUCCESS)
        {
            if(arguments_received >= 4){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_3 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxGetTextFromUser(wxString(message0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8));
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return3;
                value_to_return3 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8));
                RETVAL_STRING(value_to_return3.ToUTF8().data());


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return4;
                value_to_return4 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3);
                RETVAL_STRING(value_to_return4.ToUTF8().data());


                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return5;
                value_to_return5 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0);
                RETVAL_STRING(value_to_return5.ToUTF8().data());


                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return6;
                value_to_return6 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0);
                RETVAL_STRING(value_to_return6.ToUTF8().data());


                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return7;
                value_to_return7 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0);
                RETVAL_STRING(value_to_return7.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetTextFromUser()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxGetPasswordFromUser(string message, string caption, string default_value, wxWindow &parent, int x, int y, bool centre)
   Similar to wxGetTextFromUser() but the text entered in the dialog is not shown on screen but replaced with stars. */
PHP_FUNCTION(php_wxGetPasswordFromUser)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetPasswordFromUser\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* message0;
    size_t message_len0;
    char* caption0;
    size_t caption_len0;
    char* default_value0;
    size_t default_value_len0;
    zval* parent0;
    wxWindow* object_pointer0_3 = 0;
    long x0;
    long y0;
    bool centre0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 7)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|sszllb' (&message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0)\n");
        #endif

        char parse_parameters_string[] = "s|sszllb";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0 ) == SUCCESS)
        {
            if(arguments_received >= 4){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_3 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8));
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return3;
                value_to_return3 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8));
                RETVAL_STRING(value_to_return3.ToUTF8().data());


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return4;
                value_to_return4 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3);
                RETVAL_STRING(value_to_return4.ToUTF8().data());


                return;
                break;
            }
            case 5:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return5;
                value_to_return5 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0);
                RETVAL_STRING(value_to_return5.ToUTF8().data());


                return;
                break;
            }
            case 6:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return6;
                value_to_return6 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0);
                RETVAL_STRING(value_to_return6.ToUTF8().data());


                return;
                break;
            }
            case 7:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return7;
                value_to_return7 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0);
                RETVAL_STRING(value_to_return7.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetPasswordFromUser()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxGetTimeZone()
   Returns the difference between UTC and local time in seconds. */
PHP_FUNCTION(php_wxGetTimeZone)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetTimeZone\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetTimeZone())\n\n");
                #endif

                RETVAL_LONG(wxGetTimeZone());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetTimeZone()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxGetLocalTime()
   Returns the number of seconds since local time 00:00:00 Jan 1st 1970. */
PHP_FUNCTION(php_wxGetLocalTime)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetLocalTime\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetLocalTime())\n\n");
                #endif

                RETVAL_LONG(wxGetLocalTime());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetLocalTime()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxGetUTCTime()
   Returns the number of seconds since GMT 00:00:00 Jan 1st 1970. */
PHP_FUNCTION(php_wxGetUTCTime)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetUTCTime\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetUTCTime())\n\n");
                #endif

                RETVAL_LONG(wxGetUTCTime());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetUTCTime()\n"
        );
    }
}
/* }}} */

/* {{{ proto array wxStringTokenize(string str, string delims, wxStringTokenizerMode mode)
   This is a convenience function wrapping wxStringTokenizer which simply returns all tokens found in the given str as an array. */
PHP_FUNCTION(php_wxStringTokenize)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStringTokenize\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* str0;
    size_t str_len0;
    char* delims0;
    size_t delims_len0;
    long mode0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|sl' (&str0, &str_len0, &delims0, &delims_len0, &mode0)\n");
        #endif

        char parse_parameters_string[] = "s|sl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &str0, &str_len0, &delims0, &delims_len0, &mode0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxStringTokenize(wxString(str0, wxConvUTF8)) to return strings array\n\n");
                #endif

                wxArrayString value_to_return1;
                value_to_return1 = wxStringTokenize(wxString(str0, wxConvUTF8));
                array_init(return_value);
                for(size_t i=0; i<value_to_return1.GetCount(); i++)
                {
                    add_next_index_string(return_value, value_to_return1[i].ToUTF8().data());
                }


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8)) to return strings array\n\n");
                #endif

                wxArrayString value_to_return2;
                value_to_return2 = wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8));
                array_init(return_value);
                for(size_t i=0; i<value_to_return2.GetCount(); i++)
                {
                    add_next_index_string(return_value, value_to_return2[i].ToUTF8().data());
                }


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8), (wxStringTokenizerMode) mode0) to return strings array\n\n");
                #endif

                wxArrayString value_to_return3;
                value_to_return3 = wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8), (wxStringTokenizerMode) mode0);
                array_init(return_value);
                for(size_t i=0; i<value_to_return3.GetCount(); i++)
                {
                    add_next_index_string(return_value, value_to_return3[i].ToUTF8().data());
                }


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStringTokenize()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxGetTranslation(string string, string domain)
   This function returns the translation of string in the current locale(). */
PHP_FUNCTION(php_wxGetTranslation)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetTranslation\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* string0;
    size_t string_len0;
    char* domain0;
    size_t domain_len0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* string1;
    size_t string_len1;
    char* plural1;
    size_t plural_len1;
    long n1;
    char* domain1;
    size_t domain_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|s' (&string0, &string_len0, &domain0, &domain_len0)\n");
        #endif

        char parse_parameters_string[] = "s|s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &string0, &string_len0, &domain0, &domain_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received >= 3  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssl|s' (&string1, &string_len1, &plural1, &plural_len1, &n1, &domain1, &domain_len1)\n");
        #endif

        char parse_parameters_string[] = "ssl|s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &string1, &string_len1, &plural1, &plural_len1, &n1, &domain1, &domain_len1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxGetTranslation(wxString(string0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string0, wxConvUTF8), wxString(domain0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = wxGetTranslation(wxString(string0, wxConvUTF8), wxString(domain0, wxConvUTF8));
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return3;
                value_to_return3 = wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1);
                RETVAL_STRING(value_to_return3.ToUTF8().data());


                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1, wxString(domain1, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return4;
                value_to_return4 = wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1, wxString(domain1, wxConvUTF8));
                RETVAL_STRING(value_to_return4.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetTranslation()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxBeginBusyCursor(wxCursor cursor)
   Changes the cursor to the given cursor for all windows in the application. */
PHP_FUNCTION(php_wxBeginBusyCursor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxBeginBusyCursor\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* cursor0;
    wxCursor* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|z' (&cursor0)\n");
        #endif

        char parse_parameters_string[] = "|z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &cursor0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(cursor0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxCursor_P(cursor0)->object_type;
                    argument_native_object = (void*) Z_wxCursor_P(cursor0)->native_object;
                    object_pointer0_0 = (wxCursor*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXCURSOR_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'cursor' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(cursor0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'cursor' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxBeginBusyCursor()\n\n");
                #endif

                wxBeginBusyCursor();


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxBeginBusyCursor((const wxCursor*) object_pointer0_0)\n\n");
                #endif

                wxBeginBusyCursor((const wxCursor*) object_pointer0_0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxBeginBusyCursor()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxEndBusyCursor()
   Changes the cursor back to the original cursor, for all windows in the application. */
PHP_FUNCTION(php_wxEndBusyCursor)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxEndBusyCursor\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxEndBusyCursor()\n\n");
                #endif

                wxEndBusyCursor();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxEndBusyCursor()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxIsBusy()
   Returns true if between two wxBeginBusyCursor() and wxEndBusyCursor() calls. */
PHP_FUNCTION(php_wxIsBusy)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxIsBusy\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsBusy())\n\n");
                #endif

                RETVAL_BOOL(wxIsBusy());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxIsBusy()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxBell()
   Ring the system bell. */
PHP_FUNCTION(php_wxBell)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxBell\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxBell()\n\n");
                #endif

                wxBell();


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxBell()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxInfoMessageBox(wxWindow &parent)
   Shows a message box with the information about the wxWidgets build used, including its version, most important build parameters and the version of the underlying GUI toolkit. */
PHP_FUNCTION(php_wxInfoMessageBox)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxInfoMessageBox\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* parent0;
    wxWindow* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'z' (&parent0)\n");
        #endif

        char parse_parameters_string[] = "z";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &parent0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(parent0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxWindow_P(parent0)->object_type;
                    argument_native_object = (void*) Z_wxWindow_P(parent0)->native_object;
                    object_pointer0_0 = (wxWindow*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(parent0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxInfoMessageBox((wxWindow*) object_pointer0_0)\n\n");
                #endif

                wxInfoMessageBox((wxWindow*) object_pointer0_0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxInfoMessageBox()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxVersionInfo wxGetLibraryVersionInfo()
   Get wxWidgets version information. */
PHP_FUNCTION(php_wxGetLibraryVersionInfo)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetLibraryVersionInfo\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetLibraryVersionInfo() to return new object\n\n");
                #endif

                wxVersionInfo value_to_return0;
                value_to_return0 = wxGetLibraryVersionInfo();
                void* ptr = safe_emalloc(1, sizeof(wxVersionInfo_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxVersionInfo));
                object_init_ex(return_value, php_wxVersionInfo_entry);
                ((wxVersionInfo_php*)ptr)->phpObj = *return_value;
                zo_wxVersionInfo* zo0 = Z_wxVersionInfo_P(return_value);
                zo0->native_object = (wxVersionInfo_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetLibraryVersionInfo()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxGetenv(string name) */
PHP_FUNCTION(php_wxGetenv)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetenv\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* name0;
    size_t name_len0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* name1;
    size_t name_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&name0, &name_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &name0, &name_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&name1, &name_len1)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &name1, &name_len1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetenv(name0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return1;
                value_to_return1 = wxGetenv(name0);
                RETVAL_STRING(value_to_return1);


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetenv(wxString(name1, wxConvUTF8)).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return1;
                value_to_return1 = wxGetenv(wxString(name1, wxConvUTF8));
                RETVAL_STRING(value_to_return1);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetenv()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxSetEnv(string var, string value)
   Sets the value of the environment variable var (adding it if necessary) to value. */
PHP_FUNCTION(php_wxSetEnv)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxSetEnv\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* var0;
    size_t var_len0;
    char* value0;
    size_t value_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&var0, &var_len0, &value0, &value_len0)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &var0, &var_len0, &value0, &value_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxSetEnv(wxString(var0, wxConvUTF8), wxString(value0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxSetEnv(wxString(var0, wxConvUTF8), wxString(value0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxSetEnv()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxUnsetEnv(string var)
   Removes the variable var from the environment. */
PHP_FUNCTION(php_wxUnsetEnv)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxUnsetEnv\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* var0;
    size_t var_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&var0, &var_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &var0, &var_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxUnsetEnv(wxString(var0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxUnsetEnv(wxString(var0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxUnsetEnv()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxBatteryState wxGetBatteryState()
   Returns battery state as one of wxBATTERY_NORMAL_STATE, wxBATTERY_LOW_STATE, wxBATTERY_CRITICAL_STATE, wxBATTERY_SHUTDOWN_STATE or wxBATTERY_UNKNOWN_STATE. */
PHP_FUNCTION(php_wxGetBatteryState)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetBatteryState\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetBatteryState())\n\n");
                #endif

                RETVAL_LONG(wxGetBatteryState());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetBatteryState()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxPowerType wxGetPowerType()
   Returns the type of power source as one of wxPOWER_SOCKET, wxPOWER_BATTERY or wxPOWER_UNKNOWN. */
PHP_FUNCTION(php_wxGetPowerType)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetPowerType\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetPowerType())\n\n");
                #endif

                RETVAL_LONG(wxGetPowerType());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetPowerType()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxGetKeyState(wxKeyCode key)
   For normal keys, returns true if the specified key is currently down. */
PHP_FUNCTION(php_wxGetKeyState)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetKeyState\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long key0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&key0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &key0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxGetKeyState((wxKeyCode) key0))\n\n");
                #endif

                RETVAL_BOOL(wxGetKeyState((wxKeyCode) key0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetKeyState()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxPoint wxGetMousePosition()
   Returns the mouse position in screen coordinates. */
PHP_FUNCTION(php_wxGetMousePosition)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetMousePosition\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetMousePosition() to return new object\n\n");
                #endif

                wxPoint value_to_return0;
                value_to_return0 = wxGetMousePosition();
                void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxPoint));
                object_init_ex(return_value, php_wxPoint_entry);
                ((wxPoint_php*)ptr)->phpObj = *return_value;
                ((wxPoint_php*)ptr)->InitProperties();
                zo_wxPoint* zo0 = Z_wxPoint_P(return_value);
                zo0->native_object = (wxPoint_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetMousePosition()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxMouseState wxGetMouseState()
   Returns the current state of the mouse. */
PHP_FUNCTION(php_wxGetMouseState)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetMouseState\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxGetMouseState() to return new object\n\n");
                #endif

                wxMouseState value_to_return0;
                value_to_return0 = wxGetMouseState();
                void* ptr = safe_emalloc(1, sizeof(wxMouseState_php), 0);
                memcpy(ptr, (void*) &value_to_return0, sizeof(wxMouseState));
                object_init_ex(return_value, php_wxMouseState_entry);
                ((wxMouseState_php*)ptr)->phpObj = *return_value;
                zo_wxMouseState* zo0 = Z_wxMouseState_P(return_value);
                zo0->native_object = (wxMouseState_php*) ptr;


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetMouseState()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxEnableTopLevelWindows(bool enable)
   This function enables or disables all top level windows. */
PHP_FUNCTION(php_wxEnableTopLevelWindows)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxEnableTopLevelWindows\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool enable0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|b' (&enable0)\n");
        #endif

        char parse_parameters_string[] = "|b";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &enable0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxEnableTopLevelWindows()\n\n");
                #endif

                wxEnableTopLevelWindows();


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxEnableTopLevelWindows(enable0)\n\n");
                #endif

                wxEnableTopLevelWindows(enable0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxEnableTopLevelWindows()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxWindow wxFindWindowAtPoint(wxPoint pt)
   Find the deepest window at the given mouse position in screen coordinates, returning the window if found, or NULL if not. */
PHP_FUNCTION(php_wxFindWindowAtPoint)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxFindWindowAtPoint\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* pt0;
    wxPoint* object_pointer0_0 = 0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'O' (&pt0, php_wxPoint_entry)\n");
        #endif

        char parse_parameters_string[] = "O";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pt0, php_wxPoint_entry ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(pt0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxPoint_P(pt0)->object_type;
                    argument_native_object = (void*) Z_wxPoint_P(pt0)->native_object;
                    object_pointer0_0 = (wxPoint*) argument_native_object;
                    if (!object_pointer0_0 )
                    {
                        zend_error(E_ERROR, "Parameter 'pt' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(pt0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'pt' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxFindWindowAtPoint(*(wxPoint*) object_pointer0_0) to return object pointer\n\n");
                #endif

                wxWindow_php* value_to_return1;
                value_to_return1 = (wxWindow_php*) wxFindWindowAtPoint(*(wxPoint*) object_pointer0_0);
                if(value_to_return1 == NULL){
                    RETVAL_NULL();
                }
                else if(value_to_return1->references.IsUserInitialized()){
                    if(!Z_ISNULL(value_to_return1->phpObj)){
                        ZVAL_COPY_VALUE(return_value, &value_to_return1->phpObj);
                        zval_add_ref(&value_to_return1->phpObj);
                        return_is_user_initialized = true;
                    }
                    else{
                        zend_error(E_ERROR, "Could not retreive original zval.");
                    }
                }
                else{
                    object_init_ex(return_value, php_wxWindow_entry);
                    Z_wxWindow_P(return_value)->native_object = (wxWindow_php*) value_to_return1;
                }



                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxFindWindowAtPoint()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxFindMenuItemId(wxFrame &frame, string menuString, string itemString)
   Find a menu item identifier associated with the given frame's menu bar. */
PHP_FUNCTION(php_wxFindMenuItemId)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxFindMenuItemId\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    zval* frame0;
    wxFrame* object_pointer0_0 = 0;
    char* menuString0;
    size_t menuString_len0;
    char* itemString0;
    size_t itemString_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'zss' (&frame0, &menuString0, &menuString_len0, &itemString0, &itemString_len0)\n");
        #endif

        char parse_parameters_string[] = "zss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &frame0, &menuString0, &menuString_len0, &itemString0, &itemString_len0 ) == SUCCESS)
        {
            if(arguments_received >= 1){
                if(Z_TYPE_P(frame0) == IS_OBJECT)
                {
                    wxphp_object_type argument_type = Z_wxFrame_P(frame0)->object_type;
                    argument_native_object = (void*) Z_wxFrame_P(frame0)->native_object;
                    object_pointer0_0 = (wxFrame*) argument_native_object;
                    if (!object_pointer0_0 || (argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE))
                    {
                        zend_error(E_ERROR, "Parameter 'frame' could not be retreived correctly.");
                    }
                }
                else if(Z_TYPE_P(frame0) != IS_NULL)
                {
                    zend_error(E_ERROR, "Parameter 'frame' not null, could not be retreived correctly.");
                }
            }

            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxFindMenuItemId((wxFrame*) object_pointer0_0, wxString(menuString0, wxConvUTF8), wxString(itemString0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(wxFindMenuItemId((wxFrame*) object_pointer0_0, wxString(menuString0, wxConvUTF8), wxString(itemString0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxFindMenuItemId()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxRegisterId(int id)
   Ensures that Ids subsequently generated by wxNewId() do not clash with the given id. */
PHP_FUNCTION(php_wxRegisterId)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxRegisterId\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long id0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&id0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &id0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxRegisterId((int) id0)\n\n");
                #endif

                wxRegisterId((int) id0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxRegisterId()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxLaunchDefaultApplication(string document, int flags)
   Opens the document in the application associated with the files of this type. */
PHP_FUNCTION(php_wxLaunchDefaultApplication)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxLaunchDefaultApplication\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* document0;
    size_t document_len0;
    long flags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|l' (&document0, &document_len0, &flags0)\n");
        #endif

        char parse_parameters_string[] = "s|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &document0, &document_len0, &flags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxLaunchDefaultApplication(wxString(document0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxLaunchDefaultApplication(wxString(document0, wxConvUTF8)));


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxLaunchDefaultApplication(wxString(document0, wxConvUTF8), (int) flags0))\n\n");
                #endif

                RETVAL_BOOL(wxLaunchDefaultApplication(wxString(document0, wxConvUTF8), (int) flags0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxLaunchDefaultApplication()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxLaunchDefaultBrowser(string url, int flags)
   Opens the url in user's default browser. */
PHP_FUNCTION(php_wxLaunchDefaultBrowser)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxLaunchDefaultBrowser\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* url0;
    size_t url_len0;
    long flags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|l' (&url0, &url_len0, &flags0)\n");
        #endif

        char parse_parameters_string[] = "s|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &url0, &url_len0, &flags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8)));


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8), (int) flags0))\n\n");
                #endif

                RETVAL_BOOL(wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8), (int) flags0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxLaunchDefaultBrowser()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStripMenuCodes(string str, int flags)
   Strips any menu codes from str and returns the result. */
PHP_FUNCTION(php_wxStripMenuCodes)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStripMenuCodes\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* str0;
    size_t str_len0;
    long flags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's|l' (&str0, &str_len0, &flags0)\n");
        #endif

        char parse_parameters_string[] = "s|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &str0, &str_len0, &flags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStripMenuCodes(wxString(str0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxStripMenuCodes(wxString(str0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStripMenuCodes(wxString(str0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return2;
                value_to_return2 = wxStripMenuCodes(wxString(str0, wxConvUTF8), (int) flags0);
                RETVAL_STRING(value_to_return2.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStripMenuCodes()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxGetHomeDir()
   Return the (current) user's home directory. */
PHP_FUNCTION(php_wxGetHomeDir)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetHomeDir\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetHomeDir().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = wxGetHomeDir();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetHomeDir()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxGetFullHostName()
   Returns the FQDN (fully qualified domain host name) or an empty string on error. */
PHP_FUNCTION(php_wxGetFullHostName)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetFullHostName\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetFullHostName().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = wxGetFullHostName();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetFullHostName()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxGetUserHome(string user)
   Returns the home directory for the given user. */
PHP_FUNCTION(php_wxGetUserHome)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetUserHome\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* user0;
    size_t user_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|s' (&user0, &user_len0)\n");
        #endif

        char parse_parameters_string[] = "|s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &user0, &user_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetUserHome().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = wxGetUserHome();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetUserHome(wxString(user0, wxConvUTF8)).fn_str(), 1)\n\n");
                #endif

                wxString value_to_return1;
                value_to_return1 = wxGetUserHome(wxString(user0, wxConvUTF8));
                RETVAL_STRING(value_to_return1.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetUserHome()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxGetOsDescription()
   Returns the string containing the description of the current platform in a user-readable form. */
PHP_FUNCTION(php_wxGetOsDescription)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetOsDescription\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxGetOsDescription().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = wxGetOsDescription();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetOsDescription()\n"
        );
    }
}
/* }}} */

/* {{{ proto wxOperatingSystemId wxGetOsVersion(int &major, int &minor)
   Gets the version and the operating system ID for currently running OS. */
PHP_FUNCTION(php_wxGetOsVersion)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetOsVersion\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long* major0;
    zval major0_ref;
    long* minor0;
    zval minor0_ref;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|ll' (major0, minor0)\n");
        #endif

        char parse_parameters_string[] = "|ll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, major0, minor0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "|zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, major0_ref, minor0_ref );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetOsVersion())\n\n");
                #endif

                RETVAL_LONG(wxGetOsVersion());


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetOsVersion((int*) major0))\n\n");
                #endif

                RETVAL_LONG(wxGetOsVersion((int*) major0));

                size_t elements_returned0_0 = sizeof(major0)/sizeof(*major0);
                array_init(&major0_ref);
                for(size_t i=0; i<elements_returned0_0; i++)
                {
                    add_next_index_long(&major0_ref, major0[i]);
                }

                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetOsVersion((int*) major0, (int*) minor0))\n\n");
                #endif

                RETVAL_LONG(wxGetOsVersion((int*) major0, (int*) minor0));

                size_t elements_returned0_0 = sizeof(major0)/sizeof(*major0);
                array_init(&major0_ref);
                for(size_t i=0; i<elements_returned0_0; i++)
                {
                    add_next_index_long(&major0_ref, major0[i]);
                }
                size_t elements_returned0_1 = sizeof(minor0)/sizeof(*minor0);
                array_init(&minor0_ref);
                for(size_t i=0; i<elements_returned0_1; i++)
                {
                    add_next_index_long(&minor0_ref, minor0[i]);
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetOsVersion()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxIsPlatform64Bit()
   Returns true if the operating system the program is running under is 64 bit. */
PHP_FUNCTION(php_wxIsPlatform64Bit)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxIsPlatform64Bit\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsPlatform64Bit())\n\n");
                #endif

                RETVAL_BOOL(wxIsPlatform64Bit());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxIsPlatform64Bit()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxIsPlatformLittleEndian()
   Returns true if the current platform is little endian (instead of big endian). */
PHP_FUNCTION(php_wxIsPlatformLittleEndian)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxIsPlatformLittleEndian\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsPlatformLittleEndian())\n\n");
                #endif

                RETVAL_BOOL(wxIsPlatformLittleEndian());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxIsPlatformLittleEndian()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxGetProcessId()
   Returns the number uniquely identifying the current process in the system. */
PHP_FUNCTION(php_wxGetProcessId)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxGetProcessId\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxGetProcessId())\n\n");
                #endif

                RETVAL_LONG(wxGetProcessId());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxGetProcessId()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxKill(int pid, wxSignal sig, wxKillError &rc, int flags)
   Equivalent to the Unix kill function: send the given signal sig to the process with PID pid. */
PHP_FUNCTION(php_wxKill)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxKill\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long pid0;
    long sig0;
    long* rc0;
    zval rc0_ref;
    long flags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 1  && arguments_received <= 4)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l|lll' (&pid0, &sig0, rc0, &flags0)\n");
        #endif

        char parse_parameters_string[] = "l|lll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &pid0, &sig0, rc0, &flags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "z|zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dummy, dummy, rc0_ref, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxKill((long) pid0))\n\n");
                #endif

                RETVAL_LONG(wxKill((long) pid0));


                return;
                break;
            }
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxKill((long) pid0, (wxSignal) sig0))\n\n");
                #endif

                RETVAL_LONG(wxKill((long) pid0, (wxSignal) sig0));


                return;
                break;
            }
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0))\n\n");
                #endif

                RETVAL_LONG(wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0));

                size_t elements_returned0_2 = sizeof(rc0)/sizeof(*rc0);
                array_init(&rc0_ref);
                for(size_t i=0; i<elements_returned0_2; i++)
                {
                    add_next_index_long(&rc0_ref, rc0[i]);
                }

                return;
                break;
            }
            case 4:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0, (int) flags0))\n\n");
                #endif

                RETVAL_LONG(wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0, (int) flags0));

                size_t elements_returned0_2 = sizeof(rc0)/sizeof(*rc0);
                array_init(&rc0_ref);
                for(size_t i=0; i<elements_returned0_2; i++)
                {
                    add_next_index_long(&rc0_ref, rc0[i]);
                }

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxKill()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxShell(string command)
   Executes a command in an interactive shell window. */
PHP_FUNCTION(php_wxShell)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxShell\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* command0;
    size_t command_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|s' (&command0, &command_len0)\n");
        #endif

        char parse_parameters_string[] = "|s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &command0, &command_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxShell())\n\n");
                #endif

                RETVAL_BOOL(wxShell());


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxShell(wxString(command0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxShell(wxString(command0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxShell()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxShutdown(int flags)
   This function shuts down or reboots the computer depending on the value of the flags. */
PHP_FUNCTION(php_wxShutdown)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxShutdown\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long flags0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received >= 0  && arguments_received <= 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '|l' (&flags0)\n");
        #endif

        char parse_parameters_string[] = "|l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &flags0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxShutdown())\n\n");
                #endif

                RETVAL_BOOL(wxShutdown());


                return;
                break;
            }
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxShutdown((int) flags0))\n\n");
                #endif

                RETVAL_BOOL(wxShutdown((int) flags0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxShutdown()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxMicroSleep(int microseconds)
   Sleeps for the specified number of microseconds. */
PHP_FUNCTION(php_wxMicroSleep)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxMicroSleep\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long microseconds0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&microseconds0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &microseconds0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxMicroSleep((unsigned long) microseconds0)\n\n");
                #endif

                wxMicroSleep((unsigned long) microseconds0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxMicroSleep()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxMilliSleep(int milliseconds)
   Sleeps for the specified number of milliseconds. */
PHP_FUNCTION(php_wxMilliSleep)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxMilliSleep\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long milliseconds0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&milliseconds0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &milliseconds0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxMilliSleep((unsigned long) milliseconds0)\n\n");
                #endif

                wxMilliSleep((unsigned long) milliseconds0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxMilliSleep()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxNow()
   Returns a string representing the current date and time. */
PHP_FUNCTION(php_wxNow)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxNow\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 0)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with '' ()\n");
        #endif

        overload0_called = true;
        already_called = true;
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 0:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxNow().fn_str(), 1)\n\n");
                #endif

                wxString value_to_return0;
                value_to_return0 = wxNow();
                RETVAL_STRING(value_to_return0.ToUTF8().data());


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxNow()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxSleep(int secs)
   Sleeps for the specified number of seconds. */
PHP_FUNCTION(php_wxSleep)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxSleep\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long secs0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'l' (&secs0)\n");
        #endif

        char parse_parameters_string[] = "l";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &secs0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing ::wxSleep((int) secs0)\n\n");
                #endif

                wxSleep((int) secs0);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxSleep()\n"
        );
    }
}
/* }}} */

/* {{{ proto bool wxIsEmpty(string s) */
PHP_FUNCTION(php_wxIsEmpty)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxIsEmpty\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* s0;
    size_t s_len0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* s1;
    size_t s_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&s0, &s_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s0, &s_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&s1, &s_len1)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s1, &s_len1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsEmpty(s0))\n\n");
                #endif

                RETVAL_BOOL(wxIsEmpty(s0));


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_BOOL(::wxIsEmpty(wxString(s1, wxConvUTF8)))\n\n");
                #endif

                RETVAL_BOOL(wxIsEmpty(wxString(s1, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxIsEmpty()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxTmemchr(string s, string c, int len) */
PHP_FUNCTION(php_wxTmemchr)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxTmemchr\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* s0;
    size_t s_len0;
    long c0;
    long len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sll' (&s0, &s_len0, &c0, &len0)\n");
        #endif

        char parse_parameters_string[] = "sll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s0, &s_len0, &c0, &len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxTmemchr(s0, (char) c0, (size_t) len0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return3;
                value_to_return3 = wxTmemchr(s0, (char) c0, (size_t) len0);
                RETVAL_STRING(value_to_return3);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxTmemchr()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxTmemcmp(string sz1, string sz2, int len) */
PHP_FUNCTION(php_wxTmemcmp)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxTmemcmp\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* sz10;
    size_t sz1_len0;
    char* sz20;
    size_t sz2_len0;
    long len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssl' (&sz10, &sz1_len0, &sz20, &sz2_len0, &len0)\n");
        #endif

        char parse_parameters_string[] = "ssl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &sz10, &sz1_len0, &sz20, &sz2_len0, &len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxTmemcmp(sz10, sz20, (size_t) len0))\n\n");
                #endif

                RETVAL_LONG(wxTmemcmp(sz10, sz20, (size_t) len0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxTmemcmp()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxTmemcpy(string &szOut, string szIn, int len) */
PHP_FUNCTION(php_wxTmemcpy)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxTmemcpy\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* szOut0;
    size_t szOut_len0;
    zval szOut0_ref;
    char* szIn0;
    size_t szIn_len0;
    long len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssl' (&szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0)\n");
        #endif

        char parse_parameters_string[] = "ssl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, szOut0_ref, dummy, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxTmemcpy(szOut0, szIn0, (size_t) len0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return3;
                value_to_return3 = wxTmemcpy(szOut0, szIn0, (size_t) len0);
                RETVAL_STRING(value_to_return3);

                ZVAL_STRING(&szOut0_ref, szOut0);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxTmemcpy()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxTmemmove(string &szOut, string szIn, int len) */
PHP_FUNCTION(php_wxTmemmove)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxTmemmove\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* szOut0;
    size_t szOut_len0;
    zval szOut0_ref;
    char* szIn0;
    size_t szIn_len0;
    long len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssl' (&szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0)\n");
        #endif

        char parse_parameters_string[] = "ssl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, szOut0_ref, dummy, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxTmemmove(szOut0, szIn0, (size_t) len0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return3;
                value_to_return3 = wxTmemmove(szOut0, szIn0, (size_t) len0);
                RETVAL_STRING(value_to_return3);

                ZVAL_STRING(&szOut0_ref, szOut0);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxTmemmove()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxTmemset(string &szOut, string cIn, int len) */
PHP_FUNCTION(php_wxTmemset)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxTmemset\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* szOut0;
    size_t szOut_len0;
    zval szOut0_ref;
    long cIn0;
    long len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sll' (&szOut0, &szOut_len0, &cIn0, &len0)\n");
        #endif

        char parse_parameters_string[] = "sll";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &szOut0, &szOut_len0, &cIn0, &len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, szOut0_ref, dummy, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxTmemset(szOut0, (const char) cIn0, (size_t) len0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return3;
                value_to_return3 = wxTmemset(szOut0, (const char) cIn0, (size_t) len0);
                RETVAL_STRING(value_to_return3);

                ZVAL_STRING(&szOut0_ref, szOut0);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxTmemset()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxSetlocale(int category, string locale) */
PHP_FUNCTION(php_wxSetlocale)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxSetlocale\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    long category0;
    char* locale0;
    size_t locale_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ls' (&category0, &locale0, &locale_len0)\n");
        #endif

        char parse_parameters_string[] = "ls";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &category0, &locale0, &locale_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxSetlocale((int) category0, wxString(locale0, wxConvUTF8)).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = wxSetlocale((int) category0, wxString(locale0, wxConvUTF8));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxSetlocale()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStrlen(string s) */
PHP_FUNCTION(php_wxStrlen)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrlen\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* s0;
    size_t s_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&s0, &s_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s0, &s_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxStrlen(wxString(s0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(wxStrlen(wxString(s0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrlen()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStrnlen(string str, int maxlen) */
PHP_FUNCTION(php_wxStrnlen)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrnlen\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* str0;
    size_t str_len0;
    long maxlen0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sl' (&str0, &str_len0, &maxlen0)\n");
        #endif

        char parse_parameters_string[] = "sl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &str0, &str_len0, &maxlen0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxStrnlen(str0, (size_t) maxlen0))\n\n");
                #endif

                RETVAL_LONG(wxStrnlen(str0, (size_t) maxlen0));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrnlen()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStrdup(string s) */
PHP_FUNCTION(php_wxStrdup)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrdup\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* s0;
    size_t s_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&s0, &s_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s0, &s_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrdup(wxString(s0, wxConvUTF8)).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return1;
                value_to_return1 = wxStrdup(wxString(s0, wxConvUTF8));
                RETVAL_STRING(value_to_return1);


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrdup()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStrcpy(string &dest, string src) */
PHP_FUNCTION(php_wxStrcpy)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrcpy\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* dest0;
    size_t dest_len0;
    zval dest0_ref;
    char* src0;
    size_t src_len0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* dest1;
    size_t dest_len1;
    zval dest1_ref;
    char* src1;
    size_t src_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&dest0, &dest_len0, &src0, &src_len0)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dest0_ref, dummy );
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&dest1, &dest_len1, &src1, &src_len1)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dest1_ref, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrcpy(dest0, src0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = wxStrcpy(dest0, src0);
                RETVAL_STRING(value_to_return2);

                ZVAL_STRING(&dest0_ref, dest0);

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrcpy(dest1, wxString(src1, wxConvUTF8)).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = wxStrcpy(dest1, wxString(src1, wxConvUTF8));
                RETVAL_STRING(value_to_return2);

                ZVAL_STRING(&dest1_ref, dest1);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrcpy()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStrncpy(string &dest, string src, int n) */
PHP_FUNCTION(php_wxStrncpy)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrncpy\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* dest0;
    size_t dest_len0;
    zval dest0_ref;
    char* src0;
    size_t src_len0;
    long n0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* dest1;
    size_t dest_len1;
    zval dest1_ref;
    char* src1;
    size_t src_len1;
    long n1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
        #endif

        char parse_parameters_string[] = "ssl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dest0_ref, dummy, dummy );
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssl' (&dest1, &dest_len1, &src1, &src_len1, &n1)\n");
        #endif

        char parse_parameters_string[] = "ssl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1, &n1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;

            char parse_references_string[] = "zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dest1_ref, dummy, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrncpy(dest0, src0, (size_t) n0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return3;
                value_to_return3 = wxStrncpy(dest0, src0, (size_t) n0);
                RETVAL_STRING(value_to_return3);

                ZVAL_STRING(&dest0_ref, dest0);

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrncpy(dest1, wxString(src1, wxConvUTF8), (size_t) n1).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return3;
                value_to_return3 = wxStrncpy(dest1, wxString(src1, wxConvUTF8), (size_t) n1);
                RETVAL_STRING(value_to_return3);

                ZVAL_STRING(&dest1_ref, dest1);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrncpy()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStrlcpy(string &dest, string src, int n) */
PHP_FUNCTION(php_wxStrlcpy)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrlcpy\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* dest0;
    size_t dest_len0;
    zval dest0_ref;
    char* src0;
    size_t src_len0;
    long n0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
        #endif

        char parse_parameters_string[] = "ssl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dest0_ref, dummy, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxStrlcpy(dest0, src0, (size_t) n0))\n\n");
                #endif

                RETVAL_LONG(wxStrlcpy(dest0, src0, (size_t) n0));

                ZVAL_STRING(&dest0_ref, dest0);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrlcpy()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStrcat(string &dest, string src) */
PHP_FUNCTION(php_wxStrcat)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrcat\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* dest0;
    size_t dest_len0;
    zval dest0_ref;
    char* src0;
    size_t src_len0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* dest1;
    size_t dest_len1;
    zval dest1_ref;
    char* src1;
    size_t src_len1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&dest0, &dest_len0, &src0, &src_len0)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dest0_ref, dummy );
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&dest1, &dest_len1, &src1, &src_len1)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dest1_ref, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrcat(dest0, src0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = wxStrcat(dest0, src0);
                RETVAL_STRING(value_to_return2);

                ZVAL_STRING(&dest0_ref, dest0);

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrcat(dest1, wxString(src1, wxConvUTF8)).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = wxStrcat(dest1, wxString(src1, wxConvUTF8));
                RETVAL_STRING(value_to_return2);

                ZVAL_STRING(&dest1_ref, dest1);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrcat()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStrncat(string &dest, string src, int n) */
PHP_FUNCTION(php_wxStrncat)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrncat\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* dest0;
    size_t dest_len0;
    zval dest0_ref;
    char* src0;
    size_t src_len0;
    long n0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* dest1;
    size_t dest_len1;
    zval dest1_ref;
    char* src1;
    size_t src_len1;
    long n1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
        #endif

        char parse_parameters_string[] = "ssl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dest0_ref, dummy, dummy );
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssl' (&dest1, &dest_len1, &src1, &src_len1, &n1)\n");
        #endif

        char parse_parameters_string[] = "ssl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1, &n1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;

            char parse_references_string[] = "zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dest1_ref, dummy, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrncat(dest0, src0, (size_t) n0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return3;
                value_to_return3 = wxStrncat(dest0, src0, (size_t) n0);
                RETVAL_STRING(value_to_return3);

                ZVAL_STRING(&dest0_ref, dest0);

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrncat(dest1, wxString(src1, wxConvUTF8), (size_t) n1).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return3;
                value_to_return3 = wxStrncat(dest1, wxString(src1, wxConvUTF8), (size_t) n1);
                RETVAL_STRING(value_to_return3);

                ZVAL_STRING(&dest1_ref, dest1);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrncat()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxStrxfrm(string &dest, string src, int n) */
PHP_FUNCTION(php_wxStrxfrm)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrxfrm\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* dest0;
    size_t dest_len0;
    zval dest0_ref;
    char* src0;
    size_t src_len0;
    long n0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* dest1;
    size_t dest_len1;
    zval dest1_ref;
    char* src1;
    size_t src_len1;
    long n1;
    bool overload1_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
        #endif

        char parse_parameters_string[] = "ssl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;

            char parse_references_string[] = "zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dest0_ref, dummy, dummy );
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 3)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ssl' (&dest1, &dest_len1, &src1, &src_len1, &n1)\n");
        #endif

        char parse_parameters_string[] = "ssl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &dest1, &dest_len1, &src1, &src_len1, &n1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;

            char parse_references_string[] = "zzz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, dest1_ref, dummy, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxStrxfrm(dest0, src0, (size_t) n0))\n\n");
                #endif

                RETVAL_LONG(wxStrxfrm(dest0, src0, (size_t) n0));

                ZVAL_STRING(&dest0_ref, dest0);

                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 3:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxStrxfrm(dest1, wxString(src1, wxConvUTF8), (size_t) n1))\n\n");
                #endif

                RETVAL_LONG(wxStrxfrm(dest1, wxString(src1, wxConvUTF8), (size_t) n1));

                ZVAL_STRING(&dest1_ref, dest1);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrxfrm()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStrstr(string haystack, string needle) */
PHP_FUNCTION(php_wxStrstr)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrstr\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* haystack0;
    size_t haystack_len0;
    char* needle0;
    size_t needle_len0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* haystack1;
    size_t haystack_len1;
    char* needle1;
    size_t needle_len1;
    bool overload1_called = false;

    //Parameters for overload 2
    char* haystack2;
    size_t haystack_len2;
    char* needle2;
    size_t needle_len2;
    bool overload2_called = false;

    //Parameters for overload 3
    char* haystack3;
    size_t haystack_len3;
    char* needle3;
    size_t needle_len3;
    bool overload3_called = false;

    //Parameters for overload 4
    char* haystack4;
    size_t haystack_len4;
    zval haystack4_ref;
    char* needle4;
    size_t needle_len4;
    bool overload4_called = false;

    //Parameters for overload 5
    char* haystack5;
    size_t haystack_len5;
    zval haystack5_ref;
    char* needle5;
    size_t needle_len5;
    bool overload5_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&haystack0, &haystack_len0, &needle0, &needle_len0)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &haystack0, &haystack_len0, &needle0, &needle_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&haystack1, &haystack_len1, &needle1, &needle_len1)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &haystack1, &haystack_len1, &needle1, &needle_len1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&haystack2, &haystack_len2, &needle2, &needle_len2)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &haystack2, &haystack_len2, &needle2, &needle_len2 ) == SUCCESS)
        {
            overload2_called = true;
            already_called = true;
        }
    }

    //Overload 3
    overload3:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&haystack3, &haystack_len3, &needle3, &needle_len3)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &haystack3, &haystack_len3, &needle3, &needle_len3 ) == SUCCESS)
        {
            overload3_called = true;
            already_called = true;
        }
    }

    //Overload 4
    overload4:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&haystack4, &haystack_len4, &needle4, &needle_len4)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &haystack4, &haystack_len4, &needle4, &needle_len4 ) == SUCCESS)
        {
            overload4_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, haystack4_ref, dummy );
        }
    }

    //Overload 5
    overload5:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&haystack5, &haystack_len5, &needle5, &needle_len5)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &haystack5, &haystack_len5, &needle5, &needle_len5 ) == SUCCESS)
        {
            overload5_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, haystack5_ref, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrstr(haystack0, needle0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrstr(haystack0, needle0));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrstr(haystack1, wxString(needle1, wxConvUTF8)).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrstr(haystack1, wxString(needle1, wxConvUTF8)));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload2_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrstr(wxString(haystack2, wxConvUTF8), wxString(needle2, wxConvUTF8)).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrstr(wxString(haystack2, wxConvUTF8), wxString(needle2, wxConvUTF8)));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload3_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrstr(wxString(haystack3, wxConvUTF8), needle3).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrstr(wxString(haystack3, wxConvUTF8), needle3));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload4_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrstr(haystack4, needle4).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = wxStrstr(haystack4, needle4);
                RETVAL_STRING(value_to_return2);

                ZVAL_STRING(&haystack4_ref, haystack4);

                return;
                break;
            }
        }
    }

    if(overload5_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrstr(haystack5, wxString(needle5, wxConvUTF8)).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = wxStrstr(haystack5, wxString(needle5, wxConvUTF8));
                RETVAL_STRING(value_to_return2);

                ZVAL_STRING(&haystack5_ref, haystack5);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrstr()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStrchr(string s, string c) */
PHP_FUNCTION(php_wxStrchr)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrchr\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* s0;
    size_t s_len0;
    long c0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* s1;
    size_t s_len1;
    long c1;
    bool overload1_called = false;

    //Parameters for overload 2
    char* s2;
    size_t s_len2;
    long c2;
    bool overload2_called = false;

    //Parameters for overload 3
    char* s3;
    size_t s_len3;
    zval s3_ref;
    long c3;
    bool overload3_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sl' (&s0, &s_len0, &c0)\n");
        #endif

        char parse_parameters_string[] = "sl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s0, &s_len0, &c0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sl' (&s1, &s_len1, &c1)\n");
        #endif

        char parse_parameters_string[] = "sl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s1, &s_len1, &c1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sl' (&s2, &s_len2, &c2)\n");
        #endif

        char parse_parameters_string[] = "sl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s2, &s_len2, &c2 ) == SUCCESS)
        {
            overload2_called = true;
            already_called = true;
        }
    }

    //Overload 3
    overload3:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sl' (&s3, &s_len3, &c3)\n");
        #endif

        char parse_parameters_string[] = "sl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s3, &s_len3, &c3 ) == SUCCESS)
        {
            overload3_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, s3_ref, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrchr(s0, (char) c0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrchr(s0, (char) c0));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrchr(wxString(s1, wxConvUTF8), (char) c1).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrchr(wxString(s1, wxConvUTF8), (char) c1));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload2_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrchr(wxString(s2, wxConvUTF8), (int) c2).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrchr(wxString(s2, wxConvUTF8), (int) c2));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload3_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrchr(s3, (char) c3).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = wxStrchr(s3, (char) c3);
                RETVAL_STRING(value_to_return2);

                ZVAL_STRING(&s3_ref, s3);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrchr()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStrrchr(string s, string c) */
PHP_FUNCTION(php_wxStrrchr)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrrchr\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* s0;
    size_t s_len0;
    long c0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* s1;
    size_t s_len1;
    long c1;
    bool overload1_called = false;

    //Parameters for overload 2
    char* s2;
    size_t s_len2;
    long c2;
    bool overload2_called = false;

    //Parameters for overload 3
    char* s3;
    size_t s_len3;
    zval s3_ref;
    long c3;
    bool overload3_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sl' (&s0, &s_len0, &c0)\n");
        #endif

        char parse_parameters_string[] = "sl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s0, &s_len0, &c0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sl' (&s1, &s_len1, &c1)\n");
        #endif

        char parse_parameters_string[] = "sl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s1, &s_len1, &c1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sl' (&s2, &s_len2, &c2)\n");
        #endif

        char parse_parameters_string[] = "sl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s2, &s_len2, &c2 ) == SUCCESS)
        {
            overload2_called = true;
            already_called = true;
        }
    }

    //Overload 3
    overload3:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'sl' (&s3, &s_len3, &c3)\n");
        #endif

        char parse_parameters_string[] = "sl";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s3, &s_len3, &c3 ) == SUCCESS)
        {
            overload3_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, s3_ref, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrrchr(s0, (char) c0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrrchr(s0, (char) c0));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrrchr(wxString(s1, wxConvUTF8), (char) c1).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrrchr(wxString(s1, wxConvUTF8), (char) c1));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload2_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrrchr(wxString(s2, wxConvUTF8), (int) c2).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrrchr(wxString(s2, wxConvUTF8), (int) c2));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload3_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrrchr(s3, (char) c3).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = wxStrrchr(s3, (char) c3);
                RETVAL_STRING(value_to_return2);

                ZVAL_STRING(&s3_ref, s3);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrrchr()\n"
        );
    }
}
/* }}} */

/* {{{ proto string wxStrpbrk(string s, string accept) */
PHP_FUNCTION(php_wxStrpbrk)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxStrpbrk\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* s0;
    size_t s_len0;
    char* accept0;
    size_t accept_len0;
    bool overload0_called = false;

    //Parameters for overload 1
    char* s1;
    size_t s_len1;
    char* accept1;
    size_t accept_len1;
    bool overload1_called = false;

    //Parameters for overload 2
    char* s2;
    size_t s_len2;
    char* accept2;
    size_t accept_len2;
    bool overload2_called = false;

    //Parameters for overload 3
    char* s3;
    size_t s_len3;
    char* accept3;
    size_t accept_len3;
    bool overload3_called = false;

    //Parameters for overload 4
    char* s4;
    size_t s_len4;
    zval s4_ref;
    char* accept4;
    size_t accept_len4;
    bool overload4_called = false;

    //Parameters for overload 5
    char* s5;
    size_t s_len5;
    zval s5_ref;
    char* accept5;
    size_t accept_len5;
    bool overload5_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&s0, &s_len0, &accept0, &accept_len0)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s0, &s_len0, &accept0, &accept_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    //Overload 1
    overload1:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&s1, &s_len1, &accept1, &accept_len1)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s1, &s_len1, &accept1, &accept_len1 ) == SUCCESS)
        {
            overload1_called = true;
            already_called = true;
        }
    }

    //Overload 2
    overload2:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&s2, &s_len2, &accept2, &accept_len2)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s2, &s_len2, &accept2, &accept_len2 ) == SUCCESS)
        {
            overload2_called = true;
            already_called = true;
        }
    }

    //Overload 3
    overload3:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&s3, &s_len3, &accept3, &accept_len3)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s3, &s_len3, &accept3, &accept_len3 ) == SUCCESS)
        {
            overload3_called = true;
            already_called = true;
        }
    }

    //Overload 4
    overload4:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&s4, &s_len4, &accept4, &accept_len4)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s4, &s_len4, &accept4, &accept_len4 ) == SUCCESS)
        {
            overload4_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, s4_ref, dummy );
        }
    }

    //Overload 5
    overload5:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&s5, &s_len5, &accept5, &accept_len5)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &s5, &s_len5, &accept5, &accept_len5 ) == SUCCESS)
        {
            overload5_called = true;
            already_called = true;

            char parse_references_string[] = "zz";
            zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_references_string, s5_ref, dummy );
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrpbrk(s0, accept0).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrpbrk(s0, accept0));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload1_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrpbrk(s1, wxString(accept1, wxConvUTF8)).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrpbrk(s1, wxString(accept1, wxConvUTF8)));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload2_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrpbrk(wxString(s2, wxConvUTF8), wxString(accept2, wxConvUTF8)).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrpbrk(wxString(s2, wxConvUTF8), wxString(accept2, wxConvUTF8)));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload3_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrpbrk(wxString(s3, wxConvUTF8), accept3).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = const_cast<char*>(wxStrpbrk(wxString(s3, wxConvUTF8), accept3));
                RETVAL_STRING(value_to_return2);


                return;
                break;
            }
        }
    }

    if(overload4_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrpbrk(s4, accept4).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = wxStrpbrk(s4, accept4);
                RETVAL_STRING(value_to_return2);

                ZVAL_STRING(&s4_ref, s4);

                return;
                break;
            }
        }
    }

    if(overload5_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_STRING(::wxStrpbrk(s5, wxString(accept5, wxConvUTF8)).ToUTF8().data(), 1)\n\n");
                #endif

                char* value_to_return2;
                value_to_return2 = wxStrpbrk(s5, wxString(accept5, wxConvUTF8));
                RETVAL_STRING(value_to_return2);

                ZVAL_STRING(&s5_ref, s5);

                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxStrpbrk()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxRemove(string path) */
PHP_FUNCTION(php_wxRemove)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxRemove\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* path0;
    size_t path_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&path0, &path_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &path0, &path_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxRemove(wxString(path0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(wxRemove(wxString(path0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxRemove()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxRename(string oldpath, string newpath) */
PHP_FUNCTION(php_wxRename)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxRename\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* oldpath0;
    size_t oldpath_len0;
    char* newpath0;
    size_t newpath_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 2)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 'ss' (&oldpath0, &oldpath_len0, &newpath0, &newpath_len0)\n");
        #endif

        char parse_parameters_string[] = "ss";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &oldpath0, &oldpath_len0, &newpath0, &newpath_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 2:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxRename(wxString(oldpath0, wxConvUTF8), wxString(newpath0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(wxRename(wxString(oldpath0, wxConvUTF8), wxString(newpath0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxRename()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxAtoi(string str) */
PHP_FUNCTION(php_wxAtoi)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxAtoi\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* str0;
    size_t str_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &str0, &str_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxAtoi(wxString(str0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(wxAtoi(wxString(str0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxAtoi()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxAtol(string str) */
PHP_FUNCTION(php_wxAtol)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxAtol\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* str0;
    size_t str_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &str0, &str_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxAtol(wxString(str0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(wxAtol(wxString(str0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxAtol()\n"
        );
    }
}
/* }}} */

/* {{{ proto float wxAtof(string str) */
PHP_FUNCTION(php_wxAtof)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxAtof\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* str0;
    size_t str_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &str0, &str_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxAtof(wxString(str0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_DOUBLE(wxAtof(wxString(str0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxAtof()\n"
        );
    }
}
/* }}} */

/* {{{ proto int wxSystem(string str) */
PHP_FUNCTION(php_wxSystem)
{
    #ifdef USE_WXPHP_DEBUG
    php_printf("Invoking function wxSystem\n");
    php_printf("===========================================\n");
    #endif

    void* argument_native_object = NULL;

    //Variables used thru the code
    int arguments_received = ZEND_NUM_ARGS();
    zval dummy;
    ZVAL_NULL(&dummy);
    bool already_called = false;
    bool return_is_user_initialized = false;

    //Parameters for overload 0
    char* str0;
    size_t str_len0;
    bool overload0_called = false;

    
    //Overload 0
    overload0:
    if(!already_called && arguments_received == 1)
    {
        #ifdef USE_WXPHP_DEBUG
        php_printf("Parameters received %d\n", arguments_received);
        php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
        #endif

        char parse_parameters_string[] = "s";
        if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received, parse_parameters_string, &str0, &str_len0 ) == SUCCESS)
        {
            overload0_called = true;
            already_called = true;
        }
    }

    
    if(overload0_called)
    {
        switch(arguments_received)
        {
            case 1:
            {
                #ifdef USE_WXPHP_DEBUG
                php_printf("Executing RETURN_LONG(::wxSystem(wxString(str0, wxConvUTF8)))\n\n");
                #endif

                RETVAL_LONG(wxSystem(wxString(str0, wxConvUTF8)));


                return;
                break;
            }
        }
    }

    
    //In case wrong type/count of parameters was passed
    if(!already_called)
    {
        zend_error(
            E_ERROR,
            "Wrong type or count of parameters passed to "
            "wxSystem()\n"
        );
    }
}
/* }}} */

/* {{{ proto  wxDynamicCast() */
PHP_FUNCTION(php_wxDynamicCast)
{
    zval* object;
    char* object_type;
    size_t object_type_len = 0;
    void* native_object = 0;

    char parse_parameters[] = "z!s!";

    if (
        zend_parse_parameters_ex(
            ZEND_PARSE_PARAMS_QUIET,
            ZEND_NUM_ARGS(),
            parse_parameters,
            &object,
            &object_type,
            &object_type_len
        ) == SUCCESS
    )
    {
        if(Z_TYPE_P(object) == IS_OBJECT)
        {
            native_object = (void*)
                Z_wxObject_P(object)->native_object
            ;

            if(!native_object)
            {
                zend_error(
                    E_ERROR,
                    "Could not retreive native object of argument 1\n"
                );
            }
        }
        else
        {
            zend_error(E_ERROR, "Argument 1 is not an object\n");
        }

        if(!strcmp(object_type, "wxScrolledWindow"))
        {
            object_init_ex(return_value, php_wxScrolledWindow_entry);
            wxScrolledWindow* return_native_object = wxDynamicCast(
                native_object, wxScrolledWindow_php
            );

            Z_wxScrolledWindow_P(return_value)->native_object
                = (wxScrolledWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFrame"))
        {
            object_init_ex(return_value, php_wxFrame_entry);
            wxFrame* return_native_object = wxDynamicCast(
                native_object, wxFrame_php
            );

            Z_wxFrame_P(return_value)->native_object
                = (wxFrame_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTopLevelWindow"))
        {
            object_init_ex(return_value, php_wxTopLevelWindow_entry);
            wxTopLevelWindow* return_native_object = wxDynamicCast(
                native_object, wxTopLevelWindow_php
            );

            Z_wxTopLevelWindow_P(return_value)->native_object
                = (wxTopLevelWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxNonOwnedWindow"))
        {
            object_init_ex(return_value, php_wxNonOwnedWindow_entry);
            wxNonOwnedWindow* return_native_object = wxDynamicCast(
                native_object, wxNonOwnedWindow_php
            );

            Z_wxNonOwnedWindow_P(return_value)->native_object
                = (wxNonOwnedWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxWindow"))
        {
            object_init_ex(return_value, php_wxWindow_entry);
            wxWindow* return_native_object = wxDynamicCast(
                native_object, wxWindow_php
            );

            Z_wxWindow_P(return_value)->native_object
                = (wxWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxEvtHandler"))
        {
            object_init_ex(return_value, php_wxEvtHandler_entry);
            wxEvtHandler* return_native_object = wxDynamicCast(
                native_object, wxEvtHandler_php
            );

            Z_wxEvtHandler_P(return_value)->native_object
                = (wxEvtHandler_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxStatusBar"))
        {
            object_init_ex(return_value, php_wxStatusBar_entry);
            wxStatusBar* return_native_object = wxDynamicCast(
                native_object, wxStatusBar_php
            );

            Z_wxStatusBar_P(return_value)->native_object
                = (wxStatusBar_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxButton"))
        {
            object_init_ex(return_value, php_wxButton_entry);
            wxButton* return_native_object = wxDynamicCast(
                native_object, wxButton_php
            );

            Z_wxButton_P(return_value)->native_object
                = (wxButton_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxAnyButton"))
        {
            object_init_ex(return_value, php_wxAnyButton_entry);
            wxAnyButton* return_native_object = wxDynamicCast(
                native_object, wxAnyButton_php
            );

            Z_wxAnyButton_P(return_value)->native_object
                = (wxAnyButton_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxControl"))
        {
            object_init_ex(return_value, php_wxControl_entry);
            wxControl* return_native_object = wxDynamicCast(
                native_object, wxControl_php
            );

            Z_wxControl_P(return_value)->native_object
                = (wxControl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxValidator"))
        {
            object_init_ex(return_value, php_wxValidator_entry);
            wxValidator* return_native_object = wxDynamicCast(
                native_object, wxValidator_php
            );

            Z_wxValidator_P(return_value)->native_object
                = (wxValidator_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxBitmapHandler"))
        {
            object_init_ex(return_value, php_wxBitmapHandler_entry);
            wxBitmapHandler* return_native_object = wxDynamicCast(
                native_object, wxBitmapHandler_php
            );

            Z_wxBitmapHandler_P(return_value)->native_object
                = (wxBitmapHandler_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxBitmap"))
        {
            object_init_ex(return_value, php_wxBitmap_entry);
            wxBitmap* return_native_object = wxDynamicCast(
                native_object, wxBitmap_php
            );

            Z_wxBitmap_P(return_value)->native_object
                = (wxBitmap_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPalette"))
        {
            object_init_ex(return_value, php_wxPalette_entry);
            wxPalette* return_native_object = wxDynamicCast(
                native_object, wxPalette_php
            );

            Z_wxPalette_P(return_value)->native_object
                = (wxPalette_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxImage"))
        {
            object_init_ex(return_value, php_wxImage_entry);
            wxImage* return_native_object = wxDynamicCast(
                native_object, wxImage_php
            );

            Z_wxImage_P(return_value)->native_object
                = (wxImage_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxIcon"))
        {
            object_init_ex(return_value, php_wxIcon_entry);
            wxIcon* return_native_object = wxDynamicCast(
                native_object, wxIcon_php
            );

            Z_wxIcon_P(return_value)->native_object
                = (wxIcon_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSplitterWindow"))
        {
            object_init_ex(return_value, php_wxSplitterWindow_entry);
            wxSplitterWindow* return_native_object = wxDynamicCast(
                native_object, wxSplitterWindow_php
            );

            Z_wxSplitterWindow_P(return_value)->native_object
                = (wxSplitterWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxBoxSizer"))
        {
            object_init_ex(return_value, php_wxBoxSizer_entry);
            wxBoxSizer* return_native_object = wxDynamicCast(
                native_object, wxBoxSizer_php
            );

            Z_wxBoxSizer_P(return_value)->native_object
                = (wxBoxSizer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSizer"))
        {
            object_init_ex(return_value, php_wxSizer_entry);
            wxSizer* return_native_object = wxDynamicCast(
                native_object, wxSizer_php
            );

            Z_wxSizer_P(return_value)->native_object
                = (wxSizer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSizerItem"))
        {
            object_init_ex(return_value, php_wxSizerItem_entry);
            wxSizerItem* return_native_object = wxDynamicCast(
                native_object, wxSizerItem_php
            );

            Z_wxSizerItem_P(return_value)->native_object
                = (wxSizerItem_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTreeCtrl"))
        {
            object_init_ex(return_value, php_wxTreeCtrl_entry);
            wxTreeCtrl* return_native_object = wxDynamicCast(
                native_object, wxTreeCtrl_php
            );

            Z_wxTreeCtrl_P(return_value)->native_object
                = (wxTreeCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxImageList"))
        {
            object_init_ex(return_value, php_wxImageList_entry);
            wxImageList* return_native_object = wxDynamicCast(
                native_object, wxImageList_php
            );

            Z_wxImageList_P(return_value)->native_object
                = (wxImageList_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDC"))
        {
            object_init_ex(return_value, php_wxDC_entry);
            wxDC* return_native_object = wxDynamicCast(
                native_object, wxDC_php
            );

            Z_wxDC_P(return_value)->native_object
                = (wxDC_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxColour"))
        {
            object_init_ex(return_value, php_wxColour_entry);
            wxColour* return_native_object = wxDynamicCast(
                native_object, wxColour_php
            );

            Z_wxColour_P(return_value)->native_object
                = (wxColour_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFont"))
        {
            object_init_ex(return_value, php_wxFont_entry);
            wxFont* return_native_object = wxDynamicCast(
                native_object, wxFont_php
            );

            Z_wxFont_P(return_value)->native_object
                = (wxFont_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPanel"))
        {
            object_init_ex(return_value, php_wxPanel_entry);
            wxPanel* return_native_object = wxDynamicCast(
                native_object, wxPanel_php
            );

            Z_wxPanel_P(return_value)->native_object
                = (wxPanel_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxCheckListBox"))
        {
            object_init_ex(return_value, php_wxCheckListBox_entry);
            wxCheckListBox* return_native_object = wxDynamicCast(
                native_object, wxCheckListBox_php
            );

            Z_wxCheckListBox_P(return_value)->native_object
                = (wxCheckListBox_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxListBox"))
        {
            object_init_ex(return_value, php_wxListBox_entry);
            wxListBox* return_native_object = wxDynamicCast(
                native_object, wxListBox_php
            );

            Z_wxListBox_P(return_value)->native_object
                = (wxListBox_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxControlWithItems"))
        {
            object_init_ex(return_value, php_wxControlWithItems_entry);
            wxControlWithItems* return_native_object = wxDynamicCast(
                native_object, wxControlWithItems_php
            );

            Z_wxControlWithItems_P(return_value)->native_object
                = (wxControlWithItems_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMenuBar"))
        {
            object_init_ex(return_value, php_wxMenuBar_entry);
            wxMenuBar* return_native_object = wxDynamicCast(
                native_object, wxMenuBar_php
            );

            Z_wxMenuBar_P(return_value)->native_object
                = (wxMenuBar_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMenuEvent"))
        {
            object_init_ex(return_value, php_wxMenuEvent_entry);
            wxMenuEvent* return_native_object = wxDynamicCast(
                native_object, wxMenuEvent_php
            );

            Z_wxMenuEvent_P(return_value)->native_object
                = (wxMenuEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMenuItem"))
        {
            object_init_ex(return_value, php_wxMenuItem_entry);
            wxMenuItem* return_native_object = wxDynamicCast(
                native_object, wxMenuItem_php
            );

            Z_wxMenuItem_P(return_value)->native_object
                = (wxMenuItem_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMenu"))
        {
            object_init_ex(return_value, php_wxMenu_entry);
            wxMenu* return_native_object = wxDynamicCast(
                native_object, wxMenu_php
            );

            Z_wxMenu_P(return_value)->native_object
                = (wxMenu_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxEvent"))
        {
            object_init_ex(return_value, php_wxEvent_entry);
            wxEvent* return_native_object = wxDynamicCast(
                native_object, wxEvent_php
            );

            Z_wxEvent_P(return_value)->native_object
                = (wxEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTreeEvent"))
        {
            object_init_ex(return_value, php_wxTreeEvent_entry);
            wxTreeEvent* return_native_object = wxDynamicCast(
                native_object, wxTreeEvent_php
            );

            Z_wxTreeEvent_P(return_value)->native_object
                = (wxTreeEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxKeyEvent"))
        {
            object_init_ex(return_value, php_wxKeyEvent_entry);
            wxKeyEvent* return_native_object = wxDynamicCast(
                native_object, wxKeyEvent_php
            );

            Z_wxKeyEvent_P(return_value)->native_object
                = (wxKeyEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxNotifyEvent"))
        {
            object_init_ex(return_value, php_wxNotifyEvent_entry);
            wxNotifyEvent* return_native_object = wxDynamicCast(
                native_object, wxNotifyEvent_php
            );

            Z_wxNotifyEvent_P(return_value)->native_object
                = (wxNotifyEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxCommandEvent"))
        {
            object_init_ex(return_value, php_wxCommandEvent_entry);
            wxCommandEvent* return_native_object = wxDynamicCast(
                native_object, wxCommandEvent_php
            );

            Z_wxCommandEvent_P(return_value)->native_object
                = (wxCommandEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxCloseEvent"))
        {
            object_init_ex(return_value, php_wxCloseEvent_entry);
            wxCloseEvent* return_native_object = wxDynamicCast(
                native_object, wxCloseEvent_php
            );

            Z_wxCloseEvent_P(return_value)->native_object
                = (wxCloseEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxActivateEvent"))
        {
            object_init_ex(return_value, php_wxActivateEvent_entry);
            wxActivateEvent* return_native_object = wxDynamicCast(
                native_object, wxActivateEvent_php
            );

            Z_wxActivateEvent_P(return_value)->native_object
                = (wxActivateEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxAuiManager"))
        {
            object_init_ex(return_value, php_wxAuiManager_entry);
            wxAuiManager* return_native_object = wxDynamicCast(
                native_object, wxAuiManager_php
            );

            Z_wxAuiManager_P(return_value)->native_object
                = (wxAuiManager_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxAuiManagerEvent"))
        {
            object_init_ex(return_value, php_wxAuiManagerEvent_entry);
            wxAuiManagerEvent* return_native_object = wxDynamicCast(
                native_object, wxAuiManagerEvent_php
            );

            Z_wxAuiManagerEvent_P(return_value)->native_object
                = (wxAuiManagerEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxAuiNotebook"))
        {
            object_init_ex(return_value, php_wxAuiNotebook_entry);
            wxAuiNotebook* return_native_object = wxDynamicCast(
                native_object, wxAuiNotebook_php
            );

            Z_wxAuiNotebook_P(return_value)->native_object
                = (wxAuiNotebook_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxAuiNotebookEvent"))
        {
            object_init_ex(return_value, php_wxAuiNotebookEvent_entry);
            wxAuiNotebookEvent* return_native_object = wxDynamicCast(
                native_object, wxAuiNotebookEvent_php
            );

            Z_wxAuiNotebookEvent_P(return_value)->native_object
                = (wxAuiNotebookEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxBookCtrlEvent"))
        {
            object_init_ex(return_value, php_wxBookCtrlEvent_entry);
            wxBookCtrlEvent* return_native_object = wxDynamicCast(
                native_object, wxBookCtrlEvent_php
            );

            Z_wxBookCtrlEvent_P(return_value)->native_object
                = (wxBookCtrlEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxBookCtrlBase"))
        {
            object_init_ex(return_value, php_wxBookCtrlBase_entry);
            wxBookCtrlBase* return_native_object = wxDynamicCast(
                native_object, wxBookCtrlBase_php
            );

            Z_wxBookCtrlBase_P(return_value)->native_object
                = (wxBookCtrlBase_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxAcceleratorTable"))
        {
            object_init_ex(return_value, php_wxAcceleratorTable_entry);
            wxAcceleratorTable* return_native_object = wxDynamicCast(
                native_object, wxAcceleratorTable_php
            );

            Z_wxAcceleratorTable_P(return_value)->native_object
                = (wxAcceleratorTable_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGDIObject"))
        {
            object_init_ex(return_value, php_wxGDIObject_entry);
            wxGDIObject* return_native_object = wxDynamicCast(
                native_object, wxGDIObject_php
            );

            Z_wxGDIObject_P(return_value)->native_object
                = (wxGDIObject_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxAnimation"))
        {
            object_init_ex(return_value, php_wxAnimation_entry);
            wxAnimation* return_native_object = wxDynamicCast(
                native_object, wxAnimation_php
            );

            Z_wxAnimation_P(return_value)->native_object
                = (wxAnimation_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxAnimationCtrl"))
        {
            object_init_ex(return_value, php_wxAnimationCtrl_entry);
            wxAnimationCtrl* return_native_object = wxDynamicCast(
                native_object, wxAnimationCtrl_php
            );

            Z_wxAnimationCtrl_P(return_value)->native_object
                = (wxAnimationCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxArtProvider"))
        {
            object_init_ex(return_value, php_wxArtProvider_entry);
            wxArtProvider* return_native_object = wxDynamicCast(
                native_object, wxArtProvider_php
            );

            Z_wxArtProvider_P(return_value)->native_object
                = (wxArtProvider_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxIconBundle"))
        {
            object_init_ex(return_value, php_wxIconBundle_entry);
            wxIconBundle* return_native_object = wxDynamicCast(
                native_object, wxIconBundle_php
            );

            Z_wxIconBundle_P(return_value)->native_object
                = (wxIconBundle_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxStyledTextCtrl"))
        {
            object_init_ex(return_value, php_wxStyledTextCtrl_entry);
            wxStyledTextCtrl* return_native_object = wxDynamicCast(
                native_object, wxStyledTextCtrl_php
            );

            Z_wxStyledTextCtrl_P(return_value)->native_object
                = (wxStyledTextCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxStyledTextEvent"))
        {
            object_init_ex(return_value, php_wxStyledTextEvent_entry);
            wxStyledTextEvent* return_native_object = wxDynamicCast(
                native_object, wxStyledTextEvent_php
            );

            Z_wxStyledTextEvent_P(return_value)->native_object
                = (wxStyledTextEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxScrollBar"))
        {
            object_init_ex(return_value, php_wxScrollBar_entry);
            wxScrollBar* return_native_object = wxDynamicCast(
                native_object, wxScrollBar_php
            );

            Z_wxScrollBar_P(return_value)->native_object
                = (wxScrollBar_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxStaticText"))
        {
            object_init_ex(return_value, php_wxStaticText_entry);
            wxStaticText* return_native_object = wxDynamicCast(
                native_object, wxStaticText_php
            );

            Z_wxStaticText_P(return_value)->native_object
                = (wxStaticText_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxStaticLine"))
        {
            object_init_ex(return_value, php_wxStaticLine_entry);
            wxStaticLine* return_native_object = wxDynamicCast(
                native_object, wxStaticLine_php
            );

            Z_wxStaticLine_P(return_value)->native_object
                = (wxStaticLine_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxStaticBoxSizer"))
        {
            object_init_ex(return_value, php_wxStaticBoxSizer_entry);
            wxStaticBoxSizer* return_native_object = wxDynamicCast(
                native_object, wxStaticBoxSizer_php
            );

            Z_wxStaticBoxSizer_P(return_value)->native_object
                = (wxStaticBoxSizer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxStaticBox"))
        {
            object_init_ex(return_value, php_wxStaticBox_entry);
            wxStaticBox* return_native_object = wxDynamicCast(
                native_object, wxStaticBox_php
            );

            Z_wxStaticBox_P(return_value)->native_object
                = (wxStaticBox_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxStaticBitmap"))
        {
            object_init_ex(return_value, php_wxStaticBitmap_entry);
            wxStaticBitmap* return_native_object = wxDynamicCast(
                native_object, wxStaticBitmap_php
            );

            Z_wxStaticBitmap_P(return_value)->native_object
                = (wxStaticBitmap_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxCheckBox"))
        {
            object_init_ex(return_value, php_wxCheckBox_entry);
            wxCheckBox* return_native_object = wxDynamicCast(
                native_object, wxCheckBox_php
            );

            Z_wxCheckBox_P(return_value)->native_object
                = (wxCheckBox_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxWrapSizer"))
        {
            object_init_ex(return_value, php_wxWrapSizer_entry);
            wxWrapSizer* return_native_object = wxDynamicCast(
                native_object, wxWrapSizer_php
            );

            Z_wxWrapSizer_P(return_value)->native_object
                = (wxWrapSizer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxBitmapButton"))
        {
            object_init_ex(return_value, php_wxBitmapButton_entry);
            wxBitmapButton* return_native_object = wxDynamicCast(
                native_object, wxBitmapButton_php
            );

            Z_wxBitmapButton_P(return_value)->native_object
                = (wxBitmapButton_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTextCtrl"))
        {
            object_init_ex(return_value, php_wxTextCtrl_entry);
            wxTextCtrl* return_native_object = wxDynamicCast(
                native_object, wxTextCtrl_php
            );

            Z_wxTextCtrl_P(return_value)->native_object
                = (wxTextCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTextEntryDialog"))
        {
            object_init_ex(return_value, php_wxTextEntryDialog_entry);
            wxTextEntryDialog* return_native_object = wxDynamicCast(
                native_object, wxTextEntryDialog_php
            );

            Z_wxTextEntryDialog_P(return_value)->native_object
                = (wxTextEntryDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxComboBox"))
        {
            object_init_ex(return_value, php_wxComboBox_entry);
            wxComboBox* return_native_object = wxDynamicCast(
                native_object, wxComboBox_php
            );

            Z_wxComboBox_P(return_value)->native_object
                = (wxComboBox_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxBitmapComboBox"))
        {
            object_init_ex(return_value, php_wxBitmapComboBox_entry);
            wxBitmapComboBox* return_native_object = wxDynamicCast(
                native_object, wxBitmapComboBox_php
            );

            Z_wxBitmapComboBox_P(return_value)->native_object
                = (wxBitmapComboBox_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxAuiToolBarEvent"))
        {
            object_init_ex(return_value, php_wxAuiToolBarEvent_entry);
            wxAuiToolBarEvent* return_native_object = wxDynamicCast(
                native_object, wxAuiToolBarEvent_php
            );

            Z_wxAuiToolBarEvent_P(return_value)->native_object
                = (wxAuiToolBarEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxAuiToolBar"))
        {
            object_init_ex(return_value, php_wxAuiToolBar_entry);
            wxAuiToolBar* return_native_object = wxDynamicCast(
                native_object, wxAuiToolBar_php
            );

            Z_wxAuiToolBar_P(return_value)->native_object
                = (wxAuiToolBar_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxBannerWindow"))
        {
            object_init_ex(return_value, php_wxBannerWindow_entry);
            wxBannerWindow* return_native_object = wxDynamicCast(
                native_object, wxBannerWindow_php
            );

            Z_wxBannerWindow_P(return_value)->native_object
                = (wxBannerWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxChoice"))
        {
            object_init_ex(return_value, php_wxChoice_entry);
            wxChoice* return_native_object = wxDynamicCast(
                native_object, wxChoice_php
            );

            Z_wxChoice_P(return_value)->native_object
                = (wxChoice_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxListEvent"))
        {
            object_init_ex(return_value, php_wxListEvent_entry);
            wxListEvent* return_native_object = wxDynamicCast(
                native_object, wxListEvent_php
            );

            Z_wxListEvent_P(return_value)->native_object
                = (wxListEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxListCtrl"))
        {
            object_init_ex(return_value, php_wxListCtrl_entry);
            wxListCtrl* return_native_object = wxDynamicCast(
                native_object, wxListCtrl_php
            );

            Z_wxListCtrl_P(return_value)->native_object
                = (wxListCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxListbook"))
        {
            object_init_ex(return_value, php_wxListbook_entry);
            wxListbook* return_native_object = wxDynamicCast(
                native_object, wxListbook_php
            );

            Z_wxListbook_P(return_value)->native_object
                = (wxListbook_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxChildFocusEvent"))
        {
            object_init_ex(return_value, php_wxChildFocusEvent_entry);
            wxChildFocusEvent* return_native_object = wxDynamicCast(
                native_object, wxChildFocusEvent_php
            );

            Z_wxChildFocusEvent_P(return_value)->native_object
                = (wxChildFocusEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxChoicebook"))
        {
            object_init_ex(return_value, php_wxChoicebook_entry);
            wxChoicebook* return_native_object = wxDynamicCast(
                native_object, wxChoicebook_php
            );

            Z_wxChoicebook_P(return_value)->native_object
                = (wxChoicebook_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRadioBox"))
        {
            object_init_ex(return_value, php_wxRadioBox_entry);
            wxRadioBox* return_native_object = wxDynamicCast(
                native_object, wxRadioBox_php
            );

            Z_wxRadioBox_P(return_value)->native_object
                = (wxRadioBox_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRadioButton"))
        {
            object_init_ex(return_value, php_wxRadioButton_entry);
            wxRadioButton* return_native_object = wxDynamicCast(
                native_object, wxRadioButton_php
            );

            Z_wxRadioButton_P(return_value)->native_object
                = (wxRadioButton_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRearrangeList"))
        {
            object_init_ex(return_value, php_wxRearrangeList_entry);
            wxRearrangeList* return_native_object = wxDynamicCast(
                native_object, wxRearrangeList_php
            );

            Z_wxRearrangeList_P(return_value)->native_object
                = (wxRearrangeList_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSlider"))
        {
            object_init_ex(return_value, php_wxSlider_entry);
            wxSlider* return_native_object = wxDynamicCast(
                native_object, wxSlider_php
            );

            Z_wxSlider_P(return_value)->native_object
                = (wxSlider_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSpinCtrl"))
        {
            object_init_ex(return_value, php_wxSpinCtrl_entry);
            wxSpinCtrl* return_native_object = wxDynamicCast(
                native_object, wxSpinCtrl_php
            );

            Z_wxSpinCtrl_P(return_value)->native_object
                = (wxSpinCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSpinButton"))
        {
            object_init_ex(return_value, php_wxSpinButton_entry);
            wxSpinButton* return_native_object = wxDynamicCast(
                native_object, wxSpinButton_php
            );

            Z_wxSpinButton_P(return_value)->native_object
                = (wxSpinButton_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSpinEvent"))
        {
            object_init_ex(return_value, php_wxSpinEvent_entry);
            wxSpinEvent* return_native_object = wxDynamicCast(
                native_object, wxSpinEvent_php
            );

            Z_wxSpinEvent_P(return_value)->native_object
                = (wxSpinEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSplitterEvent"))
        {
            object_init_ex(return_value, php_wxSplitterEvent_entry);
            wxSplitterEvent* return_native_object = wxDynamicCast(
                native_object, wxSplitterEvent_php
            );

            Z_wxSplitterEvent_P(return_value)->native_object
                = (wxSplitterEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSplashScreen"))
        {
            object_init_ex(return_value, php_wxSplashScreen_entry);
            wxSplashScreen* return_native_object = wxDynamicCast(
                native_object, wxSplashScreen_php
            );

            Z_wxSplashScreen_P(return_value)->native_object
                = (wxSplashScreen_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSizeEvent"))
        {
            object_init_ex(return_value, php_wxSizeEvent_entry);
            wxSizeEvent* return_native_object = wxDynamicCast(
                native_object, wxSizeEvent_php
            );

            Z_wxSizeEvent_P(return_value)->native_object
                = (wxSizeEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGauge"))
        {
            object_init_ex(return_value, php_wxGauge_entry);
            wxGauge* return_native_object = wxDynamicCast(
                native_object, wxGauge_php
            );

            Z_wxGauge_P(return_value)->native_object
                = (wxGauge_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlWindow"))
        {
            object_init_ex(return_value, php_wxHtmlWindow_entry);
            wxHtmlWindow* return_native_object = wxDynamicCast(
                native_object, wxHtmlWindow_php
            );

            Z_wxHtmlWindow_P(return_value)->native_object
                = (wxHtmlWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlContainerCell"))
        {
            object_init_ex(return_value, php_wxHtmlContainerCell_entry);
            wxHtmlContainerCell* return_native_object = wxDynamicCast(
                native_object, wxHtmlContainerCell_php
            );

            Z_wxHtmlContainerCell_P(return_value)->native_object
                = (wxHtmlContainerCell_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlCell"))
        {
            object_init_ex(return_value, php_wxHtmlCell_entry);
            wxHtmlCell* return_native_object = wxDynamicCast(
                native_object, wxHtmlCell_php
            );

            Z_wxHtmlCell_P(return_value)->native_object
                = (wxHtmlCell_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlCellEvent"))
        {
            object_init_ex(return_value, php_wxHtmlCellEvent_entry);
            wxHtmlCellEvent* return_native_object = wxDynamicCast(
                native_object, wxHtmlCellEvent_php
            );

            Z_wxHtmlCellEvent_P(return_value)->native_object
                = (wxHtmlCellEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlColourCell"))
        {
            object_init_ex(return_value, php_wxHtmlColourCell_entry);
            wxHtmlColourCell* return_native_object = wxDynamicCast(
                native_object, wxHtmlColourCell_php
            );

            Z_wxHtmlColourCell_P(return_value)->native_object
                = (wxHtmlColourCell_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlEasyPrinting"))
        {
            object_init_ex(return_value, php_wxHtmlEasyPrinting_entry);
            wxHtmlEasyPrinting* return_native_object = wxDynamicCast(
                native_object, wxHtmlEasyPrinting_php
            );

            Z_wxHtmlEasyPrinting_P(return_value)->native_object
                = (wxHtmlEasyPrinting_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlLinkEvent"))
        {
            object_init_ex(return_value, php_wxHtmlLinkEvent_entry);
            wxHtmlLinkEvent* return_native_object = wxDynamicCast(
                native_object, wxHtmlLinkEvent_php
            );

            Z_wxHtmlLinkEvent_P(return_value)->native_object
                = (wxHtmlLinkEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlLinkInfo"))
        {
            object_init_ex(return_value, php_wxHtmlLinkInfo_entry);
            wxHtmlLinkInfo* return_native_object = wxDynamicCast(
                native_object, wxHtmlLinkInfo_php
            );

            Z_wxHtmlLinkInfo_P(return_value)->native_object
                = (wxHtmlLinkInfo_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMouseEvent"))
        {
            object_init_ex(return_value, php_wxMouseEvent_entry);
            wxMouseEvent* return_native_object = wxDynamicCast(
                native_object, wxMouseEvent_php
            );

            Z_wxMouseEvent_P(return_value)->native_object
                = (wxMouseEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMoveEvent"))
        {
            object_init_ex(return_value, php_wxMoveEvent_entry);
            wxMoveEvent* return_native_object = wxDynamicCast(
                native_object, wxMoveEvent_php
            );

            Z_wxMoveEvent_P(return_value)->native_object
                = (wxMoveEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMouseEventsManager"))
        {
            object_init_ex(return_value, php_wxMouseEventsManager_entry);
            wxMouseEventsManager* return_native_object = wxDynamicCast(
                native_object, wxMouseEventsManager_php
            );

            Z_wxMouseEventsManager_P(return_value)->native_object
                = (wxMouseEventsManager_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMessageDialog"))
        {
            object_init_ex(return_value, php_wxMessageDialog_entry);
            wxMessageDialog* return_native_object = wxDynamicCast(
                native_object, wxMessageDialog_php
            );

            Z_wxMessageDialog_P(return_value)->native_object
                = (wxMessageDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHyperlinkCtrl"))
        {
            object_init_ex(return_value, php_wxHyperlinkCtrl_entry);
            wxHyperlinkCtrl* return_native_object = wxDynamicCast(
                native_object, wxHyperlinkCtrl_php
            );

            Z_wxHyperlinkCtrl_P(return_value)->native_object
                = (wxHyperlinkCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHyperlinkEvent"))
        {
            object_init_ex(return_value, php_wxHyperlinkEvent_entry);
            wxHyperlinkEvent* return_native_object = wxDynamicCast(
                native_object, wxHyperlinkEvent_php
            );

            Z_wxHyperlinkEvent_P(return_value)->native_object
                = (wxHyperlinkEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxCursor"))
        {
            object_init_ex(return_value, php_wxCursor_entry);
            wxCursor* return_native_object = wxDynamicCast(
                native_object, wxCursor_php
            );

            Z_wxCursor_P(return_value)->native_object
                = (wxCursor_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxToggleButton"))
        {
            object_init_ex(return_value, php_wxToggleButton_entry);
            wxToggleButton* return_native_object = wxDynamicCast(
                native_object, wxToggleButton_php
            );

            Z_wxToggleButton_P(return_value)->native_object
                = (wxToggleButton_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTimer"))
        {
            object_init_ex(return_value, php_wxTimer_entry);
            wxTimer* return_native_object = wxDynamicCast(
                native_object, wxTimer_php
            );

            Z_wxTimer_P(return_value)->native_object
                = (wxTimer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTimerEvent"))
        {
            object_init_ex(return_value, php_wxTimerEvent_entry);
            wxTimerEvent* return_native_object = wxDynamicCast(
                native_object, wxTimerEvent_php
            );

            Z_wxTimerEvent_P(return_value)->native_object
                = (wxTimerEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxThreadEvent"))
        {
            object_init_ex(return_value, php_wxThreadEvent_entry);
            wxThreadEvent* return_native_object = wxDynamicCast(
                native_object, wxThreadEvent_php
            );

            Z_wxThreadEvent_P(return_value)->native_object
                = (wxThreadEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSearchCtrl"))
        {
            object_init_ex(return_value, php_wxSearchCtrl_entry);
            wxSearchCtrl* return_native_object = wxDynamicCast(
                native_object, wxSearchCtrl_php
            );

            Z_wxSearchCtrl_P(return_value)->native_object
                = (wxSearchCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxColourPickerEvent"))
        {
            object_init_ex(return_value, php_wxColourPickerEvent_entry);
            wxColourPickerEvent* return_native_object = wxDynamicCast(
                native_object, wxColourPickerEvent_php
            );

            Z_wxColourPickerEvent_P(return_value)->native_object
                = (wxColourPickerEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxColourPickerCtrl"))
        {
            object_init_ex(return_value, php_wxColourPickerCtrl_entry);
            wxColourPickerCtrl* return_native_object = wxDynamicCast(
                native_object, wxColourPickerCtrl_php
            );

            Z_wxColourPickerCtrl_P(return_value)->native_object
                = (wxColourPickerCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFontPickerCtrl"))
        {
            object_init_ex(return_value, php_wxFontPickerCtrl_entry);
            wxFontPickerCtrl* return_native_object = wxDynamicCast(
                native_object, wxFontPickerCtrl_php
            );

            Z_wxFontPickerCtrl_P(return_value)->native_object
                = (wxFontPickerCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFontPickerEvent"))
        {
            object_init_ex(return_value, php_wxFontPickerEvent_entry);
            wxFontPickerEvent* return_native_object = wxDynamicCast(
                native_object, wxFontPickerEvent_php
            );

            Z_wxFontPickerEvent_P(return_value)->native_object
                = (wxFontPickerEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFilePickerCtrl"))
        {
            object_init_ex(return_value, php_wxFilePickerCtrl_entry);
            wxFilePickerCtrl* return_native_object = wxDynamicCast(
                native_object, wxFilePickerCtrl_php
            );

            Z_wxFilePickerCtrl_P(return_value)->native_object
                = (wxFilePickerCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFindReplaceDialog"))
        {
            object_init_ex(return_value, php_wxFindReplaceDialog_entry);
            wxFindReplaceDialog* return_native_object = wxDynamicCast(
                native_object, wxFindReplaceDialog_php
            );

            Z_wxFindReplaceDialog_P(return_value)->native_object
                = (wxFindReplaceDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFindReplaceData"))
        {
            object_init_ex(return_value, php_wxFindReplaceData_entry);
            wxFindReplaceData* return_native_object = wxDynamicCast(
                native_object, wxFindReplaceData_php
            );

            Z_wxFindReplaceData_P(return_value)->native_object
                = (wxFindReplaceData_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDirPickerCtrl"))
        {
            object_init_ex(return_value, php_wxDirPickerCtrl_entry);
            wxDirPickerCtrl* return_native_object = wxDynamicCast(
                native_object, wxDirPickerCtrl_php
            );

            Z_wxDirPickerCtrl_P(return_value)->native_object
                = (wxDirPickerCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDirDialog"))
        {
            object_init_ex(return_value, php_wxDirDialog_entry);
            wxDirDialog* return_native_object = wxDynamicCast(
                native_object, wxDirDialog_php
            );

            Z_wxDirDialog_P(return_value)->native_object
                = (wxDirDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSpinDoubleEvent"))
        {
            object_init_ex(return_value, php_wxSpinDoubleEvent_entry);
            wxSpinDoubleEvent* return_native_object = wxDynamicCast(
                native_object, wxSpinDoubleEvent_php
            );

            Z_wxSpinDoubleEvent_P(return_value)->native_object
                = (wxSpinDoubleEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSpinCtrlDouble"))
        {
            object_init_ex(return_value, php_wxSpinCtrlDouble_entry);
            wxSpinCtrlDouble* return_native_object = wxDynamicCast(
                native_object, wxSpinCtrlDouble_php
            );

            Z_wxSpinCtrlDouble_P(return_value)->native_object
                = (wxSpinCtrlDouble_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGenericDirCtrl"))
        {
            object_init_ex(return_value, php_wxGenericDirCtrl_entry);
            wxGenericDirCtrl* return_native_object = wxDynamicCast(
                native_object, wxGenericDirCtrl_php
            );

            Z_wxGenericDirCtrl_P(return_value)->native_object
                = (wxGenericDirCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGridSizeEvent"))
        {
            object_init_ex(return_value, php_wxGridSizeEvent_entry);
            wxGridSizeEvent* return_native_object = wxDynamicCast(
                native_object, wxGridSizeEvent_php
            );

            Z_wxGridSizeEvent_P(return_value)->native_object
                = (wxGridSizeEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGridSizer"))
        {
            object_init_ex(return_value, php_wxGridSizer_entry);
            wxGridSizer* return_native_object = wxDynamicCast(
                native_object, wxGridSizer_php
            );

            Z_wxGridSizer_P(return_value)->native_object
                = (wxGridSizer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFlexGridSizer"))
        {
            object_init_ex(return_value, php_wxFlexGridSizer_entry);
            wxFlexGridSizer* return_native_object = wxDynamicCast(
                native_object, wxFlexGridSizer_php
            );

            Z_wxFlexGridSizer_P(return_value)->native_object
                = (wxFlexGridSizer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGridBagSizer"))
        {
            object_init_ex(return_value, php_wxGridBagSizer_entry);
            wxGridBagSizer* return_native_object = wxDynamicCast(
                native_object, wxGridBagSizer_php
            );

            Z_wxGridBagSizer_P(return_value)->native_object
                = (wxGridBagSizer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxStdDialogButtonSizer"))
        {
            object_init_ex(return_value, php_wxStdDialogButtonSizer_entry);
            wxStdDialogButtonSizer* return_native_object = wxDynamicCast(
                native_object, wxStdDialogButtonSizer_php
            );

            Z_wxStdDialogButtonSizer_P(return_value)->native_object
                = (wxStdDialogButtonSizer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxScrollEvent"))
        {
            object_init_ex(return_value, php_wxScrollEvent_entry);
            wxScrollEvent* return_native_object = wxDynamicCast(
                native_object, wxScrollEvent_php
            );

            Z_wxScrollEvent_P(return_value)->native_object
                = (wxScrollEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxScrollWinEvent"))
        {
            object_init_ex(return_value, php_wxScrollWinEvent_entry);
            wxScrollWinEvent* return_native_object = wxDynamicCast(
                native_object, wxScrollWinEvent_php
            );

            Z_wxScrollWinEvent_P(return_value)->native_object
                = (wxScrollWinEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxNotebook"))
        {
            object_init_ex(return_value, php_wxNotebook_entry);
            wxNotebook* return_native_object = wxDynamicCast(
                native_object, wxNotebook_php
            );

            Z_wxNotebook_P(return_value)->native_object
                = (wxNotebook_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDialog"))
        {
            object_init_ex(return_value, php_wxDialog_entry);
            wxDialog* return_native_object = wxDynamicCast(
                native_object, wxDialog_php
            );

            Z_wxDialog_P(return_value)->native_object
                = (wxDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSysColourChangedEvent"))
        {
            object_init_ex(return_value, php_wxSysColourChangedEvent_entry);
            wxSysColourChangedEvent* return_native_object = wxDynamicCast(
                native_object, wxSysColourChangedEvent_php
            );

            Z_wxSysColourChangedEvent_P(return_value)->native_object
                = (wxSysColourChangedEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSymbolPickerDialog"))
        {
            object_init_ex(return_value, php_wxSymbolPickerDialog_entry);
            wxSymbolPickerDialog* return_native_object = wxDynamicCast(
                native_object, wxSymbolPickerDialog_php
            );

            Z_wxSymbolPickerDialog_P(return_value)->native_object
                = (wxSymbolPickerDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGBSizerItem"))
        {
            object_init_ex(return_value, php_wxGBSizerItem_entry);
            wxGBSizerItem* return_native_object = wxDynamicCast(
                native_object, wxGBSizerItem_php
            );

            Z_wxGBSizerItem_P(return_value)->native_object
                = (wxGBSizerItem_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPopupWindow"))
        {
            object_init_ex(return_value, php_wxPopupWindow_entry);
            wxPopupWindow* return_native_object = wxDynamicCast(
                native_object, wxPopupWindow_php
            );

            Z_wxPopupWindow_P(return_value)->native_object
                = (wxPopupWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMDIChildFrame"))
        {
            object_init_ex(return_value, php_wxMDIChildFrame_entry);
            wxMDIChildFrame* return_native_object = wxDynamicCast(
                native_object, wxMDIChildFrame_php
            );

            Z_wxMDIChildFrame_P(return_value)->native_object
                = (wxMDIChildFrame_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMDIClientWindow"))
        {
            object_init_ex(return_value, php_wxMDIClientWindow_entry);
            wxMDIClientWindow* return_native_object = wxDynamicCast(
                native_object, wxMDIClientWindow_php
            );

            Z_wxMDIClientWindow_P(return_value)->native_object
                = (wxMDIClientWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMDIParentFrame"))
        {
            object_init_ex(return_value, php_wxMDIParentFrame_entry);
            wxMDIParentFrame* return_native_object = wxDynamicCast(
                native_object, wxMDIParentFrame_php
            );

            Z_wxMDIParentFrame_P(return_value)->native_object
                = (wxMDIParentFrame_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMiniFrame"))
        {
            object_init_ex(return_value, php_wxMiniFrame_entry);
            wxMiniFrame* return_native_object = wxDynamicCast(
                native_object, wxMiniFrame_php
            );

            Z_wxMiniFrame_P(return_value)->native_object
                = (wxMiniFrame_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPropertySheetDialog"))
        {
            object_init_ex(return_value, php_wxPropertySheetDialog_entry);
            wxPropertySheetDialog* return_native_object = wxDynamicCast(
                native_object, wxPropertySheetDialog_php
            );

            Z_wxPropertySheetDialog_P(return_value)->native_object
                = (wxPropertySheetDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxWizard"))
        {
            object_init_ex(return_value, php_wxWizard_entry);
            wxWizard* return_native_object = wxDynamicCast(
                native_object, wxWizard_php
            );

            Z_wxWizard_P(return_value)->native_object
                = (wxWizard_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxWizardEvent"))
        {
            object_init_ex(return_value, php_wxWizardEvent_entry);
            wxWizardEvent* return_native_object = wxDynamicCast(
                native_object, wxWizardEvent_php
            );

            Z_wxWizardEvent_P(return_value)->native_object
                = (wxWizardEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxWizardPage"))
        {
            object_init_ex(return_value, php_wxWizardPage_entry);
            wxWizardPage* return_native_object = wxDynamicCast(
                native_object, wxWizardPage_php
            );

            Z_wxWizardPage_P(return_value)->native_object
                = (wxWizardPage_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxWizardPageSimple"))
        {
            object_init_ex(return_value, php_wxWizardPageSimple_entry);
            wxWizardPageSimple* return_native_object = wxDynamicCast(
                native_object, wxWizardPageSimple_php
            );

            Z_wxWizardPageSimple_P(return_value)->native_object
                = (wxWizardPageSimple_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxWindowModalDialogEvent"))
        {
            object_init_ex(return_value, php_wxWindowModalDialogEvent_entry);
            wxWindowModalDialogEvent* return_native_object = wxDynamicCast(
                native_object, wxWindowModalDialogEvent_php
            );

            Z_wxWindowModalDialogEvent_P(return_value)->native_object
                = (wxWindowModalDialogEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTreebook"))
        {
            object_init_ex(return_value, php_wxTreebook_entry);
            wxTreebook* return_native_object = wxDynamicCast(
                native_object, wxTreebook_php
            );

            Z_wxTreebook_P(return_value)->native_object
                = (wxTreebook_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTreeListCtrl"))
        {
            object_init_ex(return_value, php_wxTreeListCtrl_entry);
            wxTreeListCtrl* return_native_object = wxDynamicCast(
                native_object, wxTreeListCtrl_php
            );

            Z_wxTreeListCtrl_P(return_value)->native_object
                = (wxTreeListCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSound"))
        {
            object_init_ex(return_value, php_wxSound_entry);
            wxSound* return_native_object = wxDynamicCast(
                native_object, wxSound_php
            );

            Z_wxSound_P(return_value)->native_object
                = (wxSound_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFileSystem"))
        {
            object_init_ex(return_value, php_wxFileSystem_entry);
            wxFileSystem* return_native_object = wxDynamicCast(
                native_object, wxFileSystem_php
            );

            Z_wxFileSystem_P(return_value)->native_object
                = (wxFileSystem_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFileSystemHandler"))
        {
            object_init_ex(return_value, php_wxFileSystemHandler_entry);
            wxFileSystemHandler* return_native_object = wxDynamicCast(
                native_object, wxFileSystemHandler_php
            );

            Z_wxFileSystemHandler_P(return_value)->native_object
                = (wxFileSystemHandler_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDateEvent"))
        {
            object_init_ex(return_value, php_wxDateEvent_entry);
            wxDateEvent* return_native_object = wxDynamicCast(
                native_object, wxDateEvent_php
            );

            Z_wxDateEvent_P(return_value)->native_object
                = (wxDateEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxBitmapToggleButton"))
        {
            object_init_ex(return_value, php_wxBitmapToggleButton_entry);
            wxBitmapToggleButton* return_native_object = wxDynamicCast(
                native_object, wxBitmapToggleButton_php
            );

            Z_wxBitmapToggleButton_P(return_value)->native_object
                = (wxBitmapToggleButton_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxCalendarCtrl"))
        {
            object_init_ex(return_value, php_wxCalendarCtrl_entry);
            wxCalendarCtrl* return_native_object = wxDynamicCast(
                native_object, wxCalendarCtrl_php
            );

            Z_wxCalendarCtrl_P(return_value)->native_object
                = (wxCalendarCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMask"))
        {
            object_init_ex(return_value, php_wxMask_entry);
            wxMask* return_native_object = wxDynamicCast(
                native_object, wxMask_php
            );

            Z_wxMask_P(return_value)->native_object
                = (wxMask_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxToolTip"))
        {
            object_init_ex(return_value, php_wxToolTip_entry);
            wxToolTip* return_native_object = wxDynamicCast(
                native_object, wxToolTip_php
            );

            Z_wxToolTip_P(return_value)->native_object
                = (wxToolTip_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRegion"))
        {
            object_init_ex(return_value, php_wxRegion_entry);
            wxRegion* return_native_object = wxDynamicCast(
                native_object, wxRegion_php
            );

            Z_wxRegion_P(return_value)->native_object
                = (wxRegion_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPopupTransientWindow"))
        {
            object_init_ex(return_value, php_wxPopupTransientWindow_entry);
            wxPopupTransientWindow* return_native_object = wxDynamicCast(
                native_object, wxPopupTransientWindow_php
            );

            Z_wxPopupTransientWindow_P(return_value)->native_object
                = (wxPopupTransientWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxProcessEvent"))
        {
            object_init_ex(return_value, php_wxProcessEvent_entry);
            wxProcessEvent* return_native_object = wxDynamicCast(
                native_object, wxProcessEvent_php
            );

            Z_wxProcessEvent_P(return_value)->native_object
                = (wxProcessEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxProgressDialog"))
        {
            object_init_ex(return_value, php_wxProgressDialog_entry);
            wxProgressDialog* return_native_object = wxDynamicCast(
                native_object, wxProgressDialog_php
            );

            Z_wxProgressDialog_P(return_value)->native_object
                = (wxProgressDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGraphicsRenderer"))
        {
            object_init_ex(return_value, php_wxGraphicsRenderer_entry);
            wxGraphicsRenderer* return_native_object = wxDynamicCast(
                native_object, wxGraphicsRenderer_php
            );

            Z_wxGraphicsRenderer_P(return_value)->native_object
                = (wxGraphicsRenderer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxWindowDC"))
        {
            object_init_ex(return_value, php_wxWindowDC_entry);
            wxWindowDC* return_native_object = wxDynamicCast(
                native_object, wxWindowDC_php
            );

            Z_wxWindowDC_P(return_value)->native_object
                = (wxWindowDC_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxWindowCreateEvent"))
        {
            object_init_ex(return_value, php_wxWindowCreateEvent_entry);
            wxWindowCreateEvent* return_native_object = wxDynamicCast(
                native_object, wxWindowCreateEvent_php
            );

            Z_wxWindowCreateEvent_P(return_value)->native_object
                = (wxWindowCreateEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxWindowDestroyEvent"))
        {
            object_init_ex(return_value, php_wxWindowDestroyEvent_entry);
            wxWindowDestroyEvent* return_native_object = wxDynamicCast(
                native_object, wxWindowDestroyEvent_php
            );

            Z_wxWindowDestroyEvent_P(return_value)->native_object
                = (wxWindowDestroyEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxEventBlocker"))
        {
            object_init_ex(return_value, php_wxEventBlocker_entry);
            wxEventBlocker* return_native_object = wxDynamicCast(
                native_object, wxEventBlocker_php
            );

            Z_wxEventBlocker_P(return_value)->native_object
                = (wxEventBlocker_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxEraseEvent"))
        {
            object_init_ex(return_value, php_wxEraseEvent_entry);
            wxEraseEvent* return_native_object = wxDynamicCast(
                native_object, wxEraseEvent_php
            );

            Z_wxEraseEvent_P(return_value)->native_object
                = (wxEraseEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPickerBase"))
        {
            object_init_ex(return_value, php_wxPickerBase_entry);
            wxPickerBase* return_native_object = wxDynamicCast(
                native_object, wxPickerBase_php
            );

            Z_wxPickerBase_P(return_value)->native_object
                = (wxPickerBase_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGridEvent"))
        {
            object_init_ex(return_value, php_wxGridEvent_entry);
            wxGridEvent* return_native_object = wxDynamicCast(
                native_object, wxGridEvent_php
            );

            Z_wxGridEvent_P(return_value)->native_object
                = (wxGridEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxUpdateUIEvent"))
        {
            object_init_ex(return_value, php_wxUpdateUIEvent_entry);
            wxUpdateUIEvent* return_native_object = wxDynamicCast(
                native_object, wxUpdateUIEvent_php
            );

            Z_wxUpdateUIEvent_P(return_value)->native_object
                = (wxUpdateUIEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHelpEvent"))
        {
            object_init_ex(return_value, php_wxHelpEvent_entry);
            wxHelpEvent* return_native_object = wxDynamicCast(
                native_object, wxHelpEvent_php
            );

            Z_wxHelpEvent_P(return_value)->native_object
                = (wxHelpEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxLayoutConstraints"))
        {
            object_init_ex(return_value, php_wxLayoutConstraints_entry);
            wxLayoutConstraints* return_native_object = wxDynamicCast(
                native_object, wxLayoutConstraints_php
            );

            Z_wxLayoutConstraints_P(return_value)->native_object
                = (wxLayoutConstraints_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFSFile"))
        {
            object_init_ex(return_value, php_wxFSFile_entry);
            wxFSFile* return_native_object = wxDynamicCast(
                native_object, wxFSFile_php
            );

            Z_wxFSFile_P(return_value)->native_object
                = (wxFSFile_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTimePickerCtrl"))
        {
            object_init_ex(return_value, php_wxTimePickerCtrl_entry);
            wxTimePickerCtrl* return_native_object = wxDynamicCast(
                native_object, wxTimePickerCtrl_php
            );

            Z_wxTimePickerCtrl_P(return_value)->native_object
                = (wxTimePickerCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxColourDialog"))
        {
            object_init_ex(return_value, php_wxColourDialog_entry);
            wxColourDialog* return_native_object = wxDynamicCast(
                native_object, wxColourDialog_php
            );

            Z_wxColourDialog_P(return_value)->native_object
                = (wxColourDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxColourData"))
        {
            object_init_ex(return_value, php_wxColourData_entry);
            wxColourData* return_native_object = wxDynamicCast(
                native_object, wxColourData_php
            );

            Z_wxColourData_P(return_value)->native_object
                = (wxColourData_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFileDialog"))
        {
            object_init_ex(return_value, php_wxFileDialog_entry);
            wxFileDialog* return_native_object = wxDynamicCast(
                native_object, wxFileDialog_php
            );

            Z_wxFileDialog_P(return_value)->native_object
                = (wxFileDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFontData"))
        {
            object_init_ex(return_value, php_wxFontData_entry);
            wxFontData* return_native_object = wxDynamicCast(
                native_object, wxFontData_php
            );

            Z_wxFontData_P(return_value)->native_object
                = (wxFontData_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFontDialog"))
        {
            object_init_ex(return_value, php_wxFontDialog_entry);
            wxFontDialog* return_native_object = wxDynamicCast(
                native_object, wxFontDialog_php
            );

            Z_wxFontDialog_P(return_value)->native_object
                = (wxFontDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxToolBar"))
        {
            object_init_ex(return_value, php_wxToolBar_entry);
            wxToolBar* return_native_object = wxDynamicCast(
                native_object, wxToolBar_php
            );

            Z_wxToolBar_P(return_value)->native_object
                = (wxToolBar_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxCalendarEvent"))
        {
            object_init_ex(return_value, php_wxCalendarEvent_entry);
            wxCalendarEvent* return_native_object = wxDynamicCast(
                native_object, wxCalendarEvent_php
            );

            Z_wxCalendarEvent_P(return_value)->native_object
                = (wxCalendarEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGrid"))
        {
            object_init_ex(return_value, php_wxGrid_entry);
            wxGrid* return_native_object = wxDynamicCast(
                native_object, wxGrid_php
            );

            Z_wxGrid_P(return_value)->native_object
                = (wxGrid_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGridEditorCreatedEvent"))
        {
            object_init_ex(return_value, php_wxGridEditorCreatedEvent_entry);
            wxGridEditorCreatedEvent* return_native_object = wxDynamicCast(
                native_object, wxGridEditorCreatedEvent_php
            );

            Z_wxGridEditorCreatedEvent_P(return_value)->native_object
                = (wxGridEditorCreatedEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGridRangeSelectEvent"))
        {
            object_init_ex(return_value, php_wxGridRangeSelectEvent_entry);
            wxGridRangeSelectEvent* return_native_object = wxDynamicCast(
                native_object, wxGridRangeSelectEvent_php
            );

            Z_wxGridRangeSelectEvent_P(return_value)->native_object
                = (wxGridRangeSelectEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGridTableBase"))
        {
            object_init_ex(return_value, php_wxGridTableBase_entry);
            wxGridTableBase* return_native_object = wxDynamicCast(
                native_object, wxGridTableBase_php
            );

            Z_wxGridTableBase_P(return_value)->native_object
                = (wxGridTableBase_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDatePickerCtrl"))
        {
            object_init_ex(return_value, php_wxDatePickerCtrl_entry);
            wxDatePickerCtrl* return_native_object = wxDynamicCast(
                native_object, wxDatePickerCtrl_php
            );

            Z_wxDatePickerCtrl_P(return_value)->native_object
                = (wxDatePickerCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPasswordEntryDialog"))
        {
            object_init_ex(return_value, php_wxPasswordEntryDialog_entry);
            wxPasswordEntryDialog* return_native_object = wxDynamicCast(
                native_object, wxPasswordEntryDialog_php
            );

            Z_wxPasswordEntryDialog_P(return_value)->native_object
                = (wxPasswordEntryDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxScreenDC"))
        {
            object_init_ex(return_value, php_wxScreenDC_entry);
            wxScreenDC* return_native_object = wxDynamicCast(
                native_object, wxScreenDC_php
            );

            Z_wxScreenDC_P(return_value)->native_object
                = (wxScreenDC_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxCollapsiblePane"))
        {
            object_init_ex(return_value, php_wxCollapsiblePane_entry);
            wxCollapsiblePane* return_native_object = wxDynamicCast(
                native_object, wxCollapsiblePane_php
            );

            Z_wxCollapsiblePane_P(return_value)->native_object
                = (wxCollapsiblePane_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxCollapsiblePaneEvent"))
        {
            object_init_ex(return_value, php_wxCollapsiblePaneEvent_entry);
            wxCollapsiblePaneEvent* return_native_object = wxDynamicCast(
                native_object, wxCollapsiblePaneEvent_php
            );

            Z_wxCollapsiblePaneEvent_P(return_value)->native_object
                = (wxCollapsiblePaneEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxComboCtrl"))
        {
            object_init_ex(return_value, php_wxComboCtrl_entry);
            wxComboCtrl* return_native_object = wxDynamicCast(
                native_object, wxComboCtrl_php
            );

            Z_wxComboCtrl_P(return_value)->native_object
                = (wxComboCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewCtrl"))
        {
            object_init_ex(return_value, php_wxDataViewCtrl_entry);
            wxDataViewCtrl* return_native_object = wxDynamicCast(
                native_object, wxDataViewCtrl_php
            );

            Z_wxDataViewCtrl_P(return_value)->native_object
                = (wxDataViewCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewRenderer"))
        {
            object_init_ex(return_value, php_wxDataViewRenderer_entry);
            wxDataViewRenderer* return_native_object = wxDynamicCast(
                native_object, wxDataViewRenderer_php
            );

            Z_wxDataViewRenderer_P(return_value)->native_object
                = (wxDataViewRenderer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewListCtrl"))
        {
            object_init_ex(return_value, php_wxDataViewListCtrl_entry);
            wxDataViewListCtrl* return_native_object = wxDynamicCast(
                native_object, wxDataViewListCtrl_php
            );

            Z_wxDataViewListCtrl_P(return_value)->native_object
                = (wxDataViewListCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewEvent"))
        {
            object_init_ex(return_value, php_wxDataViewEvent_entry);
            wxDataViewEvent* return_native_object = wxDynamicCast(
                native_object, wxDataViewEvent_php
            );

            Z_wxDataViewEvent_P(return_value)->native_object
                = (wxDataViewEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewBitmapRenderer"))
        {
            object_init_ex(return_value, php_wxDataViewBitmapRenderer_entry);
            wxDataViewBitmapRenderer* return_native_object = wxDynamicCast(
                native_object, wxDataViewBitmapRenderer_php
            );

            Z_wxDataViewBitmapRenderer_P(return_value)->native_object
                = (wxDataViewBitmapRenderer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewChoiceRenderer"))
        {
            object_init_ex(return_value, php_wxDataViewChoiceRenderer_entry);
            wxDataViewChoiceRenderer* return_native_object = wxDynamicCast(
                native_object, wxDataViewChoiceRenderer_php
            );

            Z_wxDataViewChoiceRenderer_P(return_value)->native_object
                = (wxDataViewChoiceRenderer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewCustomRenderer"))
        {
            object_init_ex(return_value, php_wxDataViewCustomRenderer_entry);
            wxDataViewCustomRenderer* return_native_object = wxDynamicCast(
                native_object, wxDataViewCustomRenderer_php
            );

            Z_wxDataViewCustomRenderer_P(return_value)->native_object
                = (wxDataViewCustomRenderer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewDateRenderer"))
        {
            object_init_ex(return_value, php_wxDataViewDateRenderer_entry);
            wxDataViewDateRenderer* return_native_object = wxDynamicCast(
                native_object, wxDataViewDateRenderer_php
            );

            Z_wxDataViewDateRenderer_P(return_value)->native_object
                = (wxDataViewDateRenderer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewIconText"))
        {
            object_init_ex(return_value, php_wxDataViewIconText_entry);
            wxDataViewIconText* return_native_object = wxDynamicCast(
                native_object, wxDataViewIconText_php
            );

            Z_wxDataViewIconText_P(return_value)->native_object
                = (wxDataViewIconText_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewIconTextRenderer"))
        {
            object_init_ex(return_value, php_wxDataViewIconTextRenderer_entry);
            wxDataViewIconTextRenderer* return_native_object = wxDynamicCast(
                native_object, wxDataViewIconTextRenderer_php
            );

            Z_wxDataViewIconTextRenderer_P(return_value)->native_object
                = (wxDataViewIconTextRenderer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewProgressRenderer"))
        {
            object_init_ex(return_value, php_wxDataViewProgressRenderer_entry);
            wxDataViewProgressRenderer* return_native_object = wxDynamicCast(
                native_object, wxDataViewProgressRenderer_php
            );

            Z_wxDataViewProgressRenderer_P(return_value)->native_object
                = (wxDataViewProgressRenderer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewSpinRenderer"))
        {
            object_init_ex(return_value, php_wxDataViewSpinRenderer_entry);
            wxDataViewSpinRenderer* return_native_object = wxDynamicCast(
                native_object, wxDataViewSpinRenderer_php
            );

            Z_wxDataViewSpinRenderer_P(return_value)->native_object
                = (wxDataViewSpinRenderer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewTextRenderer"))
        {
            object_init_ex(return_value, php_wxDataViewTextRenderer_entry);
            wxDataViewTextRenderer* return_native_object = wxDynamicCast(
                native_object, wxDataViewTextRenderer_php
            );

            Z_wxDataViewTextRenderer_P(return_value)->native_object
                = (wxDataViewTextRenderer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewToggleRenderer"))
        {
            object_init_ex(return_value, php_wxDataViewToggleRenderer_entry);
            wxDataViewToggleRenderer* return_native_object = wxDynamicCast(
                native_object, wxDataViewToggleRenderer_php
            );

            Z_wxDataViewToggleRenderer_P(return_value)->native_object
                = (wxDataViewToggleRenderer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDataViewTreeCtrl"))
        {
            object_init_ex(return_value, php_wxDataViewTreeCtrl_entry);
            wxDataViewTreeCtrl* return_native_object = wxDynamicCast(
                native_object, wxDataViewTreeCtrl_php
            );

            Z_wxDataViewTreeCtrl_P(return_value)->native_object
                = (wxDataViewTreeCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxVariant"))
        {
            object_init_ex(return_value, php_wxVariant_entry);
            wxVariant* return_native_object = wxDynamicCast(
                native_object, wxVariant_php
            );

            Z_wxVariant_P(return_value)->native_object
                = (wxVariant_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxClipboard"))
        {
            object_init_ex(return_value, php_wxClipboard_entry);
            wxClipboard* return_native_object = wxDynamicCast(
                native_object, wxClipboard_php
            );

            Z_wxClipboard_P(return_value)->native_object
                = (wxClipboard_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxClipboardTextEvent"))
        {
            object_init_ex(return_value, php_wxClipboardTextEvent_entry);
            wxClipboardTextEvent* return_native_object = wxDynamicCast(
                native_object, wxClipboardTextEvent_php
            );

            Z_wxClipboardTextEvent_P(return_value)->native_object
                = (wxClipboardTextEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxListView"))
        {
            object_init_ex(return_value, php_wxListView_entry);
            wxListView* return_native_object = wxDynamicCast(
                native_object, wxListView_php
            );

            Z_wxListView_P(return_value)->native_object
                = (wxListView_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxConfigBase"))
        {
            object_init_ex(return_value, php_wxConfigBase_entry);
            wxConfigBase* return_native_object = wxDynamicCast(
                native_object, wxConfigBase_php
            );

            Z_wxConfigBase_P(return_value)->native_object
                = (wxConfigBase_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHeaderCtrlEvent"))
        {
            object_init_ex(return_value, php_wxHeaderCtrlEvent_entry);
            wxHeaderCtrlEvent* return_native_object = wxDynamicCast(
                native_object, wxHeaderCtrlEvent_php
            );

            Z_wxHeaderCtrlEvent_P(return_value)->native_object
                = (wxHeaderCtrlEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHeaderCtrl"))
        {
            object_init_ex(return_value, php_wxHeaderCtrl_entry);
            wxHeaderCtrl* return_native_object = wxDynamicCast(
                native_object, wxHeaderCtrl_php
            );

            Z_wxHeaderCtrl_P(return_value)->native_object
                = (wxHeaderCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHeaderCtrlSimple"))
        {
            object_init_ex(return_value, php_wxHeaderCtrlSimple_entry);
            wxHeaderCtrlSimple* return_native_object = wxDynamicCast(
                native_object, wxHeaderCtrlSimple_php
            );

            Z_wxHeaderCtrlSimple_P(return_value)->native_object
                = (wxHeaderCtrlSimple_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSetCursorEvent"))
        {
            object_init_ex(return_value, php_wxSetCursorEvent_entry);
            wxSetCursorEvent* return_native_object = wxDynamicCast(
                native_object, wxSetCursorEvent_php
            );

            Z_wxSetCursorEvent_P(return_value)->native_object
                = (wxSetCursorEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxIdleEvent"))
        {
            object_init_ex(return_value, php_wxIdleEvent_entry);
            wxIdleEvent* return_native_object = wxDynamicCast(
                native_object, wxIdleEvent_php
            );

            Z_wxIdleEvent_P(return_value)->native_object
                = (wxIdleEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPen"))
        {
            object_init_ex(return_value, php_wxPen_entry);
            wxPen* return_native_object = wxDynamicCast(
                native_object, wxPen_php
            );

            Z_wxPen_P(return_value)->native_object
                = (wxPen_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxEditableListBox"))
        {
            object_init_ex(return_value, php_wxEditableListBox_entry);
            wxEditableListBox* return_native_object = wxDynamicCast(
                native_object, wxEditableListBox_php
            );

            Z_wxEditableListBox_P(return_value)->native_object
                = (wxEditableListBox_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFileCtrlEvent"))
        {
            object_init_ex(return_value, php_wxFileCtrlEvent_entry);
            wxFileCtrlEvent* return_native_object = wxDynamicCast(
                native_object, wxFileCtrlEvent_php
            );

            Z_wxFileCtrlEvent_P(return_value)->native_object
                = (wxFileCtrlEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFileCtrl"))
        {
            object_init_ex(return_value, php_wxFileCtrl_entry);
            wxFileCtrl* return_native_object = wxDynamicCast(
                native_object, wxFileCtrl_php
            );

            Z_wxFileCtrl_P(return_value)->native_object
                = (wxFileCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxProcess"))
        {
            object_init_ex(return_value, php_wxProcess_entry);
            wxProcess* return_native_object = wxDynamicCast(
                native_object, wxProcess_php
            );

            Z_wxProcess_P(return_value)->native_object
                = (wxProcess_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTextValidator"))
        {
            object_init_ex(return_value, php_wxTextValidator_entry);
            wxTextValidator* return_native_object = wxDynamicCast(
                native_object, wxTextValidator_php
            );

            Z_wxTextValidator_P(return_value)->native_object
                = (wxTextValidator_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHScrolledWindow"))
        {
            object_init_ex(return_value, php_wxHScrolledWindow_entry);
            wxHScrolledWindow* return_native_object = wxDynamicCast(
                native_object, wxHScrolledWindow_php
            );

            Z_wxHScrolledWindow_P(return_value)->native_object
                = (wxHScrolledWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxInfoBar"))
        {
            object_init_ex(return_value, php_wxInfoBar_entry);
            wxInfoBar* return_native_object = wxDynamicCast(
                native_object, wxInfoBar_php
            );

            Z_wxInfoBar_P(return_value)->native_object
                = (wxInfoBar_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxXmlResource"))
        {
            object_init_ex(return_value, php_wxXmlResource_entry);
            wxXmlResource* return_native_object = wxDynamicCast(
                native_object, wxXmlResource_php
            );

            Z_wxXmlResource_P(return_value)->native_object
                = (wxXmlResource_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGenericValidator"))
        {
            object_init_ex(return_value, php_wxGenericValidator_entry);
            wxGenericValidator* return_native_object = wxDynamicCast(
                native_object, wxGenericValidator_php
            );

            Z_wxGenericValidator_P(return_value)->native_object
                = (wxGenericValidator_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSashWindow"))
        {
            object_init_ex(return_value, php_wxSashWindow_entry);
            wxSashWindow* return_native_object = wxDynamicCast(
                native_object, wxSashWindow_php
            );

            Z_wxSashWindow_P(return_value)->native_object
                = (wxSashWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSashEvent"))
        {
            object_init_ex(return_value, php_wxSashEvent_entry);
            wxSashEvent* return_native_object = wxDynamicCast(
                native_object, wxSashEvent_php
            );

            Z_wxSashEvent_P(return_value)->native_object
                = (wxSashEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSashLayoutWindow"))
        {
            object_init_ex(return_value, php_wxSashLayoutWindow_entry);
            wxSashLayoutWindow* return_native_object = wxDynamicCast(
                native_object, wxSashLayoutWindow_php
            );

            Z_wxSashLayoutWindow_P(return_value)->native_object
                = (wxSashLayoutWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxBrush"))
        {
            object_init_ex(return_value, php_wxBrush_entry);
            wxBrush* return_native_object = wxDynamicCast(
                native_object, wxBrush_php
            );

            Z_wxBrush_P(return_value)->native_object
                = (wxBrush_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPageSetupDialog"))
        {
            object_init_ex(return_value, php_wxPageSetupDialog_entry);
            wxPageSetupDialog* return_native_object = wxDynamicCast(
                native_object, wxPageSetupDialog_php
            );

            Z_wxPageSetupDialog_P(return_value)->native_object
                = (wxPageSetupDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPageSetupDialogData"))
        {
            object_init_ex(return_value, php_wxPageSetupDialogData_entry);
            wxPageSetupDialogData* return_native_object = wxDynamicCast(
                native_object, wxPageSetupDialogData_php
            );

            Z_wxPageSetupDialogData_P(return_value)->native_object
                = (wxPageSetupDialogData_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPrintDialog"))
        {
            object_init_ex(return_value, php_wxPrintDialog_entry);
            wxPrintDialog* return_native_object = wxDynamicCast(
                native_object, wxPrintDialog_php
            );

            Z_wxPrintDialog_P(return_value)->native_object
                = (wxPrintDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPrintDialogData"))
        {
            object_init_ex(return_value, php_wxPrintDialogData_entry);
            wxPrintDialogData* return_native_object = wxDynamicCast(
                native_object, wxPrintDialogData_php
            );

            Z_wxPrintDialogData_P(return_value)->native_object
                = (wxPrintDialogData_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPrintData"))
        {
            object_init_ex(return_value, php_wxPrintData_entry);
            wxPrintData* return_native_object = wxDynamicCast(
                native_object, wxPrintData_php
            );

            Z_wxPrintData_P(return_value)->native_object
                = (wxPrintData_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPostScriptDC"))
        {
            object_init_ex(return_value, php_wxPostScriptDC_entry);
            wxPostScriptDC* return_native_object = wxDynamicCast(
                native_object, wxPostScriptDC_php
            );

            Z_wxPostScriptDC_P(return_value)->native_object
                = (wxPostScriptDC_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPrintPreview"))
        {
            object_init_ex(return_value, php_wxPrintPreview_entry);
            wxPrintPreview* return_native_object = wxDynamicCast(
                native_object, wxPrintPreview_php
            );

            Z_wxPrintPreview_P(return_value)->native_object
                = (wxPrintPreview_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPrinter"))
        {
            object_init_ex(return_value, php_wxPrinter_entry);
            wxPrinter* return_native_object = wxDynamicCast(
                native_object, wxPrinter_php
            );

            Z_wxPrinter_P(return_value)->native_object
                = (wxPrinter_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPrinterDC"))
        {
            object_init_ex(return_value, php_wxPrinterDC_entry);
            wxPrinterDC* return_native_object = wxDynamicCast(
                native_object, wxPrinterDC_php
            );

            Z_wxPrinterDC_P(return_value)->native_object
                = (wxPrinterDC_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPrintout"))
        {
            object_init_ex(return_value, php_wxPrintout_entry);
            wxPrintout* return_native_object = wxDynamicCast(
                native_object, wxPrintout_php
            );

            Z_wxPrintout_P(return_value)->native_object
                = (wxPrintout_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPreviewFrame"))
        {
            object_init_ex(return_value, php_wxPreviewFrame_entry);
            wxPreviewFrame* return_native_object = wxDynamicCast(
                native_object, wxPreviewFrame_php
            );

            Z_wxPreviewFrame_P(return_value)->native_object
                = (wxPreviewFrame_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPreviewControlBar"))
        {
            object_init_ex(return_value, php_wxPreviewControlBar_entry);
            wxPreviewControlBar* return_native_object = wxDynamicCast(
                native_object, wxPreviewControlBar_php
            );

            Z_wxPreviewControlBar_P(return_value)->native_object
                = (wxPreviewControlBar_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPreviewCanvas"))
        {
            object_init_ex(return_value, php_wxPreviewCanvas_entry);
            wxPreviewCanvas* return_native_object = wxDynamicCast(
                native_object, wxPreviewCanvas_php
            );

            Z_wxPreviewCanvas_P(return_value)->native_object
                = (wxPreviewCanvas_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxSingleChoiceDialog"))
        {
            object_init_ex(return_value, php_wxSingleChoiceDialog_entry);
            wxSingleChoiceDialog* return_native_object = wxDynamicCast(
                native_object, wxSingleChoiceDialog_php
            );

            Z_wxSingleChoiceDialog_P(return_value)->native_object
                = (wxSingleChoiceDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlDCRenderer"))
        {
            object_init_ex(return_value, php_wxHtmlDCRenderer_entry);
            wxHtmlDCRenderer* return_native_object = wxDynamicCast(
                native_object, wxHtmlDCRenderer_php
            );

            Z_wxHtmlDCRenderer_P(return_value)->native_object
                = (wxHtmlDCRenderer_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlFilter"))
        {
            object_init_ex(return_value, php_wxHtmlFilter_entry);
            wxHtmlFilter* return_native_object = wxDynamicCast(
                native_object, wxHtmlFilter_php
            );

            Z_wxHtmlFilter_P(return_value)->native_object
                = (wxHtmlFilter_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlHelpData"))
        {
            object_init_ex(return_value, php_wxHtmlHelpData_entry);
            wxHtmlHelpData* return_native_object = wxDynamicCast(
                native_object, wxHtmlHelpData_php
            );

            Z_wxHtmlHelpData_P(return_value)->native_object
                = (wxHtmlHelpData_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlHelpDialog"))
        {
            object_init_ex(return_value, php_wxHtmlHelpDialog_entry);
            wxHtmlHelpDialog* return_native_object = wxDynamicCast(
                native_object, wxHtmlHelpDialog_php
            );

            Z_wxHtmlHelpDialog_P(return_value)->native_object
                = (wxHtmlHelpDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlHelpFrame"))
        {
            object_init_ex(return_value, php_wxHtmlHelpFrame_entry);
            wxHtmlHelpFrame* return_native_object = wxDynamicCast(
                native_object, wxHtmlHelpFrame_php
            );

            Z_wxHtmlHelpFrame_P(return_value)->native_object
                = (wxHtmlHelpFrame_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlHelpWindow"))
        {
            object_init_ex(return_value, php_wxHtmlHelpWindow_entry);
            wxHtmlHelpWindow* return_native_object = wxDynamicCast(
                native_object, wxHtmlHelpWindow_php
            );

            Z_wxHtmlHelpWindow_P(return_value)->native_object
                = (wxHtmlHelpWindow_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlPrintout"))
        {
            object_init_ex(return_value, php_wxHtmlPrintout_entry);
            wxHtmlPrintout* return_native_object = wxDynamicCast(
                native_object, wxHtmlPrintout_php
            );

            Z_wxHtmlPrintout_P(return_value)->native_object
                = (wxHtmlPrintout_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlTagHandler"))
        {
            object_init_ex(return_value, php_wxHtmlTagHandler_entry);
            wxHtmlTagHandler* return_native_object = wxDynamicCast(
                native_object, wxHtmlTagHandler_php
            );

            Z_wxHtmlTagHandler_P(return_value)->native_object
                = (wxHtmlTagHandler_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlTagsModule"))
        {
            object_init_ex(return_value, php_wxHtmlTagsModule_entry);
            wxHtmlTagsModule* return_native_object = wxDynamicCast(
                native_object, wxHtmlTagsModule_php
            );

            Z_wxHtmlTagsModule_P(return_value)->native_object
                = (wxHtmlTagsModule_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxModule"))
        {
            object_init_ex(return_value, php_wxModule_entry);
            wxModule* return_native_object = wxDynamicCast(
                native_object, wxModule_php
            );

            Z_wxModule_P(return_value)->native_object
                = (wxModule_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlWidgetCell"))
        {
            object_init_ex(return_value, php_wxHtmlWidgetCell_entry);
            wxHtmlWidgetCell* return_native_object = wxDynamicCast(
                native_object, wxHtmlWidgetCell_php
            );

            Z_wxHtmlWidgetCell_P(return_value)->native_object
                = (wxHtmlWidgetCell_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxHtmlWinTagHandler"))
        {
            object_init_ex(return_value, php_wxHtmlWinTagHandler_entry);
            wxHtmlWinTagHandler* return_native_object = wxDynamicCast(
                native_object, wxHtmlWinTagHandler_php
            );

            Z_wxHtmlWinTagHandler_P(return_value)->native_object
                = (wxHtmlWinTagHandler_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxAutoBufferedPaintDC"))
        {
            object_init_ex(return_value, php_wxAutoBufferedPaintDC_entry);
            wxAutoBufferedPaintDC* return_native_object = wxDynamicCast(
                native_object, wxAutoBufferedPaintDC_php
            );

            Z_wxAutoBufferedPaintDC_P(return_value)->native_object
                = (wxAutoBufferedPaintDC_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxBufferedDC"))
        {
            object_init_ex(return_value, php_wxBufferedDC_entry);
            wxBufferedDC* return_native_object = wxDynamicCast(
                native_object, wxBufferedDC_php
            );

            Z_wxBufferedDC_P(return_value)->native_object
                = (wxBufferedDC_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxBufferedPaintDC"))
        {
            object_init_ex(return_value, php_wxBufferedPaintDC_entry);
            wxBufferedPaintDC* return_native_object = wxDynamicCast(
                native_object, wxBufferedPaintDC_php
            );

            Z_wxBufferedPaintDC_P(return_value)->native_object
                = (wxBufferedPaintDC_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxClientDC"))
        {
            object_init_ex(return_value, php_wxClientDC_entry);
            wxClientDC* return_native_object = wxDynamicCast(
                native_object, wxClientDC_php
            );

            Z_wxClientDC_P(return_value)->native_object
                = (wxClientDC_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPaintEvent"))
        {
            object_init_ex(return_value, php_wxPaintEvent_entry);
            wxPaintEvent* return_native_object = wxDynamicCast(
                native_object, wxPaintEvent_php
            );

            Z_wxPaintEvent_P(return_value)->native_object
                = (wxPaintEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPaintDC"))
        {
            object_init_ex(return_value, php_wxPaintDC_entry);
            wxPaintDC* return_native_object = wxDynamicCast(
                native_object, wxPaintDC_php
            );

            Z_wxPaintDC_P(return_value)->native_object
                = (wxPaintDC_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMemoryDC"))
        {
            object_init_ex(return_value, php_wxMemoryDC_entry);
            wxMemoryDC* return_native_object = wxDynamicCast(
                native_object, wxMemoryDC_php
            );

            Z_wxMemoryDC_P(return_value)->native_object
                = (wxMemoryDC_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMirrorDC"))
        {
            object_init_ex(return_value, php_wxMirrorDC_entry);
            wxMirrorDC* return_native_object = wxDynamicCast(
                native_object, wxMirrorDC_php
            );

            Z_wxMirrorDC_P(return_value)->native_object
                = (wxMirrorDC_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxPaletteChangedEvent"))
        {
            object_init_ex(return_value, php_wxPaletteChangedEvent_entry);
            wxPaletteChangedEvent* return_native_object = wxDynamicCast(
                native_object, wxPaletteChangedEvent_php
            );

            Z_wxPaletteChangedEvent_P(return_value)->native_object
                = (wxPaletteChangedEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxImageHandler"))
        {
            object_init_ex(return_value, php_wxImageHandler_entry);
            wxImageHandler* return_native_object = wxDynamicCast(
                native_object, wxImageHandler_php
            );

            Z_wxImageHandler_P(return_value)->native_object
                = (wxImageHandler_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxInitDialogEvent"))
        {
            object_init_ex(return_value, php_wxInitDialogEvent_entry);
            wxInitDialogEvent* return_native_object = wxDynamicCast(
                native_object, wxInitDialogEvent_php
            );

            Z_wxInitDialogEvent_P(return_value)->native_object
                = (wxInitDialogEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMaximizeEvent"))
        {
            object_init_ex(return_value, php_wxMaximizeEvent_entry);
            wxMaximizeEvent* return_native_object = wxDynamicCast(
                native_object, wxMaximizeEvent_php
            );

            Z_wxMaximizeEvent_P(return_value)->native_object
                = (wxMaximizeEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxNavigationKeyEvent"))
        {
            object_init_ex(return_value, php_wxNavigationKeyEvent_entry);
            wxNavigationKeyEvent* return_native_object = wxDynamicCast(
                native_object, wxNavigationKeyEvent_php
            );

            Z_wxNavigationKeyEvent_P(return_value)->native_object
                = (wxNavigationKeyEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxXmlResourceHandler"))
        {
            object_init_ex(return_value, php_wxXmlResourceHandler_entry);
            wxXmlResourceHandler* return_native_object = wxDynamicCast(
                native_object, wxXmlResourceHandler_php
            );

            Z_wxXmlResourceHandler_P(return_value)->native_object
                = (wxXmlResourceHandler_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxXmlDocument"))
        {
            object_init_ex(return_value, php_wxXmlDocument_entry);
            wxXmlDocument* return_native_object = wxDynamicCast(
                native_object, wxXmlDocument_php
            );

            Z_wxXmlDocument_P(return_value)->native_object
                = (wxXmlDocument_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxLayoutAlgorithm"))
        {
            object_init_ex(return_value, php_wxLayoutAlgorithm_entry);
            wxLayoutAlgorithm* return_native_object = wxDynamicCast(
                native_object, wxLayoutAlgorithm_php
            );

            Z_wxLayoutAlgorithm_P(return_value)->native_object
                = (wxLayoutAlgorithm_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFocusEvent"))
        {
            object_init_ex(return_value, php_wxFocusEvent_entry);
            wxFocusEvent* return_native_object = wxDynamicCast(
                native_object, wxFocusEvent_php
            );

            Z_wxFocusEvent_P(return_value)->native_object
                = (wxFocusEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFileConfig"))
        {
            object_init_ex(return_value, php_wxFileConfig_entry);
            wxFileConfig* return_native_object = wxDynamicCast(
                native_object, wxFileConfig_php
            );

            Z_wxFileConfig_P(return_value)->native_object
                = (wxFileConfig_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFileDirPickerEvent"))
        {
            object_init_ex(return_value, php_wxFileDirPickerEvent_entry);
            wxFileDirPickerEvent* return_native_object = wxDynamicCast(
                native_object, wxFileDirPickerEvent_php
            );

            Z_wxFileDirPickerEvent_P(return_value)->native_object
                = (wxFileDirPickerEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFileHistory"))
        {
            object_init_ex(return_value, php_wxFileHistory_entry);
            wxFileHistory* return_native_object = wxDynamicCast(
                native_object, wxFileHistory_php
            );

            Z_wxFileHistory_P(return_value)->native_object
                = (wxFileHistory_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFileSystemWatcher"))
        {
            object_init_ex(return_value, php_wxFileSystemWatcher_entry);
            wxFileSystemWatcher* return_native_object = wxDynamicCast(
                native_object, wxFileSystemWatcher_php
            );

            Z_wxFileSystemWatcher_P(return_value)->native_object
                = (wxFileSystemWatcher_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxFileSystemWatcherEvent"))
        {
            object_init_ex(return_value, php_wxFileSystemWatcherEvent_entry);
            wxFileSystemWatcherEvent* return_native_object = wxDynamicCast(
                native_object, wxFileSystemWatcherEvent_php
            );

            Z_wxFileSystemWatcherEvent_P(return_value)->native_object
                = (wxFileSystemWatcherEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxDisplayChangedEvent"))
        {
            object_init_ex(return_value, php_wxDisplayChangedEvent_entry);
            wxDisplayChangedEvent* return_native_object = wxDynamicCast(
                native_object, wxDisplayChangedEvent_php
            );

            Z_wxDisplayChangedEvent_P(return_value)->native_object
                = (wxDisplayChangedEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxCalculateLayoutEvent"))
        {
            object_init_ex(return_value, php_wxCalculateLayoutEvent_entry);
            wxCalculateLayoutEvent* return_native_object = wxDynamicCast(
                native_object, wxCalculateLayoutEvent_php
            );

            Z_wxCalculateLayoutEvent_P(return_value)->native_object
                = (wxCalculateLayoutEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxContextMenuEvent"))
        {
            object_init_ex(return_value, php_wxContextMenuEvent_entry);
            wxContextMenuEvent* return_native_object = wxDynamicCast(
                native_object, wxContextMenuEvent_php
            );

            Z_wxContextMenuEvent_P(return_value)->native_object
                = (wxContextMenuEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxQueryLayoutInfoEvent"))
        {
            object_init_ex(return_value, php_wxQueryLayoutInfoEvent_entry);
            wxQueryLayoutInfoEvent* return_native_object = wxDynamicCast(
                native_object, wxQueryLayoutInfoEvent_php
            );

            Z_wxQueryLayoutInfoEvent_P(return_value)->native_object
                = (wxQueryLayoutInfoEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxToolbook"))
        {
            object_init_ex(return_value, php_wxToolbook_entry);
            wxToolbook* return_native_object = wxDynamicCast(
                native_object, wxToolbook_php
            );

            Z_wxToolbook_P(return_value)->native_object
                = (wxToolbook_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRibbonControl"))
        {
            object_init_ex(return_value, php_wxRibbonControl_entry);
            wxRibbonControl* return_native_object = wxDynamicCast(
                native_object, wxRibbonControl_php
            );

            Z_wxRibbonControl_P(return_value)->native_object
                = (wxRibbonControl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRibbonBar"))
        {
            object_init_ex(return_value, php_wxRibbonBar_entry);
            wxRibbonBar* return_native_object = wxDynamicCast(
                native_object, wxRibbonBar_php
            );

            Z_wxRibbonBar_P(return_value)->native_object
                = (wxRibbonBar_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRibbonBarEvent"))
        {
            object_init_ex(return_value, php_wxRibbonBarEvent_entry);
            wxRibbonBarEvent* return_native_object = wxDynamicCast(
                native_object, wxRibbonBarEvent_php
            );

            Z_wxRibbonBarEvent_P(return_value)->native_object
                = (wxRibbonBarEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRibbonButtonBar"))
        {
            object_init_ex(return_value, php_wxRibbonButtonBar_entry);
            wxRibbonButtonBar* return_native_object = wxDynamicCast(
                native_object, wxRibbonButtonBar_php
            );

            Z_wxRibbonButtonBar_P(return_value)->native_object
                = (wxRibbonButtonBar_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRibbonButtonBarEvent"))
        {
            object_init_ex(return_value, php_wxRibbonButtonBarEvent_entry);
            wxRibbonButtonBarEvent* return_native_object = wxDynamicCast(
                native_object, wxRibbonButtonBarEvent_php
            );

            Z_wxRibbonButtonBarEvent_P(return_value)->native_object
                = (wxRibbonButtonBarEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRibbonGallery"))
        {
            object_init_ex(return_value, php_wxRibbonGallery_entry);
            wxRibbonGallery* return_native_object = wxDynamicCast(
                native_object, wxRibbonGallery_php
            );

            Z_wxRibbonGallery_P(return_value)->native_object
                = (wxRibbonGallery_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRibbonGalleryEvent"))
        {
            object_init_ex(return_value, php_wxRibbonGalleryEvent_entry);
            wxRibbonGalleryEvent* return_native_object = wxDynamicCast(
                native_object, wxRibbonGalleryEvent_php
            );

            Z_wxRibbonGalleryEvent_P(return_value)->native_object
                = (wxRibbonGalleryEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRibbonPage"))
        {
            object_init_ex(return_value, php_wxRibbonPage_entry);
            wxRibbonPage* return_native_object = wxDynamicCast(
                native_object, wxRibbonPage_php
            );

            Z_wxRibbonPage_P(return_value)->native_object
                = (wxRibbonPage_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRibbonPanel"))
        {
            object_init_ex(return_value, php_wxRibbonPanel_entry);
            wxRibbonPanel* return_native_object = wxDynamicCast(
                native_object, wxRibbonPanel_php
            );

            Z_wxRibbonPanel_P(return_value)->native_object
                = (wxRibbonPanel_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxRibbonToolBar"))
        {
            object_init_ex(return_value, php_wxRibbonToolBar_entry);
            wxRibbonToolBar* return_native_object = wxDynamicCast(
                native_object, wxRibbonToolBar_php
            );

            Z_wxRibbonToolBar_P(return_value)->native_object
                = (wxRibbonToolBar_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTaskBarIcon"))
        {
            object_init_ex(return_value, php_wxTaskBarIcon_entry);
            wxTaskBarIcon* return_native_object = wxDynamicCast(
                native_object, wxTaskBarIcon_php
            );

            Z_wxTaskBarIcon_P(return_value)->native_object
                = (wxTaskBarIcon_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxTaskBarIconEvent"))
        {
            object_init_ex(return_value, php_wxTaskBarIconEvent_entry);
            wxTaskBarIconEvent* return_native_object = wxDynamicCast(
                native_object, wxTaskBarIconEvent_php
            );

            Z_wxTaskBarIconEvent_P(return_value)->native_object
                = (wxTaskBarIconEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxNotificationMessage"))
        {
            object_init_ex(return_value, php_wxNotificationMessage_entry);
            wxNotificationMessage* return_native_object = wxDynamicCast(
                native_object, wxNotificationMessage_php
            );

            Z_wxNotificationMessage_P(return_value)->native_object
                = (wxNotificationMessage_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxGenericProgressDialog"))
        {
            object_init_ex(return_value, php_wxGenericProgressDialog_entry);
            wxGenericProgressDialog* return_native_object = wxDynamicCast(
                native_object, wxGenericProgressDialog_php
            );

            Z_wxGenericProgressDialog_P(return_value)->native_object
                = (wxGenericProgressDialog_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxToolBarToolBase"))
        {
            object_init_ex(return_value, php_wxToolBarToolBase_entry);
            wxToolBarToolBase* return_native_object = wxDynamicCast(
                native_object, wxToolBarToolBase_php
            );

            Z_wxToolBarToolBase_P(return_value)->native_object
                = (wxToolBarToolBase_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxWebViewEvent"))
        {
            object_init_ex(return_value, php_wxWebViewEvent_entry);
            wxWebViewEvent* return_native_object = wxDynamicCast(
                native_object, wxWebViewEvent_php
            );

            Z_wxWebViewEvent_P(return_value)->native_object
                = (wxWebViewEvent_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxWebView"))
        {
            object_init_ex(return_value, php_wxWebView_entry);
            wxWebView* return_native_object = wxDynamicCast(
                native_object, wxWebView_php
            );

            Z_wxWebView_P(return_value)->native_object
                = (wxWebView_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMediaCtrl"))
        {
            object_init_ex(return_value, php_wxMediaCtrl_entry);
            wxMediaCtrl* return_native_object = wxDynamicCast(
                native_object, wxMediaCtrl_php
            );

            Z_wxMediaCtrl_P(return_value)->native_object
                = (wxMediaCtrl_php*) return_native_object
            ;
            return;
        }
        if(!strcmp(object_type, "wxMediaEvent"))
        {
            object_init_ex(return_value, php_wxMediaEvent_entry);
            wxMediaEvent* return_native_object = wxDynamicCast(
                native_object, wxMediaEvent_php
            );

            Z_wxMediaEvent_P(return_value)->native_object
                = (wxMediaEvent_php*) return_native_object
            ;
            return;
        }
        else
        {
            zend_error(
                E_ERROR,
                "Could not convert to object type %s",
                object_type
            );
        }
    }
    else
    {
        zend_error(E_ERROR, "Invalid parameters\n");
    }
}
/* }}} */


