/*
 * @author Mário Soares
 * @contributors Jefferson González
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "appmanagement.h"
#include "aui.h"
#include "bookctrl.h"
#include "cfg.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "dnd.h"
#include "docview.h"
#include "dvc.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "help.h"
#include "html.h"
#include "logging.h"
#include "managedwnd.h"
#include "media.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "net.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "webview.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "others.h"


BEGIN_EXTERN_C()
void php_wxFrame_free(void *object TSRMLS_DC) 
{
    zo_wxFrame* custom_object = (zo_wxFrame*) object;
    
	/*zend_error(E_WARNING, "Object of class wxFrame went out of scope. Remember to always call Destroy() to prevent memory leaks.");*/

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxFrame_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxFrame_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxFrame* custom_object;
    custom_object = (zo_wxFrame*) emalloc(sizeof(zo_wxFrame));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxFrame_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXFRAME_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxFrame::wxFrame()
   Default constructor. */
PHP_METHOD(php_wxFrame, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* parent1 = 0;
	wxWindow* object_pointer1_0 = 0;
	long id1;
	char* title1;
	long title_len1;
	zval* pos1 = 0;
	wxPoint* object_pointer1_3 = 0;
	zval* size1 = 0;
	wxSize* object_pointer1_4 = 0;
	long style1;
	char* name1;
	long name_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1)\n");
		#endif

		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxWindow*) argument_native_object;
					if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos1 TSRMLS_CC))->native_object;
					object_pointer1_3 = (wxPoint*) argument_native_object;
					if (!object_pointer1_3 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size1 TSRMLS_CC))->native_object;
					object_pointer1_4 = (wxSize*) argument_native_object;
					if (!object_pointer1_4 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxFrame_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8))\n");
				#endif

				native_object = new wxFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8));

				native_object->references.Initialize();
				((wxFrame_php*) native_object)->references.AddReference(parent1, "wxFrame::wxFrame at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3)\n");
				#endif

				native_object = new wxFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3);

				native_object->references.Initialize();
				((wxFrame_php*) native_object)->references.AddReference(parent1, "wxFrame::wxFrame at call with 4 argument(s)");
				((wxFrame_php*) native_object)->references.AddReference(pos1, "wxFrame::wxFrame at call with 4 argument(s)");
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4)\n");
				#endif

				native_object = new wxFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4);

				native_object->references.Initialize();
				((wxFrame_php*) native_object)->references.AddReference(parent1, "wxFrame::wxFrame at call with 5 argument(s)");
				((wxFrame_php*) native_object)->references.AddReference(pos1, "wxFrame::wxFrame at call with 5 argument(s)");
				((wxFrame_php*) native_object)->references.AddReference(size1, "wxFrame::wxFrame at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1)\n");
				#endif

				native_object = new wxFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1);

				native_object->references.Initialize();
				((wxFrame_php*) native_object)->references.AddReference(parent1, "wxFrame::wxFrame at call with 6 argument(s)");
				((wxFrame_php*) native_object)->references.AddReference(pos1, "wxFrame::wxFrame at call with 6 argument(s)");
				((wxFrame_php*) native_object)->references.AddReference(size1, "wxFrame::wxFrame at call with 6 argument(s)");
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8))\n");
				#endif

				native_object = new wxFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8));

				native_object->references.Initialize();
				((wxFrame_php*) native_object)->references.AddReference(parent1, "wxFrame::wxFrame at call with 7 argument(s)");
				((wxFrame_php*) native_object)->references.AddReference(pos1, "wxFrame::wxFrame at call with 7 argument(s)");
				((wxFrame_php*) native_object)->references.AddReference(size1, "wxFrame::wxFrame at call with 7 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxFrame::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxFrame::Centre(int direction)
   Centres the frame on the display. */
PHP_METHOD(php_wxFrame, Centre)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::Centre\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::Centre call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long direction0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&direction0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &direction0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::Centre()\n\n");
				#endif

				((wxFrame_php*)native_object)->Centre();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::Centre((int) direction0)\n\n");
				#endif

				((wxFrame_php*)native_object)->Centre((int) direction0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::Centre\n");
	}
}
/* }}} */

/* {{{ proto bool wxFrame::Create(wxWindow &parent, int id, string title, wxPoint pos, wxSize size, int style, string name)
   Used in two-step frame construction. */
PHP_METHOD(php_wxFrame, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::Create\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::Create call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	wxPoint* object_pointer0_3 = 0;
	zval* size0 = 0;
	wxSize* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif

		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxPoint*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxSize*) argument_native_object;
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)));

				references->AddReference(parent0, "wxFrame::Create at call with 3 argument(s)");

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3));

				references->AddReference(parent0, "wxFrame::Create at call with 4 argument(s)");
				references->AddReference(pos0, "wxFrame::Create at call with 4 argument(s)");

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

				references->AddReference(parent0, "wxFrame::Create at call with 5 argument(s)");
				references->AddReference(pos0, "wxFrame::Create at call with 5 argument(s)");
				references->AddReference(size0, "wxFrame::Create at call with 5 argument(s)");

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

				references->AddReference(parent0, "wxFrame::Create at call with 6 argument(s)");
				references->AddReference(pos0, "wxFrame::Create at call with 6 argument(s)");
				references->AddReference(size0, "wxFrame::Create at call with 6 argument(s)");

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)));

				references->AddReference(parent0, "wxFrame::Create at call with 7 argument(s)");
				references->AddReference(pos0, "wxFrame::Create at call with 7 argument(s)");
				references->AddReference(size0, "wxFrame::Create at call with 7 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::Create\n");
	}
}
/* }}} */

/* {{{ proto  wxFrame::SetStatusBar(wxStatusBar &statusBar)
   Associates a status bar with the frame. */
PHP_METHOD(php_wxFrame, SetStatusBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::SetStatusBar\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::SetStatusBar call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* statusBar0 = 0;
	wxStatusBar* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&statusBar0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &statusBar0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(statusBar0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxStatusBar*) zend_object_store_get_object(statusBar0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxStatusBar*) zend_object_store_get_object(statusBar0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxStatusBar*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXSTATUSBAR_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'statusBar' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(statusBar0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'statusBar' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetStatusBar((wxStatusBar*) object_pointer0_0)\n\n");
				#endif

				((wxFrame_php*)native_object)->SetStatusBar((wxStatusBar*) object_pointer0_0);

				references->AddReference(statusBar0, "wxFrame::SetStatusBar at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::SetStatusBar\n");
	}
}
/* }}} */

/* {{{ proto  wxFrame::SetStatusBarPane(int n)
   Set the status bar pane used to display menu and toolbar help. */
PHP_METHOD(php_wxFrame, SetStatusBarPane)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::SetStatusBarPane\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::SetStatusBarPane call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long n0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&n0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetStatusBarPane((int) n0)\n\n");
				#endif

				((wxFrame_php*)native_object)->SetStatusBarPane((int) n0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::SetStatusBarPane\n");
	}
}
/* }}} */

/* {{{ proto  wxFrame::SetStatusText(string text, int number)
   Sets the status bar text and redraws the status bar. */
PHP_METHOD(php_wxFrame, SetStatusText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::SetStatusText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::SetStatusText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	long number0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&text0, &text_len0, &number0)\n");
		#endif

		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0, &number0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetStatusText(wxString(text0, wxConvUTF8))\n\n");
				#endif

				((wxFrame_php*)native_object)->SetStatusText(wxString(text0, wxConvUTF8));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetStatusText(wxString(text0, wxConvUTF8), (int) number0)\n\n");
				#endif

				((wxFrame_php*)native_object)->SetStatusText(wxString(text0, wxConvUTF8), (int) number0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::SetStatusText\n");
	}
}
/* }}} */

/* {{{ proto  wxFrame::SetMenuBar(wxMenuBar &menuBar)
   Tells the frame to show the given menu bar. */
PHP_METHOD(php_wxFrame, SetMenuBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::SetMenuBar\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::SetMenuBar call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* menuBar0 = 0;
	wxMenuBar* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&menuBar0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &menuBar0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(menuBar0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxMenuBar*) zend_object_store_get_object(menuBar0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxMenuBar*) zend_object_store_get_object(menuBar0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxMenuBar*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXMENUBAR_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'menuBar' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(menuBar0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'menuBar' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetMenuBar((wxMenuBar*) object_pointer0_0)\n\n");
				#endif

				((wxFrame_php*)native_object)->SetMenuBar((wxMenuBar*) object_pointer0_0);

				references->AddReference(menuBar0, "wxFrame::SetMenuBar at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::SetMenuBar\n");
	}
}
/* }}} */

/* {{{ proto wxMenuBar wxFrame::GetMenuBar()
   Returns a pointer to the menubar currently associated with the frame (if any). */
PHP_METHOD(php_wxFrame, GetMenuBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::GetMenuBar\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::GetMenuBar call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::GetMenuBar() to return object pointer\n\n");
				#endif

				wxMenuBar_php* value_to_return0;
				value_to_return0 = (wxMenuBar_php*) ((wxFrame_php*)native_object)->GetMenuBar();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxMenuBar_entry);
					((zo_wxMenuBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMenuBar_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFrame::GetMenuBar at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::GetMenuBar\n");
	}
}
/* }}} */

/* {{{ proto wxStatusBar wxFrame::OnCreateStatusBar(int number, int style, int id, string name)
   Virtual function called when a status bar is requested by CreateStatusBar(). */
wxStatusBar* wxFrame_php::OnCreateStatusBar(int number, long style, wxWindowID id, const wxString& name)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxFrame::OnCreateStatusBar\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[4];
	zval *arguments[4];
	
	//Initilize arguments array
	for(int i=0; i<4; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "OnCreateStatusBar", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], number);
	ZVAL_LONG(arguments[1], style);
	ZVAL_LONG(arguments[2], id);
	temp_string = (char*)malloc(sizeof(wxChar)*(name.size()+1));
	strcpy(temp_string, (const char *) name.char_str());
	ZVAL_STRING(arguments[3], temp_string, 1);
	free(temp_string);
		
	for(int i=0; i<4; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "OnCreateStatusBar", 17, &return_value, 4, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<4; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		if(Z_TYPE_P(return_value) == IS_OBJECT)
	{
		return_object = (void*) ((zo_wxStatusBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object;
	}

	//Threat it as a normal object on the calling function and not a php user space intiialized one
	((zo_wxStatusBar*) zend_object_store_get_object(return_value TSRMLS_CC))->is_user_initialized = 0;
	wxStatusBar_php* var = (wxStatusBar_php*) return_object;
	var->references.UnInitialize();

	return (wxStatusBar*) return_object;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	return wxFrame::OnCreateStatusBar(number, style, id, name);
}
/* }}} */

/* {{{ proto wxStatusBar wxFrame::GetStatusBar()
   Returns a pointer to the status bar currently associated with the frame (if any). */
PHP_METHOD(php_wxFrame, GetStatusBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::GetStatusBar\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::GetStatusBar call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::GetStatusBar() to return object pointer\n\n");
				#endif

				wxStatusBar_php* value_to_return0;
				value_to_return0 = (wxStatusBar_php*) ((wxFrame_php*)native_object)->GetStatusBar();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxStatusBar_entry);
					((zo_wxStatusBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStatusBar_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFrame::GetStatusBar at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::GetStatusBar\n");
	}
}
/* }}} */

/* {{{ proto int wxFrame::GetStatusBarPane()
   Returns the status bar pane used to display menu and toolbar help. */
PHP_METHOD(php_wxFrame, GetStatusBarPane)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::GetStatusBarPane\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::GetStatusBarPane call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxFrame::GetStatusBarPane())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxFrame_php*)native_object)->GetStatusBarPane());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::GetStatusBarPane\n");
	}
}
/* }}} */

/* {{{ proto wxPoint wxFrame::GetClientAreaOrigin()
   Returns the origin of the frame client area (in client coordinates). */
PHP_METHOD(php_wxFrame, GetClientAreaOrigin)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::GetClientAreaOrigin\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::GetClientAreaOrigin call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::GetClientAreaOrigin() to return new object\n\n");
				#endif

				wxPoint value_to_return0;
				value_to_return0 = ((wxFrame_php*)native_object)->GetClientAreaOrigin();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				((wxPoint_php*)ptr)->phpObj = return_value;
				((wxPoint_php*)ptr)->InitProperties();
				zo_wxPoint* zo0 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxPoint_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::GetClientAreaOrigin\n");
	}
}
/* }}} */

/* {{{ proto  wxFrame::PopStatusText(int number) */
PHP_METHOD(php_wxFrame, PopStatusText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::PopStatusText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::PopStatusText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long number0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&number0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &number0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::PopStatusText()\n\n");
				#endif

				((wxFrame_php*)native_object)->PopStatusText();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::PopStatusText((int) number0)\n\n");
				#endif

				((wxFrame_php*)native_object)->PopStatusText((int) number0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::PopStatusText\n");
	}
}
/* }}} */

/* {{{ proto bool wxFrame::ProcessCommand(int id)
   Simulate a menu command. */
PHP_METHOD(php_wxFrame, ProcessCommand)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::ProcessCommand\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::ProcessCommand call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&id0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxFrame::ProcessCommand((int) id0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxFrame_php*)native_object)->ProcessCommand((int) id0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::ProcessCommand\n");
	}
}
/* }}} */

/* {{{ proto  wxFrame::PushStatusText(string text, int number) */
PHP_METHOD(php_wxFrame, PushStatusText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::PushStatusText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::PushStatusText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* text0;
	long text_len0;
	long number0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&text0, &text_len0, &number0)\n");
		#endif

		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &text0, &text_len0, &number0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::PushStatusText(wxString(text0, wxConvUTF8))\n\n");
				#endif

				((wxFrame_php*)native_object)->PushStatusText(wxString(text0, wxConvUTF8));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::PushStatusText(wxString(text0, wxConvUTF8), (int) number0)\n\n");
				#endif

				((wxFrame_php*)native_object)->PushStatusText(wxString(text0, wxConvUTF8), (int) number0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::PushStatusText\n");
	}
}
/* }}} */

/* {{{ proto  wxFrame::SetStatusWidths(int n, array widths_field)
   Sets the widths of the fields in the status bar. */
PHP_METHOD(php_wxFrame, SetStatusWidths)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::SetStatusWidths\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::SetStatusWidths call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long n0;
	zval* widths_field0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'la' (&n0, &widths_field0)\n");
		#endif

		char parse_parameters_string[] = "la";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &n0, &widths_field0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		int array_count0_1 = 1;
		HashTable* arr_hash0_1;
		if(arguments_received > 1)
		{
			arr_hash0_1 = Z_ARRVAL_P(widths_field0);
			array_count0_1 = zend_hash_num_elements(arr_hash0_1);
		}
		int* integers_array0_1 = new int[array_count0_1];
		bool integers_continue0_1 = true;

		switch(arguments_received)
		{
			case 2:
			{
				int array_index0_1 = 0;
				zval** temp_array_value0_1 = 0;
				while(integers_continue0_1)
				{
					if(zend_hash_index_find(HASH_OF(widths_field0), array_index0_1, (void**)&temp_array_value0_1) == SUCCESS)
					{
						convert_to_long_ex(temp_array_value0_1);
						integers_array0_1[array_index0_1] = (int) Z_LVAL_PP(temp_array_value0_1);
						array_index0_1++;
					}
					else
					{
						integers_continue0_1 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetStatusWidths((int) n0, (const int*) integers_array0_1)\n\n");
				#endif

				((wxFrame_php*)native_object)->SetStatusWidths((int) n0, (const int*) integers_array0_1);

				delete[] integers_array0_1;

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::SetStatusWidths\n");
	}
}
/* }}} */

/* {{{ proto wxToolBar wxFrame::GetToolBar()
   Returns a pointer to the toolbar currently associated with the frame (if any). */
PHP_METHOD(php_wxFrame, GetToolBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::GetToolBar\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::GetToolBar call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::GetToolBar() to return object pointer\n\n");
				#endif

				wxToolBar_php* value_to_return0;
				value_to_return0 = (wxToolBar_php*) ((wxFrame_php*)native_object)->GetToolBar();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxToolBar_entry);
					((zo_wxToolBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxToolBar_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFrame::GetToolBar at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::GetToolBar\n");
	}
}
/* }}} */

/* {{{ proto wxToolBar wxFrame::OnCreateToolBar(int style, int id, string name)
   Virtual function called when a toolbar is requested by CreateToolBar(). */
wxToolBar* wxFrame_php::OnCreateToolBar(long style, wxWindowID id, const wxString& name)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxFrame::OnCreateToolBar\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[3];
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "OnCreateToolBar", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], style);
	ZVAL_LONG(arguments[1], id);
	temp_string = (char*)malloc(sizeof(wxChar)*(name.size()+1));
	strcpy(temp_string, (const char *) name.char_str());
	ZVAL_STRING(arguments[2], temp_string, 1);
	free(temp_string);
		
	for(int i=0; i<3; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "OnCreateToolBar", 15, &return_value, 3, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<3; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		if(Z_TYPE_P(return_value) == IS_OBJECT)
	{
		return_object = (void*) ((zo_wxToolBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object;
	}

	//Threat it as a normal object on the calling function and not a php user space intiialized one
	((zo_wxToolBar*) zend_object_store_get_object(return_value TSRMLS_CC))->is_user_initialized = 0;
	wxToolBar_php* var = (wxToolBar_php*) return_object;
	var->references.UnInitialize();

	return (wxToolBar*) return_object;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	return wxFrame::OnCreateToolBar(style, id, name);
}
/* }}} */

/* {{{ proto  wxFrame::SetToolBar(wxToolBar &toolBar)
   Associates a toolbar with the frame. */
PHP_METHOD(php_wxFrame, SetToolBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::SetToolBar\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::SetToolBar call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* toolBar0 = 0;
	wxToolBar* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&toolBar0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &toolBar0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(toolBar0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxToolBar*) zend_object_store_get_object(toolBar0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxToolBar*) zend_object_store_get_object(toolBar0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxToolBar*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXTOOLBAR_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'toolBar' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(toolBar0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'toolBar' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::SetToolBar((wxToolBar*) object_pointer0_0)\n\n");
				#endif

				((wxFrame_php*)native_object)->SetToolBar((wxToolBar*) object_pointer0_0);

				references->AddReference(toolBar0, "wxFrame::SetToolBar at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::SetToolBar\n");
	}
}
/* }}} */

/* {{{ proto wxStatusBar wxFrame::CreateStatusBar(int number, int style, int id, string name)
   Creates a status bar at the bottom of the frame. */
PHP_METHOD(php_wxFrame, CreateStatusBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::CreateStatusBar\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::CreateStatusBar call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long number0;
	long style0;
	long id0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|llls' (&number0, &style0, &id0, &name0, &name_len0)\n");
		#endif

		char parse_parameters_string[] = "|llls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &number0, &style0, &id0, &name0, &name_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateStatusBar() to return object pointer\n\n");
				#endif

				wxStatusBar_php* value_to_return0;
				value_to_return0 = (wxStatusBar_php*) ((wxFrame_php*)native_object)->CreateStatusBar();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxStatusBar_entry);
					((zo_wxStatusBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStatusBar_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFrame::CreateStatusBar at call with 0 argument(s)");
				}


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateStatusBar((int) number0) to return object pointer\n\n");
				#endif

				wxStatusBar_php* value_to_return1;
				value_to_return1 = (wxStatusBar_php*) ((wxFrame_php*)native_object)->CreateStatusBar((int) number0);

				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxStatusBar_entry);
					((zo_wxStatusBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStatusBar_php*) value_to_return1;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return1 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFrame::CreateStatusBar at call with 1 argument(s)");
				}


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateStatusBar((int) number0, (long) style0) to return object pointer\n\n");
				#endif

				wxStatusBar_php* value_to_return2;
				value_to_return2 = (wxStatusBar_php*) ((wxFrame_php*)native_object)->CreateStatusBar((int) number0, (long) style0);

				if(value_to_return2 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return2->references.IsUserInitialized()){
					if(value_to_return2->phpObj != NULL){
						*return_value = *value_to_return2->phpObj;
						zval_add_ref(&value_to_return2->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxStatusBar_entry);
					((zo_wxStatusBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStatusBar_php*) value_to_return2;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return2 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFrame::CreateStatusBar at call with 2 argument(s)");
				}


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateStatusBar((int) number0, (long) style0, (wxWindowID) id0) to return object pointer\n\n");
				#endif

				wxStatusBar_php* value_to_return3;
				value_to_return3 = (wxStatusBar_php*) ((wxFrame_php*)native_object)->CreateStatusBar((int) number0, (long) style0, (wxWindowID) id0);

				if(value_to_return3 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return3->references.IsUserInitialized()){
					if(value_to_return3->phpObj != NULL){
						*return_value = *value_to_return3->phpObj;
						zval_add_ref(&value_to_return3->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxStatusBar_entry);
					((zo_wxStatusBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStatusBar_php*) value_to_return3;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFrame::CreateStatusBar at call with 3 argument(s)");
				}


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateStatusBar((int) number0, (long) style0, (wxWindowID) id0, wxString(name0, wxConvUTF8)) to return object pointer\n\n");
				#endif

				wxStatusBar_php* value_to_return4;
				value_to_return4 = (wxStatusBar_php*) ((wxFrame_php*)native_object)->CreateStatusBar((int) number0, (long) style0, (wxWindowID) id0, wxString(name0, wxConvUTF8));

				if(value_to_return4 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return4->references.IsUserInitialized()){
					if(value_to_return4->phpObj != NULL){
						*return_value = *value_to_return4->phpObj;
						zval_add_ref(&value_to_return4->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxStatusBar_entry);
					((zo_wxStatusBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxStatusBar_php*) value_to_return4;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return4 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFrame::CreateStatusBar at call with 4 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::CreateStatusBar\n");
	}
}
/* }}} */

/* {{{ proto wxToolBar wxFrame::CreateToolBar(int style, int id, string name)
   Creates a toolbar at the top or left of the frame. */
PHP_METHOD(php_wxFrame, CreateToolBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxFrame::CreateToolBar\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxFrame* current_object;
	wxphp_object_type current_object_type;
	wxFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxFrame::CreateToolBar call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXFRAME_TYPE){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long style0;
	long id0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lls' (&style0, &id0, &name0, &name_len0)\n");
		#endif

		char parse_parameters_string[] = "|lls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &style0, &id0, &name0, &name_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateToolBar() to return object pointer\n\n");
				#endif

				wxToolBar_php* value_to_return0;
				value_to_return0 = (wxToolBar_php*) ((wxFrame_php*)native_object)->CreateToolBar();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxToolBar_entry);
					((zo_wxToolBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxToolBar_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFrame::CreateToolBar at call with 0 argument(s)");
				}


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateToolBar((long) style0) to return object pointer\n\n");
				#endif

				wxToolBar_php* value_to_return1;
				value_to_return1 = (wxToolBar_php*) ((wxFrame_php*)native_object)->CreateToolBar((long) style0);

				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxToolBar_entry);
					((zo_wxToolBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxToolBar_php*) value_to_return1;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return1 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFrame::CreateToolBar at call with 1 argument(s)");
				}


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateToolBar((long) style0, (wxWindowID) id0) to return object pointer\n\n");
				#endif

				wxToolBar_php* value_to_return2;
				value_to_return2 = (wxToolBar_php*) ((wxFrame_php*)native_object)->CreateToolBar((long) style0, (wxWindowID) id0);

				if(value_to_return2 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return2->references.IsUserInitialized()){
					if(value_to_return2->phpObj != NULL){
						*return_value = *value_to_return2->phpObj;
						zval_add_ref(&value_to_return2->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxToolBar_entry);
					((zo_wxToolBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxToolBar_php*) value_to_return2;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return2 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFrame::CreateToolBar at call with 2 argument(s)");
				}


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxFrame::CreateToolBar((long) style0, (wxWindowID) id0, wxString(name0, wxConvUTF8)) to return object pointer\n\n");
				#endif

				wxToolBar_php* value_to_return3;
				value_to_return3 = (wxToolBar_php*) ((wxFrame_php*)native_object)->CreateToolBar((long) style0, (wxWindowID) id0, wxString(name0, wxConvUTF8));

				if(value_to_return3 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return3->references.IsUserInitialized()){
					if(value_to_return3->phpObj != NULL){
						*return_value = *value_to_return3->phpObj;
						zval_add_ref(&value_to_return3->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxToolBar_entry);
					((zo_wxToolBar*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxToolBar_php*) value_to_return3;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return3 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxFrame::CreateToolBar at call with 3 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxFrame::CreateToolBar\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMDIClientWindow_free(void *object TSRMLS_DC) 
{
    zo_wxMDIClientWindow* custom_object = (zo_wxMDIClientWindow*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMDIClientWindow_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting object by calling destroy and delete\n");
			#endif
			
			custom_object->native_object->Destroy();
			delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxMDIClientWindow done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxMDIClientWindow_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMDIClientWindow_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxMDIClientWindow* custom_object;
    custom_object = (zo_wxMDIClientWindow*) emalloc(sizeof(zo_wxMDIClientWindow));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxMDIClientWindow_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXMDICLIENTWINDOW_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxMDIClientWindow::wxMDIClientWindow()
   Default constructor. */
PHP_METHOD(php_wxMDIClientWindow, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIClientWindow::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIClientWindow* current_object;
	wxMDIClientWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxMDIClientWindow_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxMDIClientWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxMDIClientWindow::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto bool wxMDIClientWindow::CreateClient(wxMDIParentFrame &parent, int style)
   Called by wxMDIParentFrame immediately after creating the client window. */
PHP_METHOD(php_wxMDIClientWindow, CreateClient)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIClientWindow::CreateClient\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIClientWindow* current_object;
	wxphp_object_type current_object_type;
	wxMDIClientWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIClientWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIClientWindow::CreateClient call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDICLIENTWINDOW_TYPE){
				references = &((wxMDIClientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxMDIParentFrame* object_pointer0_0 = 0;
	long style0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&parent0, &style0)\n");
		#endif

		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &style0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxMDIParentFrame*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxMDIParentFrame*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxMDIParentFrame*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXMDIPARENTFRAME_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIClientWindow::CreateClient((wxMDIParentFrame*) object_pointer0_0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIClientWindow_php*)native_object)->CreateClient((wxMDIParentFrame*) object_pointer0_0));

				references->AddReference(parent0, "wxMDIClientWindow::CreateClient at call with 1 argument(s)");

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIClientWindow::CreateClient((wxMDIParentFrame*) object_pointer0_0, (long) style0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIClientWindow_php*)native_object)->CreateClient((wxMDIParentFrame*) object_pointer0_0, (long) style0));

				references->AddReference(parent0, "wxMDIClientWindow::CreateClient at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIClientWindow::CreateClient\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMDIParentFrame_free(void *object TSRMLS_DC) 
{
    zo_wxMDIParentFrame* custom_object = (zo_wxMDIParentFrame*) object;
    
	/*zend_error(E_WARNING, "Object of class wxMDIParentFrame went out of scope. Remember to always call Destroy() to prevent memory leaks.");*/

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxMDIParentFrame_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMDIParentFrame_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxMDIParentFrame* custom_object;
    custom_object = (zo_wxMDIParentFrame*) emalloc(sizeof(zo_wxMDIParentFrame));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxMDIParentFrame_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXMDIPARENTFRAME_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxMDIParentFrame::ActivateNext()
   Activates the MDI child following the currently active one. */
PHP_METHOD(php_wxMDIParentFrame, ActivateNext)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::ActivateNext\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIParentFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIParentFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIParentFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIParentFrame::ActivateNext call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDIPARENTFRAME_TYPE){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::ActivateNext()\n\n");
				#endif

				((wxMDIParentFrame_php*)native_object)->ActivateNext();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIParentFrame::ActivateNext\n");
	}
}
/* }}} */

/* {{{ proto  wxMDIParentFrame::ActivatePrevious()
   Activates the MDI child preceding the currently active one. */
PHP_METHOD(php_wxMDIParentFrame, ActivatePrevious)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::ActivatePrevious\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIParentFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIParentFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIParentFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIParentFrame::ActivatePrevious call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDIPARENTFRAME_TYPE){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::ActivatePrevious()\n\n");
				#endif

				((wxMDIParentFrame_php*)native_object)->ActivatePrevious();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIParentFrame::ActivatePrevious\n");
	}
}
/* }}} */

/* {{{ proto  wxMDIParentFrame::ArrangeIcons()
   Arranges any iconized (minimized) MDI child windows. */
PHP_METHOD(php_wxMDIParentFrame, ArrangeIcons)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::ArrangeIcons\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIParentFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIParentFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIParentFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIParentFrame::ArrangeIcons call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDIPARENTFRAME_TYPE){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::ArrangeIcons()\n\n");
				#endif

				((wxMDIParentFrame_php*)native_object)->ArrangeIcons();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIParentFrame::ArrangeIcons\n");
	}
}
/* }}} */

/* {{{ proto  wxMDIParentFrame::Cascade()
   Arranges the MDI child windows in a cascade. */
PHP_METHOD(php_wxMDIParentFrame, Cascade)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::Cascade\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIParentFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIParentFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIParentFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIParentFrame::Cascade call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDIPARENTFRAME_TYPE){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::Cascade()\n\n");
				#endif

				((wxMDIParentFrame_php*)native_object)->Cascade();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIParentFrame::Cascade\n");
	}
}
/* }}} */

/* {{{ proto bool wxMDIParentFrame::Create(wxWindow &parent, int id, string title, wxPoint pos, wxSize size, int style, string name)
   Used in two-step frame construction. */
PHP_METHOD(php_wxMDIParentFrame, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::Create\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIParentFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIParentFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIParentFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIParentFrame::Create call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDIPARENTFRAME_TYPE){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	wxPoint* object_pointer0_3 = 0;
	zval* size0 = 0;
	wxSize* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif

		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxPoint*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxSize*) argument_native_object;
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIParentFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIParentFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)));

				references->AddReference(parent0, "wxMDIParentFrame::Create at call with 3 argument(s)");

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIParentFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIParentFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3));

				references->AddReference(parent0, "wxMDIParentFrame::Create at call with 4 argument(s)");
				references->AddReference(pos0, "wxMDIParentFrame::Create at call with 4 argument(s)");

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIParentFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIParentFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

				references->AddReference(parent0, "wxMDIParentFrame::Create at call with 5 argument(s)");
				references->AddReference(pos0, "wxMDIParentFrame::Create at call with 5 argument(s)");
				references->AddReference(size0, "wxMDIParentFrame::Create at call with 5 argument(s)");

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIParentFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIParentFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

				references->AddReference(parent0, "wxMDIParentFrame::Create at call with 6 argument(s)");
				references->AddReference(pos0, "wxMDIParentFrame::Create at call with 6 argument(s)");
				references->AddReference(size0, "wxMDIParentFrame::Create at call with 6 argument(s)");

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIParentFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIParentFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)));

				references->AddReference(parent0, "wxMDIParentFrame::Create at call with 7 argument(s)");
				references->AddReference(pos0, "wxMDIParentFrame::Create at call with 7 argument(s)");
				references->AddReference(size0, "wxMDIParentFrame::Create at call with 7 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIParentFrame::Create\n");
	}
}
/* }}} */

/* {{{ proto wxMDIChildFrame wxMDIParentFrame::GetActiveChild()
   Returns a pointer to the active MDI child, if there is one. */
PHP_METHOD(php_wxMDIParentFrame, GetActiveChild)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::GetActiveChild\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIParentFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIParentFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIParentFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIParentFrame::GetActiveChild call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDIPARENTFRAME_TYPE){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::GetActiveChild() to return object pointer\n\n");
				#endif

				wxMDIChildFrame_php* value_to_return0;
				value_to_return0 = (wxMDIChildFrame_php*) ((wxMDIParentFrame_php*)native_object)->GetActiveChild();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxMDIChildFrame_entry);
					((zo_wxMDIChildFrame*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMDIChildFrame_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxMDIParentFrame::GetActiveChild at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIParentFrame::GetActiveChild\n");
	}
}
/* }}} */

/* {{{ proto wxMenu wxMDIParentFrame::GetWindowMenu()
   Returns the current MDI Window menu. */
PHP_METHOD(php_wxMDIParentFrame, GetWindowMenu)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::GetWindowMenu\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIParentFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIParentFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIParentFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIParentFrame::GetWindowMenu call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDIPARENTFRAME_TYPE){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::GetWindowMenu() to return object pointer\n\n");
				#endif

				wxMenu_php* value_to_return0;
				value_to_return0 = (wxMenu_php*) ((wxMDIParentFrame_php*)native_object)->GetWindowMenu();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxMenu_entry);
					((zo_wxMenu*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMenu_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxMDIParentFrame::GetWindowMenu at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIParentFrame::GetWindowMenu\n");
	}
}
/* }}} */

/* {{{ proto bool wxMDIParentFrame::IsTDI()
   Returns whether the MDI implementation is tab-based. */
PHP_METHOD(php_wxMDIParentFrame, IsTDI)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::IsTDI\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIParentFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIParentFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIParentFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIParentFrame::IsTDI call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDIPARENTFRAME_TYPE){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_BOOL(wxMDIParentFrame::IsTDI())\n\n");
				#endif

				ZVAL_BOOL(return_value, wxMDIParentFrame::IsTDI());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIParentFrame::IsTDI\n");
	}
}
/* }}} */

/* {{{ proto wxMDIClientWindow wxMDIParentFrame::OnCreateClient()
   Override this to return a different kind of client window. */
wxMDIClientWindow* wxMDIParentFrame_php::OnCreateClient()
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxMDIParentFrame::OnCreateClient\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval* arguments[1];
	arguments[0] = NULL;
	params[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "OnCreateClient", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
		

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "OnCreateClient", 14, &return_value, 0, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		if(Z_TYPE_P(return_value) == IS_OBJECT)
	{
		return_object = (void*) ((zo_wxMDIClientWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object;
	}

	//Threat it as a normal object on the calling function and not a php user space intiialized one
	((zo_wxMDIClientWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->is_user_initialized = 0;
	wxMDIClientWindow_php* var = (wxMDIClientWindow_php*) return_object;
	var->references.UnInitialize();

	return (wxMDIClientWindow*) return_object;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	return wxMDIParentFrame::OnCreateClient();
}
/* }}} */

/* {{{ proto  wxMDIParentFrame::SetWindowMenu(wxMenu &menu)
   Replace the current MDI Window menu. */
PHP_METHOD(php_wxMDIParentFrame, SetWindowMenu)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::SetWindowMenu\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIParentFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIParentFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIParentFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIParentFrame::SetWindowMenu call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDIPARENTFRAME_TYPE){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* menu0 = 0;
	wxMenu* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&menu0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &menu0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(menu0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxMenu*) zend_object_store_get_object(menu0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxMenu*) zend_object_store_get_object(menu0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxMenu*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXMENU_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'menu' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(menu0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'menu' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::SetWindowMenu((wxMenu*) object_pointer0_0)\n\n");
				#endif

				((wxMDIParentFrame_php*)native_object)->SetWindowMenu((wxMenu*) object_pointer0_0);

				references->AddReference(menu0, "wxMDIParentFrame::SetWindowMenu at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIParentFrame::SetWindowMenu\n");
	}
}
/* }}} */

/* {{{ proto  wxMDIParentFrame::Tile(wxOrientation orient)
   Tiles the MDI child windows either horizontally or vertically depending on whether orient is wxHORIZONTAL or wxVERTICAL. */
PHP_METHOD(php_wxMDIParentFrame, Tile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::Tile\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIParentFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIParentFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIParentFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIParentFrame::Tile call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDIPARENTFRAME_TYPE){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long orient0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&orient0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &orient0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::Tile()\n\n");
				#endif

				((wxMDIParentFrame_php*)native_object)->Tile();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIParentFrame::Tile((wxOrientation) orient0)\n\n");
				#endif

				((wxMDIParentFrame_php*)native_object)->Tile((wxOrientation) orient0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIParentFrame::Tile\n");
	}
}
/* }}} */

/* {{{ proto  wxMDIParentFrame::wxMDIParentFrame()
   Default constructor. */
PHP_METHOD(php_wxMDIParentFrame, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIParentFrame::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIParentFrame* current_object;
	wxMDIParentFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* parent1 = 0;
	wxWindow* object_pointer1_0 = 0;
	long id1;
	char* title1;
	long title_len1;
	zval* pos1 = 0;
	wxPoint* object_pointer1_3 = 0;
	zval* size1 = 0;
	wxSize* object_pointer1_4 = 0;
	long style1;
	char* name1;
	long name_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1)\n");
		#endif

		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxWindow*) argument_native_object;
					if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos1 TSRMLS_CC))->native_object;
					object_pointer1_3 = (wxPoint*) argument_native_object;
					if (!object_pointer1_3 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size1 TSRMLS_CC))->native_object;
					object_pointer1_4 = (wxSize*) argument_native_object;
					if (!object_pointer1_4 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxMDIParentFrame_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8))\n");
				#endif

				native_object = new wxMDIParentFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8));

				native_object->references.Initialize();
				((wxMDIParentFrame_php*) native_object)->references.AddReference(parent1, "wxMDIParentFrame::wxMDIParentFrame at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3)\n");
				#endif

				native_object = new wxMDIParentFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3);

				native_object->references.Initialize();
				((wxMDIParentFrame_php*) native_object)->references.AddReference(parent1, "wxMDIParentFrame::wxMDIParentFrame at call with 4 argument(s)");
				((wxMDIParentFrame_php*) native_object)->references.AddReference(pos1, "wxMDIParentFrame::wxMDIParentFrame at call with 4 argument(s)");
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4)\n");
				#endif

				native_object = new wxMDIParentFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4);

				native_object->references.Initialize();
				((wxMDIParentFrame_php*) native_object)->references.AddReference(parent1, "wxMDIParentFrame::wxMDIParentFrame at call with 5 argument(s)");
				((wxMDIParentFrame_php*) native_object)->references.AddReference(pos1, "wxMDIParentFrame::wxMDIParentFrame at call with 5 argument(s)");
				((wxMDIParentFrame_php*) native_object)->references.AddReference(size1, "wxMDIParentFrame::wxMDIParentFrame at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1)\n");
				#endif

				native_object = new wxMDIParentFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1);

				native_object->references.Initialize();
				((wxMDIParentFrame_php*) native_object)->references.AddReference(parent1, "wxMDIParentFrame::wxMDIParentFrame at call with 6 argument(s)");
				((wxMDIParentFrame_php*) native_object)->references.AddReference(pos1, "wxMDIParentFrame::wxMDIParentFrame at call with 6 argument(s)");
				((wxMDIParentFrame_php*) native_object)->references.AddReference(size1, "wxMDIParentFrame::wxMDIParentFrame at call with 6 argument(s)");
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8))\n");
				#endif

				native_object = new wxMDIParentFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8));

				native_object->references.Initialize();
				((wxMDIParentFrame_php*) native_object)->references.AddReference(parent1, "wxMDIParentFrame::wxMDIParentFrame at call with 7 argument(s)");
				((wxMDIParentFrame_php*) native_object)->references.AddReference(pos1, "wxMDIParentFrame::wxMDIParentFrame at call with 7 argument(s)");
				((wxMDIParentFrame_php*) native_object)->references.AddReference(size1, "wxMDIParentFrame::wxMDIParentFrame at call with 7 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxMDIParentFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxMDIParentFrame::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMDIChildFrame_free(void *object TSRMLS_DC) 
{
    zo_wxMDIChildFrame* custom_object = (zo_wxMDIChildFrame*) object;
    
	/*zend_error(E_WARNING, "Object of class wxMDIChildFrame went out of scope. Remember to always call Destroy() to prevent memory leaks.");*/

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxMDIChildFrame_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMDIChildFrame_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxMDIChildFrame* custom_object;
    custom_object = (zo_wxMDIChildFrame*) emalloc(sizeof(zo_wxMDIChildFrame));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxMDIChildFrame_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXMDICHILDFRAME_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxMDIChildFrame::wxMDIChildFrame(wxMDIParentFrame &parent, int id, string title, wxPoint pos, wxSize size, int style, string name)
   Constructor, creating the window. */
PHP_METHOD(php_wxMDIChildFrame, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIChildFrame* current_object;
	wxMDIChildFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxMDIParentFrame* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	wxPoint* object_pointer0_3 = 0;
	zval* size0 = 0;
	wxSize* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif

		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxMDIParentFrame*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxMDIParentFrame*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxMDIParentFrame*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXMDIPARENTFRAME_TYPE))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					goto overload1;
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxPoint*) argument_native_object;
					if (!object_pointer0_3 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					goto overload1;
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxSize*) argument_native_object;
					if (!object_pointer0_4 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload1_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8))\n");
				#endif

				native_object = new wxMDIChildFrame_php((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8));

				native_object->references.Initialize();
				((wxMDIChildFrame_php*) native_object)->references.AddReference(parent0, "wxMDIChildFrame::wxMDIChildFrame at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3)\n");
				#endif

				native_object = new wxMDIChildFrame_php((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3);

				native_object->references.Initialize();
				((wxMDIChildFrame_php*) native_object)->references.AddReference(parent0, "wxMDIChildFrame::wxMDIChildFrame at call with 4 argument(s)");
				((wxMDIChildFrame_php*) native_object)->references.AddReference(pos0, "wxMDIChildFrame::wxMDIChildFrame at call with 4 argument(s)");
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4)\n");
				#endif

				native_object = new wxMDIChildFrame_php((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4);

				native_object->references.Initialize();
				((wxMDIChildFrame_php*) native_object)->references.AddReference(parent0, "wxMDIChildFrame::wxMDIChildFrame at call with 5 argument(s)");
				((wxMDIChildFrame_php*) native_object)->references.AddReference(pos0, "wxMDIChildFrame::wxMDIChildFrame at call with 5 argument(s)");
				((wxMDIChildFrame_php*) native_object)->references.AddReference(size0, "wxMDIChildFrame::wxMDIChildFrame at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0)\n");
				#endif

				native_object = new wxMDIChildFrame_php((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0);

				native_object->references.Initialize();
				((wxMDIChildFrame_php*) native_object)->references.AddReference(parent0, "wxMDIChildFrame::wxMDIChildFrame at call with 6 argument(s)");
				((wxMDIChildFrame_php*) native_object)->references.AddReference(pos0, "wxMDIChildFrame::wxMDIChildFrame at call with 6 argument(s)");
				((wxMDIChildFrame_php*) native_object)->references.AddReference(size0, "wxMDIChildFrame::wxMDIChildFrame at call with 6 argument(s)");
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8))\n");
				#endif

				native_object = new wxMDIChildFrame_php((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8));

				native_object->references.Initialize();
				((wxMDIChildFrame_php*) native_object)->references.AddReference(parent0, "wxMDIChildFrame::wxMDIChildFrame at call with 7 argument(s)");
				((wxMDIChildFrame_php*) native_object)->references.AddReference(pos0, "wxMDIChildFrame::wxMDIChildFrame at call with 7 argument(s)");
				((wxMDIChildFrame_php*) native_object)->references.AddReference(size0, "wxMDIChildFrame::wxMDIChildFrame at call with 7 argument(s)");
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxMDIChildFrame_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxMDIChildFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxMDIChildFrame::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxMDIChildFrame::Restore()
   Restores this MDI child frame (unmaximizes). */
PHP_METHOD(php_wxMDIChildFrame, Restore)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::Restore\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIChildFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIChildFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIChildFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIChildFrame::Restore call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDICHILDFRAME_TYPE){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIChildFrame::Restore()\n\n");
				#endif

				((wxMDIChildFrame_php*)native_object)->Restore();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIChildFrame::Restore\n");
	}
}
/* }}} */

/* {{{ proto  wxMDIChildFrame::Maximize(bool maximize)
   Maximizes this MDI child frame. */
PHP_METHOD(php_wxMDIChildFrame, Maximize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::Maximize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIChildFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIChildFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIChildFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIChildFrame::Maximize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDICHILDFRAME_TYPE){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool maximize0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&maximize0)\n");
		#endif

		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &maximize0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIChildFrame::Maximize()\n\n");
				#endif

				((wxMDIChildFrame_php*)native_object)->Maximize();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIChildFrame::Maximize(maximize0)\n\n");
				#endif

				((wxMDIChildFrame_php*)native_object)->Maximize(maximize0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIChildFrame::Maximize\n");
	}
}
/* }}} */

/* {{{ proto bool wxMDIChildFrame::IsAlwaysMaximized()
   Returns true for MDI children in TDI implementations. */
PHP_METHOD(php_wxMDIChildFrame, IsAlwaysMaximized)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::IsAlwaysMaximized\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIChildFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIChildFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIChildFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIChildFrame::IsAlwaysMaximized call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDICHILDFRAME_TYPE){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIChildFrame::IsAlwaysMaximized())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIChildFrame_php*)native_object)->IsAlwaysMaximized());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIChildFrame::IsAlwaysMaximized\n");
	}
}
/* }}} */

/* {{{ proto wxMDIParentFrame wxMDIChildFrame::GetMDIParent()
   Returns the MDI parent frame containing this child. */
PHP_METHOD(php_wxMDIChildFrame, GetMDIParent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::GetMDIParent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIChildFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIChildFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIChildFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIChildFrame::GetMDIParent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDICHILDFRAME_TYPE){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIChildFrame::GetMDIParent() to return object pointer\n\n");
				#endif

				wxMDIParentFrame_php* value_to_return0;
				value_to_return0 = (wxMDIParentFrame_php*) ((wxMDIChildFrame_php*)native_object)->GetMDIParent();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxMDIParentFrame_entry);
					((zo_wxMDIParentFrame*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMDIParentFrame_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxMDIChildFrame::GetMDIParent at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIChildFrame::GetMDIParent\n");
	}
}
/* }}} */

/* {{{ proto bool wxMDIChildFrame::Create(wxMDIParentFrame &parent, int id, string title, wxPoint pos, wxSize size, int style, string name)
   Used in two-step frame construction. */
PHP_METHOD(php_wxMDIChildFrame, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::Create\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIChildFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIChildFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIChildFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIChildFrame::Create call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDICHILDFRAME_TYPE){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxMDIParentFrame* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	wxPoint* object_pointer0_3 = 0;
	zval* size0 = 0;
	wxSize* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif

		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxMDIParentFrame*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxMDIParentFrame*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxMDIParentFrame*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXMDIPARENTFRAME_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxPoint*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxSize*) argument_native_object;
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIChildFrame::Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIChildFrame_php*)native_object)->Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)));

				references->AddReference(parent0, "wxMDIChildFrame::Create at call with 3 argument(s)");

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIChildFrame::Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIChildFrame_php*)native_object)->Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3));

				references->AddReference(parent0, "wxMDIChildFrame::Create at call with 4 argument(s)");
				references->AddReference(pos0, "wxMDIChildFrame::Create at call with 4 argument(s)");

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIChildFrame::Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIChildFrame_php*)native_object)->Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

				references->AddReference(parent0, "wxMDIChildFrame::Create at call with 5 argument(s)");
				references->AddReference(pos0, "wxMDIChildFrame::Create at call with 5 argument(s)");
				references->AddReference(size0, "wxMDIChildFrame::Create at call with 5 argument(s)");

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIChildFrame::Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIChildFrame_php*)native_object)->Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

				references->AddReference(parent0, "wxMDIChildFrame::Create at call with 6 argument(s)");
				references->AddReference(pos0, "wxMDIChildFrame::Create at call with 6 argument(s)");
				references->AddReference(size0, "wxMDIChildFrame::Create at call with 6 argument(s)");

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMDIChildFrame::Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMDIChildFrame_php*)native_object)->Create((wxMDIParentFrame*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)));

				references->AddReference(parent0, "wxMDIChildFrame::Create at call with 7 argument(s)");
				references->AddReference(pos0, "wxMDIChildFrame::Create at call with 7 argument(s)");
				references->AddReference(size0, "wxMDIChildFrame::Create at call with 7 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIChildFrame::Create\n");
	}
}
/* }}} */

/* {{{ proto  wxMDIChildFrame::Activate()
   Activates this MDI child frame. */
PHP_METHOD(php_wxMDIChildFrame, Activate)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMDIChildFrame::Activate\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMDIChildFrame* current_object;
	wxphp_object_type current_object_type;
	wxMDIChildFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMDIChildFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMDIChildFrame::Activate call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMDICHILDFRAME_TYPE){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxMDIChildFrame::Activate()\n\n");
				#endif

				((wxMDIChildFrame_php*)native_object)->Activate();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMDIChildFrame::Activate\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxMiniFrame_free(void *object TSRMLS_DC) 
{
    zo_wxMiniFrame* custom_object = (zo_wxMiniFrame*) object;
    
	/*zend_error(E_WARNING, "Object of class wxMiniFrame went out of scope. Remember to always call Destroy() to prevent memory leaks.");*/

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxMiniFrame_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxMiniFrame_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxMiniFrame* custom_object;
    custom_object = (zo_wxMiniFrame*) emalloc(sizeof(zo_wxMiniFrame));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxMiniFrame_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXMINIFRAME_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxMiniFrame::Create(wxWindow &parent, int id, string title, wxPoint pos, wxSize size, int style, string name)
   Used in two-step frame construction. */
PHP_METHOD(php_wxMiniFrame, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMiniFrame::Create\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMiniFrame* current_object;
	wxphp_object_type current_object_type;
	wxMiniFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxMiniFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxMiniFrame::Create call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXMINIFRAME_TYPE){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	wxPoint* object_pointer0_3 = 0;
	zval* size0 = 0;
	wxSize* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif

		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxPoint*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxSize*) argument_native_object;
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMiniFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMiniFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)));

				references->AddReference(parent0, "wxMiniFrame::Create at call with 3 argument(s)");

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMiniFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMiniFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3));

				references->AddReference(parent0, "wxMiniFrame::Create at call with 4 argument(s)");
				references->AddReference(pos0, "wxMiniFrame::Create at call with 4 argument(s)");

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMiniFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMiniFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

				references->AddReference(parent0, "wxMiniFrame::Create at call with 5 argument(s)");
				references->AddReference(pos0, "wxMiniFrame::Create at call with 5 argument(s)");
				references->AddReference(size0, "wxMiniFrame::Create at call with 5 argument(s)");

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMiniFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMiniFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

				references->AddReference(parent0, "wxMiniFrame::Create at call with 6 argument(s)");
				references->AddReference(pos0, "wxMiniFrame::Create at call with 6 argument(s)");
				references->AddReference(size0, "wxMiniFrame::Create at call with 6 argument(s)");

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxMiniFrame::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxMiniFrame_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)));

				references->AddReference(parent0, "wxMiniFrame::Create at call with 7 argument(s)");
				references->AddReference(pos0, "wxMiniFrame::Create at call with 7 argument(s)");
				references->AddReference(size0, "wxMiniFrame::Create at call with 7 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxMiniFrame::Create\n");
	}
}
/* }}} */

/* {{{ proto  wxMiniFrame::wxMiniFrame()
   Default ctor. */
PHP_METHOD(php_wxMiniFrame, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxMiniFrame::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxMiniFrame* current_object;
	wxMiniFrame_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* parent1 = 0;
	wxWindow* object_pointer1_0 = 0;
	long id1;
	char* title1;
	long title_len1;
	zval* pos1 = 0;
	wxPoint* object_pointer1_3 = 0;
	zval* size1 = 0;
	wxSize* object_pointer1_4 = 0;
	long style1;
	char* name1;
	long name_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1)\n");
		#endif

		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxWindow*) argument_native_object;
					if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos1 TSRMLS_CC))->native_object;
					object_pointer1_3 = (wxPoint*) argument_native_object;
					if (!object_pointer1_3 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size1 TSRMLS_CC))->native_object;
					object_pointer1_4 = (wxSize*) argument_native_object;
					if (!object_pointer1_4 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxMiniFrame_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8))\n");
				#endif

				native_object = new wxMiniFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8));

				native_object->references.Initialize();
				((wxMiniFrame_php*) native_object)->references.AddReference(parent1, "wxMiniFrame::wxMiniFrame at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3)\n");
				#endif

				native_object = new wxMiniFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3);

				native_object->references.Initialize();
				((wxMiniFrame_php*) native_object)->references.AddReference(parent1, "wxMiniFrame::wxMiniFrame at call with 4 argument(s)");
				((wxMiniFrame_php*) native_object)->references.AddReference(pos1, "wxMiniFrame::wxMiniFrame at call with 4 argument(s)");
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4)\n");
				#endif

				native_object = new wxMiniFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4);

				native_object->references.Initialize();
				((wxMiniFrame_php*) native_object)->references.AddReference(parent1, "wxMiniFrame::wxMiniFrame at call with 5 argument(s)");
				((wxMiniFrame_php*) native_object)->references.AddReference(pos1, "wxMiniFrame::wxMiniFrame at call with 5 argument(s)");
				((wxMiniFrame_php*) native_object)->references.AddReference(size1, "wxMiniFrame::wxMiniFrame at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1)\n");
				#endif

				native_object = new wxMiniFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1);

				native_object->references.Initialize();
				((wxMiniFrame_php*) native_object)->references.AddReference(parent1, "wxMiniFrame::wxMiniFrame at call with 6 argument(s)");
				((wxMiniFrame_php*) native_object)->references.AddReference(pos1, "wxMiniFrame::wxMiniFrame at call with 6 argument(s)");
				((wxMiniFrame_php*) native_object)->references.AddReference(size1, "wxMiniFrame::wxMiniFrame at call with 6 argument(s)");
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8))\n");
				#endif

				native_object = new wxMiniFrame_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8));

				native_object->references.Initialize();
				((wxMiniFrame_php*) native_object)->references.AddReference(parent1, "wxMiniFrame::wxMiniFrame at call with 7 argument(s)");
				((wxMiniFrame_php*) native_object)->references.AddReference(pos1, "wxMiniFrame::wxMiniFrame at call with 7 argument(s)");
				((wxMiniFrame_php*) native_object)->references.AddReference(size1, "wxMiniFrame::wxMiniFrame at call with 7 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxMiniFrame*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxMiniFrame::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxPopupWindow_free(void *object TSRMLS_DC) 
{
    zo_wxPopupWindow* custom_object = (zo_wxPopupWindow*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxPopupWindow_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting object by calling destroy and delete\n");
			#endif
			
			custom_object->native_object->Destroy();
			delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxPopupWindow done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxPopupWindow_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxPopupWindow_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxPopupWindow* custom_object;
    custom_object = (zo_wxPopupWindow*) emalloc(sizeof(zo_wxPopupWindow));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxPopupWindow_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXPOPUPWINDOW_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxPopupWindow::Create(wxWindow &parent, int flags)
   Create method for two-step creation. */
PHP_METHOD(php_wxPopupWindow, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupWindow::Create\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPopupWindow* current_object;
	wxphp_object_type current_object_type;
	wxPopupWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPopupWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPopupWindow::Create call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPOPUPWINDOW_TYPE){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&parent0, &flags0)\n");
		#endif

		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &flags0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPopupWindow::Create((wxWindow*) object_pointer0_0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxPopupWindow_php*)native_object)->Create((wxWindow*) object_pointer0_0));

				references->AddReference(parent0, "wxPopupWindow::Create at call with 1 argument(s)");

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPopupWindow::Create((wxWindow*) object_pointer0_0, (int) flags0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxPopupWindow_php*)native_object)->Create((wxWindow*) object_pointer0_0, (int) flags0));

				references->AddReference(parent0, "wxPopupWindow::Create at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPopupWindow::Create\n");
	}
}
/* }}} */

/* {{{ proto  wxPopupWindow::Position(wxPoint ptOrigin, wxSize sizePopup)
   Move the popup window to the right position, i.e. such that it is entirely visible. */
PHP_METHOD(php_wxPopupWindow, Position)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupWindow::Position\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPopupWindow* current_object;
	wxphp_object_type current_object_type;
	wxPopupWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPopupWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPopupWindow::Position call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPOPUPWINDOW_TYPE){
				references = &((wxPopupWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE) && (!reference_type_found)){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* ptOrigin0 = 0;
	wxPoint* object_pointer0_0 = 0;
	zval* sizePopup0 = 0;
	wxSize* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO' (&ptOrigin0, php_wxPoint_entry, &sizePopup0, php_wxSize_entry)\n");
		#endif

		char parse_parameters_string[] = "OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &ptOrigin0, php_wxPoint_entry, &sizePopup0, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(ptOrigin0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(ptOrigin0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(ptOrigin0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxPoint*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'ptOrigin' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(ptOrigin0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'ptOrigin' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(sizePopup0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(sizePopup0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(sizePopup0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxSize*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'sizePopup' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(sizePopup0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'sizePopup' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPopupWindow::Position(*(wxPoint*) object_pointer0_0, *(wxSize*) object_pointer0_1)\n\n");
				#endif

				((wxPopupWindow_php*)native_object)->Position(*(wxPoint*) object_pointer0_0, *(wxSize*) object_pointer0_1);

				references->AddReference(ptOrigin0, "wxPopupWindow::Position at call with 2 argument(s)");
				references->AddReference(sizePopup0, "wxPopupWindow::Position at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPopupWindow::Position\n");
	}
}
/* }}} */

/* {{{ proto  wxPopupWindow::wxPopupWindow(wxWindow &parent, int flags)
   Constructor. */
PHP_METHOD(php_wxPopupWindow, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupWindow::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPopupWindow* current_object;
	wxPopupWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&parent0, &flags0)\n");
		#endif

		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &flags0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif

				native_object = new wxPopupWindow_php((wxWindow*) object_pointer0_0);

				native_object->references.Initialize();
				((wxPopupWindow_php*) native_object)->references.AddReference(parent0, "wxPopupWindow::wxPopupWindow at call with 1 argument(s)");
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (int) flags0)\n");
				#endif

				native_object = new wxPopupWindow_php((wxWindow*) object_pointer0_0, (int) flags0);

				native_object->references.Initialize();
				((wxPopupWindow_php*) native_object)->references.AddReference(parent0, "wxPopupWindow::wxPopupWindow at call with 2 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxPopupWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxPopupWindow::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxPopupTransientWindow_free(void *object TSRMLS_DC) 
{
    zo_wxPopupTransientWindow* custom_object = (zo_wxPopupTransientWindow*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxPopupTransientWindow_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting object by calling destroy and delete\n");
			#endif
			
			custom_object->native_object->Destroy();
			delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxPopupTransientWindow done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxPopupTransientWindow_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxPopupTransientWindow_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxPopupTransientWindow* custom_object;
    custom_object = (zo_wxPopupTransientWindow*) emalloc(sizeof(zo_wxPopupTransientWindow));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxPopupTransientWindow_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXPOPUPTRANSIENTWINDOW_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxPopupTransientWindow::Dismiss()
   Hide the window. */
PHP_METHOD(php_wxPopupTransientWindow, Dismiss)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupTransientWindow::Dismiss\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPopupTransientWindow* current_object;
	wxphp_object_type current_object_type;
	wxPopupTransientWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPopupTransientWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPopupTransientWindow::Dismiss call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPopupTransientWindow::Dismiss()\n\n");
				#endif

				((wxPopupTransientWindow_php*)native_object)->Dismiss();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPopupTransientWindow::Dismiss\n");
	}
}
/* }}} */

/* {{{ proto  wxPopupTransientWindow::Popup(wxWindow &focus)
   Popup the window (this will show it too). */
PHP_METHOD(php_wxPopupTransientWindow, Popup)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupTransientWindow::Popup\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPopupTransientWindow* current_object;
	wxphp_object_type current_object_type;
	wxPopupTransientWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPopupTransientWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPopupTransientWindow::Popup call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* focus0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|z' (&focus0)\n");
		#endif

		char parse_parameters_string[] = "|z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &focus0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(focus0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(focus0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(focus0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'focus' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(focus0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'focus' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPopupTransientWindow::Popup()\n\n");
				#endif

				((wxPopupTransientWindow_php*)native_object)->Popup();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPopupTransientWindow::Popup((wxWindow*) object_pointer0_0)\n\n");
				#endif

				((wxPopupTransientWindow_php*)native_object)->Popup((wxWindow*) object_pointer0_0);

				references->AddReference(focus0, "wxPopupTransientWindow::Popup at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPopupTransientWindow::Popup\n");
	}
}
/* }}} */

/* {{{ proto bool wxPopupTransientWindow::ProcessLeftDown(wxMouseEvent &event)
   Called when a mouse is pressed while the popup is shown. */
PHP_METHOD(php_wxPopupTransientWindow, ProcessLeftDown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupTransientWindow::ProcessLeftDown\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPopupTransientWindow* current_object;
	wxphp_object_type current_object_type;
	wxPopupTransientWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPopupTransientWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPopupTransientWindow::ProcessLeftDown call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPOPUPTRANSIENTWINDOW_TYPE){
				references = &((wxPopupTransientWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* event0 = 0;
	wxMouseEvent* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&event0, php_wxMouseEvent_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &event0, php_wxMouseEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(event0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxMouseEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxMouseEvent*) zend_object_store_get_object(event0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxMouseEvent*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'event' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'event' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPopupTransientWindow::ProcessLeftDown(*(wxMouseEvent*) object_pointer0_0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxPopupTransientWindow_php*)native_object)->ProcessLeftDown(*(wxMouseEvent*) object_pointer0_0));

				references->AddReference(event0, "wxPopupTransientWindow::ProcessLeftDown at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPopupTransientWindow::ProcessLeftDown\n");
	}
}
/* }}} */

/* {{{ proto  wxPopupTransientWindow::wxPopupTransientWindow(wxWindow &parent, int flags)
   Constructor. */
PHP_METHOD(php_wxPopupTransientWindow, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPopupTransientWindow::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPopupTransientWindow* current_object;
	wxPopupTransientWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&parent0, &flags0)\n");
		#endif

		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &flags0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif

				native_object = new wxPopupTransientWindow_php((wxWindow*) object_pointer0_0);

				native_object->references.Initialize();
				((wxPopupTransientWindow_php*) native_object)->references.AddReference(parent0, "wxPopupTransientWindow::wxPopupTransientWindow at call with 1 argument(s)");
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (int) flags0)\n");
				#endif

				native_object = new wxPopupTransientWindow_php((wxWindow*) object_pointer0_0, (int) flags0);

				native_object->references.Initialize();
				((wxPopupTransientWindow_php*) native_object)->references.AddReference(parent0, "wxPopupTransientWindow::wxPopupTransientWindow at call with 2 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxPopupTransientWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxPopupTransientWindow::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxPropertySheetDialog_free(void *object TSRMLS_DC) 
{
    zo_wxPropertySheetDialog* custom_object = (zo_wxPropertySheetDialog*) object;
    
	/*zend_error(E_WARNING, "Object of class wxPropertySheetDialog went out of scope. Remember to always call Destroy() to prevent memory leaks.");*/

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxPropertySheetDialog_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxPropertySheetDialog_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxPropertySheetDialog* custom_object;
    custom_object = (zo_wxPropertySheetDialog*) emalloc(sizeof(zo_wxPropertySheetDialog));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxPropertySheetDialog_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXPROPERTYSHEETDIALOG_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxPropertySheetDialog::AddBookCtrl(wxSizer &sizer)
   Override this if you wish to add the book control in a way different from the standard way (for example, using different spacing). */
PHP_METHOD(php_wxPropertySheetDialog, AddBookCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::AddBookCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPropertySheetDialog* current_object;
	wxphp_object_type current_object_type;
	wxPropertySheetDialog_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPropertySheetDialog*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPropertySheetDialog::AddBookCtrl call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* sizer0 = 0;
	wxSizer* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&sizer0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &sizer0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(sizer0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSizer*) zend_object_store_get_object(sizer0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSizer*) zend_object_store_get_object(sizer0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxSizer*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXSIZER_TYPE && argument_type != PHP_WXBOXSIZER_TYPE && argument_type != PHP_WXSTATICBOXSIZER_TYPE && argument_type != PHP_WXWRAPSIZER_TYPE && argument_type != PHP_WXSTDDIALOGBUTTONSIZER_TYPE && argument_type != PHP_WXGRIDSIZER_TYPE && argument_type != PHP_WXFLEXGRIDSIZER_TYPE && argument_type != PHP_WXGRIDBAGSIZER_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'sizer' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(sizer0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'sizer' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::AddBookCtrl((wxSizer*) object_pointer0_0)\n\n");
				#endif

				((wxPropertySheetDialog_php*)native_object)->AddBookCtrl((wxSizer*) object_pointer0_0);

				references->AddReference(sizer0, "wxPropertySheetDialog::AddBookCtrl at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPropertySheetDialog::AddBookCtrl\n");
	}
}
/* }}} */

/* {{{ proto bool wxPropertySheetDialog::Create(wxWindow &parent, int id, string title, wxPoint pos, wxSize size, int style, string name)
   Call this from your own Create function, before adding buttons and pages. */
PHP_METHOD(php_wxPropertySheetDialog, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::Create\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPropertySheetDialog* current_object;
	wxphp_object_type current_object_type;
	wxPropertySheetDialog_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPropertySheetDialog*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPropertySheetDialog::Create call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	wxPoint* object_pointer0_3 = 0;
	zval* size0 = 0;
	wxSize* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif

		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxPoint*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxSize*) argument_native_object;
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPropertySheetDialog::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxPropertySheetDialog_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)));

				references->AddReference(parent0, "wxPropertySheetDialog::Create at call with 3 argument(s)");

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPropertySheetDialog::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxPropertySheetDialog_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3));

				references->AddReference(parent0, "wxPropertySheetDialog::Create at call with 4 argument(s)");
				references->AddReference(pos0, "wxPropertySheetDialog::Create at call with 4 argument(s)");

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPropertySheetDialog::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxPropertySheetDialog_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

				references->AddReference(parent0, "wxPropertySheetDialog::Create at call with 5 argument(s)");
				references->AddReference(pos0, "wxPropertySheetDialog::Create at call with 5 argument(s)");
				references->AddReference(size0, "wxPropertySheetDialog::Create at call with 5 argument(s)");

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPropertySheetDialog::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxPropertySheetDialog_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

				references->AddReference(parent0, "wxPropertySheetDialog::Create at call with 6 argument(s)");
				references->AddReference(pos0, "wxPropertySheetDialog::Create at call with 6 argument(s)");
				references->AddReference(size0, "wxPropertySheetDialog::Create at call with 6 argument(s)");

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxPropertySheetDialog::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxPropertySheetDialog_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)));

				references->AddReference(parent0, "wxPropertySheetDialog::Create at call with 7 argument(s)");
				references->AddReference(pos0, "wxPropertySheetDialog::Create at call with 7 argument(s)");
				references->AddReference(size0, "wxPropertySheetDialog::Create at call with 7 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPropertySheetDialog::Create\n");
	}
}
/* }}} */

/* {{{ proto wxBookCtrlBase wxPropertySheetDialog::CreateBookCtrl()
   Override this if you wish to create a different kind of book control; by default, the value passed to SetSheetStyle() is used to determine the control. */
PHP_METHOD(php_wxPropertySheetDialog, CreateBookCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::CreateBookCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPropertySheetDialog* current_object;
	wxphp_object_type current_object_type;
	wxPropertySheetDialog_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPropertySheetDialog*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPropertySheetDialog::CreateBookCtrl call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::CreateBookCtrl() to return object pointer\n\n");
				#endif

				wxBookCtrlBase_php* value_to_return0;
				value_to_return0 = (wxBookCtrlBase_php*) ((wxPropertySheetDialog_php*)native_object)->CreateBookCtrl();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxBookCtrlBase_entry);
					((zo_wxBookCtrlBase*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBookCtrlBase_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxPropertySheetDialog::CreateBookCtrl at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPropertySheetDialog::CreateBookCtrl\n");
	}
}
/* }}} */

/* {{{ proto  wxPropertySheetDialog::CreateButtons(int flags)
   Call this to create the buttons for the dialog. */
PHP_METHOD(php_wxPropertySheetDialog, CreateButtons)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::CreateButtons\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPropertySheetDialog* current_object;
	wxphp_object_type current_object_type;
	wxPropertySheetDialog_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPropertySheetDialog*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPropertySheetDialog::CreateButtons call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&flags0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::CreateButtons()\n\n");
				#endif

				((wxPropertySheetDialog_php*)native_object)->CreateButtons();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::CreateButtons((int) flags0)\n\n");
				#endif

				((wxPropertySheetDialog_php*)native_object)->CreateButtons((int) flags0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPropertySheetDialog::CreateButtons\n");
	}
}
/* }}} */

/* {{{ proto wxBookCtrlBase wxPropertySheetDialog::GetBookCtrl()
   Returns the book control that will contain your settings pages. */
PHP_METHOD(php_wxPropertySheetDialog, GetBookCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::GetBookCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPropertySheetDialog* current_object;
	wxphp_object_type current_object_type;
	wxPropertySheetDialog_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPropertySheetDialog*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPropertySheetDialog::GetBookCtrl call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::GetBookCtrl() to return object pointer\n\n");
				#endif

				wxBookCtrlBase_php* value_to_return0;
				value_to_return0 = (wxBookCtrlBase_php*) ((wxPropertySheetDialog_php*)native_object)->GetBookCtrl();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxBookCtrlBase_entry);
					((zo_wxBookCtrlBase*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxBookCtrlBase_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxPropertySheetDialog::GetBookCtrl at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPropertySheetDialog::GetBookCtrl\n");
	}
}
/* }}} */

/* {{{ proto wxSizer wxPropertySheetDialog::GetInnerSizer()
   Returns the inner sizer that contains the book control and button sizer. */
PHP_METHOD(php_wxPropertySheetDialog, GetInnerSizer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::GetInnerSizer\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPropertySheetDialog* current_object;
	wxphp_object_type current_object_type;
	wxPropertySheetDialog_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPropertySheetDialog*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPropertySheetDialog::GetInnerSizer call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::GetInnerSizer() to return object pointer\n\n");
				#endif

				wxSizer_php* value_to_return0;
				value_to_return0 = (wxSizer_php*) ((wxPropertySheetDialog_php*)native_object)->GetInnerSizer();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxSizer_entry);
					((zo_wxSizer*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxSizer_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxPropertySheetDialog::GetInnerSizer at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPropertySheetDialog::GetInnerSizer\n");
	}
}
/* }}} */

/* {{{ proto int wxPropertySheetDialog::GetSheetStyle()
   Returns the sheet style. */
PHP_METHOD(php_wxPropertySheetDialog, GetSheetStyle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::GetSheetStyle\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPropertySheetDialog* current_object;
	wxphp_object_type current_object_type;
	wxPropertySheetDialog_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPropertySheetDialog*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPropertySheetDialog::GetSheetStyle call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxPropertySheetDialog::GetSheetStyle())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxPropertySheetDialog_php*)native_object)->GetSheetStyle());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPropertySheetDialog::GetSheetStyle\n");
	}
}
/* }}} */

/* {{{ proto  wxPropertySheetDialog::LayoutDialog(int centreFlags)
   Call this to lay out the dialog. */
PHP_METHOD(php_wxPropertySheetDialog, LayoutDialog)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::LayoutDialog\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPropertySheetDialog* current_object;
	wxphp_object_type current_object_type;
	wxPropertySheetDialog_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPropertySheetDialog*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPropertySheetDialog::LayoutDialog call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long centreFlags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&centreFlags0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &centreFlags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::LayoutDialog()\n\n");
				#endif

				((wxPropertySheetDialog_php*)native_object)->LayoutDialog();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::LayoutDialog((int) centreFlags0)\n\n");
				#endif

				((wxPropertySheetDialog_php*)native_object)->LayoutDialog((int) centreFlags0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPropertySheetDialog::LayoutDialog\n");
	}
}
/* }}} */

/* {{{ proto  wxPropertySheetDialog::SetBookCtrl(wxBookCtrlBase &bookCtrl)
   Sets the book control used for the dialog. */
PHP_METHOD(php_wxPropertySheetDialog, SetBookCtrl)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::SetBookCtrl\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPropertySheetDialog* current_object;
	wxphp_object_type current_object_type;
	wxPropertySheetDialog_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPropertySheetDialog*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPropertySheetDialog::SetBookCtrl call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* bookCtrl0 = 0;
	wxBookCtrlBase* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&bookCtrl0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bookCtrl0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bookCtrl0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxBookCtrlBase*) zend_object_store_get_object(bookCtrl0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxBookCtrlBase*) zend_object_store_get_object(bookCtrl0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxBookCtrlBase*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'bookCtrl' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bookCtrl0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'bookCtrl' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::SetBookCtrl((wxBookCtrlBase*) object_pointer0_0)\n\n");
				#endif

				((wxPropertySheetDialog_php*)native_object)->SetBookCtrl((wxBookCtrlBase*) object_pointer0_0);

				references->AddReference(bookCtrl0, "wxPropertySheetDialog::SetBookCtrl at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPropertySheetDialog::SetBookCtrl\n");
	}
}
/* }}} */

/* {{{ proto  wxPropertySheetDialog::SetSheetStyle(int style)
   You can customize the look and feel of the dialog by setting the sheet style. */
PHP_METHOD(php_wxPropertySheetDialog, SetSheetStyle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::SetSheetStyle\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPropertySheetDialog* current_object;
	wxphp_object_type current_object_type;
	wxPropertySheetDialog_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxPropertySheetDialog*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxPropertySheetDialog::SetSheetStyle call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long style0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&style0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &style0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxPropertySheetDialog::SetSheetStyle((long) style0)\n\n");
				#endif

				((wxPropertySheetDialog_php*)native_object)->SetSheetStyle((long) style0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxPropertySheetDialog::SetSheetStyle\n");
	}
}
/* }}} */

/* {{{ proto  wxPropertySheetDialog::wxPropertySheetDialog(wxWindow &parent, int id, string title, wxPoint pos, wxSize size, int style, string name)
   Constructor. */
PHP_METHOD(php_wxPropertySheetDialog, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxPropertySheetDialog::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxPropertySheetDialog* current_object;
	wxPropertySheetDialog_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	wxPoint* object_pointer0_3 = 0;
	zval* size0 = 0;
	wxSize* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif

		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxPoint*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxSize*) argument_native_object;
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8))\n");
				#endif

				native_object = new wxPropertySheetDialog_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8));

				native_object->references.Initialize();
				((wxPropertySheetDialog_php*) native_object)->references.AddReference(parent0, "wxPropertySheetDialog::wxPropertySheetDialog at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3)\n");
				#endif

				native_object = new wxPropertySheetDialog_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3);

				native_object->references.Initialize();
				((wxPropertySheetDialog_php*) native_object)->references.AddReference(parent0, "wxPropertySheetDialog::wxPropertySheetDialog at call with 4 argument(s)");
				((wxPropertySheetDialog_php*) native_object)->references.AddReference(pos0, "wxPropertySheetDialog::wxPropertySheetDialog at call with 4 argument(s)");
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4)\n");
				#endif

				native_object = new wxPropertySheetDialog_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4);

				native_object->references.Initialize();
				((wxPropertySheetDialog_php*) native_object)->references.AddReference(parent0, "wxPropertySheetDialog::wxPropertySheetDialog at call with 5 argument(s)");
				((wxPropertySheetDialog_php*) native_object)->references.AddReference(pos0, "wxPropertySheetDialog::wxPropertySheetDialog at call with 5 argument(s)");
				((wxPropertySheetDialog_php*) native_object)->references.AddReference(size0, "wxPropertySheetDialog::wxPropertySheetDialog at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0)\n");
				#endif

				native_object = new wxPropertySheetDialog_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0);

				native_object->references.Initialize();
				((wxPropertySheetDialog_php*) native_object)->references.AddReference(parent0, "wxPropertySheetDialog::wxPropertySheetDialog at call with 6 argument(s)");
				((wxPropertySheetDialog_php*) native_object)->references.AddReference(pos0, "wxPropertySheetDialog::wxPropertySheetDialog at call with 6 argument(s)");
				((wxPropertySheetDialog_php*) native_object)->references.AddReference(size0, "wxPropertySheetDialog::wxPropertySheetDialog at call with 6 argument(s)");
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8))\n");
				#endif

				native_object = new wxPropertySheetDialog_php((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8));

				native_object->references.Initialize();
				((wxPropertySheetDialog_php*) native_object)->references.AddReference(parent0, "wxPropertySheetDialog::wxPropertySheetDialog at call with 7 argument(s)");
				((wxPropertySheetDialog_php*) native_object)->references.AddReference(pos0, "wxPropertySheetDialog::wxPropertySheetDialog at call with 7 argument(s)");
				((wxPropertySheetDialog_php*) native_object)->references.AddReference(size0, "wxPropertySheetDialog::wxPropertySheetDialog at call with 7 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxPropertySheetDialog*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxPropertySheetDialog::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxSplashScreen_free(void *object TSRMLS_DC) 
{
    zo_wxSplashScreen* custom_object = (zo_wxSplashScreen*) object;
    
	/*zend_error(E_WARNING, "Object of class wxSplashScreen went out of scope. Remember to always call Destroy() to prevent memory leaks.");*/

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxSplashScreen_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxSplashScreen_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxSplashScreen* custom_object;
    custom_object = (zo_wxSplashScreen*) emalloc(sizeof(zo_wxSplashScreen));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxSplashScreen_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXSPLASHSCREEN_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxSplashScreen::GetSplashStyle()
   Returns the splash style (see wxSplashScreen() for details). */
PHP_METHOD(php_wxSplashScreen, GetSplashStyle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplashScreen::GetSplashStyle\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSplashScreen* current_object;
	wxphp_object_type current_object_type;
	wxSplashScreen_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSplashScreen*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSplashScreen::GetSplashStyle call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSPLASHSCREEN_TYPE){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSplashScreen::GetSplashStyle())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxSplashScreen_php*)native_object)->GetSplashStyle());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSplashScreen::GetSplashStyle\n");
	}
}
/* }}} */

/* {{{ proto int wxSplashScreen::GetTimeout()
   Returns the timeout in milliseconds. */
PHP_METHOD(php_wxSplashScreen, GetTimeout)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplashScreen::GetTimeout\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSplashScreen* current_object;
	wxphp_object_type current_object_type;
	wxSplashScreen_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxSplashScreen*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxSplashScreen::GetTimeout call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXSPLASHSCREEN_TYPE){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxSplashScreen::GetTimeout())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxSplashScreen_php*)native_object)->GetTimeout());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxSplashScreen::GetTimeout\n");
	}
}
/* }}} */

/* {{{ proto  wxSplashScreen::wxSplashScreen(wxBitmap bitmap, int splashStyle, int milliseconds, wxWindow &parent, int id, wxPoint pos, wxSize size, int style)
   Construct the splash screen passing a bitmap, a style, a timeout, a window id, optional position and size, and a window style. */
PHP_METHOD(php_wxSplashScreen, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxSplashScreen::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxSplashScreen* current_object;
	wxSplashScreen_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* bitmap0 = 0;
	wxBitmap* object_pointer0_0 = 0;
	long splashStyle0;
	long milliseconds0;
	zval* parent0 = 0;
	wxWindow* object_pointer0_3 = 0;
	long id0;
	zval* pos0 = 0;
	wxPoint* object_pointer0_5 = 0;
	zval* size0 = 0;
	wxSize* object_pointer0_6 = 0;
	long style0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 5  && arguments_received <= 8)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'Ollzl|OOl' (&bitmap0, php_wxBitmap_entry, &splashStyle0, &milliseconds0, &parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0)\n");
		#endif

		char parse_parameters_string[] = "Ollzl|OOl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &bitmap0, php_wxBitmap_entry, &splashStyle0, &milliseconds0, &parent0, &id0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(bitmap0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxBitmap*) zend_object_store_get_object(bitmap0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxBitmap*) zend_object_store_get_object(bitmap0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxBitmap*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'bitmap' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(bitmap0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'bitmap' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxWindow*) argument_native_object;
					if (!object_pointer0_3 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 6){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_5 = (wxPoint*) argument_native_object;
					if (!object_pointer0_5 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 7){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_6 = (wxSize*) argument_native_object;
					if (!object_pointer0_6 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0)\n");
				#endif

				native_object = new wxSplashScreen_php(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0);

				native_object->references.Initialize();
				((wxSplashScreen_php*) native_object)->references.AddReference(bitmap0, "wxSplashScreen::wxSplashScreen at call with 5 argument(s)");
				((wxSplashScreen_php*) native_object)->references.AddReference(parent0, "wxSplashScreen::wxSplashScreen at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0, *(wxPoint*) object_pointer0_5)\n");
				#endif

				native_object = new wxSplashScreen_php(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0, *(wxPoint*) object_pointer0_5);

				native_object->references.Initialize();
				((wxSplashScreen_php*) native_object)->references.AddReference(bitmap0, "wxSplashScreen::wxSplashScreen at call with 6 argument(s)");
				((wxSplashScreen_php*) native_object)->references.AddReference(parent0, "wxSplashScreen::wxSplashScreen at call with 6 argument(s)");
				((wxSplashScreen_php*) native_object)->references.AddReference(pos0, "wxSplashScreen::wxSplashScreen at call with 6 argument(s)");
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0, *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6)\n");
				#endif

				native_object = new wxSplashScreen_php(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0, *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6);

				native_object->references.Initialize();
				((wxSplashScreen_php*) native_object)->references.AddReference(bitmap0, "wxSplashScreen::wxSplashScreen at call with 7 argument(s)");
				((wxSplashScreen_php*) native_object)->references.AddReference(parent0, "wxSplashScreen::wxSplashScreen at call with 7 argument(s)");
				((wxSplashScreen_php*) native_object)->references.AddReference(pos0, "wxSplashScreen::wxSplashScreen at call with 7 argument(s)");
				((wxSplashScreen_php*) native_object)->references.AddReference(size0, "wxSplashScreen::wxSplashScreen at call with 7 argument(s)");
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0, *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6, (long) style0)\n");
				#endif

				native_object = new wxSplashScreen_php(*(wxBitmap*) object_pointer0_0, (long) splashStyle0, (int) milliseconds0, (wxWindow*) object_pointer0_3, (wxWindowID) id0, *(wxPoint*) object_pointer0_5, *(wxSize*) object_pointer0_6, (long) style0);

				native_object->references.Initialize();
				((wxSplashScreen_php*) native_object)->references.AddReference(bitmap0, "wxSplashScreen::wxSplashScreen at call with 8 argument(s)");
				((wxSplashScreen_php*) native_object)->references.AddReference(parent0, "wxSplashScreen::wxSplashScreen at call with 8 argument(s)");
				((wxSplashScreen_php*) native_object)->references.AddReference(pos0, "wxSplashScreen::wxSplashScreen at call with 8 argument(s)");
				((wxSplashScreen_php*) native_object)->references.AddReference(size0, "wxSplashScreen::wxSplashScreen at call with 8 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxSplashScreen*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxSplashScreen::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxTopLevelWindow_free(void *object TSRMLS_DC) 
{
    zo_wxTopLevelWindow* custom_object = (zo_wxTopLevelWindow*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxTopLevelWindow_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
	
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting object by calling destroy and delete\n");
			#endif
			
			custom_object->native_object->Destroy();
			delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxTopLevelWindow done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxTopLevelWindow_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxTopLevelWindow_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxTopLevelWindow* custom_object;
    custom_object = (zo_wxTopLevelWindow*) emalloc(sizeof(zo_wxTopLevelWindow));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxTopLevelWindow_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXTOPLEVELWINDOW_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxTopLevelWindow::wxTopLevelWindow()
   Default ctor. */
PHP_METHOD(php_wxTopLevelWindow, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* parent1 = 0;
	wxWindow* object_pointer1_0 = 0;
	long id1;
	char* title1;
	long title_len1;
	zval* pos1 = 0;
	wxPoint* object_pointer1_3 = 0;
	zval* size1 = 0;
	wxSize* object_pointer1_4 = 0;
	long style1;
	char* name1;
	long name_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1)\n");
		#endif

		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent1, &id1, &title1, &title_len1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxWindow*) argument_native_object;
					if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos1 TSRMLS_CC))->native_object;
					object_pointer1_3 = (wxPoint*) argument_native_object;
					if (!object_pointer1_3 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size1 TSRMLS_CC))->native_object;
					object_pointer1_4 = (wxSize*) argument_native_object;
					if (!object_pointer1_4 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxTopLevelWindow_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8))\n");
				#endif

				native_object = new wxTopLevelWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8));

				native_object->references.Initialize();
				((wxTopLevelWindow_php*) native_object)->references.AddReference(parent1, "wxTopLevelWindow::wxTopLevelWindow at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3)\n");
				#endif

				native_object = new wxTopLevelWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3);

				native_object->references.Initialize();
				((wxTopLevelWindow_php*) native_object)->references.AddReference(parent1, "wxTopLevelWindow::wxTopLevelWindow at call with 4 argument(s)");
				((wxTopLevelWindow_php*) native_object)->references.AddReference(pos1, "wxTopLevelWindow::wxTopLevelWindow at call with 4 argument(s)");
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4)\n");
				#endif

				native_object = new wxTopLevelWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4);

				native_object->references.Initialize();
				((wxTopLevelWindow_php*) native_object)->references.AddReference(parent1, "wxTopLevelWindow::wxTopLevelWindow at call with 5 argument(s)");
				((wxTopLevelWindow_php*) native_object)->references.AddReference(pos1, "wxTopLevelWindow::wxTopLevelWindow at call with 5 argument(s)");
				((wxTopLevelWindow_php*) native_object)->references.AddReference(size1, "wxTopLevelWindow::wxTopLevelWindow at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1)\n");
				#endif

				native_object = new wxTopLevelWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1);

				native_object->references.Initialize();
				((wxTopLevelWindow_php*) native_object)->references.AddReference(parent1, "wxTopLevelWindow::wxTopLevelWindow at call with 6 argument(s)");
				((wxTopLevelWindow_php*) native_object)->references.AddReference(pos1, "wxTopLevelWindow::wxTopLevelWindow at call with 6 argument(s)");
				((wxTopLevelWindow_php*) native_object)->references.AddReference(size1, "wxTopLevelWindow::wxTopLevelWindow at call with 6 argument(s)");
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8))\n");
				#endif

				native_object = new wxTopLevelWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, wxString(title1, wxConvUTF8), *(wxPoint*) object_pointer1_3, *(wxSize*) object_pointer1_4, (long) style1, wxString(name1, wxConvUTF8));

				native_object->references.Initialize();
				((wxTopLevelWindow_php*) native_object)->references.AddReference(parent1, "wxTopLevelWindow::wxTopLevelWindow at call with 7 argument(s)");
				((wxTopLevelWindow_php*) native_object)->references.AddReference(pos1, "wxTopLevelWindow::wxTopLevelWindow at call with 7 argument(s)");
				((wxTopLevelWindow_php*) native_object)->references.AddReference(size1, "wxTopLevelWindow::wxTopLevelWindow at call with 7 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxTopLevelWindow::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxTopLevelWindow::SetTitle(string title)
   Sets the window title. */
PHP_METHOD(php_wxTopLevelWindow, SetTitle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetTitle\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::SetTitle call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* title0;
	long title_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&title0, &title_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &title0, &title_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetTitle(wxString(title0, wxConvUTF8))\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetTitle(wxString(title0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::SetTitle\n");
	}
}
/* }}} */

/* {{{ proto  wxTopLevelWindow::Maximize(bool maximize)
   Maximizes or restores the window. */
PHP_METHOD(php_wxTopLevelWindow, Maximize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::Maximize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::Maximize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool maximize0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&maximize0)\n");
		#endif

		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &maximize0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::Maximize()\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->Maximize();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::Maximize(maximize0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->Maximize(maximize0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::Maximize\n");
	}
}
/* }}} */

/* {{{ proto string wxTopLevelWindow::GetTitle()
   Gets a string containing the window title. */
PHP_METHOD(php_wxTopLevelWindow, GetTitle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::GetTitle\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::GetTitle call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxTopLevelWindow::GetTitle().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxTopLevelWindow_php*)native_object)->GetTitle();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::GetTitle\n");
	}
}
/* }}} */

/* {{{ proto bool wxTopLevelWindow::ShowFullScreen(bool show, int style)
   Depending on the value of show parameter the window is either shown full screen or restored to its normal state. */
PHP_METHOD(php_wxTopLevelWindow, ShowFullScreen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::ShowFullScreen\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::ShowFullScreen call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool show0;
	long style0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b|l' (&show0, &style0)\n");
		#endif

		char parse_parameters_string[] = "b|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &show0, &style0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::ShowFullScreen(show0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->ShowFullScreen(show0));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::ShowFullScreen(show0, (long) style0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->ShowFullScreen(show0, (long) style0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::ShowFullScreen\n");
	}
}
/* }}} */

/* {{{ proto bool wxTopLevelWindow::IsFullScreen()
   Returns true if the window is in fullscreen mode. */
PHP_METHOD(php_wxTopLevelWindow, IsFullScreen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::IsFullScreen\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::IsFullScreen call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::IsFullScreen())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->IsFullScreen());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::IsFullScreen\n");
	}
}
/* }}} */

/* {{{ proto  wxTopLevelWindow::SetIcon(wxIcon icon)
   Sets the icon for this window. */
PHP_METHOD(php_wxTopLevelWindow, SetIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetIcon\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::SetIcon call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* icon0 = 0;
	wxIcon* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&icon0, php_wxIcon_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &icon0, php_wxIcon_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(icon0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIcon*) zend_object_store_get_object(icon0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxIcon*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'icon' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icon0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'icon' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetIcon(*(wxIcon*) object_pointer0_0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetIcon(*(wxIcon*) object_pointer0_0);

				references->AddReference(icon0, "wxTopLevelWindow::SetIcon at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::SetIcon\n");
	}
}
/* }}} */

/* {{{ proto bool wxTopLevelWindow::CanSetTransparent()
   Returns true if the platform supports making the window translucent. */
PHP_METHOD(php_wxTopLevelWindow, CanSetTransparent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::CanSetTransparent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::CanSetTransparent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::CanSetTransparent())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->CanSetTransparent());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::CanSetTransparent\n");
	}
}
/* }}} */

/* {{{ proto  wxTopLevelWindow::CentreOnScreen(int direction)
   Centres the window on screen. */
PHP_METHOD(php_wxTopLevelWindow, CentreOnScreen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::CentreOnScreen\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::CentreOnScreen call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long direction0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&direction0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &direction0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::CentreOnScreen()\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->CentreOnScreen();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::CentreOnScreen((int) direction0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->CentreOnScreen((int) direction0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::CentreOnScreen\n");
	}
}
/* }}} */

/* {{{ proto  wxTopLevelWindow::CenterOnScreen(int direction)
   A synonym for CentreOnScreen(). */
PHP_METHOD(php_wxTopLevelWindow, CenterOnScreen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::CenterOnScreen\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::CenterOnScreen call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long direction0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&direction0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &direction0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::CenterOnScreen()\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->CenterOnScreen();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::CenterOnScreen((int) direction0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->CenterOnScreen((int) direction0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::CenterOnScreen\n");
	}
}
/* }}} */

/* {{{ proto bool wxTopLevelWindow::Create(wxWindow &parent, int id, string title, wxPoint pos, wxSize size, int style, string name)
   Creates the top level window. */
PHP_METHOD(php_wxTopLevelWindow, Create)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::Create\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::Create call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxWindow* object_pointer0_0 = 0;
	long id0;
	char* title0;
	long title_len0;
	zval* pos0 = 0;
	wxPoint* object_pointer0_3 = 0;
	zval* size0 = 0;
	wxSize* object_pointer0_4 = 0;
	long style0;
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zls|OOls' (&parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0)\n");
		#endif

		char parse_parameters_string[] = "zls|OOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0, &id0, &title0, &title_len0, &pos0, php_wxPoint_entry, &size0, php_wxSize_entry, &style0, &name0, &name_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxPoint*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxSize*) argument_native_object;
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8)));

				references->AddReference(parent0, "wxTopLevelWindow::Create at call with 3 argument(s)");

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3));

				references->AddReference(parent0, "wxTopLevelWindow::Create at call with 4 argument(s)");
				references->AddReference(pos0, "wxTopLevelWindow::Create at call with 4 argument(s)");

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4));

				references->AddReference(parent0, "wxTopLevelWindow::Create at call with 5 argument(s)");
				references->AddReference(pos0, "wxTopLevelWindow::Create at call with 5 argument(s)");
				references->AddReference(size0, "wxTopLevelWindow::Create at call with 5 argument(s)");

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0));

				references->AddReference(parent0, "wxTopLevelWindow::Create at call with 6 argument(s)");
				references->AddReference(pos0, "wxTopLevelWindow::Create at call with 6 argument(s)");
				references->AddReference(size0, "wxTopLevelWindow::Create at call with 6 argument(s)");

				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->Create((wxWindow*) object_pointer0_0, (wxWindowID) id0, wxString(title0, wxConvUTF8), *(wxPoint*) object_pointer0_3, *(wxSize*) object_pointer0_4, (long) style0, wxString(name0, wxConvUTF8)));

				references->AddReference(parent0, "wxTopLevelWindow::Create at call with 7 argument(s)");
				references->AddReference(pos0, "wxTopLevelWindow::Create at call with 7 argument(s)");
				references->AddReference(size0, "wxTopLevelWindow::Create at call with 7 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::Create\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxTopLevelWindow::GetDefaultItem()
   Returns a pointer to the button which is the default for this window, or  NULL. */
PHP_METHOD(php_wxTopLevelWindow, GetDefaultItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::GetDefaultItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::GetDefaultItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::GetDefaultItem() to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxTopLevelWindow_php*)native_object)->GetDefaultItem();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxTopLevelWindow::GetDefaultItem at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::GetDefaultItem\n");
	}
}
/* }}} */

/* {{{ proto wxSize wxTopLevelWindow::GetDefaultSize()
   Get the default size for a new top level window. */
PHP_METHOD(php_wxTopLevelWindow, GetDefaultSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::GetDefaultSize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::GetDefaultSize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxTopLevelWindow::GetDefaultSize() to return new object\n\n");
				#endif

				wxSize value_to_return0;
				value_to_return0 = wxTopLevelWindow::GetDefaultSize();
				void* ptr = safe_emalloc(1, sizeof(wxSize_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				((wxSize_php*)ptr)->phpObj = return_value;
				zo_wxSize* zo0 = (zo_wxSize*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxSize_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::GetDefaultSize\n");
	}
}
/* }}} */

/* {{{ proto wxIcon wxTopLevelWindow::GetIcon()
   Returns the standard icon of the window. */
PHP_METHOD(php_wxTopLevelWindow, GetIcon)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::GetIcon\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::GetIcon call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::GetIcon() to return new object\n\n");
				#endif

				wxIcon value_to_return0;
				value_to_return0 = ((wxTopLevelWindow_php*)native_object)->GetIcon();
				((wxRefCounter *) value_to_return0.GetRefData())->IncRef();
				void* ptr = safe_emalloc(1, sizeof(wxIcon_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxIcon));
				object_init_ex(return_value, php_wxIcon_entry);
				((wxIcon_php*)ptr)->phpObj = return_value;
				zo_wxIcon* zo0 = (zo_wxIcon*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxIcon_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::GetIcon\n");
	}
}
/* }}} */

/* {{{ proto wxIconBundle wxTopLevelWindow::GetIcons()
   Returns all icons associated with the window, there will be none of them if neither SetIcon() nor SetIcons() had been called before. */
PHP_METHOD(php_wxTopLevelWindow, GetIcons)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::GetIcons\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::GetIcons call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::GetIcons() to return object reference\n\n");
				#endif

				wxIconBundle_php* value_to_return0;
				value_to_return0 = (wxIconBundle_php*) &((wxTopLevelWindow_php*)native_object)->GetIcons();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxIconBundle_entry);
					((zo_wxIconBundle*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxIconBundle_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxTopLevelWindow::GetIcons at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::GetIcons\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxTopLevelWindow::GetTmpDefaultItem() */
PHP_METHOD(php_wxTopLevelWindow, GetTmpDefaultItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::GetTmpDefaultItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::GetTmpDefaultItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::GetTmpDefaultItem() to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxTopLevelWindow_php*)native_object)->GetTmpDefaultItem();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxTopLevelWindow::GetTmpDefaultItem at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::GetTmpDefaultItem\n");
	}
}
/* }}} */

/* {{{ proto  wxTopLevelWindow::Iconize(bool iconize)
   Iconizes or restores the window. */
PHP_METHOD(php_wxTopLevelWindow, Iconize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::Iconize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::Iconize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool iconize0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&iconize0)\n");
		#endif

		char parse_parameters_string[] = "|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &iconize0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::Iconize()\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->Iconize();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::Iconize(iconize0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->Iconize(iconize0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::Iconize\n");
	}
}
/* }}} */

/* {{{ proto bool wxTopLevelWindow::IsActive()
   Returns true if this window is currently active, i.e. if the user is currently working with it. */
PHP_METHOD(php_wxTopLevelWindow, IsActive)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::IsActive\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::IsActive call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::IsActive())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->IsActive());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::IsActive\n");
	}
}
/* }}} */

/* {{{ proto bool wxTopLevelWindow::IsAlwaysMaximized()
   Returns true if this window is expected to be always maximized, either due to platform policy or due to local policy regarding particular class. */
PHP_METHOD(php_wxTopLevelWindow, IsAlwaysMaximized)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::IsAlwaysMaximized\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::IsAlwaysMaximized call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::IsAlwaysMaximized())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->IsAlwaysMaximized());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::IsAlwaysMaximized\n");
	}
}
/* }}} */

/* {{{ proto bool wxTopLevelWindow::IsIconized()
   Returns true if the window is iconized. */
PHP_METHOD(php_wxTopLevelWindow, IsIconized)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::IsIconized\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::IsIconized call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::IsIconized())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->IsIconized());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::IsIconized\n");
	}
}
/* }}} */

/* {{{ proto bool wxTopLevelWindow::IsMaximized()
   Returns true if the window is maximized. */
PHP_METHOD(php_wxTopLevelWindow, IsMaximized)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::IsMaximized\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::IsMaximized call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::IsMaximized())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->IsMaximized());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::IsMaximized\n");
	}
}
/* }}} */

/* {{{ proto bool wxTopLevelWindow::Layout()
   See wxWindow::SetAutoLayout(): when auto layout is on, this function gets called automatically when the window is resized. */
PHP_METHOD(php_wxTopLevelWindow, Layout)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::Layout\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::Layout call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::Layout())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->Layout());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::Layout\n");
	}
}
/* }}} */

/* {{{ proto  wxTopLevelWindow::RequestUserAttention(int flags)
   Use a system-dependent way to attract users attention to the window when it is in background. */
PHP_METHOD(php_wxTopLevelWindow, RequestUserAttention)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::RequestUserAttention\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::RequestUserAttention call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&flags0)\n");
		#endif

		char parse_parameters_string[] = "|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::RequestUserAttention()\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->RequestUserAttention();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::RequestUserAttention((int) flags0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->RequestUserAttention((int) flags0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::RequestUserAttention\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxTopLevelWindow::SetDefaultItem(wxWindow &win)
   Changes the default item for the panel, usually win is a button. */
PHP_METHOD(php_wxTopLevelWindow, SetDefaultItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetDefaultItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::SetDefaultItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* win0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&win0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'win' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'win' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetDefaultItem((wxWindow*) object_pointer0_0) to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) ((wxTopLevelWindow_php*)native_object)->SetDefaultItem((wxWindow*) object_pointer0_0);

				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return1;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return1 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxTopLevelWindow::SetDefaultItem at call with 1 argument(s)");
				}

				references->AddReference(win0, "wxTopLevelWindow::SetDefaultItem at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::SetDefaultItem\n");
	}
}
/* }}} */

/* {{{ proto  wxTopLevelWindow::SetIcons(wxIconBundle icons)
   Sets several icons of different sizes for this window: this allows to use different icons for different situations (e.g. */
PHP_METHOD(php_wxTopLevelWindow, SetIcons)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetIcons\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::SetIcons call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* icons0 = 0;
	wxIconBundle* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&icons0, php_wxIconBundle_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &icons0, php_wxIconBundle_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(icons0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxIconBundle*) zend_object_store_get_object(icons0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxIconBundle*) zend_object_store_get_object(icons0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxIconBundle*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'icons' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(icons0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'icons' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetIcons(*(wxIconBundle*) object_pointer0_0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetIcons(*(wxIconBundle*) object_pointer0_0);

				references->AddReference(icons0, "wxTopLevelWindow::SetIcons at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::SetIcons\n");
	}
}
/* }}} */

/* {{{ proto  wxTopLevelWindow::SetMaxSize(wxSize size)
   A simpler interface for setting the size hints than SetSizeHints(). */
PHP_METHOD(php_wxTopLevelWindow, SetMaxSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetMaxSize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::SetMaxSize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* size0 = 0;
	wxSize* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&size0, php_wxSize_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &size0, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxSize*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetMaxSize(*(wxSize*) object_pointer0_0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetMaxSize(*(wxSize*) object_pointer0_0);

				references->AddReference(size0, "wxTopLevelWindow::SetMaxSize at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::SetMaxSize\n");
	}
}
/* }}} */

/* {{{ proto  wxTopLevelWindow::SetMinSize(wxSize size)
   A simpler interface for setting the size hints than SetSizeHints(). */
PHP_METHOD(php_wxTopLevelWindow, SetMinSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetMinSize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::SetMinSize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* size0 = 0;
	wxSize* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&size0, php_wxSize_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &size0, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(size0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxSize*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetMinSize(*(wxSize*) object_pointer0_0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetMinSize(*(wxSize*) object_pointer0_0);

				references->AddReference(size0, "wxTopLevelWindow::SetMinSize at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::SetMinSize\n");
	}
}
/* }}} */

/* {{{ proto  wxTopLevelWindow::SetSizeHints(int minW, int minH, int maxW, int maxH, int incW, int incH)
   Allows specification of minimum and maximum window sizes, and window size increments. */
PHP_METHOD(php_wxTopLevelWindow, SetSizeHints)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetSizeHints\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::SetSizeHints call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long minW0;
	long minH0;
	long maxW0;
	long maxH0;
	long incW0;
	long incH0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* minSize1 = 0;
	wxSize* object_pointer1_0 = 0;
	zval* maxSize1 = 0;
	wxSize* object_pointer1_1 = 0;
	zval* incSize1 = 0;
	wxSize* object_pointer1_2 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll|llll' (&minW0, &minH0, &maxW0, &maxH0, &incW0, &incH0)\n");
		#endif

		char parse_parameters_string[] = "ll|llll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &minW0, &minH0, &maxW0, &maxH0, &incW0, &incH0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 1  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O|OO' (&minSize1, php_wxSize_entry, &maxSize1, php_wxSize_entry, &incSize1, php_wxSize_entry)\n");
		#endif

		char parse_parameters_string[] = "O|OO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &minSize1, php_wxSize_entry, &maxSize1, php_wxSize_entry, &incSize1, php_wxSize_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(minSize1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(minSize1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(minSize1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxSize*) argument_native_object;
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter 'minSize' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(minSize1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'minSize' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(maxSize1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(maxSize1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(maxSize1 TSRMLS_CC))->native_object;
					object_pointer1_1 = (wxSize*) argument_native_object;
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter 'maxSize' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(maxSize1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'maxSize' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(incSize1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(incSize1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(incSize1 TSRMLS_CC))->native_object;
					object_pointer1_2 = (wxSize*) argument_native_object;
					if (!object_pointer1_2 )
					{
						zend_error(E_ERROR, "Parameter 'incSize' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(incSize1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'incSize' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints((int) minW0, (int) minH0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetSizeHints((int) minW0, (int) minH0);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints((int) minW0, (int) minH0, (int) maxW0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetSizeHints((int) minW0, (int) minH0, (int) maxW0);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints((int) minW0, (int) minH0, (int) maxW0, (int) maxH0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetSizeHints((int) minW0, (int) minH0, (int) maxW0, (int) maxH0);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints((int) minW0, (int) minH0, (int) maxW0, (int) maxH0, (int) incW0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetSizeHints((int) minW0, (int) minH0, (int) maxW0, (int) maxH0, (int) incW0);


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints((int) minW0, (int) minH0, (int) maxW0, (int) maxH0, (int) incW0, (int) incH0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetSizeHints((int) minW0, (int) minH0, (int) maxW0, (int) maxH0, (int) incW0, (int) incH0);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints(*(wxSize*) object_pointer1_0)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetSizeHints(*(wxSize*) object_pointer1_0);

				references->AddReference(minSize1, "wxTopLevelWindow::SetSizeHints at call with 1 argument(s)");

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints(*(wxSize*) object_pointer1_0, *(wxSize*) object_pointer1_1)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetSizeHints(*(wxSize*) object_pointer1_0, *(wxSize*) object_pointer1_1);

				references->AddReference(minSize1, "wxTopLevelWindow::SetSizeHints at call with 2 argument(s)");
				references->AddReference(maxSize1, "wxTopLevelWindow::SetSizeHints at call with 2 argument(s)");

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetSizeHints(*(wxSize*) object_pointer1_0, *(wxSize*) object_pointer1_1, *(wxSize*) object_pointer1_2)\n\n");
				#endif

				((wxTopLevelWindow_php*)native_object)->SetSizeHints(*(wxSize*) object_pointer1_0, *(wxSize*) object_pointer1_1, *(wxSize*) object_pointer1_2);

				references->AddReference(minSize1, "wxTopLevelWindow::SetSizeHints at call with 3 argument(s)");
				references->AddReference(maxSize1, "wxTopLevelWindow::SetSizeHints at call with 3 argument(s)");
				references->AddReference(incSize1, "wxTopLevelWindow::SetSizeHints at call with 3 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::SetSizeHints\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxTopLevelWindow::SetTmpDefaultItem(wxWindow &win) */
PHP_METHOD(php_wxTopLevelWindow, SetTmpDefaultItem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetTmpDefaultItem\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::SetTmpDefaultItem call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* win0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&win0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &win0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(win0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'win' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'win' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxTopLevelWindow::SetTmpDefaultItem((wxWindow*) object_pointer0_0) to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return1;
				value_to_return1 = (wxWindow_php*) ((wxTopLevelWindow_php*)native_object)->SetTmpDefaultItem((wxWindow*) object_pointer0_0);

				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return1;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return1 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxTopLevelWindow::SetTmpDefaultItem at call with 1 argument(s)");
				}

				references->AddReference(win0, "wxTopLevelWindow::SetTmpDefaultItem at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::SetTmpDefaultItem\n");
	}
}
/* }}} */

/* {{{ proto bool wxTopLevelWindow::SetTransparent(int alpha)
   If the platform supports it will set the window to be translucent. */
PHP_METHOD(php_wxTopLevelWindow, SetTransparent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::SetTransparent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::SetTransparent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long alpha0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&alpha0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &alpha0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::SetTransparent((wxByte) alpha0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->SetTransparent((wxByte) alpha0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::SetTransparent\n");
	}
}
/* }}} */

/* {{{ proto bool wxTopLevelWindow::ShouldPreventAppExit()
   This virtual function is not meant to be called directly but can be overridden to return false (it returns true by default) to allow the application to close even if this, presumably not very important, window is still opened. */
PHP_METHOD(php_wxTopLevelWindow, ShouldPreventAppExit)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxTopLevelWindow::ShouldPreventAppExit\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxTopLevelWindow* current_object;
	wxphp_object_type current_object_type;
	wxTopLevelWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxTopLevelWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxTopLevelWindow::ShouldPreventAppExit call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXTOPLEVELWINDOW_TYPE){
				references = &((wxTopLevelWindow_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFRAME_TYPE) && (!reference_type_found)){
				references = &((wxFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSPLASHSCREEN_TYPE) && (!reference_type_found)){
				references = &((wxSplashScreen_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDICHILDFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIChildFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMDIPARENTFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMDIParentFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMINIFRAME_TYPE) && (!reference_type_found)){
				references = &((wxMiniFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPREVIEWFRAME_TYPE) && (!reference_type_found)){
				references = &((wxPreviewFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLHELPFRAME_TYPE) && (!reference_type_found)){
				references = &((wxHtmlHelpFrame_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXTEXTENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxTextEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPASSWORDENTRYDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPasswordEntryDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXMESSAGEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxMessageDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFINDREPLACEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFindReplaceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXDIRDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxDirDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSYMBOLPICKERDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSymbolPickerDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROPERTYSHEETDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxPropertySheetDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXWIZARD_TYPE) && (!reference_type_found)){
				references = &((wxWizard_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXCOLOURDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxColourDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFILEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFileDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXFONTDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxFontDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXSINGLECHOICEDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxSingleChoiceDialog_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXGENERICPROGRESSDIALOG_TYPE) && (!reference_type_found)){
				references = &((wxGenericProgressDialog_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxTopLevelWindow::ShouldPreventAppExit())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxTopLevelWindow_php*)native_object)->ShouldPreventAppExit());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxTopLevelWindow::ShouldPreventAppExit\n");
	}
}
/* }}} */

