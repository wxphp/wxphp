/*
 * @author Mário Soares
 * @contributors Jefferson González
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "appmanagement.h"
#include "aui.h"
#include "bookctrl.h"
#include "cfg.h"
#include "cmndlg.h"
#include "containers.h"
#include "ctrl.h"
#include "data.h"
#include "dc.h"
#include "dnd.h"
#include "docview.h"
#include "dvc.h"
#include "events.h"
#include "file.h"
#include "gdi.h"
#include "grid.h"
#include "help.h"
#include "html.h"
#include "logging.h"
#include "managedwnd.h"
#include "media.h"
#include "menus.h"
#include "misc.h"
#include "miscwnd.h"
#include "net.h"
#include "pickers.h"
#include "printing.h"
#include "ribbon.h"
#include "richtext.h"
#include "rtti.h"
#include "stc.h"
#include "streams.h"
#include "threading.h"
#include "validator.h"
#include "vfs.h"
#include "webview.h"
#include "winlayout.h"
#include "xml.h"
#include "xrc.h"
#include "others.h"


BEGIN_EXTERN_C()
void php_wxHtmlRenderingStyle_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlRenderingStyle* custom_object = (zo_wxHtmlRenderingStyle*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlRenderingStyle_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlRenderingStyle done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlRenderingStyle_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlRenderingStyle_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlRenderingStyle* custom_object;
    custom_object = (zo_wxHtmlRenderingStyle*) emalloc(sizeof(zo_wxHtmlRenderingStyle));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlRenderingStyle_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLRENDERINGSTYLE_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxColour wxHtmlRenderingStyle::GetSelectedTextBgColour(wxColour clr)
   Returns the colour to use for the selected text's background. */
wxColour wxHtmlRenderingStyle_php::GetSelectedTextBgColour(const wxColour& clr)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxHtmlRenderingStyle::GetSelectedTextBgColour\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetSelectedTextBgColour", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxColour_entry);
	((zo_wxColour*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxColour_php*) &clr;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "GetSelectedTextBgColour", 23, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxHtmlRenderingStyle::GetSelectedTextBgColour'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	if(Z_TYPE_P(return_value) == IS_OBJECT)
	{
		return_object = (void*) ((zo_wxColour*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object;
	}

	//Threat it as a normal object on the calling function and not a php user space intiialized one
	((zo_wxColour*) zend_object_store_get_object(return_value TSRMLS_CC))->is_user_initialized = 0;
	wxColour_php* var = (wxColour_php*) return_object;
	var->references.UnInitialize();

	return *(wxColour*) return_object;
	
}
/* }}} */

/* {{{ proto wxColour wxHtmlRenderingStyle::GetSelectedTextColour(wxColour clr)
   Returns the colour to use for the selected text. */
wxColour wxHtmlRenderingStyle_php::GetSelectedTextColour(const wxColour& clr)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxHtmlRenderingStyle::GetSelectedTextColour\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetSelectedTextColour", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxColour_entry);
	((zo_wxColour*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxColour_php*) &clr;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "GetSelectedTextColour", 21, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxHtmlRenderingStyle::GetSelectedTextColour'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	if(Z_TYPE_P(return_value) == IS_OBJECT)
	{
		return_object = (void*) ((zo_wxColour*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object;
	}

	//Threat it as a normal object on the calling function and not a php user space intiialized one
	((zo_wxColour*) zend_object_store_get_object(return_value TSRMLS_CC))->is_user_initialized = 0;
	wxColour_php* var = (wxColour_php*) return_object;
	var->references.UnInitialize();

	return *(wxColour*) return_object;
	
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlRenderingInfo_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlRenderingInfo* custom_object = (zo_wxHtmlRenderingInfo*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlRenderingInfo_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlRenderingInfo done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlRenderingInfo_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlRenderingInfo_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlRenderingInfo* custom_object;
    custom_object = (zo_wxHtmlRenderingInfo*) emalloc(sizeof(zo_wxHtmlRenderingInfo));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlRenderingInfo_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLRENDERINGINFO_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxHtmlRenderingStyle wxHtmlRenderingInfo::GetStyle()
   Accessors. */
PHP_METHOD(php_wxHtmlRenderingInfo, GetStyle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlRenderingInfo::GetStyle\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlRenderingInfo* current_object;
	wxphp_object_type current_object_type;
	wxHtmlRenderingInfo_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlRenderingInfo*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlRenderingInfo::GetStyle call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLRENDERINGINFO_TYPE){
				references = &((wxHtmlRenderingInfo_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlRenderingInfo::GetStyle() to return object reference\n\n");
				#endif

				wxHtmlRenderingStyle_php* value_to_return0;
				value_to_return0 = (wxHtmlRenderingStyle_php*) &((wxHtmlRenderingInfo_php*)native_object)->GetStyle();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxHtmlRenderingStyle_entry);
					((zo_wxHtmlRenderingStyle*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlRenderingStyle_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxHtmlRenderingInfo::GetStyle at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlRenderingInfo::GetStyle\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlRenderingInfo::SetStyle(wxHtmlRenderingStyle &style)
   Accessors. */
PHP_METHOD(php_wxHtmlRenderingInfo, SetStyle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlRenderingInfo::SetStyle\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlRenderingInfo* current_object;
	wxphp_object_type current_object_type;
	wxHtmlRenderingInfo_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlRenderingInfo*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlRenderingInfo::SetStyle call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLRENDERINGINFO_TYPE){
				references = &((wxHtmlRenderingInfo_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* style0 = 0;
	wxHtmlRenderingStyle* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&style0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &style0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(style0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlRenderingStyle*) zend_object_store_get_object(style0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlRenderingStyle*) zend_object_store_get_object(style0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlRenderingStyle*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXHTMLRENDERINGSTYLE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'style' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(style0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'style' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlRenderingInfo::SetStyle((wxHtmlRenderingStyle*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlRenderingInfo_php*)native_object)->SetStyle((wxHtmlRenderingStyle*) object_pointer0_0);

				references->AddReference(style0, "wxHtmlRenderingInfo::SetStyle at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlRenderingInfo::SetStyle\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlRenderingInfo::wxHtmlRenderingInfo()
   Default ctor. */
PHP_METHOD(php_wxHtmlRenderingInfo, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlRenderingInfo::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlRenderingInfo* current_object;
	wxHtmlRenderingInfo_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxHtmlRenderingInfo_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlRenderingInfo*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlRenderingInfo::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlCell_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlCell* custom_object = (zo_wxHtmlCell*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlCell_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlCell done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlCell_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlCell_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlCell* custom_object;
    custom_object = (zo_wxHtmlCell*) emalloc(sizeof(zo_wxHtmlCell));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlCell_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLCELL_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxHtmlCell::GetDescent()
   Returns descent value of the cell (m_Descent member). */
PHP_METHOD(php_wxHtmlCell, GetDescent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::GetDescent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::GetDescent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlCell::GetDescent())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxHtmlCell_php*)native_object)->GetDescent());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::GetDescent\n");
	}
}
/* }}} */

/* {{{ proto wxHtmlCell wxHtmlCell::GetFirstChild()
   Returns pointer to the first cell in the list. */
PHP_METHOD(php_wxHtmlCell, GetFirstChild)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::GetFirstChild\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::GetFirstChild call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::GetFirstChild() to return object pointer\n\n");
				#endif

				wxHtmlCell_php* value_to_return0;
				value_to_return0 = (wxHtmlCell_php*) ((wxHtmlCell_php*)native_object)->GetFirstChild();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlCell_entry);
					((zo_wxHtmlCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlCell_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlCell::GetFirstChild at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::GetFirstChild\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlCell::GetHeight()
   Returns height of the cell (m_Height member). */
PHP_METHOD(php_wxHtmlCell, GetHeight)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::GetHeight\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::GetHeight call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlCell::GetHeight())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxHtmlCell_php*)native_object)->GetHeight());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::GetHeight\n");
	}
}
/* }}} */

/* {{{ proto string wxHtmlCell::GetId()
   Returns unique cell identifier if there is any, the empty string otherwise. */
PHP_METHOD(php_wxHtmlCell, GetId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::GetId\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::GetId call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlCell::GetId().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxHtmlCell_php*)native_object)->GetId();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::GetId\n");
	}
}
/* }}} */

/* {{{ proto wxHtmlLinkInfo wxHtmlCell::GetLink(int x, int y)
   Returns hypertext link if associated with this cell or NULL otherwise. */
PHP_METHOD(php_wxHtmlCell, GetLink)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::GetLink\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::GetLink call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (&x0, &y0)\n");
		#endif

		char parse_parameters_string[] = "|ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::GetLink() to return object pointer\n\n");
				#endif

				wxHtmlLinkInfo_php* value_to_return0;
				value_to_return0 = (wxHtmlLinkInfo_php*) ((wxHtmlCell_php*)native_object)->GetLink();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlLinkInfo_entry);
					((zo_wxHtmlLinkInfo*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlLinkInfo_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlCell::GetLink at call with 0 argument(s)");
				}


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::GetLink((int) x0) to return object pointer\n\n");
				#endif

				wxHtmlLinkInfo_php* value_to_return1;
				value_to_return1 = (wxHtmlLinkInfo_php*) ((wxHtmlCell_php*)native_object)->GetLink((int) x0);

				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlLinkInfo_entry);
					((zo_wxHtmlLinkInfo*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlLinkInfo_php*) value_to_return1;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return1 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlCell::GetLink at call with 1 argument(s)");
				}


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::GetLink((int) x0, (int) y0) to return object pointer\n\n");
				#endif

				wxHtmlLinkInfo_php* value_to_return2;
				value_to_return2 = (wxHtmlLinkInfo_php*) ((wxHtmlCell_php*)native_object)->GetLink((int) x0, (int) y0);

				if(value_to_return2 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return2->references.IsUserInitialized()){
					if(value_to_return2->phpObj != NULL){
						*return_value = *value_to_return2->phpObj;
						zval_add_ref(&value_to_return2->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlLinkInfo_entry);
					((zo_wxHtmlLinkInfo*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlLinkInfo_php*) value_to_return2;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return2 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlCell::GetLink at call with 2 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::GetLink\n");
	}
}
/* }}} */

/* {{{ proto wxHtmlCell wxHtmlCell::GetNext()
   Returns pointer to the next cell in list (see htmlcell.h if you're interested in details). */
PHP_METHOD(php_wxHtmlCell, GetNext)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::GetNext\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::GetNext call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::GetNext() to return object pointer\n\n");
				#endif

				wxHtmlCell_php* value_to_return0;
				value_to_return0 = (wxHtmlCell_php*) ((wxHtmlCell_php*)native_object)->GetNext();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlCell_entry);
					((zo_wxHtmlCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlCell_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlCell::GetNext at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::GetNext\n");
	}
}
/* }}} */

/* {{{ proto wxHtmlContainerCell wxHtmlCell::GetParent()
   Returns pointer to parent container. */
PHP_METHOD(php_wxHtmlCell, GetParent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::GetParent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::GetParent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::GetParent() to return object pointer\n\n");
				#endif

				wxHtmlContainerCell_php* value_to_return0;
				value_to_return0 = (wxHtmlContainerCell_php*) ((wxHtmlCell_php*)native_object)->GetParent();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlContainerCell_entry);
					((zo_wxHtmlContainerCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlContainerCell_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlCell::GetParent at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::GetParent\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlCell::GetPosX()
   Returns X position within parent (the value is relative to parent's upper left corner). */
PHP_METHOD(php_wxHtmlCell, GetPosX)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::GetPosX\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::GetPosX call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlCell::GetPosX())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxHtmlCell_php*)native_object)->GetPosX());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::GetPosX\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlCell::GetPosY()
   Returns Y position within parent (the value is relative to parent's upper left corner). */
PHP_METHOD(php_wxHtmlCell, GetPosY)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::GetPosY\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::GetPosY call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlCell::GetPosY())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxHtmlCell_php*)native_object)->GetPosY());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::GetPosY\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlCell::GetWidth()
   Returns width of the cell (m_Width member). */
PHP_METHOD(php_wxHtmlCell, GetWidth)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::GetWidth\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::GetWidth call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlCell::GetWidth())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxHtmlCell_php*)native_object)->GetWidth());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::GetWidth\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlCell::Layout(int w)
   Layouts the cell. */
PHP_METHOD(php_wxHtmlCell, Layout)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::Layout\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::Layout call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long w0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&w0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &w0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::Layout((int) w0)\n\n");
				#endif

				((wxHtmlCell_php*)native_object)->Layout((int) w0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::Layout\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlCell::SetId(string id)
   Sets unique cell identifier. */
PHP_METHOD(php_wxHtmlCell, SetId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::SetId\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::SetId call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* id0;
	long id_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&id0, &id_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0, &id_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::SetId(wxString(id0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlCell_php*)native_object)->SetId(wxString(id0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::SetId\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlCell::SetLink(wxHtmlLinkInfo link)
   Sets the hypertext link associated with this cell. */
PHP_METHOD(php_wxHtmlCell, SetLink)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::SetLink\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::SetLink call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* link0 = 0;
	wxHtmlLinkInfo* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&link0, php_wxHtmlLinkInfo_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &link0, php_wxHtmlLinkInfo_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(link0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlLinkInfo*) zend_object_store_get_object(link0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlLinkInfo*) zend_object_store_get_object(link0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlLinkInfo*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'link' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(link0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'link' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::SetLink(*(wxHtmlLinkInfo*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlCell_php*)native_object)->SetLink(*(wxHtmlLinkInfo*) object_pointer0_0);

				references->AddReference(link0, "wxHtmlCell::SetLink at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::SetLink\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlCell::SetNext(wxHtmlCell &cell)
   Sets the next cell in the list. */
PHP_METHOD(php_wxHtmlCell, SetNext)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::SetNext\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::SetNext call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* cell0 = 0;
	wxHtmlCell* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&cell0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cell0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cell0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlCell*) zend_object_store_get_object(cell0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlCell*) zend_object_store_get_object(cell0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlCell*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'cell' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cell0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cell' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::SetNext((wxHtmlCell*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlCell_php*)native_object)->SetNext((wxHtmlCell*) object_pointer0_0);

				references->AddReference(cell0, "wxHtmlCell::SetNext at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::SetNext\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlCell::SetParent(wxHtmlContainerCell &p)
   Sets parent container of this cell. */
PHP_METHOD(php_wxHtmlCell, SetParent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::SetParent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::SetParent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* p0 = 0;
	wxHtmlContainerCell* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&p0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &p0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(p0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlContainerCell*) zend_object_store_get_object(p0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlContainerCell*) zend_object_store_get_object(p0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlContainerCell*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXHTMLCONTAINERCELL_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'p' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(p0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'p' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::SetParent((wxHtmlContainerCell*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlCell_php*)native_object)->SetParent((wxHtmlContainerCell*) object_pointer0_0);

				references->AddReference(p0, "wxHtmlCell::SetParent at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::SetParent\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlCell::SetPos(int x, int y)
   Sets the cell's position within parent container. */
PHP_METHOD(php_wxHtmlCell, SetPos)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::SetPos\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::SetPos call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&x0, &y0)\n");
		#endif

		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::SetPos((int) x0, (int) y0)\n\n");
				#endif

				((wxHtmlCell_php*)native_object)->SetPos((int) x0, (int) y0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::SetPos\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlCell::wxHtmlCell()
   Constructor. */
PHP_METHOD(php_wxHtmlCell, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxHtmlCell_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlCell::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto wxHtmlCell wxHtmlCell::Find(int condition, void param)
   Returns pointer to itself if this cell matches condition (or if any of the cells following in the list matches), NULL otherwise. */
PHP_METHOD(php_wxHtmlCell, Find)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCell::Find\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCell::Find call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELL_TYPE){
				references = &((wxHtmlCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLCOLOURCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlColourCell_php*)native_object)->references;
				reference_type_found = true;
			}
			if((current_object_type == PHP_WXHTMLWIDGETCELL_TYPE) && (!reference_type_found)){
				references = &((wxHtmlWidgetCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long condition0;
	char* param0;
	long param_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ls' (&condition0, &param0, &param_len0)\n");
		#endif

		char parse_parameters_string[] = "ls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &condition0, &param0, &param_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCell::Find((int) condition0, (const void*) param0) to return object pointer\n\n");
				#endif

				wxHtmlCell_php* value_to_return2;
				value_to_return2 = (wxHtmlCell_php*) ((wxHtmlCell_php*)native_object)->Find((int) condition0, (const void*) param0);

				if(value_to_return2 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return2->references.IsUserInitialized()){
					if(value_to_return2->phpObj != NULL){
						*return_value = *value_to_return2->phpObj;
						zval_add_ref(&value_to_return2->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlCell_entry);
					((zo_wxHtmlCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlCell_php*) value_to_return2;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return2 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlCell::Find at call with 2 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCell::Find\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlContainerCell_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlContainerCell* custom_object = (zo_wxHtmlContainerCell*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlContainerCell_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlContainerCell done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlContainerCell_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlContainerCell_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlContainerCell* custom_object;
    custom_object = (zo_wxHtmlContainerCell*) emalloc(sizeof(zo_wxHtmlContainerCell));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlContainerCell_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLCONTAINERCELL_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxHtmlContainerCell::wxHtmlContainerCell(wxHtmlContainerCell &parent)
   Constructor. */
PHP_METHOD(php_wxHtmlContainerCell, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* parent0 = 0;
	wxHtmlContainerCell* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&parent0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlContainerCell*) zend_object_store_get_object(parent0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlContainerCell*) zend_object_store_get_object(parent0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlContainerCell*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXHTMLCONTAINERCELL_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxHtmlContainerCell*) object_pointer0_0)\n");
				#endif

				native_object = new wxHtmlContainerCell_php((wxHtmlContainerCell*) object_pointer0_0);

				native_object->references.Initialize();
				((wxHtmlContainerCell_php*) native_object)->references.AddReference(parent0, "wxHtmlContainerCell::wxHtmlContainerCell at call with 1 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlContainerCell::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxHtmlContainerCell::SetWidthFloat(wxHtmlTag tag, float pixel_scale)
   Sets floating width adjustment. */
PHP_METHOD(php_wxHtmlContainerCell, SetWidthFloat)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::SetWidthFloat\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::SetWidthFloat call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* tag0 = 0;
	wxHtmlTag* object_pointer0_0 = 0;
	double pixel_scale0;
	bool overload0_called = false;
	//Parameters for overload 1
	long w1;
	long units1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O|d' (&tag0, php_wxHtmlTag_entry, &pixel_scale0)\n");
		#endif

		char parse_parameters_string[] = "O|d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &tag0, php_wxHtmlTag_entry, &pixel_scale0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(tag0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlTag*) zend_object_store_get_object(tag0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlTag*) zend_object_store_get_object(tag0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlTag*) argument_native_object;
					if (!object_pointer0_0 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(tag0) != IS_NULL)
				{
					goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&w1, &units1)\n");
		#endif

		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &w1, &units1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetWidthFloat(*(wxHtmlTag*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetWidthFloat(*(wxHtmlTag*) object_pointer0_0);

				references->AddReference(tag0, "wxHtmlContainerCell::SetWidthFloat at call with 1 argument(s)");

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetWidthFloat(*(wxHtmlTag*) object_pointer0_0, pixel_scale0)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetWidthFloat(*(wxHtmlTag*) object_pointer0_0, pixel_scale0);

				references->AddReference(tag0, "wxHtmlContainerCell::SetWidthFloat at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetWidthFloat((int) w1, (int) units1)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetWidthFloat((int) w1, (int) units1);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::SetWidthFloat\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlContainerCell::SetMinHeight(int h, int align)
   Sets minimal height of the container. */
PHP_METHOD(php_wxHtmlContainerCell, SetMinHeight)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::SetMinHeight\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::SetMinHeight call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long h0;
	long align0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l|l' (&h0, &align0)\n");
		#endif

		char parse_parameters_string[] = "l|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &h0, &align0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetMinHeight((int) h0)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetMinHeight((int) h0);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetMinHeight((int) h0, (int) align0)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetMinHeight((int) h0, (int) align0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::SetMinHeight\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlContainerCell::SetIndent(int i, int what, int units)
   Sets the indentation (free space between borders of container and subcells). */
PHP_METHOD(php_wxHtmlContainerCell, SetIndent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::SetIndent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::SetIndent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long i0;
	long what0;
	long units0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll|l' (&i0, &what0, &units0)\n");
		#endif

		char parse_parameters_string[] = "ll|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &i0, &what0, &units0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetIndent((int) i0, (int) what0)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetIndent((int) i0, (int) what0);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetIndent((int) i0, (int) what0, (int) units0)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetIndent((int) i0, (int) what0, (int) units0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::SetIndent\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlContainerCell::SetBorder(wxColour clr1, wxColour clr2, int border)
   Sets the border (frame) colours. */
PHP_METHOD(php_wxHtmlContainerCell, SetBorder)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::SetBorder\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::SetBorder call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* clr10 = 0;
	wxColour* object_pointer0_0 = 0;
	zval* clr20 = 0;
	wxColour* object_pointer0_1 = 0;
	long border0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'OO|l' (&clr10, php_wxColour_entry, &clr20, php_wxColour_entry, &border0)\n");
		#endif

		char parse_parameters_string[] = "OO|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &clr10, php_wxColour_entry, &clr20, php_wxColour_entry, &border0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(clr10) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(clr10 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(clr10 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxColour*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'clr1' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(clr10) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'clr1' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(clr20) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(clr20 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(clr20 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxColour*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'clr2' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(clr20) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'clr2' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetBorder(*(wxColour*) object_pointer0_0, *(wxColour*) object_pointer0_1)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetBorder(*(wxColour*) object_pointer0_0, *(wxColour*) object_pointer0_1);

				references->AddReference(clr10, "wxHtmlContainerCell::SetBorder at call with 2 argument(s)");
				references->AddReference(clr20, "wxHtmlContainerCell::SetBorder at call with 2 argument(s)");

				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetBorder(*(wxColour*) object_pointer0_0, *(wxColour*) object_pointer0_1, (int) border0)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetBorder(*(wxColour*) object_pointer0_0, *(wxColour*) object_pointer0_1, (int) border0);

				references->AddReference(clr10, "wxHtmlContainerCell::SetBorder at call with 3 argument(s)");
				references->AddReference(clr20, "wxHtmlContainerCell::SetBorder at call with 3 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::SetBorder\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlContainerCell::SetBackgroundColour(wxColour clr)
   Sets the background colour for this container. */
PHP_METHOD(php_wxHtmlContainerCell, SetBackgroundColour)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::SetBackgroundColour\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::SetBackgroundColour call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* clr0 = 0;
	wxColour* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&clr0, php_wxColour_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &clr0, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(clr0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(clr0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(clr0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxColour*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'clr' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(clr0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'clr' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetBackgroundColour(*(wxColour*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetBackgroundColour(*(wxColour*) object_pointer0_0);

				references->AddReference(clr0, "wxHtmlContainerCell::SetBackgroundColour at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::SetBackgroundColour\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlContainerCell::SetAlignVer(int al)
   Sets the container's vertical alignment. */
PHP_METHOD(php_wxHtmlContainerCell, SetAlignVer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::SetAlignVer\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::SetAlignVer call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long al0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&al0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &al0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetAlignVer((int) al0)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetAlignVer((int) al0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::SetAlignVer\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlContainerCell::SetAlignHor(int al)
   Sets the container's horizontal alignment. */
PHP_METHOD(php_wxHtmlContainerCell, SetAlignHor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::SetAlignHor\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::SetAlignHor call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long al0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&al0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &al0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetAlignHor((int) al0)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetAlignHor((int) al0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::SetAlignHor\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlContainerCell::SetAlign(wxHtmlTag tag)
   Sets the container's alignment (both horizontal and vertical) according to the values stored in tag. */
PHP_METHOD(php_wxHtmlContainerCell, SetAlign)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::SetAlign\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::SetAlign call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* tag0 = 0;
	wxHtmlTag* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&tag0, php_wxHtmlTag_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &tag0, php_wxHtmlTag_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(tag0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlTag*) zend_object_store_get_object(tag0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlTag*) zend_object_store_get_object(tag0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlTag*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'tag' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(tag0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'tag' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::SetAlign(*(wxHtmlTag*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->SetAlign(*(wxHtmlTag*) object_pointer0_0);

				references->AddReference(tag0, "wxHtmlContainerCell::SetAlign at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::SetAlign\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlContainerCell::InsertCell(wxHtmlCell &cell)
   Inserts a new cell into the container. */
PHP_METHOD(php_wxHtmlContainerCell, InsertCell)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::InsertCell\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::InsertCell call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* cell0 = 0;
	wxHtmlCell* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&cell0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cell0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cell0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlCell*) zend_object_store_get_object(cell0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlCell*) zend_object_store_get_object(cell0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlCell*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'cell' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cell0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cell' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::InsertCell((wxHtmlCell*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlContainerCell_php*)native_object)->InsertCell((wxHtmlCell*) object_pointer0_0);

				references->AddReference(cell0, "wxHtmlContainerCell::InsertCell at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::InsertCell\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlContainerCell::GetIndentUnits(int ind)
   Returns the units of indentation for ind where ind is one of the wxHTML_INDENT_* constants. */
PHP_METHOD(php_wxHtmlContainerCell, GetIndentUnits)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::GetIndentUnits\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::GetIndentUnits call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long ind0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&ind0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &ind0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlContainerCell::GetIndentUnits((int) ind0))\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxHtmlContainerCell_php*)native_object)->GetIndentUnits((int) ind0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::GetIndentUnits\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlContainerCell::GetIndent(int ind)
   Returns the indentation. */
PHP_METHOD(php_wxHtmlContainerCell, GetIndent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::GetIndent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::GetIndent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long ind0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&ind0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &ind0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlContainerCell::GetIndent((int) ind0))\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxHtmlContainerCell_php*)native_object)->GetIndent((int) ind0));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::GetIndent\n");
	}
}
/* }}} */

/* {{{ proto wxColour wxHtmlContainerCell::GetBackgroundColour()
   Returns the background colour of the container or wxNullColour if no background colour is set. */
PHP_METHOD(php_wxHtmlContainerCell, GetBackgroundColour)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::GetBackgroundColour\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::GetBackgroundColour call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlContainerCell::GetBackgroundColour() to return new object\n\n");
				#endif

				wxColour value_to_return0;
				value_to_return0 = ((wxHtmlContainerCell_php*)native_object)->GetBackgroundColour();
				((wxRefCounter *) value_to_return0.GetRefData())->IncRef();
				void* ptr = safe_emalloc(1, sizeof(wxColour_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxColour));
				object_init_ex(return_value, php_wxColour_entry);
				((wxColour_php*)ptr)->phpObj = return_value;
				zo_wxColour* zo0 = (zo_wxColour*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxColour_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::GetBackgroundColour\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlContainerCell::GetAlignVer()
   Returns container's vertical alignment. */
PHP_METHOD(php_wxHtmlContainerCell, GetAlignVer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::GetAlignVer\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::GetAlignVer call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlContainerCell::GetAlignVer())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxHtmlContainerCell_php*)native_object)->GetAlignVer());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::GetAlignVer\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlContainerCell::GetAlignHor()
   Returns container's horizontal alignment. */
PHP_METHOD(php_wxHtmlContainerCell, GetAlignHor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlContainerCell::GetAlignHor\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlContainerCell* current_object;
	wxphp_object_type current_object_type;
	wxHtmlContainerCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlContainerCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlContainerCell::GetAlignHor call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCONTAINERCELL_TYPE){
				references = &((wxHtmlContainerCell_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlContainerCell::GetAlignHor())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxHtmlContainerCell_php*)native_object)->GetAlignHor());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlContainerCell::GetAlignHor\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlLinkInfo_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlLinkInfo* custom_object = (zo_wxHtmlLinkInfo*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlLinkInfo_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlLinkInfo done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlLinkInfo_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlLinkInfo_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlLinkInfo* custom_object;
    custom_object = (zo_wxHtmlLinkInfo*) emalloc(sizeof(zo_wxHtmlLinkInfo));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlLinkInfo_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLLINKINFO_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxMouseEvent wxHtmlLinkInfo::GetEvent()
   Return pointer to event that generated OnLinkClicked() event. */
PHP_METHOD(php_wxHtmlLinkInfo, GetEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlLinkInfo::GetEvent\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlLinkInfo* current_object;
	wxphp_object_type current_object_type;
	wxHtmlLinkInfo_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlLinkInfo*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlLinkInfo::GetEvent call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLLINKINFO_TYPE){
				references = &((wxHtmlLinkInfo_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlLinkInfo::GetEvent() to return object pointer\n\n");
				#endif

				wxMouseEvent_php* value_to_return0;
				value_to_return0 = (wxMouseEvent_php*) ((wxHtmlLinkInfo_php*)native_object)->GetEvent();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxMouseEvent_entry);
					((zo_wxMouseEvent*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxMouseEvent_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlLinkInfo::GetEvent at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlLinkInfo::GetEvent\n");
	}
}
/* }}} */

/* {{{ proto string wxHtmlLinkInfo::GetHref()
   Return HREF value of the <A> tag. */
PHP_METHOD(php_wxHtmlLinkInfo, GetHref)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlLinkInfo::GetHref\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlLinkInfo* current_object;
	wxphp_object_type current_object_type;
	wxHtmlLinkInfo_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlLinkInfo*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlLinkInfo::GetHref call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLLINKINFO_TYPE){
				references = &((wxHtmlLinkInfo_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlLinkInfo::GetHref().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxHtmlLinkInfo_php*)native_object)->GetHref();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlLinkInfo::GetHref\n");
	}
}
/* }}} */

/* {{{ proto wxHtmlCell wxHtmlLinkInfo::GetHtmlCell()
   Return pointer to the cell that was clicked. */
PHP_METHOD(php_wxHtmlLinkInfo, GetHtmlCell)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlLinkInfo::GetHtmlCell\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlLinkInfo* current_object;
	wxphp_object_type current_object_type;
	wxHtmlLinkInfo_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlLinkInfo*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlLinkInfo::GetHtmlCell call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLLINKINFO_TYPE){
				references = &((wxHtmlLinkInfo_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlLinkInfo::GetHtmlCell() to return object pointer\n\n");
				#endif

				wxHtmlCell_php* value_to_return0;
				value_to_return0 = (wxHtmlCell_php*) ((wxHtmlLinkInfo_php*)native_object)->GetHtmlCell();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlCell_entry);
					((zo_wxHtmlCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlCell_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlLinkInfo::GetHtmlCell at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlLinkInfo::GetHtmlCell\n");
	}
}
/* }}} */

/* {{{ proto string wxHtmlLinkInfo::GetTarget()
   Return TARGET value of the <A> tag (this value is used to specify in which frame should be the page pointed by GetHref() Href opened). */
PHP_METHOD(php_wxHtmlLinkInfo, GetTarget)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlLinkInfo::GetTarget\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlLinkInfo* current_object;
	wxphp_object_type current_object_type;
	wxHtmlLinkInfo_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlLinkInfo*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlLinkInfo::GetTarget call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLLINKINFO_TYPE){
				references = &((wxHtmlLinkInfo_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlLinkInfo::GetTarget().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxHtmlLinkInfo_php*)native_object)->GetTarget();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlLinkInfo::GetTarget\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlLinkInfo::wxHtmlLinkInfo()
   Default ctor. */
PHP_METHOD(php_wxHtmlLinkInfo, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlLinkInfo::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlLinkInfo* current_object;
	wxHtmlLinkInfo_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	char* href1;
	long href_len1;
	char* target1;
	long target_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|s' (&href1, &href_len1, &target1, &target_len1)\n");
		#endif

		char parse_parameters_string[] = "s|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &href1, &href_len1, &target1, &target_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxHtmlLinkInfo_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(href1, wxConvUTF8))\n");
				#endif

				native_object = new wxHtmlLinkInfo_php(wxString(href1, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(href1, wxConvUTF8), wxString(target1, wxConvUTF8))\n");
				#endif

				native_object = new wxHtmlLinkInfo_php(wxString(href1, wxConvUTF8), wxString(target1, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlLinkInfo*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlLinkInfo::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlColourCell_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlColourCell* custom_object = (zo_wxHtmlColourCell*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlColourCell_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlColourCell done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlColourCell_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlColourCell_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlColourCell* custom_object;
    custom_object = (zo_wxHtmlColourCell*) emalloc(sizeof(zo_wxHtmlColourCell));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlColourCell_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLCOLOURCELL_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxHtmlColourCell::wxHtmlColourCell(wxColour clr, int flags)
   Constructor. */
PHP_METHOD(php_wxHtmlColourCell, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlColourCell::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlColourCell* current_object;
	wxHtmlColourCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* clr0 = 0;
	wxColour* object_pointer0_0 = 0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O|l' (&clr0, php_wxColour_entry, &flags0)\n");
		#endif

		char parse_parameters_string[] = "O|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &clr0, php_wxColour_entry, &flags0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(clr0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(clr0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(clr0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxColour*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'clr' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(clr0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'clr' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxColour*) object_pointer0_0)\n");
				#endif

				native_object = new wxHtmlColourCell_php(*(wxColour*) object_pointer0_0);

				native_object->references.Initialize();
				((wxHtmlColourCell_php*) native_object)->references.AddReference(clr0, "wxHtmlColourCell::wxHtmlColourCell at call with 1 argument(s)");
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(*(wxColour*) object_pointer0_0, (int) flags0)\n");
				#endif

				native_object = new wxHtmlColourCell_php(*(wxColour*) object_pointer0_0, (int) flags0);

				native_object->references.Initialize();
				((wxHtmlColourCell_php*) native_object)->references.AddReference(clr0, "wxHtmlColourCell::wxHtmlColourCell at call with 2 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlColourCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlColourCell::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlWidgetCell_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlWidgetCell* custom_object = (zo_wxHtmlWidgetCell*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlWidgetCell_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlWidgetCell done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlWidgetCell_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlWidgetCell_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlWidgetCell* custom_object;
    custom_object = (zo_wxHtmlWidgetCell*) emalloc(sizeof(zo_wxHtmlWidgetCell));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlWidgetCell_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLWIDGETCELL_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxHtmlWidgetCell::wxHtmlWidgetCell(wxWindow &wnd, int w)
   Constructor. */
PHP_METHOD(php_wxHtmlWidgetCell, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWidgetCell::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWidgetCell* current_object;
	wxHtmlWidgetCell_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	zval* wnd0 = 0;
	wxWindow* object_pointer0_0 = 0;
	long w0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&wnd0, &w0)\n");
		#endif

		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &wnd0, &w0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(wnd0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(wnd0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(wnd0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'wnd' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(wnd0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'wnd' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0)\n");
				#endif

				native_object = new wxHtmlWidgetCell_php((wxWindow*) object_pointer0_0);

				native_object->references.Initialize();
				((wxHtmlWidgetCell_php*) native_object)->references.AddReference(wnd0, "wxHtmlWidgetCell::wxHtmlWidgetCell at call with 1 argument(s)");
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer0_0, (int) w0)\n");
				#endif

				native_object = new wxHtmlWidgetCell_php((wxWindow*) object_pointer0_0, (int) w0);

				native_object->references.Initialize();
				((wxHtmlWidgetCell_php*) native_object)->references.AddReference(wnd0, "wxHtmlWidgetCell::wxHtmlWidgetCell at call with 2 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlWidgetCell*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlWidgetCell::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlFilter_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlFilter* custom_object = (zo_wxHtmlFilter*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlFilter_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlFilter done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlFilter_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlFilter_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlFilter* custom_object;
    custom_object = (zo_wxHtmlFilter*) emalloc(sizeof(zo_wxHtmlFilter));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlFilter_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLFILTER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxHtmlFilter::CanRead(wxFSFile file)
   Returns true if this filter is capable of reading file file. */
bool wxHtmlFilter_php::CanRead(const wxFSFile& file)const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxHtmlFilter::CanRead\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "CanRead", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxFSFile_entry);
	((zo_wxFSFile*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxFSFile_php*) &file;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "CanRead", 7, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxHtmlFilter::CanRead'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto string wxHtmlFilter::ReadFile(wxFSFile file)
   Reads the file and returns string with HTML document. */
wxString wxHtmlFilter_php::ReadFile(const wxFSFile& file)const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxHtmlFilter::ReadFile\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "ReadFile", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxFSFile_entry);
	((zo_wxFSFile*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxFSFile_php*) &file;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "ReadFile", 8, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxHtmlFilter::ReadFile'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return wxString(Z_STRVAL_P(return_value), wxConvUTF8);
	
}
/* }}} */

/* {{{ proto  wxHtmlFilter::wxHtmlFilter()
   Constructor. */
PHP_METHOD(php_wxHtmlFilter, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlFilter::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlFilter* current_object;
	wxHtmlFilter_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxHtmlFilter_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlFilter*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlFilter::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlTagHandler_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlTagHandler* custom_object = (zo_wxHtmlTagHandler*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlTagHandler_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			custom_object->native_object->UninitProperties();
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlTagHandler done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlTagHandler_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlTagHandler_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlTagHandler* custom_object;
    custom_object = (zo_wxHtmlTagHandler*) emalloc(sizeof(zo_wxHtmlTagHandler));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlTagHandler_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLTAGHANDLER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto string wxHtmlTagHandler::GetSupportedTags()
   Returns list of supported tags. */
wxString wxHtmlTagHandler_php::GetSupportedTags()
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxHtmlTagHandler::GetSupportedTags\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval* arguments[1];
	arguments[0] = NULL;
	params[0] = NULL;

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "GetSupportedTags", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
		

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "GetSupportedTags", 16, &return_value, 0, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxHtmlTagHandler::GetSupportedTags'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return wxString(Z_STRVAL_P(return_value), wxConvUTF8);
	
}
/* }}} */

/* {{{ proto bool wxHtmlTagHandler::HandleTag(wxHtmlTag tag)
   This is the core method of each handler. */
bool wxHtmlTagHandler_php::HandleTag(const wxHtmlTag& tag)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxHtmlTagHandler::HandleTag\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "HandleTag", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxHtmlTag_entry);
	((zo_wxHtmlTag*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxHtmlTag_php*) &tag;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "HandleTag", 9, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
		wxMessageBox("Failed to call virtual method 'wxHtmlTagHandler::HandleTag'!", "Error", wxOK|wxICON_ERROR);
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Returning userspace value.\n");
	#endif
		
	return Z_BVAL_P(return_value);
	
}
/* }}} */

/* {{{ proto  wxHtmlTagHandler::wxHtmlTagHandler()
   Constructor. */
PHP_METHOD(php_wxHtmlTagHandler, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTagHandler::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTagHandler* current_object;
	wxHtmlTagHandler_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxHtmlTagHandler_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		
		native_object->InitProperties();

		current_object = (zo_wxHtmlTagHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlTagHandler::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

PHP_METHOD(php_wxHtmlTagHandler, __get)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTagHandler::__get\n");
	php_printf("===========================================\n");
	#endif
	
	int arguments_received = ZEND_NUM_ARGS();
	zo_wxHtmlTagHandler* current_object;
	wxHtmlTagHandler_php* native_object;
	
	char* name;
	int name_len;
	
	//Get native object of the php object that called the method
	if (getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTagHandler*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTagHandler::wxHtmlTagHandler call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
		}
	}
	else
	{
		zend_error(E_ERROR, "Could not process __get call as static\n");
	}
	
	char parse_parameters_string[] = "s";
	
	if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &name, &name_len ) == FAILURE)
	{
		RETVAL_NULL();
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Property to get: %s\n", name);
	php_printf("===========================================\n\n");
	#endif
	
	if(false){}
	else if(strcmp("m_Parser", name) == 0)
	{
	}
	else
	{
		RETVAL_NULL();
	}
}
BEGIN_EXTERN_C()
void php_wxHtmlTag_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlTag* custom_object = (zo_wxHtmlTag*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlTag_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlTag done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlTag_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlTag_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlTag* custom_object;
    custom_object = (zo_wxHtmlTag*) emalloc(sizeof(zo_wxHtmlTag));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlTag_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLTAG_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto string wxHtmlTag::GetAllParams()
   Returns a string containing all parameters. */
PHP_METHOD(php_wxHtmlTag, GetAllParams)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTag::GetAllParams\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTag* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTag_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTag*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTag::GetAllParams call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAG_TYPE){
				references = &((wxHtmlTag_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlTag::GetAllParams().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				if(current_object_type == PHP_WXHTMLTAG_TYPE)
				{
					value_to_return0 = ((wxHtmlTag_php*)native_object)->GetAllParams();
				}
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTag::GetAllParams\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlTag::GetBeginPos()
   Returns beginning position of the text between this tag and paired ending tag. */
PHP_METHOD(php_wxHtmlTag, GetBeginPos)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTag::GetBeginPos\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTag* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTag_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTag*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTag::GetBeginPos call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAG_TYPE){
				references = &((wxHtmlTag_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlTag::GetBeginPos())\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLTAG_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHtmlTag_php*)native_object)->GetBeginPos());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTag::GetBeginPos\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlTag::GetEndPos1()
   Returns ending position of the text between this tag and paired ending tag. */
PHP_METHOD(php_wxHtmlTag, GetEndPos1)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTag::GetEndPos1\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTag* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTag_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTag*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTag::GetEndPos1 call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAG_TYPE){
				references = &((wxHtmlTag_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlTag::GetEndPos1())\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLTAG_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHtmlTag_php*)native_object)->GetEndPos1());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTag::GetEndPos1\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlTag::GetEndPos2()
   Returns ending position 2 of the text between this tag and paired ending tag. */
PHP_METHOD(php_wxHtmlTag, GetEndPos2)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTag::GetEndPos2\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTag* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTag_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTag*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTag::GetEndPos2 call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAG_TYPE){
				references = &((wxHtmlTag_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlTag::GetEndPos2())\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLTAG_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHtmlTag_php*)native_object)->GetEndPos2());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTag::GetEndPos2\n");
	}
}
/* }}} */

/* {{{ proto string wxHtmlTag::GetName()
   Returns tag's name. */
PHP_METHOD(php_wxHtmlTag, GetName)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTag::GetName\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTag* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTag_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTag*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTag::GetName call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAG_TYPE){
				references = &((wxHtmlTag_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlTag::GetName().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				if(current_object_type == PHP_WXHTMLTAG_TYPE)
				{
					value_to_return0 = ((wxHtmlTag_php*)native_object)->GetName();
				}
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTag::GetName\n");
	}
}
/* }}} */

/* {{{ proto string wxHtmlTag::GetParam(string par, bool with_quotes)
   Returns the value of the parameter. */
PHP_METHOD(php_wxHtmlTag, GetParam)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTag::GetParam\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTag* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTag_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTag*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTag::GetParam call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAG_TYPE){
				references = &((wxHtmlTag_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* par0;
	long par_len0;
	bool with_quotes0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|b' (&par0, &par_len0, &with_quotes0)\n");
		#endif

		char parse_parameters_string[] = "s|b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &par0, &par_len0, &with_quotes0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlTag::GetParam(wxString(par0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return1;
				if(current_object_type == PHP_WXHTMLTAG_TYPE)
				{
					value_to_return1 = ((wxHtmlTag_php*)native_object)->GetParam(wxString(par0, wxConvUTF8));
				}
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlTag::GetParam(wxString(par0, wxConvUTF8), with_quotes0).fn_str(), 1)\n\n");
				#endif

				wxString value_to_return2;
				if(current_object_type == PHP_WXHTMLTAG_TYPE)
				{
					value_to_return2 = ((wxHtmlTag_php*)native_object)->GetParam(wxString(par0, wxConvUTF8), with_quotes0);
				}
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTag::GetParam\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlTag::GetParamAsColour(string par, wxColour &clr)
   Interprets tag parameter par as colour specification and saves its value into wxColour variable pointed by clr. */
PHP_METHOD(php_wxHtmlTag, GetParamAsColour)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTag::GetParamAsColour\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTag* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTag_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTag*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTag::GetParamAsColour call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAG_TYPE){
				references = &((wxHtmlTag_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* par0;
	long par_len0;
	zval* clr0 = 0;
	wxColour* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sz' (&par0, &par_len0, &clr0)\n");
		#endif

		char parse_parameters_string[] = "sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &par0, &par_len0, &clr0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(clr0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(clr0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(clr0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxColour*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXCOLOUR_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'clr' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(clr0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'clr' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlTag::GetParamAsColour(wxString(par0, wxConvUTF8), (wxColour*) object_pointer0_1))\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLTAG_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxHtmlTag_php*)native_object)->GetParamAsColour(wxString(par0, wxConvUTF8), (wxColour*) object_pointer0_1));
				}

				references->AddReference(clr0, "wxHtmlTag::GetParamAsColour at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTag::GetParamAsColour\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlTag::HasEnding()
   Returns true if this tag is paired with ending tag, false otherwise. */
PHP_METHOD(php_wxHtmlTag, HasEnding)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTag::HasEnding\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTag* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTag_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTag*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTag::HasEnding call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAG_TYPE){
				references = &((wxHtmlTag_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlTag::HasEnding())\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLTAG_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxHtmlTag_php*)native_object)->HasEnding());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTag::HasEnding\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlTag::HasParam(string par)
   Returns true if the tag has a parameter of the given name. */
PHP_METHOD(php_wxHtmlTag, HasParam)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTag::HasParam\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTag* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTag_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTag*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTag::HasParam call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAG_TYPE){
				references = &((wxHtmlTag_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* par0;
	long par_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&par0, &par_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &par0, &par_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlTag::HasParam(wxString(par0, wxConvUTF8)))\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLTAG_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxHtmlTag_php*)native_object)->HasParam(wxString(par0, wxConvUTF8)));
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTag::HasParam\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlTag::ParseAsColour(string str, wxColour &clr)
   Parses the given string as an HTML colour. */
PHP_METHOD(php_wxHtmlTag, ParseAsColour)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTag::ParseAsColour\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTag* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTag_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTag*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTag::ParseAsColour call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAG_TYPE){
				references = &((wxHtmlTag_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	zval* clr0 = 0;
	wxColour* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sz' (&str0, &str_len0, &clr0)\n");
		#endif

		char parse_parameters_string[] = "sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &str0, &str_len0, &clr0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(clr0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(clr0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(clr0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxColour*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXCOLOUR_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'clr' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(clr0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'clr' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing RETURN_BOOL(wxHtmlTag::ParseAsColour(wxString(str0, wxConvUTF8), (wxColour*) object_pointer0_1))\n\n");
				#endif

				ZVAL_BOOL(return_value, wxHtmlTag::ParseAsColour(wxString(str0, wxConvUTF8), (wxColour*) object_pointer0_1));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTag::ParseAsColour\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlTag::ScanParam(string par, string format, void value)
   This method scans the given parameter. */
PHP_METHOD(php_wxHtmlTag, ScanParam)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTag::ScanParam\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTag* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTag_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTag*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTag::ScanParam call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAG_TYPE){
				references = &((wxHtmlTag_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* par0;
	long par_len0;
	char* format0;
	long format_len0;
	char* value0;
	long value_len0;
	zval* value0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sss' (&par0, &par_len0, &format0, &format_len0, &value0, &value_len0)\n");
		#endif

		char parse_parameters_string[] = "sss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &par0, &par_len0, &format0, &format_len0, &value0, &value_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zzz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dummy, &dummy, &value0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlTag::ScanParam(wxString(par0, wxConvUTF8), format0, (void*) value0))\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLTAG_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHtmlTag_php*)native_object)->ScanParam(wxString(par0, wxConvUTF8), format0, (void*) value0));
				}

				ZVAL_STRING(value0_ref, (char*) value0, 1);

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTag::ScanParam\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlTag::GetParamAsInt(string par, int &value)
   Interprets tag parameter par as an integer and saves its value into int variable pointed by value. */
PHP_METHOD(php_wxHtmlTag, GetParamAsInt)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTag::GetParamAsInt\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTag* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTag_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTag*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTag::GetParamAsInt call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAG_TYPE){
				references = &((wxHtmlTag_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* par0;
	long par_len0;
	long* value0;
	zval* value0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&par0, &par_len0, value0)\n");
		#endif

		char parse_parameters_string[] = "sl";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &par0, &par_len0, value0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			char parse_references_string[] = "zz";
			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_references_string, &dummy, &value0_ref );
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlTag::GetParamAsInt(wxString(par0, wxConvUTF8), (int*) value0))\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLTAG_TYPE)
				{
					ZVAL_BOOL(return_value, ((wxHtmlTag_php*)native_object)->GetParamAsInt(wxString(par0, wxConvUTF8), (int*) value0));
				}

				size_t elements_returned0_1 = sizeof(value0)/sizeof(*value0);
				array_init(value0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(value0_ref, value0[i]);
				}

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTag::GetParamAsInt\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlWindow_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlWindow* custom_object = (zo_wxHtmlWindow*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Obviate delete call for wxHtmlWindow on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n\n");
	#endif

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlWindow_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlWindow_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlWindow* custom_object;
    custom_object = (zo_wxHtmlWindow*) emalloc(sizeof(zo_wxHtmlWindow));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlWindow_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLWINDOW_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto bool wxHtmlWindow::AppendToPage(string source)
   Appends HTML fragment to currently displayed text and refreshes the window. */
PHP_METHOD(php_wxHtmlWindow, AppendToPage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::AppendToPage\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::AppendToPage call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* source0;
	long source_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&source0, &source_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &source0, &source_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlWindow::AppendToPage(wxString(source0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlWindow_php*)native_object)->AppendToPage(wxString(source0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::AppendToPage\n");
	}
}
/* }}} */

/* {{{ proto string wxHtmlWindow::GetOpenedAnchor()
   Returns anchor within currently opened page (see wxHtmlWindow::GetOpenedPage). */
PHP_METHOD(php_wxHtmlWindow, GetOpenedAnchor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::GetOpenedAnchor\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::GetOpenedAnchor call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlWindow::GetOpenedAnchor().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxHtmlWindow_php*)native_object)->GetOpenedAnchor();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::GetOpenedAnchor\n");
	}
}
/* }}} */

/* {{{ proto string wxHtmlWindow::GetOpenedPage()
   Returns full location of the opened page. */
PHP_METHOD(php_wxHtmlWindow, GetOpenedPage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::GetOpenedPage\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::GetOpenedPage call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlWindow::GetOpenedPage().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxHtmlWindow_php*)native_object)->GetOpenedPage();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::GetOpenedPage\n");
	}
}
/* }}} */

/* {{{ proto string wxHtmlWindow::GetOpenedPageTitle()
   Returns title of the opened page or wxEmptyString if the current page does not contain <TITLE> tag. */
PHP_METHOD(php_wxHtmlWindow, GetOpenedPageTitle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::GetOpenedPageTitle\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::GetOpenedPageTitle call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlWindow::GetOpenedPageTitle().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxHtmlWindow_php*)native_object)->GetOpenedPageTitle();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::GetOpenedPageTitle\n");
	}
}
/* }}} */

/* {{{ proto wxFrame wxHtmlWindow::GetRelatedFrame()
   Returns the related frame. */
PHP_METHOD(php_wxHtmlWindow, GetRelatedFrame)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::GetRelatedFrame\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::GetRelatedFrame call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::GetRelatedFrame() to return object pointer\n\n");
				#endif

				wxFrame_php* value_to_return0;
				value_to_return0 = (wxFrame_php*) ((wxHtmlWindow_php*)native_object)->GetRelatedFrame();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxFrame_entry);
					((zo_wxFrame*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFrame_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlWindow::GetRelatedFrame at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::GetRelatedFrame\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlWindow::HistoryBack()
   Moves back to the previous page. */
PHP_METHOD(php_wxHtmlWindow, HistoryBack)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::HistoryBack\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::HistoryBack call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlWindow::HistoryBack())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlWindow_php*)native_object)->HistoryBack());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::HistoryBack\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlWindow::HistoryCanBack()
   Returns true if it is possible to go back in the history i.e. */
PHP_METHOD(php_wxHtmlWindow, HistoryCanBack)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::HistoryCanBack\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::HistoryCanBack call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlWindow::HistoryCanBack())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlWindow_php*)native_object)->HistoryCanBack());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::HistoryCanBack\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlWindow::HistoryCanForward()
   Returns true if it is possible to go forward in the history i.e. */
PHP_METHOD(php_wxHtmlWindow, HistoryCanForward)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::HistoryCanForward\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::HistoryCanForward call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlWindow::HistoryCanForward())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlWindow_php*)native_object)->HistoryCanForward());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::HistoryCanForward\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWindow::HistoryClear()
   Clears history. */
PHP_METHOD(php_wxHtmlWindow, HistoryClear)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::HistoryClear\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::HistoryClear call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::HistoryClear()\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->HistoryClear();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::HistoryClear\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlWindow::HistoryForward()
   Moves to next page in history. */
PHP_METHOD(php_wxHtmlWindow, HistoryForward)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::HistoryForward\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::HistoryForward call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlWindow::HistoryForward())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlWindow_php*)native_object)->HistoryForward());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::HistoryForward\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlWindow::LoadPage(string location)
   Unlike SetPage() this function first loads the HTML page from location and then displays it. */
PHP_METHOD(php_wxHtmlWindow, LoadPage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::LoadPage\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::LoadPage call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* location0;
	long location_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&location0, &location_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &location0, &location_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlWindow::LoadPage(wxString(location0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlWindow_php*)native_object)->LoadPage(wxString(location0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::LoadPage\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlWindow::LoadFile(wxFileName filename)
   Loads an HTML page from a file and displays it. */
PHP_METHOD(php_wxHtmlWindow, LoadFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::LoadFile\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::LoadFile call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* filename0 = 0;
	wxFileName* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&filename0, php_wxFileName_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &filename0, php_wxFileName_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(filename0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxFileName*) zend_object_store_get_object(filename0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxFileName*) zend_object_store_get_object(filename0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxFileName*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'filename' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(filename0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'filename' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlWindow::LoadFile(*(wxFileName*) object_pointer0_0))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlWindow_php*)native_object)->LoadFile(*(wxFileName*) object_pointer0_0));

				references->AddReference(filename0, "wxHtmlWindow::LoadFile at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::LoadFile\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlWindow::OnCellClicked(wxHtmlCell &cell, int x, int y, wxMouseEvent event)
   This method is called when a mouse button is clicked inside wxHtmlWindow. */
bool wxHtmlWindow_php::OnCellClicked(wxHtmlCell* cell, wxCoord x, wxCoord y, const wxMouseEvent& event)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxHtmlWindow::OnCellClicked\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[4];
	zval *arguments[4];
	
	//Initilize arguments array
	for(int i=0; i<4; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "OnCellClicked", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxHtmlCell_entry);
	((zo_wxHtmlCell*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxHtmlCell_php*) cell;
	ZVAL_LONG(arguments[1], x);
	ZVAL_LONG(arguments[2], y);
	object_init_ex(arguments[3], php_wxMouseEvent_entry);
	((zo_wxMouseEvent*) zend_object_store_get_object(arguments[3] TSRMLS_CC))->native_object = (wxMouseEvent_php*) &event;
		
	for(int i=0; i<4; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "OnCellClicked", 13, &return_value, 4, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<4; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return Z_BVAL_P(return_value);
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	return wxHtmlWindow::OnCellClicked(cell, x, y, event);
}
/* }}} */

/* {{{ proto  wxHtmlWindow::OnCellMouseHover(wxHtmlCell &cell, int x, int y)
   This method is called when a mouse moves over an HTML cell. */
void wxHtmlWindow_php::OnCellMouseHover(wxHtmlCell* cell, wxCoord x, wxCoord y)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxHtmlWindow::OnCellMouseHover\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[3];
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "OnCellMouseHover", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxHtmlCell_entry);
	((zo_wxHtmlCell*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxHtmlCell_php*) cell;
	ZVAL_LONG(arguments[1], x);
	ZVAL_LONG(arguments[2], y);
		
	for(int i=0; i<3; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "OnCellMouseHover", 16, &return_value, 3, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<3; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	wxHtmlWindow::OnCellMouseHover(cell, x, y);
}
/* }}} */

/* {{{ proto  wxHtmlWindow::OnLinkClicked(wxHtmlLinkInfo link)
   Called when user clicks on hypertext link. */
void wxHtmlWindow_php::OnLinkClicked(const wxHtmlLinkInfo& link)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxHtmlWindow::OnLinkClicked\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "OnLinkClicked", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	object_init_ex(arguments[0], php_wxHtmlLinkInfo_entry);
	((zo_wxHtmlLinkInfo*) zend_object_store_get_object(arguments[0] TSRMLS_CC))->native_object = (wxHtmlLinkInfo_php*) &link;
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "OnLinkClicked", 13, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	wxHtmlWindow::OnLinkClicked(link);
}
/* }}} */

/* {{{ proto  wxHtmlWindow::OnSetTitle(string title)
   Called on parsing <TITLE> tag. */
void wxHtmlWindow_php::OnSetTitle(const wxString& title)
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxHtmlWindow::OnSetTitle\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[1];
	zval *arguments[1];
	
	//Initilize arguments array
	for(int i=0; i<1; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "OnSetTitle", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	temp_string = (char*)malloc(sizeof(wxChar)*(title.size()+1));
	strcpy(temp_string, (const char *) title.char_str());
	ZVAL_STRING(arguments[0], temp_string, 1);
	free(temp_string);
		
	for(int i=0; i<1; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "OnSetTitle", 10, &return_value, 1, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<1; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return;
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	wxHtmlWindow::OnSetTitle(title);
}
/* }}} */

/* {{{ proto wxHtmlOpeningStatus wxHtmlWindow::OnOpeningURL(wxHtmlURLType type, string url, string &redirect)
   Called when an URL is being opened (either when the user clicks on a link or an image is loaded). */
wxHtmlOpeningStatus wxHtmlWindow_php::OnOpeningURL(wxHtmlURLType type, const wxString& url, wxString* redirect)const
{
	static zend_function* cached_function = NULL;
	static bool is_php_user_space_implemented = true;
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking virtual wxHtmlWindow::OnOpeningURL\n");
	php_printf("===========================================\n");
	#endif
	
	zval** params[3];
	zval *arguments[3];
	
	//Initilize arguments array
	for(int i=0; i<3; i++)
	{
		ALLOC_INIT_ZVAL(arguments[i]);
	}

	zval* return_value;
	MAKE_STD_ZVAL(return_value);
	zval function_name;
	ZVAL_STRING(&function_name, "OnOpeningURL", 0);
	char* temp_string;
	void* return_object;
	int function_called;
	
	//Parameters for conversion
	ZVAL_LONG(arguments[0], type);
	temp_string = (char*)malloc(sizeof(wxChar)*(url.size()+1));
	strcpy(temp_string, (const char *) url.char_str());
	ZVAL_STRING(arguments[1], temp_string, 1);
	free(temp_string);
	temp_string = (char*)malloc(sizeof(wxChar)*(redirect->size()+1));
	strcpy(temp_string, (const char *) redirect->char_str());
	ZVAL_STRING(arguments[2], temp_string, 1);
	free(temp_string);
		
	for(int i=0; i<3; i++)
	{
		params[i] = &arguments[i];
	}

	#ifdef USE_WXPHP_DEBUG
	php_printf("Trying to call user defined method\n");
	#endif
	
	if(is_php_user_space_implemented)
	{
		function_called = wxphp_call_method((zval**) &this->phpObj, NULL, &cached_function, "OnOpeningURL", 12, &return_value, 3, params TSRMLS_CC);
	}
	else
	{
		function_called = FAILURE;
	}
    
    	
	//Delete already used parameters from memory
	for(int i=0; i<3; i++)
	{
		zval_ptr_dtor(&arguments[i]);
	}
	
	if(function_called == FAILURE)
	{
		is_php_user_space_implemented = false;
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Invocation of user defined method failed\n");
		#endif
		
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Returning userspace value.\n");
		#endif
		
		return (wxHtmlOpeningStatus) Z_LVAL_P(return_value);
	}
	
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling original method\n");
	php_printf("===========================================\n\n");
	#endif
	
	//Call original method
	return wxHtmlWindow::OnOpeningURL(type, url, redirect);
}
/* }}} */

/* {{{ proto  wxHtmlWindow::SelectAll()
   Selects all text in the window. */
PHP_METHOD(php_wxHtmlWindow, SelectAll)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::SelectAll\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::SelectAll call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SelectAll()\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SelectAll();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::SelectAll\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWindow::SelectLine(wxPoint pos)
   Selects the line of text that pos points at. */
PHP_METHOD(php_wxHtmlWindow, SelectLine)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::SelectLine\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::SelectLine call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* pos0 = 0;
	wxPoint* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pos0, php_wxPoint_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxPoint*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SelectLine(*(wxPoint*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SelectLine(*(wxPoint*) object_pointer0_0);

				references->AddReference(pos0, "wxHtmlWindow::SelectLine at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::SelectLine\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWindow::SelectWord(wxPoint pos)
   Selects the word at position pos. */
PHP_METHOD(php_wxHtmlWindow, SelectWord)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::SelectWord\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::SelectWord call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* pos0 = 0;
	wxPoint* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pos0, php_wxPoint_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &pos0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pos0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxPoint*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SelectWord(*(wxPoint*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SelectWord(*(wxPoint*) object_pointer0_0);

				references->AddReference(pos0, "wxHtmlWindow::SelectWord at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::SelectWord\n");
	}
}
/* }}} */

/* {{{ proto string wxHtmlWindow::SelectionToText()
   Returns the current selection as plain text. */
PHP_METHOD(php_wxHtmlWindow, SelectionToText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::SelectionToText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::SelectionToText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlWindow::SelectionToText().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxHtmlWindow_php*)native_object)->SelectionToText();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::SelectionToText\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWindow::SetBorders(int b)
   This function sets the space between border of window and HTML contents. */
PHP_METHOD(php_wxHtmlWindow, SetBorders)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::SetBorders\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::SetBorders call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long b0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&b0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &b0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SetBorders((int) b0)\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SetBorders((int) b0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::SetBorders\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlWindow::SetPage(string source)
   Sets the source of a page and displays it, for example: */
PHP_METHOD(php_wxHtmlWindow, SetPage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::SetPage\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::SetPage call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* source0;
	long source_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&source0, &source_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &source0, &source_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlWindow::SetPage(wxString(source0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlWindow_php*)native_object)->SetPage(wxString(source0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::SetPage\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWindow::SetRelatedFrame(wxFrame &frame, string format)
   Sets the frame in which page title will be displayed. */
PHP_METHOD(php_wxHtmlWindow, SetRelatedFrame)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::SetRelatedFrame\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::SetRelatedFrame call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* frame0 = 0;
	wxFrame* object_pointer0_0 = 0;
	char* format0;
	long format_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zs' (&frame0, &format0, &format_len0)\n");
		#endif

		char parse_parameters_string[] = "zs";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &frame0, &format0, &format_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(frame0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxFrame*) zend_object_store_get_object(frame0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxFrame*) zend_object_store_get_object(frame0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxFrame*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'frame' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(frame0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'frame' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SetRelatedFrame((wxFrame*) object_pointer0_0, wxString(format0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SetRelatedFrame((wxFrame*) object_pointer0_0, wxString(format0, wxConvUTF8));

				references->AddReference(frame0, "wxHtmlWindow::SetRelatedFrame at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::SetRelatedFrame\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWindow::SetRelatedStatusBar(int index)
   After calling SetRelatedFrame(), this sets statusbar slot where messages will be displayed. */
PHP_METHOD(php_wxHtmlWindow, SetRelatedStatusBar)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::SetRelatedStatusBar\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::SetRelatedStatusBar call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long index0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* statusbar1 = 0;
	wxStatusBar* object_pointer1_0 = 0;
	long index1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&index0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &index0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|l' (&statusbar1, &index1)\n");
		#endif

		char parse_parameters_string[] = "z|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &statusbar1, &index1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(statusbar1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxStatusBar*) zend_object_store_get_object(statusbar1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxStatusBar*) zend_object_store_get_object(statusbar1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxStatusBar*) argument_native_object;
					if (!object_pointer1_0 || (argument_type != PHP_WXSTATUSBAR_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'statusbar' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(statusbar1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'statusbar' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SetRelatedStatusBar((int) index0)\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SetRelatedStatusBar((int) index0);


				return;
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SetRelatedStatusBar((wxStatusBar*) object_pointer1_0)\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SetRelatedStatusBar((wxStatusBar*) object_pointer1_0);

				references->AddReference(statusbar1, "wxHtmlWindow::SetRelatedStatusBar at call with 1 argument(s)");

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SetRelatedStatusBar((wxStatusBar*) object_pointer1_0, (int) index1)\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SetRelatedStatusBar((wxStatusBar*) object_pointer1_0, (int) index1);

				references->AddReference(statusbar1, "wxHtmlWindow::SetRelatedStatusBar at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::SetRelatedStatusBar\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWindow::SetStandardFonts(int size, string normal_face, string fixed_face)
   Sets default font sizes and/or default font size. */
PHP_METHOD(php_wxHtmlWindow, SetStandardFonts)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::SetStandardFonts\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::SetStandardFonts call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long size0;
	char* normal_face0;
	long normal_face_len0;
	char* fixed_face0;
	long fixed_face_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lss' (&size0, &normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0)\n");
		#endif

		char parse_parameters_string[] = "|lss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &size0, &normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SetStandardFonts()\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SetStandardFonts();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SetStandardFonts((int) size0)\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SetStandardFonts((int) size0);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SetStandardFonts((int) size0, wxString(normal_face0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SetStandardFonts((int) size0, wxString(normal_face0, wxConvUTF8));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SetStandardFonts((int) size0, wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SetStandardFonts((int) size0, wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::SetStandardFonts\n");
	}
}
/* }}} */

/* {{{ proto string wxHtmlWindow::ToText()
   Returns content of currently displayed page as plain text. */
PHP_METHOD(php_wxHtmlWindow, ToText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::ToText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::ToText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlWindow::ToText().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxHtmlWindow_php*)native_object)->ToText();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::ToText\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWindow::WriteCustomization(wxConfigBase &cfg, string path)
   Saves custom settings into wxConfig. */
PHP_METHOD(php_wxHtmlWindow, WriteCustomization)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::WriteCustomization\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::WriteCustomization call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* cfg0 = 0;
	wxConfigBase* object_pointer0_0 = 0;
	char* path0;
	long path_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|s' (&cfg0, &path0, &path_len0)\n");
		#endif

		char parse_parameters_string[] = "z|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &cfg0, &path0, &path_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cfg0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxConfigBase*) zend_object_store_get_object(cfg0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxConfigBase*) zend_object_store_get_object(cfg0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxConfigBase*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXCONFIGBASE_TYPE && argument_type != PHP_WXFILECONFIG_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'cfg' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cfg0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cfg' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::WriteCustomization((wxConfigBase*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->WriteCustomization((wxConfigBase*) object_pointer0_0);

				references->AddReference(cfg0, "wxHtmlWindow::WriteCustomization at call with 1 argument(s)");

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::WriteCustomization((wxConfigBase*) object_pointer0_0, wxString(path0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->WriteCustomization((wxConfigBase*) object_pointer0_0, wxString(path0, wxConvUTF8));

				references->AddReference(cfg0, "wxHtmlWindow::WriteCustomization at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::WriteCustomization\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWindow::wxHtmlWindow()
   Default ctor. */
PHP_METHOD(php_wxHtmlWindow, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	zval* parent1 = 0;
	wxWindow* object_pointer1_0 = 0;
	long id1;
	zval* pos1 = 0;
	wxPoint* object_pointer1_2 = 0;
	zval* size1 = 0;
	wxSize* object_pointer1_3 = 0;
	long style1;
	char* name1;
	long name_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 1  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|lOOls' (&parent1, &id1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1)\n");
		#endif

		char parse_parameters_string[] = "z|lOOls";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parent1, &id1, &pos1, php_wxPoint_entry, &size1, php_wxSize_entry, &style1, &name1, &name_len1 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parent1 TSRMLS_CC))->native_object;
					object_pointer1_0 = (wxWindow*) argument_native_object;
					if (!object_pointer1_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parent' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parent' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 3){
				if(Z_TYPE_P(pos1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(pos1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(pos1 TSRMLS_CC))->native_object;
					object_pointer1_2 = (wxPoint*) argument_native_object;
					if (!object_pointer1_2 )
					{
						zend_error(E_ERROR, "Parameter 'pos' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'pos' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(size1) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxSize*) zend_object_store_get_object(size1 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxSize*) zend_object_store_get_object(size1 TSRMLS_CC))->native_object;
					object_pointer1_3 = (wxSize*) argument_native_object;
					if (!object_pointer1_3 )
					{
						zend_error(E_ERROR, "Parameter 'size' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(size1) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'size' not null, could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxHtmlWindow_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0)\n");
				#endif

				native_object = new wxHtmlWindow_php((wxWindow*) object_pointer1_0);

				native_object->references.Initialize();
				((wxHtmlWindow_php*) native_object)->references.AddReference(parent1, "wxHtmlWindow::wxHtmlWindow at call with 1 argument(s)");
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1)\n");
				#endif

				native_object = new wxHtmlWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1);

				native_object->references.Initialize();
				((wxHtmlWindow_php*) native_object)->references.AddReference(parent1, "wxHtmlWindow::wxHtmlWindow at call with 2 argument(s)");
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2)\n");
				#endif

				native_object = new wxHtmlWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2);

				native_object->references.Initialize();
				((wxHtmlWindow_php*) native_object)->references.AddReference(parent1, "wxHtmlWindow::wxHtmlWindow at call with 3 argument(s)");
				((wxHtmlWindow_php*) native_object)->references.AddReference(pos1, "wxHtmlWindow::wxHtmlWindow at call with 3 argument(s)");
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3)\n");
				#endif

				native_object = new wxHtmlWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3);

				native_object->references.Initialize();
				((wxHtmlWindow_php*) native_object)->references.AddReference(parent1, "wxHtmlWindow::wxHtmlWindow at call with 4 argument(s)");
				((wxHtmlWindow_php*) native_object)->references.AddReference(pos1, "wxHtmlWindow::wxHtmlWindow at call with 4 argument(s)");
				((wxHtmlWindow_php*) native_object)->references.AddReference(size1, "wxHtmlWindow::wxHtmlWindow at call with 4 argument(s)");
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1)\n");
				#endif

				native_object = new wxHtmlWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1);

				native_object->references.Initialize();
				((wxHtmlWindow_php*) native_object)->references.AddReference(parent1, "wxHtmlWindow::wxHtmlWindow at call with 5 argument(s)");
				((wxHtmlWindow_php*) native_object)->references.AddReference(pos1, "wxHtmlWindow::wxHtmlWindow at call with 5 argument(s)");
				((wxHtmlWindow_php*) native_object)->references.AddReference(size1, "wxHtmlWindow::wxHtmlWindow at call with 5 argument(s)");
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1, wxString(name1, wxConvUTF8))\n");
				#endif

				native_object = new wxHtmlWindow_php((wxWindow*) object_pointer1_0, (wxWindowID) id1, *(wxPoint*) object_pointer1_2, *(wxSize*) object_pointer1_3, (long) style1, wxString(name1, wxConvUTF8));

				native_object->references.Initialize();
				((wxHtmlWindow_php*) native_object)->references.AddReference(parent1, "wxHtmlWindow::wxHtmlWindow at call with 6 argument(s)");
				((wxHtmlWindow_php*) native_object)->references.AddReference(pos1, "wxHtmlWindow::wxHtmlWindow at call with 6 argument(s)");
				((wxHtmlWindow_php*) native_object)->references.AddReference(size1, "wxHtmlWindow::wxHtmlWindow at call with 6 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlWindow::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto wxHtmlContainerCell wxHtmlWindow::GetInternalRepresentation()
   Returns pointer to the top-level container. */
PHP_METHOD(php_wxHtmlWindow, GetInternalRepresentation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::GetInternalRepresentation\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::GetInternalRepresentation call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::GetInternalRepresentation() to return object pointer\n\n");
				#endif

				wxHtmlContainerCell_php* value_to_return0;
				value_to_return0 = (wxHtmlContainerCell_php*) ((wxHtmlWindow_php*)native_object)->GetInternalRepresentation();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlContainerCell_entry);
					((zo_wxHtmlContainerCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlContainerCell_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlWindow::GetInternalRepresentation at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::GetInternalRepresentation\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWindow::AddFilter(wxHtmlFilter &filter)
   Adds input filter to the static list of available filters. */
PHP_METHOD(php_wxHtmlWindow, AddFilter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::AddFilter\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::AddFilter call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* filter0 = 0;
	wxHtmlFilter* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&filter0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &filter0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(filter0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlFilter*) zend_object_store_get_object(filter0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlFilter*) zend_object_store_get_object(filter0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlFilter*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXHTMLFILTER_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'filter' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(filter0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'filter' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxHtmlWindow::AddFilter((wxHtmlFilter*) object_pointer0_0)\n\n");
				#endif

				wxHtmlWindow::AddFilter((wxHtmlFilter*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::AddFilter\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWindow::SetFonts(string normal_face, string fixed_face, array sizes)
   This function sets font sizes and faces. */
PHP_METHOD(php_wxHtmlWindow, SetFonts)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWindow::SetFonts\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWindow* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWindow_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWindow*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWindow::SetFonts call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINDOW_TYPE){
				references = &((wxHtmlWindow_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* normal_face0;
	long normal_face_len0;
	char* fixed_face0;
	long fixed_face_len0;
	zval* sizes0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|a' (&normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0, &sizes0)\n");
		#endif

		char parse_parameters_string[] = "ss|a";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0, &sizes0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		int array_count0_2 = 1;
		HashTable* arr_hash0_2;
		if(arguments_received > 2)
		{
			arr_hash0_2 = Z_ARRVAL_P(sizes0);
			array_count0_2 = zend_hash_num_elements(arr_hash0_2);
		}
		int* integers_array0_2 = new int[array_count0_2];
		bool integers_continue0_2 = true;

		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8));


				return;
				break;
			}
			case 3:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(integers_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(sizes0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_long_ex(temp_array_value0_2);
						integers_array0_2[array_index0_2] = (int) Z_LVAL_PP(temp_array_value0_2);
						array_index0_2++;
					}
					else
					{
						integers_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWindow::SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8), (const int*) integers_array0_2)\n\n");
				#endif

				((wxHtmlWindow_php*)native_object)->SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8), (const int*) integers_array0_2);

				delete[] integers_array0_2;

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWindow::SetFonts\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlLinkEvent_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlLinkEvent* custom_object = (zo_wxHtmlLinkEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlLinkEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlLinkEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlLinkEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlLinkEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlLinkEvent* custom_object;
    custom_object = (zo_wxHtmlLinkEvent*) emalloc(sizeof(zo_wxHtmlLinkEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlLinkEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLLINKEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxHtmlLinkInfo wxHtmlLinkEvent::GetLinkInfo()
   Returns the wxHtmlLinkInfo which contains info about the cell clicked and the hyperlink it contains. */
PHP_METHOD(php_wxHtmlLinkEvent, GetLinkInfo)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlLinkEvent::GetLinkInfo\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlLinkEvent* current_object;
	wxphp_object_type current_object_type;
	wxHtmlLinkEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlLinkEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlLinkEvent::GetLinkInfo call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLLINKEVENT_TYPE){
				references = &((wxHtmlLinkEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlLinkEvent::GetLinkInfo() to return object reference\n\n");
				#endif

				wxHtmlLinkInfo_php* value_to_return0;
				value_to_return0 = (wxHtmlLinkInfo_php*) &((wxHtmlLinkEvent_php*)native_object)->GetLinkInfo();

				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxHtmlLinkInfo_entry);
					((zo_wxHtmlLinkInfo*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlLinkInfo_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxHtmlLinkEvent::GetLinkInfo at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlLinkEvent::GetLinkInfo\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlLinkEvent::wxHtmlLinkEvent(int id, wxHtmlLinkInfo linkinfo)
   The constructor is not normally used by the user code. */
PHP_METHOD(php_wxHtmlLinkEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlLinkEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlLinkEvent* current_object;
	wxHtmlLinkEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long id0;
	zval* linkinfo0 = 0;
	wxHtmlLinkInfo* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'lO' (&id0, &linkinfo0, php_wxHtmlLinkInfo_entry)\n");
		#endif

		char parse_parameters_string[] = "lO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &id0, &linkinfo0, php_wxHtmlLinkInfo_entry ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(linkinfo0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlLinkInfo*) zend_object_store_get_object(linkinfo0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlLinkInfo*) zend_object_store_get_object(linkinfo0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxHtmlLinkInfo*) argument_native_object;
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter 'linkinfo' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(linkinfo0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'linkinfo' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((int) id0, *(wxHtmlLinkInfo*) object_pointer0_1)\n");
				#endif

				native_object = new wxHtmlLinkEvent_php((int) id0, *(wxHtmlLinkInfo*) object_pointer0_1);

				native_object->references.Initialize();
				((wxHtmlLinkEvent_php*) native_object)->references.AddReference(linkinfo0, "wxHtmlLinkEvent::wxHtmlLinkEvent at call with 2 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlLinkEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlLinkEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlCellEvent_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlCellEvent* custom_object = (zo_wxHtmlCellEvent*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlCellEvent_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlCellEvent done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlCellEvent_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlCellEvent_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlCellEvent* custom_object;
    custom_object = (zo_wxHtmlCellEvent*) emalloc(sizeof(zo_wxHtmlCellEvent));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlCellEvent_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLCELLEVENT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto wxHtmlCell wxHtmlCellEvent::GetCell()
   Returns the wxHtmlCellEvent associated with the event. */
PHP_METHOD(php_wxHtmlCellEvent, GetCell)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCellEvent::GetCell\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCellEvent* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCellEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCellEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCellEvent::GetCell call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELLEVENT_TYPE){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCellEvent::GetCell() to return object pointer\n\n");
				#endif

				wxHtmlCell_php* value_to_return0;
				value_to_return0 = (wxHtmlCell_php*) ((wxHtmlCellEvent_php*)native_object)->GetCell();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlCell_entry);
					((zo_wxHtmlCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlCell_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlCellEvent::GetCell at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCellEvent::GetCell\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlCellEvent::GetLinkClicked()
   Returns true if SetLinkClicked(true) has previously been called; false otherwise. */
PHP_METHOD(php_wxHtmlCellEvent, GetLinkClicked)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCellEvent::GetLinkClicked\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCellEvent* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCellEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCellEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCellEvent::GetLinkClicked call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELLEVENT_TYPE){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlCellEvent::GetLinkClicked())\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlCellEvent_php*)native_object)->GetLinkClicked());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCellEvent::GetLinkClicked\n");
	}
}
/* }}} */

/* {{{ proto wxPoint wxHtmlCellEvent::GetPoint()
   Returns the wxPoint associated with the event. */
PHP_METHOD(php_wxHtmlCellEvent, GetPoint)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCellEvent::GetPoint\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCellEvent* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCellEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCellEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCellEvent::GetPoint call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELLEVENT_TYPE){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCellEvent::GetPoint() to return new object\n\n");
				#endif

				wxPoint value_to_return0;
				value_to_return0 = ((wxHtmlCellEvent_php*)native_object)->GetPoint();
				void* ptr = safe_emalloc(1, sizeof(wxPoint_php), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				((wxPoint_php*)ptr)->phpObj = return_value;
				((wxPoint_php*)ptr)->InitProperties();
				zo_wxPoint* zo0 = (zo_wxPoint*) zend_object_store_get_object(return_value TSRMLS_CC);
				zo0->native_object = (wxPoint_php*) ptr;


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCellEvent::GetPoint\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlCellEvent::SetLinkClicked(bool linkclicked)
   Call this function with linkclicked set to true if the cell which has been clicked contained a link or false otherwise (which is the default). */
PHP_METHOD(php_wxHtmlCellEvent, SetLinkClicked)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCellEvent::SetLinkClicked\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCellEvent* current_object;
	wxphp_object_type current_object_type;
	wxHtmlCellEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlCellEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlCellEvent::SetLinkClicked call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLCELLEVENT_TYPE){
				references = &((wxHtmlCellEvent_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool linkclicked0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'b' (&linkclicked0)\n");
		#endif

		char parse_parameters_string[] = "b";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &linkclicked0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlCellEvent::SetLinkClicked(linkclicked0)\n\n");
				#endif

				((wxHtmlCellEvent_php*)native_object)->SetLinkClicked(linkclicked0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlCellEvent::SetLinkClicked\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlCellEvent::wxHtmlCellEvent(int commandType, int id, wxHtmlCell &cell, wxPoint point, wxMouseEvent ev)
   The constructor is not normally used by the user code. */
PHP_METHOD(php_wxHtmlCellEvent, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlCellEvent::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlCellEvent* current_object;
	wxHtmlCellEvent_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	long commandType0;
	long id0;
	zval* cell0 = 0;
	wxHtmlCell* object_pointer0_2 = 0;
	zval* point0 = 0;
	wxPoint* object_pointer0_3 = 0;
	zval* ev0 = 0;
	wxMouseEvent* object_pointer0_4 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llzOO' (&commandType0, &id0, &cell0, &point0, php_wxPoint_entry, &ev0, php_wxMouseEvent_entry)\n");
		#endif

		char parse_parameters_string[] = "llzOO";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &commandType0, &id0, &cell0, &point0, php_wxPoint_entry, &ev0, php_wxMouseEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 3){
				if(Z_TYPE_P(cell0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlCell*) zend_object_store_get_object(cell0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlCell*) zend_object_store_get_object(cell0 TSRMLS_CC))->native_object;
					object_pointer0_2 = (wxHtmlCell*) argument_native_object;
					if (!object_pointer0_2 || (argument_type != PHP_WXHTMLCELL_TYPE && argument_type != PHP_WXHTMLCONTAINERCELL_TYPE && argument_type != PHP_WXHTMLCOLOURCELL_TYPE && argument_type != PHP_WXHTMLWIDGETCELL_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'cell' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cell0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'cell' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(point0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxPoint*) zend_object_store_get_object(point0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxPoint*) zend_object_store_get_object(point0 TSRMLS_CC))->native_object;
					object_pointer0_3 = (wxPoint*) argument_native_object;
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter 'point' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(point0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'point' not null, could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(ev0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxMouseEvent*) zend_object_store_get_object(ev0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxMouseEvent*) zend_object_store_get_object(ev0 TSRMLS_CC))->native_object;
					object_pointer0_4 = (wxMouseEvent*) argument_native_object;
					if (!object_pointer0_4 )
					{
						zend_error(E_ERROR, "Parameter 'ev' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(ev0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'ev' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct((wxEventType) commandType0, (int) id0, (wxHtmlCell*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxMouseEvent*) object_pointer0_4)\n");
				#endif

				native_object = new wxHtmlCellEvent_php((wxEventType) commandType0, (int) id0, (wxHtmlCell*) object_pointer0_2, *(wxPoint*) object_pointer0_3, *(wxMouseEvent*) object_pointer0_4);

				native_object->references.Initialize();
				((wxHtmlCellEvent_php*) native_object)->references.AddReference(cell0, "wxHtmlCellEvent::wxHtmlCellEvent at call with 5 argument(s)");
				((wxHtmlCellEvent_php*) native_object)->references.AddReference(point0, "wxHtmlCellEvent::wxHtmlCellEvent at call with 5 argument(s)");
				((wxHtmlCellEvent_php*) native_object)->references.AddReference(ev0, "wxHtmlCellEvent::wxHtmlCellEvent at call with 5 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlCellEvent*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlCellEvent::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlDCRenderer_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlDCRenderer* custom_object = (zo_wxHtmlDCRenderer*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlDCRenderer_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlDCRenderer done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlDCRenderer_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlDCRenderer_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlDCRenderer* custom_object;
    custom_object = (zo_wxHtmlDCRenderer*) emalloc(sizeof(zo_wxHtmlDCRenderer));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlDCRenderer_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLDCRENDERER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto int wxHtmlDCRenderer::GetTotalHeight()
   Returns the height of the HTML text in pixels. */
PHP_METHOD(php_wxHtmlDCRenderer, GetTotalHeight)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlDCRenderer::GetTotalHeight\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlDCRenderer* current_object;
	wxphp_object_type current_object_type;
	wxHtmlDCRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlDCRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlDCRenderer::GetTotalHeight call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLDCRENDERER_TYPE){
				references = &((wxHtmlDCRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlDCRenderer::GetTotalHeight())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxHtmlDCRenderer_php*)native_object)->GetTotalHeight());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlDCRenderer::GetTotalHeight\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlDCRenderer::GetTotalWidth()
   Returns the width of the HTML text in pixels. */
PHP_METHOD(php_wxHtmlDCRenderer, GetTotalWidth)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlDCRenderer::GetTotalWidth\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlDCRenderer* current_object;
	wxphp_object_type current_object_type;
	wxHtmlDCRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlDCRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlDCRenderer::GetTotalWidth call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLDCRENDERER_TYPE){
				references = &((wxHtmlDCRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlDCRenderer::GetTotalWidth())\n\n");
				#endif

				ZVAL_LONG(return_value, ((wxHtmlDCRenderer_php*)native_object)->GetTotalWidth());


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlDCRenderer::GetTotalWidth\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlDCRenderer::wxHtmlDCRenderer()
   Constructor. */
PHP_METHOD(php_wxHtmlDCRenderer, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlDCRenderer::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlDCRenderer* current_object;
	wxHtmlDCRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxHtmlDCRenderer_php();

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlDCRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlDCRenderer::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxHtmlDCRenderer::SetStandardFonts(int size, string normal_face, string fixed_face)
   Sets font sizes to be relative to the given size or the system default size; use either specified or default font. */
PHP_METHOD(php_wxHtmlDCRenderer, SetStandardFonts)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlDCRenderer::SetStandardFonts\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlDCRenderer* current_object;
	wxphp_object_type current_object_type;
	wxHtmlDCRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlDCRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlDCRenderer::SetStandardFonts call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLDCRENDERER_TYPE){
				references = &((wxHtmlDCRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long size0;
	char* normal_face0;
	long normal_face_len0;
	char* fixed_face0;
	long fixed_face_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lss' (&size0, &normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0)\n");
		#endif

		char parse_parameters_string[] = "|lss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &size0, &normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlDCRenderer::SetStandardFonts()\n\n");
				#endif

				((wxHtmlDCRenderer_php*)native_object)->SetStandardFonts();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlDCRenderer::SetStandardFonts((int) size0)\n\n");
				#endif

				((wxHtmlDCRenderer_php*)native_object)->SetStandardFonts((int) size0);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlDCRenderer::SetStandardFonts((int) size0, wxString(normal_face0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlDCRenderer_php*)native_object)->SetStandardFonts((int) size0, wxString(normal_face0, wxConvUTF8));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlDCRenderer::SetStandardFonts((int) size0, wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlDCRenderer_php*)native_object)->SetStandardFonts((int) size0, wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlDCRenderer::SetStandardFonts\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlDCRenderer::SetSize(int width, int height)
   Set size of output rectangle, in pixels. */
PHP_METHOD(php_wxHtmlDCRenderer, SetSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlDCRenderer::SetSize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlDCRenderer* current_object;
	wxphp_object_type current_object_type;
	wxHtmlDCRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlDCRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlDCRenderer::SetSize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLDCRENDERER_TYPE){
				references = &((wxHtmlDCRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long width0;
	long height0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&width0, &height0)\n");
		#endif

		char parse_parameters_string[] = "ll";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &width0, &height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlDCRenderer::SetSize((int) width0, (int) height0)\n\n");
				#endif

				((wxHtmlDCRenderer_php*)native_object)->SetSize((int) width0, (int) height0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlDCRenderer::SetSize\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlDCRenderer::SetHtmlText(string html, string basepath, bool isdir)
   Assign text to the renderer. */
PHP_METHOD(php_wxHtmlDCRenderer, SetHtmlText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlDCRenderer::SetHtmlText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlDCRenderer* current_object;
	wxphp_object_type current_object_type;
	wxHtmlDCRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlDCRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlDCRenderer::SetHtmlText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLDCRENDERER_TYPE){
				references = &((wxHtmlDCRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* html0;
	long html_len0;
	char* basepath0;
	long basepath_len0;
	bool isdir0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sb' (&html0, &html_len0, &basepath0, &basepath_len0, &isdir0)\n");
		#endif

		char parse_parameters_string[] = "s|sb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &html0, &html_len0, &basepath0, &basepath_len0, &isdir0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlDCRenderer::SetHtmlText(wxString(html0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlDCRenderer_php*)native_object)->SetHtmlText(wxString(html0, wxConvUTF8));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlDCRenderer::SetHtmlText(wxString(html0, wxConvUTF8), wxString(basepath0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlDCRenderer_php*)native_object)->SetHtmlText(wxString(html0, wxConvUTF8), wxString(basepath0, wxConvUTF8));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlDCRenderer::SetHtmlText(wxString(html0, wxConvUTF8), wxString(basepath0, wxConvUTF8), isdir0)\n\n");
				#endif

				((wxHtmlDCRenderer_php*)native_object)->SetHtmlText(wxString(html0, wxConvUTF8), wxString(basepath0, wxConvUTF8), isdir0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlDCRenderer::SetHtmlText\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlDCRenderer::SetFonts(string normal_face, string fixed_face, array sizes)
   This function sets font sizes and faces. */
PHP_METHOD(php_wxHtmlDCRenderer, SetFonts)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlDCRenderer::SetFonts\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlDCRenderer* current_object;
	wxphp_object_type current_object_type;
	wxHtmlDCRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlDCRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlDCRenderer::SetFonts call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLDCRENDERER_TYPE){
				references = &((wxHtmlDCRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* normal_face0;
	long normal_face_len0;
	char* fixed_face0;
	long fixed_face_len0;
	zval* sizes0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|a' (&normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0, &sizes0)\n");
		#endif

		char parse_parameters_string[] = "ss|a";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0, &sizes0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		int array_count0_2 = 1;
		HashTable* arr_hash0_2;
		if(arguments_received > 2)
		{
			arr_hash0_2 = Z_ARRVAL_P(sizes0);
			array_count0_2 = zend_hash_num_elements(arr_hash0_2);
		}
		int* integers_array0_2 = new int[array_count0_2];
		bool integers_continue0_2 = true;

		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlDCRenderer::SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlDCRenderer_php*)native_object)->SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8));


				return;
				break;
			}
			case 3:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(integers_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(sizes0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_long_ex(temp_array_value0_2);
						integers_array0_2[array_index0_2] = (int) Z_LVAL_PP(temp_array_value0_2);
						array_index0_2++;
					}
					else
					{
						integers_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlDCRenderer::SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8), (const int*) integers_array0_2)\n\n");
				#endif

				((wxHtmlDCRenderer_php*)native_object)->SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8), (const int*) integers_array0_2);

				delete[] integers_array0_2;

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlDCRenderer::SetFonts\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlDCRenderer::SetDC(wxDC &dc, float pixel_scale)
   Assign DC instance to the renderer. */
PHP_METHOD(php_wxHtmlDCRenderer, SetDC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlDCRenderer::SetDC\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlDCRenderer* current_object;
	wxphp_object_type current_object_type;
	wxHtmlDCRenderer_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlDCRenderer*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlDCRenderer::SetDC call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLDCRENDERER_TYPE){
				references = &((wxHtmlDCRenderer_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* dc0 = 0;
	wxDC* object_pointer0_0 = 0;
	double pixel_scale0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|d' (&dc0, &pixel_scale0)\n");
		#endif

		char parse_parameters_string[] = "z|d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dc0, &pixel_scale0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dc0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDC*) zend_object_store_get_object(dc0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDC*) zend_object_store_get_object(dc0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDC*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'dc' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dc0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'dc' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlDCRenderer::SetDC((wxDC*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlDCRenderer_php*)native_object)->SetDC((wxDC*) object_pointer0_0);

				references->AddReference(dc0, "wxHtmlDCRenderer::SetDC at call with 1 argument(s)");

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlDCRenderer::SetDC((wxDC*) object_pointer0_0, pixel_scale0)\n\n");
				#endif

				((wxHtmlDCRenderer_php*)native_object)->SetDC((wxDC*) object_pointer0_0, pixel_scale0);

				references->AddReference(dc0, "wxHtmlDCRenderer::SetDC at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlDCRenderer::SetDC\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlEasyPrinting_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlEasyPrinting* custom_object = (zo_wxHtmlEasyPrinting*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlEasyPrinting_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlEasyPrinting done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlEasyPrinting_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlEasyPrinting_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlEasyPrinting* custom_object;
    custom_object = (zo_wxHtmlEasyPrinting*) emalloc(sizeof(zo_wxHtmlEasyPrinting));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlEasyPrinting_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLEASYPRINTING_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto string wxHtmlEasyPrinting::GetName()
   Returns the current name being used for preview frames and setup dialogs. */
PHP_METHOD(php_wxHtmlEasyPrinting, GetName)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::GetName\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::GetName call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlEasyPrinting::GetName().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				value_to_return0 = ((wxHtmlEasyPrinting_php*)native_object)->GetName();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::GetName\n");
	}
}
/* }}} */

/* {{{ proto wxPageSetupDialogData wxHtmlEasyPrinting::GetPageSetupData()
   Returns a pointer to wxPageSetupDialogData instance used by this class. */
PHP_METHOD(php_wxHtmlEasyPrinting, GetPageSetupData)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::GetPageSetupData\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::GetPageSetupData call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::GetPageSetupData() to return object pointer\n\n");
				#endif

				wxPageSetupDialogData_php* value_to_return0;
				value_to_return0 = (wxPageSetupDialogData_php*) ((wxHtmlEasyPrinting_php*)native_object)->GetPageSetupData();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxPageSetupDialogData_entry);
					((zo_wxPageSetupDialogData*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPageSetupDialogData_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlEasyPrinting::GetPageSetupData at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::GetPageSetupData\n");
	}
}
/* }}} */

/* {{{ proto wxWindow wxHtmlEasyPrinting::GetParentWindow()
   Gets the parent window for dialogs. */
PHP_METHOD(php_wxHtmlEasyPrinting, GetParentWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::GetParentWindow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::GetParentWindow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::GetParentWindow() to return object pointer\n\n");
				#endif

				wxWindow_php* value_to_return0;
				value_to_return0 = (wxWindow_php*) ((wxHtmlEasyPrinting_php*)native_object)->GetParentWindow();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxWindow_entry);
					((zo_wxWindow*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxWindow_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlEasyPrinting::GetParentWindow at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::GetParentWindow\n");
	}
}
/* }}} */

/* {{{ proto wxPrintData wxHtmlEasyPrinting::GetPrintData()
   Returns pointer to wxPrintData instance used by this class. */
PHP_METHOD(php_wxHtmlEasyPrinting, GetPrintData)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::GetPrintData\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::GetPrintData call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::GetPrintData() to return object pointer\n\n");
				#endif

				wxPrintData_php* value_to_return0;
				value_to_return0 = (wxPrintData_php*) ((wxHtmlEasyPrinting_php*)native_object)->GetPrintData();

				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxPrintData_entry);
					((zo_wxPrintData*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxPrintData_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlEasyPrinting::GetPrintData at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::GetPrintData\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlEasyPrinting::PageSetup()
   Display page setup dialog and allows the user to modify settings. */
PHP_METHOD(php_wxHtmlEasyPrinting, PageSetup)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::PageSetup\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::PageSetup call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::PageSetup()\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->PageSetup();


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::PageSetup\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlEasyPrinting::PreviewFile(string htmlfile)
   Preview HTML file. */
PHP_METHOD(php_wxHtmlEasyPrinting, PreviewFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::PreviewFile\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::PreviewFile call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* htmlfile0;
	long htmlfile_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&htmlfile0, &htmlfile_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &htmlfile0, &htmlfile_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlEasyPrinting::PreviewFile(wxString(htmlfile0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlEasyPrinting_php*)native_object)->PreviewFile(wxString(htmlfile0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::PreviewFile\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlEasyPrinting::PreviewText(string htmltext, string basepath)
   Preview HTML text (not file!). */
PHP_METHOD(php_wxHtmlEasyPrinting, PreviewText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::PreviewText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::PreviewText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* htmltext0;
	long htmltext_len0;
	char* basepath0;
	long basepath_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|s' (&htmltext0, &htmltext_len0, &basepath0, &basepath_len0)\n");
		#endif

		char parse_parameters_string[] = "s|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &htmltext0, &htmltext_len0, &basepath0, &basepath_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlEasyPrinting::PreviewText(wxString(htmltext0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlEasyPrinting_php*)native_object)->PreviewText(wxString(htmltext0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlEasyPrinting::PreviewText(wxString(htmltext0, wxConvUTF8), wxString(basepath0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlEasyPrinting_php*)native_object)->PreviewText(wxString(htmltext0, wxConvUTF8), wxString(basepath0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::PreviewText\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlEasyPrinting::PrintFile(string htmlfile)
   Print HTML file. */
PHP_METHOD(php_wxHtmlEasyPrinting, PrintFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::PrintFile\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::PrintFile call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* htmlfile0;
	long htmlfile_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&htmlfile0, &htmlfile_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &htmlfile0, &htmlfile_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlEasyPrinting::PrintFile(wxString(htmlfile0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlEasyPrinting_php*)native_object)->PrintFile(wxString(htmlfile0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::PrintFile\n");
	}
}
/* }}} */

/* {{{ proto bool wxHtmlEasyPrinting::PrintText(string htmltext, string basepath)
   Print HTML text (not file!). */
PHP_METHOD(php_wxHtmlEasyPrinting, PrintText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::PrintText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::PrintText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* htmltext0;
	long htmltext_len0;
	char* basepath0;
	long basepath_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|s' (&htmltext0, &htmltext_len0, &basepath0, &basepath_len0)\n");
		#endif

		char parse_parameters_string[] = "s|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &htmltext0, &htmltext_len0, &basepath0, &basepath_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlEasyPrinting::PrintText(wxString(htmltext0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlEasyPrinting_php*)native_object)->PrintText(wxString(htmltext0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(wxHtmlEasyPrinting::PrintText(wxString(htmltext0, wxConvUTF8), wxString(basepath0, wxConvUTF8)))\n\n");
				#endif

				ZVAL_BOOL(return_value, ((wxHtmlEasyPrinting_php*)native_object)->PrintText(wxString(htmltext0, wxConvUTF8), wxString(basepath0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::PrintText\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlEasyPrinting::SetFooter(string footer, int pg)
   Set page footer. */
PHP_METHOD(php_wxHtmlEasyPrinting, SetFooter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::SetFooter\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::SetFooter call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* footer0;
	long footer_len0;
	long pg0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&footer0, &footer_len0, &pg0)\n");
		#endif

		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &footer0, &footer_len0, &pg0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::SetFooter(wxString(footer0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->SetFooter(wxString(footer0, wxConvUTF8));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::SetFooter(wxString(footer0, wxConvUTF8), (int) pg0)\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->SetFooter(wxString(footer0, wxConvUTF8), (int) pg0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::SetFooter\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlEasyPrinting::SetHeader(string header, int pg)
   Set page header. */
PHP_METHOD(php_wxHtmlEasyPrinting, SetHeader)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::SetHeader\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::SetHeader call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* header0;
	long header_len0;
	long pg0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&header0, &header_len0, &pg0)\n");
		#endif

		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &header0, &header_len0, &pg0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::SetHeader(wxString(header0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->SetHeader(wxString(header0, wxConvUTF8));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::SetHeader(wxString(header0, wxConvUTF8), (int) pg0)\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->SetHeader(wxString(header0, wxConvUTF8), (int) pg0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::SetHeader\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlEasyPrinting::wxHtmlEasyPrinting(string name, wxWindow &parentWindow)
   Constructor. */
PHP_METHOD(php_wxHtmlEasyPrinting, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	char* name0;
	long name_len0;
	zval* parentWindow0 = 0;
	wxWindow* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sz' (&name0, &name_len0, &parentWindow0)\n");
		#endif

		char parse_parameters_string[] = "|sz";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &name0, &name_len0, &parentWindow0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(parentWindow0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(parentWindow0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(parentWindow0 TSRMLS_CC))->native_object;
					object_pointer0_1 = (wxWindow*) argument_native_object;
					if (!object_pointer0_1 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parentWindow' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parentWindow0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parentWindow' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxHtmlEasyPrinting_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(name0, wxConvUTF8))\n");
				#endif

				native_object = new wxHtmlEasyPrinting_php(wxString(name0, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(name0, wxConvUTF8), (wxWindow*) object_pointer0_1)\n");
				#endif

				native_object = new wxHtmlEasyPrinting_php(wxString(name0, wxConvUTF8), (wxWindow*) object_pointer0_1);

				native_object->references.Initialize();
				((wxHtmlEasyPrinting_php*) native_object)->references.AddReference(parentWindow0, "wxHtmlEasyPrinting::wxHtmlEasyPrinting at call with 2 argument(s)");
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlEasyPrinting::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxHtmlEasyPrinting::SetStandardFonts(int size, string normal_face, string fixed_face)
   Sets default font sizes and/or default font size. */
PHP_METHOD(php_wxHtmlEasyPrinting, SetStandardFonts)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::SetStandardFonts\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::SetStandardFonts call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long size0;
	char* normal_face0;
	long normal_face_len0;
	char* fixed_face0;
	long fixed_face_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|lss' (&size0, &normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0)\n");
		#endif

		char parse_parameters_string[] = "|lss";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &size0, &normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::SetStandardFonts()\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->SetStandardFonts();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::SetStandardFonts((int) size0)\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->SetStandardFonts((int) size0);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::SetStandardFonts((int) size0, wxString(normal_face0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->SetStandardFonts((int) size0, wxString(normal_face0, wxConvUTF8));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::SetStandardFonts((int) size0, wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->SetStandardFonts((int) size0, wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::SetStandardFonts\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlEasyPrinting::SetParentWindow(wxWindow &window)
   Sets the parent window for dialogs. */
PHP_METHOD(php_wxHtmlEasyPrinting, SetParentWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::SetParentWindow\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::SetParentWindow call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* window0 = 0;
	wxWindow* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&window0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &window0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxWindow*) zend_object_store_get_object(window0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxWindow*) zend_object_store_get_object(window0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxWindow*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXWINDOW_TYPE && argument_type != PHP_WXNONOWNEDWINDOW_TYPE && argument_type != PHP_WXTOPLEVELWINDOW_TYPE && argument_type != PHP_WXFRAME_TYPE && argument_type != PHP_WXSPLASHSCREEN_TYPE && argument_type != PHP_WXMDICHILDFRAME_TYPE && argument_type != PHP_WXMDIPARENTFRAME_TYPE && argument_type != PHP_WXMINIFRAME_TYPE && argument_type != PHP_WXPREVIEWFRAME_TYPE && argument_type != PHP_WXHTMLHELPDIALOG_TYPE && argument_type != PHP_WXHTMLHELPFRAME_TYPE && argument_type != PHP_WXDIALOG_TYPE && argument_type != PHP_WXTEXTENTRYDIALOG_TYPE && argument_type != PHP_WXPASSWORDENTRYDIALOG_TYPE && argument_type != PHP_WXMESSAGEDIALOG_TYPE && argument_type != PHP_WXFINDREPLACEDIALOG_TYPE && argument_type != PHP_WXDIRDIALOG_TYPE && argument_type != PHP_WXSYMBOLPICKERDIALOG_TYPE && argument_type != PHP_WXPROPERTYSHEETDIALOG_TYPE && argument_type != PHP_WXWIZARD_TYPE && argument_type != PHP_WXPROGRESSDIALOG_TYPE && argument_type != PHP_WXCOLOURDIALOG_TYPE && argument_type != PHP_WXFILEDIALOG_TYPE && argument_type != PHP_WXFONTDIALOG_TYPE && argument_type != PHP_WXSINGLECHOICEDIALOG_TYPE && argument_type != PHP_WXGENERICPROGRESSDIALOG_TYPE && argument_type != PHP_WXPOPUPWINDOW_TYPE && argument_type != PHP_WXPOPUPTRANSIENTWINDOW_TYPE && argument_type != PHP_WXCONTROL_TYPE && argument_type != PHP_WXSTATUSBAR_TYPE && argument_type != PHP_WXANYBUTTON_TYPE && argument_type != PHP_WXBUTTON_TYPE && argument_type != PHP_WXBITMAPBUTTON_TYPE && argument_type != PHP_WXTOGGLEBUTTON_TYPE && argument_type != PHP_WXBITMAPTOGGLEBUTTON_TYPE && argument_type != PHP_WXTREECTRL_TYPE && argument_type != PHP_WXCONTROLWITHITEMS_TYPE && argument_type != PHP_WXLISTBOX_TYPE && argument_type != PHP_WXCHECKLISTBOX_TYPE && argument_type != PHP_WXREARRANGELIST_TYPE && argument_type != PHP_WXCHOICE_TYPE && argument_type != PHP_WXBOOKCTRLBASE_TYPE && argument_type != PHP_WXAUINOTEBOOK_TYPE && argument_type != PHP_WXLISTBOOK_TYPE && argument_type != PHP_WXCHOICEBOOK_TYPE && argument_type != PHP_WXNOTEBOOK_TYPE && argument_type != PHP_WXTREEBOOK_TYPE && argument_type != PHP_WXTOOLBOOK_TYPE && argument_type != PHP_WXANIMATIONCTRL_TYPE && argument_type != PHP_WXSTYLEDTEXTCTRL_TYPE && argument_type != PHP_WXSCROLLBAR_TYPE && argument_type != PHP_WXSTATICTEXT_TYPE && argument_type != PHP_WXSTATICLINE_TYPE && argument_type != PHP_WXSTATICBOX_TYPE && argument_type != PHP_WXSTATICBITMAP_TYPE && argument_type != PHP_WXCHECKBOX_TYPE && argument_type != PHP_WXTEXTCTRL_TYPE && argument_type != PHP_WXSEARCHCTRL_TYPE && argument_type != PHP_WXCOMBOBOX_TYPE && argument_type != PHP_WXBITMAPCOMBOBOX_TYPE && argument_type != PHP_WXAUITOOLBAR_TYPE && argument_type != PHP_WXLISTCTRL_TYPE && argument_type != PHP_WXLISTVIEW_TYPE && argument_type != PHP_WXRADIOBOX_TYPE && argument_type != PHP_WXRADIOBUTTON_TYPE && argument_type != PHP_WXSLIDER_TYPE && argument_type != PHP_WXSPINCTRL_TYPE && argument_type != PHP_WXSPINBUTTON_TYPE && argument_type != PHP_WXGAUGE_TYPE && argument_type != PHP_WXHYPERLINKCTRL_TYPE && argument_type != PHP_WXSPINCTRLDOUBLE_TYPE && argument_type != PHP_WXGENERICDIRCTRL_TYPE && argument_type != PHP_WXCALENDARCTRL_TYPE && argument_type != PHP_WXPICKERBASE_TYPE && argument_type != PHP_WXCOLOURPICKERCTRL_TYPE && argument_type != PHP_WXFONTPICKERCTRL_TYPE && argument_type != PHP_WXFILEPICKERCTRL_TYPE && argument_type != PHP_WXDIRPICKERCTRL_TYPE && argument_type != PHP_WXTIMEPICKERCTRL_TYPE && argument_type != PHP_WXTOOLBAR_TYPE && argument_type != PHP_WXDATEPICKERCTRL_TYPE && argument_type != PHP_WXCOLLAPSIBLEPANE_TYPE && argument_type != PHP_WXCOMBOCTRL_TYPE && argument_type != PHP_WXDATAVIEWCTRL_TYPE && argument_type != PHP_WXDATAVIEWLISTCTRL_TYPE && argument_type != PHP_WXDATAVIEWTREECTRL_TYPE && argument_type != PHP_WXHEADERCTRL_TYPE && argument_type != PHP_WXHEADERCTRLSIMPLE_TYPE && argument_type != PHP_WXFILECTRL_TYPE && argument_type != PHP_WXINFOBAR_TYPE && argument_type != PHP_WXRIBBONCONTROL_TYPE && argument_type != PHP_WXRIBBONBAR_TYPE && argument_type != PHP_WXRIBBONBUTTONBAR_TYPE && argument_type != PHP_WXRIBBONGALLERY_TYPE && argument_type != PHP_WXRIBBONPAGE_TYPE && argument_type != PHP_WXRIBBONPANEL_TYPE && argument_type != PHP_WXRIBBONTOOLBAR_TYPE && argument_type != PHP_WXWEBVIEW_TYPE && argument_type != PHP_WXMEDIACTRL_TYPE && argument_type != PHP_WXSPLITTERWINDOW_TYPE && argument_type != PHP_WXPANEL_TYPE && argument_type != PHP_WXSCROLLEDWINDOW_TYPE && argument_type != PHP_WXHTMLWINDOW_TYPE && argument_type != PHP_WXGRID_TYPE && argument_type != PHP_WXPREVIEWCANVAS_TYPE && argument_type != PHP_WXWIZARDPAGE_TYPE && argument_type != PHP_WXWIZARDPAGESIMPLE_TYPE && argument_type != PHP_WXEDITABLELISTBOX_TYPE && argument_type != PHP_WXHSCROLLEDWINDOW_TYPE && argument_type != PHP_WXPREVIEWCONTROLBAR_TYPE && argument_type != PHP_WXMENUBAR_TYPE && argument_type != PHP_WXBANNERWINDOW_TYPE && argument_type != PHP_WXMDICLIENTWINDOW_TYPE && argument_type != PHP_WXTREELISTCTRL_TYPE && argument_type != PHP_WXSASHWINDOW_TYPE && argument_type != PHP_WXSASHLAYOUTWINDOW_TYPE && argument_type != PHP_WXHTMLHELPWINDOW_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'window' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'window' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::SetParentWindow((wxWindow*) object_pointer0_0)\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->SetParentWindow((wxWindow*) object_pointer0_0);

				references->AddReference(window0, "wxHtmlEasyPrinting::SetParentWindow at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::SetParentWindow\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlEasyPrinting::SetName(string name)
   Sets the name used for preview frames and setup dialogs. */
PHP_METHOD(php_wxHtmlEasyPrinting, SetName)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::SetName\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::SetName call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* name0;
	long name_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&name0, &name_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &name0, &name_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::SetName(wxString(name0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->SetName(wxString(name0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::SetName\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlEasyPrinting::SetFonts(string normal_face, string fixed_face, array sizes)
   Sets fonts. */
PHP_METHOD(php_wxHtmlEasyPrinting, SetFonts)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlEasyPrinting::SetFonts\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlEasyPrinting* current_object;
	wxphp_object_type current_object_type;
	wxHtmlEasyPrinting_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlEasyPrinting*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlEasyPrinting::SetFonts call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLEASYPRINTING_TYPE){
				references = &((wxHtmlEasyPrinting_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* normal_face0;
	long normal_face_len0;
	char* fixed_face0;
	long fixed_face_len0;
	zval* sizes0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|a' (&normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0, &sizes0)\n");
		#endif

		char parse_parameters_string[] = "ss|a";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0, &sizes0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		int array_count0_2 = 1;
		HashTable* arr_hash0_2;
		if(arguments_received > 2)
		{
			arr_hash0_2 = Z_ARRVAL_P(sizes0);
			array_count0_2 = zend_hash_num_elements(arr_hash0_2);
		}
		int* integers_array0_2 = new int[array_count0_2];
		bool integers_continue0_2 = true;

		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8));


				return;
				break;
			}
			case 3:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(integers_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(sizes0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_long_ex(temp_array_value0_2);
						integers_array0_2[array_index0_2] = (int) Z_LVAL_PP(temp_array_value0_2);
						array_index0_2++;
					}
					else
					{
						integers_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlEasyPrinting::SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8), (const int*) integers_array0_2)\n\n");
				#endif

				((wxHtmlEasyPrinting_php*)native_object)->SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8), (const int*) integers_array0_2);

				delete[] integers_array0_2;

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlEasyPrinting::SetFonts\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlPrintout_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlPrintout* custom_object = (zo_wxHtmlPrintout*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlPrintout_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlPrintout done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlPrintout_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlPrintout_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlPrintout* custom_object;
    custom_object = (zo_wxHtmlPrintout*) emalloc(sizeof(zo_wxHtmlPrintout));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlPrintout_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLPRINTOUT_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxHtmlPrintout::wxHtmlPrintout(string title)
   Constructor. */
PHP_METHOD(php_wxHtmlPrintout, __construct)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlPrintout::__construct\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlPrintout* current_object;
	wxHtmlPrintout_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	int arguments_received = ZEND_NUM_ARGS();
	
	
	//Parameters for overload 0
	char* title0;
	long title_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|s' (&title0, &title_len0)\n");
		#endif

		char parse_parameters_string[] = "|s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &title0, &title_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct()\n");
				#endif

				native_object = new wxHtmlPrintout_php();

				native_object->references.Initialize();
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing __construct(wxString(title0, wxConvUTF8))\n");
				#endif

				native_object = new wxHtmlPrintout_php(wxString(title0, wxConvUTF8));

				native_object->references.Initialize();
				break;
			}
		}
	}

		
	if(already_called)
	{
		native_object->phpObj = getThis();
		

		current_object = (zo_wxHtmlPrintout*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		current_object->native_object = native_object;
		
		current_object->is_user_initialized = 1;
		
		#ifdef ZTS 
		native_object->TSRMLS_C = TSRMLS_C;
		#endif
	}
	else
	{
		zend_error(E_ERROR, "Abstract class or wrong type/count of parameters passed to: wxHtmlPrintout::__construct\n");
	}
	
	#ifdef USE_WXPHP_DEBUG
		php_printf("===========================================\n\n");
	#endif
}
/* }}} */

/* {{{ proto  wxHtmlPrintout::SetMargins(float top, float bottom, float left, float right, float spaces)
   Sets margins in millimeters. */
PHP_METHOD(php_wxHtmlPrintout, SetMargins)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlPrintout::SetMargins\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlPrintout* current_object;
	wxphp_object_type current_object_type;
	wxHtmlPrintout_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlPrintout*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlPrintout::SetMargins call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLPRINTOUT_TYPE){
				references = &((wxHtmlPrintout_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	double top0;
	double bottom0;
	double left0;
	double right0;
	double spaces0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ddddd' (&top0, &bottom0, &left0, &right0, &spaces0)\n");
		#endif

		char parse_parameters_string[] = "|ddddd";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &top0, &bottom0, &left0, &right0, &spaces0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetMargins()\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetMargins();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetMargins(top0)\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetMargins(top0);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetMargins(top0, bottom0)\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetMargins(top0, bottom0);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetMargins(top0, bottom0, left0)\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetMargins(top0, bottom0, left0);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetMargins(top0, bottom0, left0, right0)\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetMargins(top0, bottom0, left0, right0);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetMargins(top0, bottom0, left0, right0, spaces0)\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetMargins(top0, bottom0, left0, right0, spaces0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlPrintout::SetMargins\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlPrintout::SetHtmlText(string html, string basepath, bool isdir)
   Prepare the class for printing this HTML text. */
PHP_METHOD(php_wxHtmlPrintout, SetHtmlText)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlPrintout::SetHtmlText\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlPrintout* current_object;
	wxphp_object_type current_object_type;
	wxHtmlPrintout_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlPrintout*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlPrintout::SetHtmlText call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLPRINTOUT_TYPE){
				references = &((wxHtmlPrintout_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* html0;
	long html_len0;
	char* basepath0;
	long basepath_len0;
	bool isdir0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sb' (&html0, &html_len0, &basepath0, &basepath_len0, &isdir0)\n");
		#endif

		char parse_parameters_string[] = "s|sb";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &html0, &html_len0, &basepath0, &basepath_len0, &isdir0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetHtmlText(wxString(html0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetHtmlText(wxString(html0, wxConvUTF8));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetHtmlText(wxString(html0, wxConvUTF8), wxString(basepath0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetHtmlText(wxString(html0, wxConvUTF8), wxString(basepath0, wxConvUTF8));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetHtmlText(wxString(html0, wxConvUTF8), wxString(basepath0, wxConvUTF8), isdir0)\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetHtmlText(wxString(html0, wxConvUTF8), wxString(basepath0, wxConvUTF8), isdir0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlPrintout::SetHtmlText\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlPrintout::SetHtmlFile(string htmlfile)
   Prepare the class for printing this HTML file. */
PHP_METHOD(php_wxHtmlPrintout, SetHtmlFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlPrintout::SetHtmlFile\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlPrintout* current_object;
	wxphp_object_type current_object_type;
	wxHtmlPrintout_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlPrintout*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlPrintout::SetHtmlFile call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLPRINTOUT_TYPE){
				references = &((wxHtmlPrintout_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* htmlfile0;
	long htmlfile_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&htmlfile0, &htmlfile_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &htmlfile0, &htmlfile_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetHtmlFile(wxString(htmlfile0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetHtmlFile(wxString(htmlfile0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlPrintout::SetHtmlFile\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlPrintout::SetHeader(string header, int pg)
   Set page header. */
PHP_METHOD(php_wxHtmlPrintout, SetHeader)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlPrintout::SetHeader\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlPrintout* current_object;
	wxphp_object_type current_object_type;
	wxHtmlPrintout_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlPrintout*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlPrintout::SetHeader call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLPRINTOUT_TYPE){
				references = &((wxHtmlPrintout_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* header0;
	long header_len0;
	long pg0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&header0, &header_len0, &pg0)\n");
		#endif

		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &header0, &header_len0, &pg0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetHeader(wxString(header0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetHeader(wxString(header0, wxConvUTF8));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetHeader(wxString(header0, wxConvUTF8), (int) pg0)\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetHeader(wxString(header0, wxConvUTF8), (int) pg0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlPrintout::SetHeader\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlPrintout::SetFooter(string footer, int pg)
   Set page footer. */
PHP_METHOD(php_wxHtmlPrintout, SetFooter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlPrintout::SetFooter\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlPrintout* current_object;
	wxphp_object_type current_object_type;
	wxHtmlPrintout_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlPrintout*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlPrintout::SetFooter call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLPRINTOUT_TYPE){
				references = &((wxHtmlPrintout_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* footer0;
	long footer_len0;
	long pg0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&footer0, &footer_len0, &pg0)\n");
		#endif

		char parse_parameters_string[] = "s|l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &footer0, &footer_len0, &pg0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetFooter(wxString(footer0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetFooter(wxString(footer0, wxConvUTF8));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetFooter(wxString(footer0, wxConvUTF8), (int) pg0)\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetFooter(wxString(footer0, wxConvUTF8), (int) pg0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlPrintout::SetFooter\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlPrintout::SetFonts(string normal_face, string fixed_face, array sizes)
   This function sets font sizes and faces. */
PHP_METHOD(php_wxHtmlPrintout, SetFonts)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlPrintout::SetFonts\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlPrintout* current_object;
	wxphp_object_type current_object_type;
	wxHtmlPrintout_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlPrintout*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlPrintout::SetFonts call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLPRINTOUT_TYPE){
				references = &((wxHtmlPrintout_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* normal_face0;
	long normal_face_len0;
	char* fixed_face0;
	long fixed_face_len0;
	zval* sizes0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|a' (&normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0, &sizes0)\n");
		#endif

		char parse_parameters_string[] = "ss|a";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0, &sizes0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		int array_count0_2 = 1;
		HashTable* arr_hash0_2;
		if(arguments_received > 2)
		{
			arr_hash0_2 = Z_ARRVAL_P(sizes0);
			array_count0_2 = zend_hash_num_elements(arr_hash0_2);
		}
		int* integers_array0_2 = new int[array_count0_2];
		bool integers_continue0_2 = true;

		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8))\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8));


				return;
				break;
			}
			case 3:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(integers_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(sizes0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_long_ex(temp_array_value0_2);
						integers_array0_2[array_index0_2] = (int) Z_LVAL_PP(temp_array_value0_2);
						array_index0_2++;
					}
					else
					{
						integers_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlPrintout::SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8), (const int*) integers_array0_2)\n\n");
				#endif

				((wxHtmlPrintout_php*)native_object)->SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8), (const int*) integers_array0_2);

				delete[] integers_array0_2;

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlPrintout::SetFonts\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlPrintout::AddFilter(wxHtmlFilter &filter)
   Adds a filter to the static list of filters for wxHtmlPrintout. */
PHP_METHOD(php_wxHtmlPrintout, AddFilter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlPrintout::AddFilter\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlPrintout* current_object;
	wxphp_object_type current_object_type;
	wxHtmlPrintout_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlPrintout*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlPrintout::AddFilter call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLPRINTOUT_TYPE){
				references = &((wxHtmlPrintout_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* filter0 = 0;
	wxHtmlFilter* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&filter0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &filter0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(filter0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlFilter*) zend_object_store_get_object(filter0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlFilter*) zend_object_store_get_object(filter0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlFilter*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXHTMLFILTER_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'filter' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(filter0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'filter' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxHtmlPrintout::AddFilter((wxHtmlFilter*) object_pointer0_0)\n\n");
				#endif

				wxHtmlPrintout::AddFilter((wxHtmlFilter*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlPrintout::AddFilter\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlTagsModule_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlTagsModule* custom_object = (zo_wxHtmlTagsModule*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlTagsModule_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlTagsModule done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlTagsModule_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlTagsModule_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlTagsModule* custom_object;
    custom_object = (zo_wxHtmlTagsModule*) emalloc(sizeof(zo_wxHtmlTagsModule));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlTagsModule_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLTAGSMODULE_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxHtmlTagsModule::FillHandlersTable(wxHtmlWinParser &parser)
   You must override this method. */
PHP_METHOD(php_wxHtmlTagsModule, FillHandlersTable)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlTagsModule::FillHandlersTable\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlTagsModule* current_object;
	wxphp_object_type current_object_type;
	wxHtmlTagsModule_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlTagsModule*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlTagsModule::FillHandlersTable call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLTAGSMODULE_TYPE){
				references = &((wxHtmlTagsModule_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* parser0 = 0;
	wxHtmlWinParser* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&parser0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &parser0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parser0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlWinParser*) zend_object_store_get_object(parser0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlWinParser*) zend_object_store_get_object(parser0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlWinParser*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXHTMLWINPARSER_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'parser' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parser0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'parser' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlTagsModule::FillHandlersTable((wxHtmlWinParser*) object_pointer0_0)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLTAGSMODULE_TYPE)
				{
					((wxHtmlTagsModule_php*)native_object)->FillHandlersTable((wxHtmlWinParser*) object_pointer0_0);
				}

				references->AddReference(parser0, "wxHtmlTagsModule::FillHandlersTable at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlTagsModule::FillHandlersTable\n");
	}
}
/* }}} */

BEGIN_EXTERN_C()
void php_wxHtmlWinTagHandler_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlWinTagHandler* custom_object = (zo_wxHtmlWinTagHandler*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlWinTagHandler_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
			custom_object->native_object->UninitProperties();
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlWinTagHandler done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlWinTagHandler_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlWinTagHandler_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlWinTagHandler* custom_object;
    custom_object = (zo_wxHtmlWinTagHandler*) emalloc(sizeof(zo_wxHtmlWinTagHandler));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlWinTagHandler_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLWINTAGHANDLER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

BEGIN_EXTERN_C()
void php_wxHtmlWinParser_free(void *object TSRMLS_DC) 
{
    zo_wxHtmlWinParser* custom_object = (zo_wxHtmlWinParser*) object;
    
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlWinParser_free on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	if(custom_object->native_object != NULL)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Pointer not null\n");
		php_printf("Pointer address %x\n", (unsigned int)(size_t)custom_object->native_object);
		#endif
		
		if(custom_object->is_user_initialized)
		{
			#ifdef USE_WXPHP_DEBUG
			php_printf("Deleting pointer with delete\n");
			#endif
			
       
            delete custom_object->native_object;
			
			custom_object->native_object = NULL;
		}
		
		#ifdef USE_WXPHP_DEBUG
		php_printf("Deletion of wxHtmlWinParser done\n");
		php_printf("===========================================\n\n");
		#endif
	}
	else
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Not user space initialized\n");
		#endif
	}

	zend_object_std_dtor(&custom_object->zo TSRMLS_CC);
    efree(custom_object);
}

zend_object_value php_wxHtmlWinParser_new(zend_class_entry *class_type TSRMLS_DC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Calling php_wxHtmlWinParser_new on %s at line %i\n", zend_get_executed_filename(TSRMLS_C), zend_get_executed_lineno(TSRMLS_C));
	php_printf("===========================================\n");
	#endif
	
	zval *temp;
    zend_object_value retval;
    zo_wxHtmlWinParser* custom_object;
    custom_object = (zo_wxHtmlWinParser*) emalloc(sizeof(zo_wxHtmlWinParser));

    zend_object_std_init(&custom_object->zo, class_type TSRMLS_CC);

#if PHP_VERSION_ID < 50399
	ALLOC_HASHTABLE(custom_object->zo.properties);
    zend_hash_init(custom_object->zo.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
    zend_hash_copy(custom_object->zo.properties, &class_type->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
#else
	object_properties_init(&custom_object->zo, class_type);
#endif

	retval.handle = zend_objects_store_put(custom_object, NULL, php_wxHtmlWinParser_free, NULL TSRMLS_CC);
	retval.handlers = zend_get_std_object_handlers();

    custom_object->native_object = NULL;
	custom_object->object_type = PHP_WXHTMLWINPARSER_TYPE;
	custom_object->is_user_initialized = 0;
	
    return retval;
}
END_EXTERN_C()

/* {{{ proto  wxHtmlWinParser::AddModule(wxHtmlTagsModule &module)
   Adds module() to the list of wxHtmlWinParser tag handler. */
PHP_METHOD(php_wxHtmlWinParser, AddModule)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::AddModule\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::AddModule call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* module0 = 0;
	wxHtmlTagsModule* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&module0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &module0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(module0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlTagsModule*) zend_object_store_get_object(module0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlTagsModule*) zend_object_store_get_object(module0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlTagsModule*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXHTMLTAGSMODULE_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'module' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(module0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'module' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Static ");
				php_printf("Executing wxHtmlWinParser::AddModule((wxHtmlTagsModule*) object_pointer0_0)\n\n");
				#endif

				wxHtmlWinParser::AddModule((wxHtmlTagsModule*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::AddModule\n");
	}
}
/* }}} */

/* {{{ proto wxHtmlContainerCell wxHtmlWinParser::CloseContainer()
   Closes the container, sets actual container to the parent one and returns pointer to it (see Cells and Containers). */
PHP_METHOD(php_wxHtmlWinParser, CloseContainer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::CloseContainer\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::CloseContainer call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::CloseContainer() to return object pointer\n\n");
				#endif

				wxHtmlContainerCell_php* value_to_return0;
				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					value_to_return0 = (wxHtmlContainerCell_php*) ((wxHtmlWinParser_php*)native_object)->CloseContainer();

				}
				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlContainerCell_entry);
					((zo_wxHtmlContainerCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlContainerCell_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlWinParser::CloseContainer at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::CloseContainer\n");
	}
}
/* }}} */

/* {{{ proto wxFont wxHtmlWinParser::CreateCurrentFont()
   Creates font based on current setting (see SetFontSize(), SetFontBold(), SetFontItalic(), SetFontFixed(), wxHtmlWinParser::SetFontUnderlined) and returns pointer to it. */
PHP_METHOD(php_wxHtmlWinParser, CreateCurrentFont)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::CreateCurrentFont\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::CreateCurrentFont call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::CreateCurrentFont() to return object pointer\n\n");
				#endif

				wxFont_php* value_to_return0;
				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					value_to_return0 = (wxFont_php*) ((wxHtmlWinParser_php*)native_object)->CreateCurrentFont();

				}
				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxFont_entry);
					((zo_wxFont*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxFont_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlWinParser::CreateCurrentFont at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::CreateCurrentFont\n");
	}
}
/* }}} */

/* {{{ proto wxColour wxHtmlWinParser::GetActualColor()
   Returns actual text colour. */
PHP_METHOD(php_wxHtmlWinParser, GetActualColor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetActualColor\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetActualColor call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::GetActualColor() to return object reference\n\n");
				#endif

				wxColour_php* value_to_return0;
				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					value_to_return0 = (wxColour_php*) &((wxHtmlWinParser_php*)native_object)->GetActualColor();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxColour_entry);
					((zo_wxColour*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxColour_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxHtmlWinParser::GetActualColor at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetActualColor\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlWinParser::GetAlign()
   Returns default horizontal alignment. */
PHP_METHOD(php_wxHtmlWinParser, GetAlign)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetAlign\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetAlign call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlWinParser::GetAlign())\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHtmlWinParser_php*)native_object)->GetAlign());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetAlign\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlWinParser::GetCharHeight()
   Returns (average) char height in standard font. */
PHP_METHOD(php_wxHtmlWinParser, GetCharHeight)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetCharHeight\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetCharHeight call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlWinParser::GetCharHeight())\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHtmlWinParser_php*)native_object)->GetCharHeight());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetCharHeight\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlWinParser::GetCharWidth()
   Returns average char width in standard font. */
PHP_METHOD(php_wxHtmlWinParser, GetCharWidth)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetCharWidth\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetCharWidth call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlWinParser::GetCharWidth())\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHtmlWinParser_php*)native_object)->GetCharWidth());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetCharWidth\n");
	}
}
/* }}} */

/* {{{ proto wxHtmlContainerCell wxHtmlWinParser::GetContainer()
   Returns pointer to the currently opened container (see Cells and Containers). */
PHP_METHOD(php_wxHtmlWinParser, GetContainer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetContainer\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetContainer call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::GetContainer() to return object pointer\n\n");
				#endif

				wxHtmlContainerCell_php* value_to_return0;
				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					value_to_return0 = (wxHtmlContainerCell_php*) ((wxHtmlWinParser_php*)native_object)->GetContainer();

				}
				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlContainerCell_entry);
					((zo_wxHtmlContainerCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlContainerCell_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlWinParser::GetContainer at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetContainer\n");
	}
}
/* }}} */

/* {{{ proto wxDC wxHtmlWinParser::GetDC()
   Returns pointer to the DC used during parsing. */
PHP_METHOD(php_wxHtmlWinParser, GetDC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetDC\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetDC call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::GetDC() to return object pointer\n\n");
				#endif

				wxDC_php* value_to_return0;
				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					value_to_return0 = (wxDC_php*) ((wxHtmlWinParser_php*)native_object)->GetDC();

				}
				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxDC_entry);
					((zo_wxDC*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxDC_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlWinParser::GetDC at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetDC\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlWinParser::GetFontBold()
   Returns true if actual font is bold, false otherwise. */
PHP_METHOD(php_wxHtmlWinParser, GetFontBold)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetFontBold\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetFontBold call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlWinParser::GetFontBold())\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHtmlWinParser_php*)native_object)->GetFontBold());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetFontBold\n");
	}
}
/* }}} */

/* {{{ proto string wxHtmlWinParser::GetFontFace()
   Returns actual font face name. */
PHP_METHOD(php_wxHtmlWinParser, GetFontFace)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetFontFace\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetFontFace call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(wxHtmlWinParser::GetFontFace().fn_str(), 1)\n\n");
				#endif

				wxString value_to_return0;
				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					value_to_return0 = ((wxHtmlWinParser_php*)native_object)->GetFontFace();
				}
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetFontFace\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlWinParser::GetFontFixed()
   Returns true if actual font is fixed face, false otherwise. */
PHP_METHOD(php_wxHtmlWinParser, GetFontFixed)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetFontFixed\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetFontFixed call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlWinParser::GetFontFixed())\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHtmlWinParser_php*)native_object)->GetFontFixed());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetFontFixed\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlWinParser::GetFontItalic()
   Returns true if actual font is italic, false otherwise. */
PHP_METHOD(php_wxHtmlWinParser, GetFontItalic)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetFontItalic\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetFontItalic call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlWinParser::GetFontItalic())\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHtmlWinParser_php*)native_object)->GetFontItalic());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetFontItalic\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlWinParser::GetFontSize()
   Returns actual font size (HTML size varies from -2 to +4) */
PHP_METHOD(php_wxHtmlWinParser, GetFontSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetFontSize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetFontSize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlWinParser::GetFontSize())\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHtmlWinParser_php*)native_object)->GetFontSize());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetFontSize\n");
	}
}
/* }}} */

/* {{{ proto int wxHtmlWinParser::GetFontUnderlined()
   Returns true if actual font is underlined, false otherwise. */
PHP_METHOD(php_wxHtmlWinParser, GetFontUnderlined)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetFontUnderlined\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetFontUnderlined call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(wxHtmlWinParser::GetFontUnderlined())\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					ZVAL_LONG(return_value, ((wxHtmlWinParser_php*)native_object)->GetFontUnderlined());
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetFontUnderlined\n");
	}
}
/* }}} */

/* {{{ proto wxHtmlLinkInfo wxHtmlWinParser::GetLink()
   Returns actual hypertext link. */
PHP_METHOD(php_wxHtmlWinParser, GetLink)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetLink\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetLink call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::GetLink() to return object reference\n\n");
				#endif

				wxHtmlLinkInfo_php* value_to_return0;
				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					value_to_return0 = (wxHtmlLinkInfo_php*) &((wxHtmlWinParser_php*)native_object)->GetLink();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxHtmlLinkInfo_entry);
					((zo_wxHtmlLinkInfo*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlLinkInfo_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxHtmlWinParser::GetLink at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetLink\n");
	}
}
/* }}} */

/* {{{ proto wxColour wxHtmlWinParser::GetLinkColor()
   Returns the colour of hypertext link text. */
PHP_METHOD(php_wxHtmlWinParser, GetLinkColor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::GetLinkColor\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::GetLinkColor call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::GetLinkColor() to return object reference\n\n");
				#endif

				wxColour_php* value_to_return0;
				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					value_to_return0 = (wxColour_php*) &((wxHtmlWinParser_php*)native_object)->GetLinkColor();

				}
				if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value,php_wxColour_entry);
					((zo_wxColour*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxColour_php*) value_to_return0;
				}

				if((void*)value_to_return0 != (void*)native_object && return_is_user_initialized){ //Prevent adding references to it self
					references->AddReference(return_value, "wxHtmlWinParser::GetLinkColor at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::GetLinkColor\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWinParser::SetActualColor(wxColour clr)
   Sets actual text colour. */
PHP_METHOD(php_wxHtmlWinParser, SetActualColor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetActualColor\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetActualColor call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* clr0 = 0;
	wxColour* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&clr0, php_wxColour_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &clr0, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(clr0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(clr0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(clr0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxColour*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'clr' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(clr0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'clr' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetActualColor(*(wxColour*) object_pointer0_0)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetActualColor(*(wxColour*) object_pointer0_0);
				}

				references->AddReference(clr0, "wxHtmlWinParser::SetActualColor at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetActualColor\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWinParser::SetAlign(int a)
   Sets default horizontal alignment (see wxHtmlContainerCell::SetAlignHor). */
PHP_METHOD(php_wxHtmlWinParser, SetAlign)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetAlign\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetAlign call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long a0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&a0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &a0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetAlign((int) a0)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetAlign((int) a0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetAlign\n");
	}
}
/* }}} */

/* {{{ proto wxHtmlContainerCell wxHtmlWinParser::SetContainer(wxHtmlContainerCell &c)
   Allows you to directly set opened container. */
PHP_METHOD(php_wxHtmlWinParser, SetContainer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetContainer\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetContainer call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* c0 = 0;
	wxHtmlContainerCell* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&c0)\n");
		#endif

		char parse_parameters_string[] = "z";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &c0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(c0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlContainerCell*) zend_object_store_get_object(c0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlContainerCell*) zend_object_store_get_object(c0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlContainerCell*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXHTMLCONTAINERCELL_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'c' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(c0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'c' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetContainer((wxHtmlContainerCell*) object_pointer0_0) to return object pointer\n\n");
				#endif

				wxHtmlContainerCell_php* value_to_return1;
				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					value_to_return1 = (wxHtmlContainerCell_php*) ((wxHtmlWinParser_php*)native_object)->SetContainer((wxHtmlContainerCell*) object_pointer0_0);

				}
				if(value_to_return1 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return1->references.IsUserInitialized()){
					if(value_to_return1->phpObj != NULL){
						*return_value = *value_to_return1->phpObj;
						zval_add_ref(&value_to_return1->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlContainerCell_entry);
					((zo_wxHtmlContainerCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlContainerCell_php*) value_to_return1;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return1 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlWinParser::SetContainer at call with 1 argument(s)");
				}

				references->AddReference(c0, "wxHtmlWinParser::SetContainer at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetContainer\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWinParser::SetDC(wxDC &dc, float pixel_scale)
   Sets the DC. */
PHP_METHOD(php_wxHtmlWinParser, SetDC)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetDC\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetDC call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* dc0 = 0;
	wxDC* object_pointer0_0 = 0;
	double pixel_scale0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z|d' (&dc0, &pixel_scale0)\n");
		#endif

		char parse_parameters_string[] = "z|d";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &dc0, &pixel_scale0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dc0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxDC*) zend_object_store_get_object(dc0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxDC*) zend_object_store_get_object(dc0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxDC*) argument_native_object;
					if (!object_pointer0_0 || (argument_type != PHP_WXDC_TYPE && argument_type != PHP_WXWINDOWDC_TYPE && argument_type != PHP_WXCLIENTDC_TYPE && argument_type != PHP_WXPAINTDC_TYPE && argument_type != PHP_WXSCREENDC_TYPE && argument_type != PHP_WXPOSTSCRIPTDC_TYPE && argument_type != PHP_WXPRINTERDC_TYPE && argument_type != PHP_WXMEMORYDC_TYPE && argument_type != PHP_WXBUFFEREDDC_TYPE && argument_type != PHP_WXBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXAUTOBUFFEREDPAINTDC_TYPE && argument_type != PHP_WXMIRRORDC_TYPE))
					{
						zend_error(E_ERROR, "Parameter 'dc' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dc0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'dc' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetDC((wxDC*) object_pointer0_0)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetDC((wxDC*) object_pointer0_0);
				}

				references->AddReference(dc0, "wxHtmlWinParser::SetDC at call with 1 argument(s)");

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetDC((wxDC*) object_pointer0_0, pixel_scale0)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetDC((wxDC*) object_pointer0_0, pixel_scale0);
				}

				references->AddReference(dc0, "wxHtmlWinParser::SetDC at call with 2 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetDC\n");
	}
}
/* }}} */

/* {{{ proto wxHtmlContainerCell wxHtmlWinParser::OpenContainer()
   Opens new container and returns pointer to it (see Cells and Containers). */
PHP_METHOD(php_wxHtmlWinParser, OpenContainer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::OpenContainer\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::OpenContainer call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif

		overload0_called = true;
		already_called = true;
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::OpenContainer() to return object pointer\n\n");
				#endif

				wxHtmlContainerCell_php* value_to_return0;
				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					value_to_return0 = (wxHtmlContainerCell_php*) ((wxHtmlWinParser_php*)native_object)->OpenContainer();

				}
				if(value_to_return0 == NULL){
					ZVAL_NULL(return_value);
				}
				else if(value_to_return0->references.IsUserInitialized()){
					if(value_to_return0->phpObj != NULL){
						*return_value = *value_to_return0->phpObj;
						zval_add_ref(&value_to_return0->phpObj);
						return_is_user_initialized = true;
					}
					else{
						zend_error(E_ERROR, "Could not retreive original zval.");
					}
				}
				else{
					object_init_ex(return_value, php_wxHtmlContainerCell_entry);
					((zo_wxHtmlContainerCell*) zend_object_store_get_object(return_value TSRMLS_CC))->native_object = (wxHtmlContainerCell_php*) value_to_return0;
				}

				if(Z_TYPE_P(return_value) != IS_NULL && (void*)value_to_return0 != (void*)native_object && return_is_user_initialized){
					references->AddReference(return_value, "wxHtmlWinParser::OpenContainer at call with 0 argument(s)");
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::OpenContainer\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWinParser::SetFontBold(int x)
   Sets bold flag of actualfont. */
PHP_METHOD(php_wxHtmlWinParser, SetFontBold)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetFontBold\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetFontBold call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&x0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetFontBold((int) x0)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetFontBold((int) x0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetFontBold\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWinParser::SetFontFace(string face)
   Sets current font face to face. */
PHP_METHOD(php_wxHtmlWinParser, SetFontFace)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetFontFace\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetFontFace call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* face0;
	long face_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&face0, &face_len0)\n");
		#endif

		char parse_parameters_string[] = "s";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &face0, &face_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetFontFace(wxString(face0, wxConvUTF8))\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetFontFace(wxString(face0, wxConvUTF8));
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetFontFace\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWinParser::SetFontFixed(int x)
   Sets fixed face flag of actualfont. */
PHP_METHOD(php_wxHtmlWinParser, SetFontFixed)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetFontFixed\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetFontFixed call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&x0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetFontFixed((int) x0)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetFontFixed((int) x0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetFontFixed\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWinParser::SetFontItalic(int x)
   Sets italic flag of actualfont. */
PHP_METHOD(php_wxHtmlWinParser, SetFontItalic)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetFontItalic\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetFontItalic call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&x0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetFontItalic((int) x0)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetFontItalic((int) x0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetFontItalic\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWinParser::SetFontSize(int s)
   Sets actual font size (HTML size varies from 1 to 7). */
PHP_METHOD(php_wxHtmlWinParser, SetFontSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetFontSize\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetFontSize call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long s0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&s0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &s0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetFontSize((int) s0)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetFontSize((int) s0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetFontSize\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWinParser::SetFontUnderlined(int x)
   Sets underlined flag of actualfont. */
PHP_METHOD(php_wxHtmlWinParser, SetFontUnderlined)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetFontUnderlined\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetFontUnderlined call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	long x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&x0)\n");
		#endif

		char parse_parameters_string[] = "l";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetFontUnderlined((int) x0)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetFontUnderlined((int) x0);
				}


				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetFontUnderlined\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWinParser::SetFonts(string normal_face, string fixed_face, array sizes)
   Sets fonts. */
PHP_METHOD(php_wxHtmlWinParser, SetFonts)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetFonts\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetFonts call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	char* normal_face0;
	long normal_face_len0;
	char* fixed_face0;
	long fixed_face_len0;
	zval* sizes0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|a' (&normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0, &sizes0)\n");
		#endif

		char parse_parameters_string[] = "ss|a";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &normal_face0, &normal_face_len0, &fixed_face0, &fixed_face_len0, &sizes0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		int array_count0_2 = 1;
		HashTable* arr_hash0_2;
		if(arguments_received > 2)
		{
			arr_hash0_2 = Z_ARRVAL_P(sizes0);
			array_count0_2 = zend_hash_num_elements(arr_hash0_2);
		}
		int* integers_array0_2 = new int[array_count0_2];
		bool integers_continue0_2 = true;

		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8))\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8));
				}


				return;
				break;
			}
			case 3:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(integers_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(sizes0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_long_ex(temp_array_value0_2);
						integers_array0_2[array_index0_2] = (int) Z_LVAL_PP(temp_array_value0_2);
						array_index0_2++;
					}
					else
					{
						integers_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8), (const int*) integers_array0_2)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetFonts(wxString(normal_face0, wxConvUTF8), wxString(fixed_face0, wxConvUTF8), (const int*) integers_array0_2);
				}

				delete[] integers_array0_2;

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetFonts\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWinParser::SetLink(wxHtmlLinkInfo link)
   Sets actual hypertext link. */
PHP_METHOD(php_wxHtmlWinParser, SetLink)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetLink\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetLink call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* link0 = 0;
	wxHtmlLinkInfo* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&link0, php_wxHtmlLinkInfo_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &link0, php_wxHtmlLinkInfo_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(link0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxHtmlLinkInfo*) zend_object_store_get_object(link0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxHtmlLinkInfo*) zend_object_store_get_object(link0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxHtmlLinkInfo*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'link' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(link0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'link' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetLink(*(wxHtmlLinkInfo*) object_pointer0_0)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetLink(*(wxHtmlLinkInfo*) object_pointer0_0);
				}

				references->AddReference(link0, "wxHtmlWinParser::SetLink at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetLink\n");
	}
}
/* }}} */

/* {{{ proto  wxHtmlWinParser::SetLinkColor(wxColour clr)
   Sets colour of hypertext link. */
PHP_METHOD(php_wxHtmlWinParser, SetLinkColor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking wxHtmlWinParser::SetLinkColor\n");
	php_printf("===========================================\n");
	#endif
	
	zo_wxHtmlWinParser* current_object;
	wxphp_object_type current_object_type;
	wxHtmlWinParser_php* native_object;
	void* argument_native_object = NULL;
	
	//Other variables used thru the code
	zval* dummy = NULL;
	bool already_called = false;
	wxPHPObjectReferences* references;
	int arguments_received = ZEND_NUM_ARGS();
	bool return_is_user_initialized = false;
	
	//Get native object of the php object that called the method
	if(getThis() != NULL) 
	{
		current_object = (zo_wxHtmlWinParser*) zend_object_store_get_object(getThis() TSRMLS_CC);
		
		if(current_object->native_object == NULL)
		{
			zend_error(E_ERROR, "Failed to get the native object for wxHtmlWinParser::SetLinkColor call\n");
			
			return;
		}
		else
		{
			native_object = current_object->native_object;
			current_object_type = current_object->object_type;
			
			bool reference_type_found = false;

			if(current_object_type == PHP_WXHTMLWINPARSER_TYPE){
				references = &((wxHtmlWinParser_php*)native_object)->references;
				reference_type_found = true;
			}
		}
	}
	#ifdef USE_WXPHP_DEBUG
	else
	{
		php_printf("Processing the method call as static\n");
	}
	#endif
	
	//Parameters for overload 0
	zval* clr0 = 0;
	wxColour* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&clr0, php_wxColour_entry)\n");
		#endif

		char parse_parameters_string[] = "O";
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, parse_parameters_string, &clr0, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(clr0) == IS_OBJECT)
				{
					wxphp_object_type argument_type = ((zo_wxColour*) zend_object_store_get_object(clr0 TSRMLS_CC))->object_type;
					argument_native_object = (void*) ((zo_wxColour*) zend_object_store_get_object(clr0 TSRMLS_CC))->native_object;
					object_pointer0_0 = (wxColour*) argument_native_object;
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter 'clr' could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(clr0) != IS_NULL)
				{
					zend_error(E_ERROR, "Parameter 'clr' not null, could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing wxHtmlWinParser::SetLinkColor(*(wxColour*) object_pointer0_0)\n\n");
				#endif

				if(current_object_type == PHP_WXHTMLWINPARSER_TYPE)
				{
					((wxHtmlWinParser_php*)native_object)->SetLinkColor(*(wxColour*) object_pointer0_0);
				}

				references->AddReference(clr0, "wxHtmlWinParser::SetLinkColor at call with 1 argument(s)");

				return;
				break;
			}
		}
	}

		
	//In case wrong type/count of parameters was passed
	if(!already_called)
	{
		zend_error(E_ERROR, "Wrong type or count of parameters passed to: wxHtmlWinParser::SetLinkColor\n");
	}
}
/* }}} */

