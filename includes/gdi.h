/*
 * @author Mário Soares
 * @contributors Jefferson González
 * @contributors René Vögeli / Rangee GmbH
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#ifndef WXPHP_GDI_H_GUARD
#define WXPHP_GDI_H_GUARD

#include "references.h"
#include "object_types.h"
#include "arginfo_void.h"

ZEND_BEGIN_ARG_INFO_EX(wxphp_gdi_get_args, 0, 0, 1)
    ZEND_ARG_INFO(0, name)
ZEND_END_ARG_INFO()

extern zend_class_entry* php_wxGraphicsGradientStop_entry;
extern zend_object_handlers wxphp_wxGraphicsGradientStop_object_handlers;
void php_wxGraphicsGradientStop_destruction_handler(zend_resource*);

class wxGraphicsGradientStop_php: public wxGraphicsGradientStop{
    public:

    wxGraphicsGradientStop_php(wxColour col=wxTransparentColour, float pos=0.):wxGraphicsGradientStop(col, pos){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxGraphicsGradientStop{
    wxGraphicsGradientStop_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxGraphicsGradientStop;

void php_wxGraphicsGradientStop_free(void *object);
zend_object* php_wxGraphicsGradientStop_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxGraphicsGradientStop_functions[] = {
    PHP_ME(php_wxGraphicsGradientStop, GetColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGraphicsGradientStop, GetPosition, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGraphicsGradientStop, SetColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGraphicsGradientStop, SetPosition, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGraphicsGradientStop, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxGraphicsGradientStop * php_wxGraphicsGradientStop_fetch_object(zend_object *obj) {
    return (zo_wxGraphicsGradientStop *)(
        (char *)(obj) - XtOffsetOf(zo_wxGraphicsGradientStop, zo)
    );
}

#define Z_wxGraphicsGradientStop_P(zv) \
    php_wxGraphicsGradientStop_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxGraphicsGradientStops_entry;
extern zend_object_handlers wxphp_wxGraphicsGradientStops_object_handlers;
void php_wxGraphicsGradientStops_destruction_handler(zend_resource*);

class wxGraphicsGradientStops_php: public wxGraphicsGradientStops{
    public:

    wxGraphicsGradientStops_php(wxColour startCol=wxTransparentColour, wxColour endCol=wxTransparentColour):wxGraphicsGradientStops(startCol, endCol){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxGraphicsGradientStops{
    wxGraphicsGradientStops_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxGraphicsGradientStops;

void php_wxGraphicsGradientStops_free(void *object);
zend_object* php_wxGraphicsGradientStops_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxGraphicsGradientStops_functions[] = {
    PHP_ME(php_wxGraphicsGradientStops, Add, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGraphicsGradientStops, GetCount, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGraphicsGradientStops, GetEndColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGraphicsGradientStops, GetStartColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGraphicsGradientStops, Item, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGraphicsGradientStops, SetEndColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGraphicsGradientStops, SetStartColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxGraphicsGradientStops, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxGraphicsGradientStops * php_wxGraphicsGradientStops_fetch_object(zend_object *obj) {
    return (zo_wxGraphicsGradientStops *)(
        (char *)(obj) - XtOffsetOf(zo_wxGraphicsGradientStops, zo)
    );
}

#define Z_wxGraphicsGradientStops_P(zv) \
    php_wxGraphicsGradientStops_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxAnimation_entry;
extern zend_object_handlers wxphp_wxAnimation_object_handlers;
void php_wxAnimation_destruction_handler(zend_resource*);

class wxAnimation_php: public wxAnimation{
    public:

    wxAnimation_php(const wxAnimation& anim):wxAnimation(anim){}
    wxAnimation_php(const wxString& name, wxAnimationType type=wxANIMATION_TYPE_ANY):wxAnimation(name, type){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxAnimation{
    wxAnimation_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxAnimation;

void php_wxAnimation_free(void *object);
zend_object* php_wxAnimation_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxAnimation_functions[] = {
    PHP_ME(php_wxAnimation, GetDelay, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAnimation, GetFrame, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAnimation, GetFrameCount, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAnimation, GetSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAnimation, IsOk, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAnimation, LoadFile, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxAnimation, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxAnimation, Load, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxAnimation * php_wxAnimation_fetch_object(zend_object *obj) {
    return (zo_wxAnimation *)(
        (char *)(obj) - XtOffsetOf(zo_wxAnimation, zo)
    );
}

#define Z_wxAnimation_P(zv) \
    php_wxAnimation_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxBitmapHandler_entry;
extern zend_object_handlers wxphp_wxBitmapHandler_object_handlers;
void php_wxBitmapHandler_destruction_handler(zend_resource*);

class wxBitmapHandler_php: public wxBitmapHandler{
    public:

    wxBitmapHandler_php():wxBitmapHandler(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxBitmapHandler{
    wxBitmapHandler_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxBitmapHandler;

void php_wxBitmapHandler_free(void *object);
zend_object* php_wxBitmapHandler_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxBitmapHandler_functions[] = {
    PHP_ME(php_wxBitmapHandler, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxBitmapHandler, SetType, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmapHandler, SetName, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmapHandler, SetExtension, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmapHandler, LoadFile, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmapHandler, GetType, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmapHandler, GetName, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmapHandler, GetExtension, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmapHandler, SaveFile, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmapHandler, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxBitmapHandler * php_wxBitmapHandler_fetch_object(zend_object *obj) {
    return (zo_wxBitmapHandler *)(
        (char *)(obj) - XtOffsetOf(zo_wxBitmapHandler, zo)
    );
}

#define Z_wxBitmapHandler_P(zv) \
    php_wxBitmapHandler_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxBitmap_entry;
extern zend_object_handlers wxphp_wxBitmap_object_handlers;
void php_wxBitmap_destruction_handler(zend_resource*);

class wxBitmap_php: public wxBitmap{
    public:

    wxBitmap_php():wxBitmap(){}
    wxBitmap_php(const wxBitmap& bitmap):wxBitmap(bitmap){}
    wxBitmap_php(int width, int height, int depth=wxBITMAP_SCREEN_DEPTH):wxBitmap(width, height, depth){}
    wxBitmap_php(const wxSize& sz, int depth=wxBITMAP_SCREEN_DEPTH):wxBitmap(sz, depth){}
    wxBitmap_php(const wxString& name, wxBitmapType type=wxBITMAP_DEFAULT_TYPE):wxBitmap(name, type){}
    wxBitmap_php(const wxImage& img, int depth=wxBITMAP_SCREEN_DEPTH):wxBitmap(img, depth){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxBitmap{
    wxBitmap_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxBitmap;

void php_wxBitmap_free(void *object);
zend_object* php_wxBitmap_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxBitmap_functions[] = {
    PHP_ME(php_wxBitmap, AddHandler, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, CleanUpHandlers, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, ConvertToDisabled, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxBitmap, LoadFile, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, RemoveHandler, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, SaveFile, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, SetDepth, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, SetHeight, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, SetWidth, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, ConvertToImage, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, CopyFromIcon, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, FindHandler, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, GetDepth, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, GetHeight, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, GetMask, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, GetPalette, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, GetSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, GetSubBitmap, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, GetWidth, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, InitStandardHandlers, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, InsertHandler, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, IsOk, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, SetMask, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBitmap, SetPalette, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxBitmap * php_wxBitmap_fetch_object(zend_object *obj) {
    return (zo_wxBitmap *)(
        (char *)(obj) - XtOffsetOf(zo_wxBitmap, zo)
    );
}

#define Z_wxBitmap_P(zv) \
    php_wxBitmap_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMask_entry;
extern zend_object_handlers wxphp_wxMask_object_handlers;
void php_wxMask_destruction_handler(zend_resource*);

class wxMask_php: public wxMask{
    public:

    wxMask_php():wxMask(){}
    wxMask_php(const wxBitmap& bitmap, int index):wxMask(bitmap, index){}
    wxMask_php(const wxBitmap& bitmap):wxMask(bitmap){}
    wxMask_php(const wxBitmap& bitmap, const wxColour& colour):wxMask(bitmap, colour){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMask{
    wxMask_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMask;

void php_wxMask_free(void *object);
zend_object* php_wxMask_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMask_functions[] = {
    PHP_ME(php_wxMask, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMask, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxMask * php_wxMask_fetch_object(zend_object *obj) {
    return (zo_wxMask *)(
        (char *)(obj) - XtOffsetOf(zo_wxMask, zo)
    );
}

#define Z_wxMask_P(zv) \
    php_wxMask_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxBrush_entry;
extern zend_object_handlers wxphp_wxBrush_object_handlers;
void php_wxBrush_destruction_handler(zend_resource*);

class wxBrush_php: public wxBrush{
    public:

    wxBrush_php():wxBrush(){}
    wxBrush_php(const wxColour& colour, wxBrushStyle style=wxBRUSHSTYLE_SOLID):wxBrush(colour, style){}
    wxBrush_php(const wxBitmap& stippleBitmap):wxBrush(stippleBitmap){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxBrush{
    wxBrush_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxBrush;

void php_wxBrush_free(void *object);
zend_object* php_wxBrush_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxBrush_functions[] = {
    PHP_ME(php_wxBrush, GetColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBrush, GetStipple, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBrush, GetStyle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBrush, IsHatch, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBrush, IsNonTransparent, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBrush, IsOk, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBrush, IsTransparent, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBrush, SetColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBrush, SetStipple, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBrush, SetStyle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxBrush, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxBrush * php_wxBrush_fetch_object(zend_object *obj) {
    return (zo_wxBrush *)(
        (char *)(obj) - XtOffsetOf(zo_wxBrush, zo)
    );
}

#define Z_wxBrush_P(zv) \
    php_wxBrush_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxColour_entry;
extern zend_object_handlers wxphp_wxColour_object_handlers;
void php_wxColour_destruction_handler(zend_resource*);

class wxColour_php: public wxColour{
    public:

    wxColour_php(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha=wxALPHA_OPAQUE):wxColour(red, green, blue, alpha){}
    wxColour_php(const wxString& colourName):wxColour(colourName){}
    wxColour_php(unsigned long colRGB):wxColour(colRGB){}
    wxColour_php(const wxColour& colour):wxColour(colour){}
    wxColour_php():wxColour(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxColour{
    wxColour_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxColour;

void php_wxColour_free(void *object);
zend_object* php_wxColour_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxColour_functions[] = {
    PHP_ME(php_wxColour, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxColour, Set, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColour, Red, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColour, SetRGB, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColour, SetRGBA, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColour, Blue, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColour, Green, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColour, GetRGBA, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColour, GetRGB, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColour, Alpha, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxColour * php_wxColour_fetch_object(zend_object *obj) {
    return (zo_wxColour *)(
        (char *)(obj) - XtOffsetOf(zo_wxColour, zo)
    );
}

#define Z_wxColour_P(zv) \
    php_wxColour_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxCursor_entry;
extern zend_object_handlers wxphp_wxCursor_object_handlers;
void php_wxCursor_destruction_handler(zend_resource*);

class wxCursor_php: public wxCursor{
    public:

    wxCursor_php():wxCursor(){}
    wxCursor_php(const wxImage& image):wxCursor(image){}
    wxCursor_php(const wxCursor& cursor):wxCursor(cursor){}
    wxCursor_php(const wxString& cursorName, wxBitmapType type=wxCURSOR_DEFAULT_TYPE, int hotSpotX=0, int hotSpotY=0):wxCursor(cursorName, type, hotSpotX, hotSpotY){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxCursor{
    wxCursor_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxCursor;

void php_wxCursor_free(void *object);
zend_object* php_wxCursor_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxCursor_functions[] = {
    PHP_ME(php_wxCursor, IsOk, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxCursor, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxCursor * php_wxCursor_fetch_object(zend_object *obj) {
    return (zo_wxCursor *)(
        (char *)(obj) - XtOffsetOf(zo_wxCursor, zo)
    );
}

#define Z_wxCursor_P(zv) \
    php_wxCursor_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxDCClipper_entry;
extern zend_object_handlers wxphp_wxDCClipper_object_handlers;
void php_wxDCClipper_destruction_handler(zend_resource*);

class wxDCClipper_php: public wxDCClipper{
    public:

    wxDCClipper_php(wxDC& dc, const wxRegion& region):wxDCClipper(dc, region){}
    wxDCClipper_php(wxDC& dc, const wxRect& rect):wxDCClipper(dc, rect){}
    wxDCClipper_php(wxDC& dc, wxCoord x, wxCoord y, wxCoord w, wxCoord h):wxDCClipper(dc, x, y, w, h){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxDCClipper{
    wxDCClipper_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxDCClipper;

void php_wxDCClipper_free(void *object);
zend_object* php_wxDCClipper_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxDCClipper_functions[] = {
    PHP_ME(php_wxDCClipper, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxDCClipper * php_wxDCClipper_fetch_object(zend_object *obj) {
    return (zo_wxDCClipper *)(
        (char *)(obj) - XtOffsetOf(zo_wxDCClipper, zo)
    );
}

#define Z_wxDCClipper_P(zv) \
    php_wxDCClipper_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFont_entry;
extern zend_object_handlers wxphp_wxFont_object_handlers;
void php_wxFont_destruction_handler(zend_resource*);

class wxFont_php: public wxFont{
    public:

    wxFont_php():wxFont(){}
    wxFont_php(const wxFont& font):wxFont(font){}
    wxFont_php(int pointSize, wxFontFamily family, wxFontStyle style, wxFontWeight weight, bool underline=false, const wxString& faceName=wxEmptyString, wxFontEncoding encoding=wxFONTENCODING_DEFAULT):wxFont(pointSize, family, style, weight, underline, faceName, encoding){}
    wxFont_php(const wxSize& pixelSize, wxFontFamily family, wxFontStyle style, wxFontWeight weight, bool underline=false, const wxString& faceName=wxEmptyString, wxFontEncoding encoding=wxFONTENCODING_DEFAULT):wxFont(pixelSize, family, style, weight, underline, faceName, encoding){}
    wxFont_php(const wxString& nativeInfoString):wxFont(nativeInfoString){}
    wxFont_php(const wxNativeFontInfo& nativeInfo):wxFont(nativeInfo){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFont{
    wxFont_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFont;

void php_wxFont_free(void *object);
zend_object* php_wxFont_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFont_functions[] = {
    PHP_ME(php_wxFont, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxFont, Bold, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, GetDefaultEncoding, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, GetEncoding, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, GetFaceName, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, GetFamily, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, GetNativeFontInfoDesc, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, GetNativeFontInfoUserDesc, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, GetPixelSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, GetPointSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, GetStyle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, GetUnderlined, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, GetWeight, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, IsFixedWidth, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, IsOk, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, Italic, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, Larger, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, MakeBold, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, MakeItalic, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, MakeLarger, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, MakeSmaller, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, MakeUnderlined, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, NewMethod, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, Scale, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, Scaled, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetDefaultEncoding, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetEncoding, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetFaceName, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetFamily, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetNativeFontInfo, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetNativeFontInfoUserDesc, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetPixelSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetPointSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetStyle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetSymbolicSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetSymbolicSizeRelativeTo, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetUnderlined, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, SetWeight, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, Smaller, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, Underlined, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFont, GetNativeFontInfo, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxFont * php_wxFont_fetch_object(zend_object *obj) {
    return (zo_wxFont *)(
        (char *)(obj) - XtOffsetOf(zo_wxFont, zo)
    );
}

#define Z_wxFont_P(zv) \
    php_wxFont_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFontList_entry;
extern zend_object_handlers wxphp_wxFontList_object_handlers;
void php_wxFontList_destruction_handler(zend_resource*);

class wxFontList_php: public wxFontList{
    public:

    wxFontList_php():wxFontList(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFontList{
    wxFontList_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFontList;

void php_wxFontList_free(void *object);
zend_object* php_wxFontList_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFontList_functions[] = {
    PHP_ME(php_wxFontList, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxFontList, FindOrCreateFont, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxFontList * php_wxFontList_fetch_object(zend_object *obj) {
    return (zo_wxFontList *)(
        (char *)(obj) - XtOffsetOf(zo_wxFontList, zo)
    );
}

#define Z_wxFontList_P(zv) \
    php_wxFontList_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxFontEnumerator_entry;
extern zend_object_handlers wxphp_wxFontEnumerator_object_handlers;
void php_wxFontEnumerator_destruction_handler(zend_resource*);

class wxFontEnumerator_php: public wxFontEnumerator{
    public:

    
    bool OnFontEncoding(const wxString& font, const wxString& encoding);
    bool OnFacename(const wxString& font);
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFontEnumerator{
    wxFontEnumerator_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFontEnumerator;

void php_wxFontEnumerator_free(void *object);
zend_object* php_wxFontEnumerator_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFontEnumerator_functions[] = {
    PHP_ME(php_wxFontEnumerator, IsValidFacename, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontEnumerator, GetFacenames, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontEnumerator, GetEncodings, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontEnumerator, EnumerateFacenames, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFontEnumerator, EnumerateEncodings, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxFontEnumerator * php_wxFontEnumerator_fetch_object(zend_object *obj) {
    return (zo_wxFontEnumerator *)(
        (char *)(obj) - XtOffsetOf(zo_wxFontEnumerator, zo)
    );
}

#define Z_wxFontEnumerator_P(zv) \
    php_wxFontEnumerator_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxNativeFontInfo_entry;
extern zend_object_handlers wxphp_wxNativeFontInfo_object_handlers;
void php_wxNativeFontInfo_destruction_handler(zend_resource*);

class wxNativeFontInfo_php: public wxNativeFontInfo{
    public:

    wxNativeFontInfo_php():wxNativeFontInfo(){}
    wxNativeFontInfo_php(const wxNativeFontInfo& info):wxNativeFontInfo(info){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxNativeFontInfo{
    wxNativeFontInfo_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxNativeFontInfo;

void php_wxNativeFontInfo_free(void *object);
zend_object* php_wxNativeFontInfo_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxNativeFontInfo_functions[] = {
    PHP_ME(php_wxNativeFontInfo, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxNativeFontInfo, FromString, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, FromUserString, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, GetEncoding, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, GetFaceName, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, GetFamily, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, GetPointSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, GetStyle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, GetUnderlined, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, GetWeight, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, Init, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, InitFromFont, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, SetEncoding, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, SetFaceName, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, SetFamily, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, SetPointSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, SetStyle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, SetUnderlined, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, SetWeight, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, ToString, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxNativeFontInfo, ToUserString, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxNativeFontInfo * php_wxNativeFontInfo_fetch_object(zend_object *obj) {
    return (zo_wxNativeFontInfo *)(
        (char *)(obj) - XtOffsetOf(zo_wxNativeFontInfo, zo)
    );
}

#define Z_wxNativeFontInfo_P(zv) \
    php_wxNativeFontInfo_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxColourDatabase_entry;
extern zend_object_handlers wxphp_wxColourDatabase_object_handlers;
void php_wxColourDatabase_destruction_handler(zend_resource*);

class wxColourDatabase_php: public wxColourDatabase{
    public:

    wxColourDatabase_php():wxColourDatabase(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxColourDatabase{
    wxColourDatabase_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxColourDatabase;

void php_wxColourDatabase_free(void *object);
zend_object* php_wxColourDatabase_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxColourDatabase_functions[] = {
    PHP_ME(php_wxColourDatabase, AddColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourDatabase, Find, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourDatabase, FindName, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxColourDatabase, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxColourDatabase * php_wxColourDatabase_fetch_object(zend_object *obj) {
    return (zo_wxColourDatabase *)(
        (char *)(obj) - XtOffsetOf(zo_wxColourDatabase, zo)
    );
}

#define Z_wxColourDatabase_P(zv) \
    php_wxColourDatabase_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxGDIObject_entry;
extern zend_object_handlers wxphp_wxGDIObject_object_handlers;
void php_wxGDIObject_destruction_handler(zend_resource*);

class wxGDIObject_php: public wxGDIObject{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxGDIObject{
    wxGDIObject_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxGDIObject;

void php_wxGDIObject_free(void *object);
zend_object* php_wxGDIObject_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxGDIObject_functions[] = {
    PHP_FE_END
};
#endif


static inline zo_wxGDIObject * php_wxGDIObject_fetch_object(zend_object *obj) {
    return (zo_wxGDIObject *)(
        (char *)(obj) - XtOffsetOf(zo_wxGDIObject, zo)
    );
}

#define Z_wxGDIObject_P(zv) \
    php_wxGDIObject_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxGraphicsRenderer_entry;
extern zend_object_handlers wxphp_wxGraphicsRenderer_object_handlers;
void php_wxGraphicsRenderer_destruction_handler(zend_resource*);

class wxGraphicsRenderer_php: public wxGraphicsRenderer{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxGraphicsRenderer{
    wxGraphicsRenderer_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxGraphicsRenderer;

void php_wxGraphicsRenderer_free(void *object);
zend_object* php_wxGraphicsRenderer_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxGraphicsRenderer_functions[] = {
    PHP_FE_END
};
#endif


static inline zo_wxGraphicsRenderer * php_wxGraphicsRenderer_fetch_object(zend_object *obj) {
    return (zo_wxGraphicsRenderer *)(
        (char *)(obj) - XtOffsetOf(zo_wxGraphicsRenderer, zo)
    );
}

#define Z_wxGraphicsRenderer_P(zv) \
    php_wxGraphicsRenderer_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxGraphicsMatrix_entry;
extern zend_object_handlers wxphp_wxGraphicsMatrix_object_handlers;
void php_wxGraphicsMatrix_destruction_handler(zend_resource*);

class wxGraphicsMatrix_php: public wxGraphicsMatrix{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxGraphicsMatrix{
    wxGraphicsMatrix_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxGraphicsMatrix;

void php_wxGraphicsMatrix_free(void *object);
zend_object* php_wxGraphicsMatrix_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxGraphicsMatrix_functions[] = {
    PHP_FE_END
};
#endif


static inline zo_wxGraphicsMatrix * php_wxGraphicsMatrix_fetch_object(zend_object *obj) {
    return (zo_wxGraphicsMatrix *)(
        (char *)(obj) - XtOffsetOf(zo_wxGraphicsMatrix, zo)
    );
}

#define Z_wxGraphicsMatrix_P(zv) \
    php_wxGraphicsMatrix_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxIcon_entry;
extern zend_object_handlers wxphp_wxIcon_object_handlers;
void php_wxIcon_destruction_handler(zend_resource*);

class wxIcon_php: public wxIcon{
    public:

    wxIcon_php(const wxString& name, wxBitmapType type=wxICON_DEFAULT_TYPE, int desiredWidth=-1, int desiredHeight=-1):wxIcon(name, type, desiredWidth, desiredHeight){}
    wxIcon_php(const wxIcon& icon):wxIcon(icon){}
    wxIcon_php():wxIcon(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxIcon{
    wxIcon_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxIcon;

void php_wxIcon_free(void *object);
zend_object* php_wxIcon_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxIcon_functions[] = {
    PHP_ME(php_wxIcon, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxIcon, SetWidth, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIcon, SetHeight, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIcon, SetDepth, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIcon, LoadFile, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIcon, IsOk, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIcon, GetWidth, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIcon, GetHeight, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIcon, GetDepth, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIcon, CopyFromBitmap, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxIcon * php_wxIcon_fetch_object(zend_object *obj) {
    return (zo_wxIcon *)(
        (char *)(obj) - XtOffsetOf(zo_wxIcon, zo)
    );
}

#define Z_wxIcon_P(zv) \
    php_wxIcon_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxIconBundle_entry;
extern zend_object_handlers wxphp_wxIconBundle_object_handlers;
void php_wxIconBundle_destruction_handler(zend_resource*);

class wxIconBundle_php: public wxIconBundle{
    public:

    wxIconBundle_php():wxIconBundle(){}
    wxIconBundle_php(const wxString& file, wxBitmapType type=wxBITMAP_TYPE_ANY):wxIconBundle(file, type){}
    wxIconBundle_php(const wxIcon& icon):wxIconBundle(icon){}
    wxIconBundle_php(const wxIconBundle& ic):wxIconBundle(ic){}
    wxIconBundle_php(wxInputStream& stream, wxBitmapType type=wxBITMAP_TYPE_ANY):wxIconBundle(stream, type){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxIconBundle{
    wxIconBundle_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxIconBundle;

void php_wxIconBundle_free(void *object);
zend_object* php_wxIconBundle_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxIconBundle_functions[] = {
    PHP_ME(php_wxIconBundle, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxIconBundle, IsEmpty, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIconBundle, GetIconOfExactSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIconBundle, GetIconCount, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIconBundle, GetIconByIndex, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIconBundle, AddIcon, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxIconBundle, GetIcon, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxIconBundle * php_wxIconBundle_fetch_object(zend_object *obj) {
    return (zo_wxIconBundle *)(
        (char *)(obj) - XtOffsetOf(zo_wxIconBundle, zo)
    );
}

#define Z_wxIconBundle_P(zv) \
    php_wxIconBundle_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxImageHandler_entry;
extern zend_object_handlers wxphp_wxImageHandler_object_handlers;
void php_wxImageHandler_destruction_handler(zend_resource*);

class wxImageHandler_php: public wxImageHandler{
    public:

    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxImageHandler{
    wxImageHandler_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxImageHandler;

void php_wxImageHandler_free(void *object);
zend_object* php_wxImageHandler_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxImageHandler_functions[] = {
    PHP_ME(php_wxImageHandler, CanRead, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageHandler, GetAltExtensions, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageHandler, GetExtension, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageHandler, GetImageCount, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageHandler, GetMimeType, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageHandler, GetName, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageHandler, GetType, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageHandler, LoadFile, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageHandler, SaveFile, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageHandler, SetAltExtensions, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageHandler, SetExtension, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageHandler, SetMimeType, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageHandler, SetName, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxImageHandler * php_wxImageHandler_fetch_object(zend_object *obj) {
    return (zo_wxImageHandler *)(
        (char *)(obj) - XtOffsetOf(zo_wxImageHandler, zo)
    );
}

#define Z_wxImageHandler_P(zv) \
    php_wxImageHandler_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxImage_entry;
extern zend_object_handlers wxphp_wxImage_object_handlers;
void php_wxImage_destruction_handler(zend_resource*);

class wxImage_php: public wxImage{
    public:

    wxImage_php(int width, int height, bool clear=true):wxImage(width, height, clear){}
    wxImage_php():wxImage(){}
    wxImage_php(const wxSize& sz, bool clear=true):wxImage(sz, clear){}
    wxImage_php(const wxString& name, wxBitmapType type=wxBITMAP_TYPE_ANY, int index=-1):wxImage(name, type, index){}
    wxImage_php(const wxString& name, const wxString& mimetype, int index=-1):wxImage(name, mimetype, index){}
    wxImage_php(wxInputStream& stream, wxBitmapType type=wxBITMAP_TYPE_ANY, int index=-1):wxImage(stream, type, index){}
    wxImage_php(wxInputStream& stream, const wxString& mimetype, int index=-1):wxImage(stream, mimetype, index){}
    wxImage_php(const wxSize& sz, unsigned char* data, unsigned char* alpha, bool static_data=false):wxImage(sz, data, alpha, static_data){}
    wxImage_php(int width, int height, unsigned char* data, unsigned char* alpha, bool static_data=false):wxImage(width, height, data, alpha, static_data){}
    wxImage_php(const wxSize& sz, unsigned char* data, bool static_data=false):wxImage(sz, data, static_data){}
    wxImage_php(int width, int height, unsigned char* data, bool static_data=false):wxImage(width, height, data, static_data){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxImage{
    wxImage_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxImage;

void php_wxImage_free(void *object);
zend_object* php_wxImage_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxImage_functions[] = {
    PHP_ME(php_wxImage, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxImage, SetType, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, SetRGB, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, SetPalette, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, SetOption, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, SetMaskFromImage, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, SetMaskColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, SetMask, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, SetData, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, SetAlpha, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Scale, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, SaveFile, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, RotateHue, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Rotate90, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Rotate180, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Rotate, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Resize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Rescale, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Replace, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, RemoveHandler, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Paste, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Mirror, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, LoadFile, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, IsTransparent, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, IsOk, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, InsertHandler, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, InitStandardHandlers, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, InitAlpha, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, HasOption, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, HasMask, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, HasAlpha, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetWidth, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetType, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetSubImage, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetRed, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetPalette, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetOrFindMaskColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetOptionInt, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetOption, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetMaskRed, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetMaskGreen, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetMaskBlue, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetImageExtWildcard, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetImageCount, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetHeight, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetGreen, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetData, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetBlue, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, GetAlpha, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, FindHandlerMime, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, FindHandler, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, FindFirstUnusedColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Destroy, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Copy, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, ConvertToMono, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, ConvertToGreyscale, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, ConvertToDisabled, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, ConvertAlphaToMask, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, ClearAlpha, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Clear, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, CleanUpHandlers, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, CanRead, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, BlurVertical, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, BlurHorizontal, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Blur, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, AddHandler, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImage, Size, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxImage * php_wxImage_fetch_object(zend_object *obj) {
    return (zo_wxImage *)(
        (char *)(obj) - XtOffsetOf(zo_wxImage, zo)
    );
}

#define Z_wxImage_P(zv) \
    php_wxImage_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxImageList_entry;
extern zend_object_handlers wxphp_wxImageList_object_handlers;
void php_wxImageList_destruction_handler(zend_resource*);

class wxImageList_php: public wxImageList{
    public:

    wxImageList_php():wxImageList(){}
    wxImageList_php(int width, int height, bool mask=true, int initialCount=1):wxImageList(width, height, mask, initialCount){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxImageList{
    wxImageList_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxImageList;

void php_wxImageList_free(void *object);
zend_object* php_wxImageList_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxImageList_functions[] = {
    PHP_ME(php_wxImageList, Add, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageList, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageList, GetBitmap, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageList, GetIcon, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageList, GetImageCount, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageList, GetSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageList, Remove, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageList, RemoveAll, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageList, Replace, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxImageList, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxImageList, Draw, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxImageList * php_wxImageList_fetch_object(zend_object *obj) {
    return (zo_wxImageList *)(
        (char *)(obj) - XtOffsetOf(zo_wxImageList, zo)
    );
}

#define Z_wxImageList_P(zv) \
    php_wxImageList_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPalette_entry;
extern zend_object_handlers wxphp_wxPalette_object_handlers;
void php_wxPalette_destruction_handler(zend_resource*);

class wxPalette_php: public wxPalette{
    public:

    wxPalette_php():wxPalette(){}
    wxPalette_php(const wxPalette& palette):wxPalette(palette){}
    wxPalette_php(int n, const unsigned char* red, const unsigned char* green, const unsigned char* blue):wxPalette(n, red, green, blue){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPalette{
    wxPalette_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPalette;

void php_wxPalette_free(void *object);
zend_object* php_wxPalette_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPalette_functions[] = {
    PHP_ME(php_wxPalette, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxPalette, IsOk, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPalette, GetPixel, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPalette, GetColoursCount, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPalette, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPalette, GetRGB, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxPalette * php_wxPalette_fetch_object(zend_object *obj) {
    return (zo_wxPalette *)(
        (char *)(obj) - XtOffsetOf(zo_wxPalette, zo)
    );
}

#define Z_wxPalette_P(zv) \
    php_wxPalette_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPen_entry;
extern zend_object_handlers wxphp_wxPen_object_handlers;
void php_wxPen_destruction_handler(zend_resource*);

class wxPen_php: public wxPen{
    public:

    wxPen_php():wxPen(){}
    wxPen_php(const wxColour& colour, int width=1, wxPenStyle style=wxPENSTYLE_SOLID):wxPen(colour, width, style){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPen{
    wxPen_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPen;

void php_wxPen_free(void *object);
zend_object* php_wxPen_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPen_functions[] = {
    PHP_ME(php_wxPen, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxPen, IsTransparent, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, IsOk, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, IsNonTransparent, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, GetWidth, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, GetStyle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, GetStipple, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, GetJoin, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, GetColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, GetCap, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, SetColour, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, SetJoin, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, SetStipple, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, SetStyle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, SetWidth, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPen, SetCap, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxPen * php_wxPen_fetch_object(zend_object *obj) {
    return (zo_wxPen *)(
        (char *)(obj) - XtOffsetOf(zo_wxPen, zo)
    );
}

#define Z_wxPen_P(zv) \
    php_wxPen_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPenList_entry;
extern zend_object_handlers wxphp_wxPenList_object_handlers;
void php_wxPenList_destruction_handler(zend_resource*);

class wxPenList_php: public wxPenList{
    public:

    wxPenList_php():wxPenList(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPenList{
    wxPenList_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPenList;

void php_wxPenList_free(void *object);
zend_object* php_wxPenList_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPenList_functions[] = {
    PHP_ME(php_wxPenList, FindOrCreatePen, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPenList, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxPenList * php_wxPenList_fetch_object(zend_object *obj) {
    return (zo_wxPenList *)(
        (char *)(obj) - XtOffsetOf(zo_wxPenList, zo)
    );
}

#define Z_wxPenList_P(zv) \
    php_wxPenList_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxRendererNative_entry;
extern zend_object_handlers wxphp_wxRendererNative_object_handlers;
void php_wxRendererNative_destruction_handler(zend_resource*);

class wxRendererNative_php: public wxRendererNative{
    public:

    
    void DrawCheckBox(wxWindow* win, wxDC& dc, const wxRect& rect, int flags=0);
    void DrawChoice(wxWindow* win, wxDC& dc, const wxRect& rect, int flags=0);
    void DrawComboBox(wxWindow* win, wxDC& dc, const wxRect& rect, int flags=0);
    void DrawComboBoxDropButton(wxWindow* win, wxDC& dc, const wxRect& rect, int flags=0);
    void DrawDropArrow(wxWindow* win, wxDC& dc, const wxRect& rect, int flags=0);
    void DrawFocusRect(wxWindow* win, wxDC& dc, const wxRect& rect, int flags=0);
    void DrawPushButton(wxWindow* win, wxDC& dc, const wxRect& rect, int flags=0);
    void DrawItemSelectionRect(wxWindow* win, wxDC& dc, const wxRect& rect, int flags=0);
    void DrawRadioBitmap(wxWindow* win, wxDC& dc, const wxRect& rect, int flags=0);
    void DrawSplitterBorder(wxWindow* win, wxDC& dc, const wxRect& rect, int flags=0);
    void DrawSplitterSash(wxWindow* win, wxDC& dc, const wxSize& size, wxCoord position, wxOrientation orient, int flags=0);
    void DrawTextCtrl(wxWindow* win, wxDC& dc, const wxRect& rect, int flags=0);
    void DrawTreeItemButton(wxWindow* win, wxDC& dc, const wxRect& rect, int flags=0);
    wxSize GetCheckBoxSize(wxWindow* win);
    int GetHeaderButtonHeight(wxWindow* win);
    int GetHeaderButtonMargin(wxWindow* win);
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxRendererNative{
    wxRendererNative_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxRendererNative;

void php_wxRendererNative_free(void *object);
zend_object* php_wxRendererNative_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxRendererNative_functions[] = {
    PHP_ME(php_wxRendererNative, Get, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRendererNative, GetDefault, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRendererNative, GetGeneric, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRendererNative, Load, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxRendererNative, Set, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxRendererNative * php_wxRendererNative_fetch_object(zend_object *obj) {
    return (zo_wxRendererNative *)(
        (char *)(obj) - XtOffsetOf(zo_wxRendererNative, zo)
    );
}

#define Z_wxRendererNative_P(zv) \
    php_wxRendererNative_fetch_object(Z_OBJ_P(zv))
#endif //WXPHP_GDI_H_GUARD
