/*
 * @author Mário Soares
 * @contributors Jefferson González
 * @contributors René Vögeli / Rangee GmbH
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#ifndef WXPHP_APPMANAGEMENT_H_GUARD
#define WXPHP_APPMANAGEMENT_H_GUARD

#include "references.h"
#include "object_types.h"

ZEND_BEGIN_ARG_INFO_EX(wxphp_appmanagement_get_args, 0, 0, 1)
    ZEND_ARG_INFO(0, name)
ZEND_END_ARG_INFO()

extern zend_class_entry* php_wxEventLoopBase_entry;
extern zend_object_handlers wxphp_wxEventLoopBase_object_handlers;
void php_wxEventLoopBase_destruction_handler(zend_resource*);

class wxEventLoopBase_php: public wxEventLoopBase{
    public:

    
    bool Dispatch();
    int DispatchTimeout(unsigned long timeout);
    void OnExit();
    bool Pending() const;
    int Run();
    void WakeUp();
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxEventLoopBase{
    wxEventLoopBase_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxEventLoopBase;

void php_wxEventLoopBase_free(void *object);
zend_object* php_wxEventLoopBase_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopBase_GetActive_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopBase_IsEventAllowedInsideYield_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, cat)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopBase_IsMain_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopBase_IsOk_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopBase_IsRunning_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopBase_IsYielding_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopBase_ProcessIdle_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopBase_ExitMethod_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, rc)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopBase_SetActive_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, loop)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopBase_WakeUpIdle_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopBase_YieldMethod_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, onlyIfNeeded)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopBase_YieldFor_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, eventsToProcess)
ZEND_END_ARG_INFO()

static zend_function_entry php_wxEventLoopBase_functions[] = {
    PHP_ME(php_wxEventLoopBase, GetActive, php_wxEventLoopBase_GetActive_arg_infos, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEventLoopBase, IsEventAllowedInsideYield, php_wxEventLoopBase_IsEventAllowedInsideYield_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEventLoopBase, IsMain, php_wxEventLoopBase_IsMain_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEventLoopBase, IsOk, php_wxEventLoopBase_IsOk_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEventLoopBase, IsRunning, php_wxEventLoopBase_IsRunning_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEventLoopBase, IsYielding, php_wxEventLoopBase_IsYielding_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEventLoopBase, ProcessIdle, php_wxEventLoopBase_ProcessIdle_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEventLoopBase, ExitMethod, php_wxEventLoopBase_ExitMethod_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEventLoopBase, SetActive, php_wxEventLoopBase_SetActive_arg_infos, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEventLoopBase, WakeUpIdle, php_wxEventLoopBase_WakeUpIdle_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEventLoopBase, YieldMethod, php_wxEventLoopBase_YieldMethod_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxEventLoopBase, YieldFor, php_wxEventLoopBase_YieldFor_arg_infos, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxEventLoopBase * php_wxEventLoopBase_fetch_object(zend_object *obj) {
    return (zo_wxEventLoopBase *)(
        (char *)(obj) - XtOffsetOf(zo_wxEventLoopBase, zo)
    );
}

#define Z_wxEventLoopBase_P(zv) \
    php_wxEventLoopBase_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxEventLoopActivator_entry;
extern zend_object_handlers wxphp_wxEventLoopActivator_object_handlers;
void php_wxEventLoopActivator_destruction_handler(zend_resource*);

class wxEventLoopActivator_php: public wxEventLoopActivator{
    public:

    wxEventLoopActivator_php(wxEventLoopBase* loop):wxEventLoopActivator(loop){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxEventLoopActivator{
    wxEventLoopActivator_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxEventLoopActivator;

void php_wxEventLoopActivator_free(void *object);
zend_object* php_wxEventLoopActivator_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
ZEND_BEGIN_ARG_INFO_EX(php_wxEventLoopActivator___construct_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, loop)
ZEND_END_ARG_INFO()

static zend_function_entry php_wxEventLoopActivator_functions[] = {
    PHP_ME(php_wxEventLoopActivator, __construct, php_wxEventLoopActivator___construct_arg_infos, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxEventLoopActivator * php_wxEventLoopActivator_fetch_object(zend_object *obj) {
    return (zo_wxEventLoopActivator *)(
        (char *)(obj) - XtOffsetOf(zo_wxEventLoopActivator, zo)
    );
}

#define Z_wxEventLoopActivator_P(zv) \
    php_wxEventLoopActivator_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxModule_entry;
extern zend_object_handlers wxphp_wxModule_object_handlers;
void php_wxModule_destruction_handler(zend_resource*);

class wxModule_php: public wxModule{
    public:

    wxModule_php():wxModule(){}
    
    void OnExit();
    bool OnInit();
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxModule{
    wxModule_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxModule;

void php_wxModule_free(void *object);
zend_object* php_wxModule_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
ZEND_BEGIN_ARG_INFO_EX(php_wxModule___construct_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, other)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxModule_UnShare_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxModule_UnRef_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxModule_IsSameAs_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, obj)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxModule_Ref_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, clone)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxModule_GetClassInfo_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxModule_IsKindOf_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, info)
ZEND_END_ARG_INFO()

static zend_function_entry php_wxModule_functions[] = {
    PHP_ME(php_wxModule, __construct, php_wxModule___construct_arg_infos, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxModule * php_wxModule_fetch_object(zend_object *obj) {
    return (zo_wxModule *)(
        (char *)(obj) - XtOffsetOf(zo_wxModule, zo)
    );
}

#define Z_wxModule_P(zv) \
    php_wxModule_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxProcess_entry;
extern zend_object_handlers wxphp_wxProcess_object_handlers;
void php_wxProcess_destruction_handler(zend_resource*);

class wxProcess_php: public wxProcess{
    public:

    wxProcess_php(wxEvtHandler* parent=NULL, int id=-1):wxProcess(parent, id){}
    wxProcess_php(int flags):wxProcess(flags){}
    
    void OnTerminate(int pid, int status);
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxProcess{
    wxProcess_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxProcess;

void php_wxProcess_free(void *object);
zend_object* php_wxProcess_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_CloseOutput_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_Detach_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_Exists_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, pid)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_GetErrorStream_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_GetInputStream_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_GetOutputStream_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_GetPid_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_IsErrorAvailable_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_IsInputOpened_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_Kill_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, pid)
    ZEND_ARG_INFO(0, sig)
    ZEND_ARG_INFO(0, flags)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_IsInputAvailable_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_Redirect_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_Open_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, cmd)
    ZEND_ARG_INFO(0, flags)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess___construct_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, parent)
    ZEND_ARG_INFO(0, id)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_Connect_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, id)
    ZEND_ARG_INFO(0, lastId)
    ZEND_ARG_INFO(0, eventType)
    ZEND_ARG_INFO(0, function)
    ZEND_ARG_INFO(0, userData)
    ZEND_ARG_INFO(0, eventSink)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_Disconnect_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, id)
    ZEND_ARG_INFO(0, lastId)
    ZEND_ARG_INFO(0, eventType)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_AddFilter_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, filter)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_AddPendingEvent_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, event)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_DeletePendingEvents_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_GetEvtHandlerEnabled_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_GetNextHandler_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_GetPreviousHandler_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_IsUnlinked_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_ProcessEvent_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, event)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_ProcessEventLocally_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, event)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_ProcessPendingEvents_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_QueueEvent_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, event)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_RemoveFilter_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, filter)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_SafelyProcessEvent_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, event)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_SetEvtHandlerEnabled_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, enabled)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_SetNextHandler_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, handler)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_SetPreviousHandler_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, handler)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_Unlink_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_UnShare_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_UnRef_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_IsSameAs_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, obj)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_Ref_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, clone)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_GetClassInfo_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxProcess_IsKindOf_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, info)
ZEND_END_ARG_INFO()

static zend_function_entry php_wxProcess_functions[] = {
    PHP_ME(php_wxProcess, CloseOutput, php_wxProcess_CloseOutput_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, Detach, php_wxProcess_Detach_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, Exists, php_wxProcess_Exists_arg_infos, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, GetErrorStream, php_wxProcess_GetErrorStream_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, GetInputStream, php_wxProcess_GetInputStream_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, GetOutputStream, php_wxProcess_GetOutputStream_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, GetPid, php_wxProcess_GetPid_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, IsErrorAvailable, php_wxProcess_IsErrorAvailable_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, IsInputOpened, php_wxProcess_IsInputOpened_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, Kill, php_wxProcess_Kill_arg_infos, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, IsInputAvailable, php_wxProcess_IsInputAvailable_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, Redirect, php_wxProcess_Redirect_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, Open, php_wxProcess_Open_arg_infos, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxProcess, __construct, php_wxProcess___construct_arg_infos, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxProcess * php_wxProcess_fetch_object(zend_object *obj) {
    return (zo_wxProcess *)(
        (char *)(obj) - XtOffsetOf(zo_wxProcess, zo)
    );
}

#define Z_wxProcess_P(zv) \
    php_wxProcess_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSingleInstanceChecker_entry;
extern zend_object_handlers wxphp_wxSingleInstanceChecker_object_handlers;
void php_wxSingleInstanceChecker_destruction_handler(zend_resource*);

class wxSingleInstanceChecker_php: public wxSingleInstanceChecker{
    public:

    wxSingleInstanceChecker_php():wxSingleInstanceChecker(){}
    wxSingleInstanceChecker_php(const wxString& name, const wxString& path=wxEmptyString):wxSingleInstanceChecker(name, path){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSingleInstanceChecker{
    wxSingleInstanceChecker_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSingleInstanceChecker;

void php_wxSingleInstanceChecker_free(void *object);
zend_object* php_wxSingleInstanceChecker_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
ZEND_BEGIN_ARG_INFO_EX(php_wxSingleInstanceChecker_Create_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, name)
    ZEND_ARG_INFO(0, path)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxSingleInstanceChecker_CreateDefault_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxSingleInstanceChecker_IsAnotherRunning_arg_infos, 0, 0, 0)
ZEND_END_ARG_INFO()
ZEND_BEGIN_ARG_INFO_EX(php_wxSingleInstanceChecker___construct_arg_infos, 0, 0, 0)
    ZEND_ARG_INFO(0, name)
    ZEND_ARG_INFO(0, path)
ZEND_END_ARG_INFO()

static zend_function_entry php_wxSingleInstanceChecker_functions[] = {
    PHP_ME(php_wxSingleInstanceChecker, Create, php_wxSingleInstanceChecker_Create_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSingleInstanceChecker, CreateDefault, php_wxSingleInstanceChecker_CreateDefault_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSingleInstanceChecker, IsAnotherRunning, php_wxSingleInstanceChecker_IsAnotherRunning_arg_infos, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSingleInstanceChecker, __construct, php_wxSingleInstanceChecker___construct_arg_infos, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxSingleInstanceChecker * php_wxSingleInstanceChecker_fetch_object(zend_object *obj) {
    return (zo_wxSingleInstanceChecker *)(
        (char *)(obj) - XtOffsetOf(zo_wxSingleInstanceChecker, zo)
    );
}

#define Z_wxSingleInstanceChecker_P(zv) \
    php_wxSingleInstanceChecker_fetch_object(Z_OBJ_P(zv))
#endif //WXPHP_APPMANAGEMENT_H_GUARD
