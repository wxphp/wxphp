/*
 * @author Mário Soares
 * @contributors Jefferson González
 * @contributors René Vögeli / Rangee GmbH
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @note
 * This file was auto-generated by the wxPHP source maker
*/

#ifndef WXPHP_MANAGEDWND_H_GUARD
#define WXPHP_MANAGEDWND_H_GUARD

#include "references.h"
#include "object_types.h"
#include "arginfo_void.h"

ZEND_BEGIN_ARG_INFO_EX(wxphp_managedwnd_get_args, 0, 0, 1)
    ZEND_ARG_INFO(0, name)
ZEND_END_ARG_INFO()

extern zend_class_entry* php_wxFrame_entry;
extern zend_object_handlers wxphp_wxFrame_object_handlers;
void php_wxFrame_destruction_handler(zend_resource*);

class wxFrame_php: public wxFrame{
    public:

    wxFrame_php():wxFrame(){}
    wxFrame_php(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=wxDEFAULT_FRAME_STYLE, const wxString& name=wxFrameNameStr):wxFrame(parent, id, title, pos, size, style, name){}
    
    wxStatusBar* OnCreateStatusBar(int number, long style, wxWindowID id, const wxString& name);
    wxToolBar* OnCreateToolBar(long style, wxWindowID id, const wxString& name);
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxFrame{
    wxFrame_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxFrame;

void php_wxFrame_free(void *object);
zend_object* php_wxFrame_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxFrame_functions[] = {
    PHP_ME(php_wxFrame, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxFrame, Centre, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, SetStatusBar, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, SetStatusBarPane, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, SetStatusText, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, SetMenuBar, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, GetMenuBar, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, GetStatusBar, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, GetStatusBarPane, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, GetClientAreaOrigin, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, PopStatusText, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, ProcessCommand, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, PushStatusText, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, SetStatusWidths, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, GetToolBar, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, SetToolBar, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, CreateStatusBar, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxFrame, CreateToolBar, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxFrame * php_wxFrame_fetch_object(zend_object *obj) {
    return (zo_wxFrame *)(
        (char *)(obj) - XtOffsetOf(zo_wxFrame, zo)
    );
}

#define Z_wxFrame_P(zv) \
    php_wxFrame_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMDIClientWindow_entry;
extern zend_object_handlers wxphp_wxMDIClientWindow_object_handlers;
void php_wxMDIClientWindow_destruction_handler(zend_resource*);

class wxMDIClientWindow_php: public wxMDIClientWindow{
    public:

    wxMDIClientWindow_php():wxMDIClientWindow(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMDIClientWindow{
    wxMDIClientWindow_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMDIClientWindow;

void php_wxMDIClientWindow_free(void *object);
zend_object* php_wxMDIClientWindow_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMDIClientWindow_functions[] = {
    PHP_ME(php_wxMDIClientWindow, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxMDIClientWindow, CreateClient, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxMDIClientWindow * php_wxMDIClientWindow_fetch_object(zend_object *obj) {
    return (zo_wxMDIClientWindow *)(
        (char *)(obj) - XtOffsetOf(zo_wxMDIClientWindow, zo)
    );
}

#define Z_wxMDIClientWindow_P(zv) \
    php_wxMDIClientWindow_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMDIParentFrame_entry;
extern zend_object_handlers wxphp_wxMDIParentFrame_object_handlers;
void php_wxMDIParentFrame_destruction_handler(zend_resource*);

class wxMDIParentFrame_php: public wxMDIParentFrame{
    public:

    wxMDIParentFrame_php():wxMDIParentFrame(){}
    wxMDIParentFrame_php(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL, const wxString& name=wxFrameNameStr):wxMDIParentFrame(parent, id, title, pos, size, style, name){}
    
    wxMDIClientWindow* OnCreateClient();
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMDIParentFrame{
    wxMDIParentFrame_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMDIParentFrame;

void php_wxMDIParentFrame_free(void *object);
zend_object* php_wxMDIParentFrame_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMDIParentFrame_functions[] = {
    PHP_ME(php_wxMDIParentFrame, ActivateNext, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIParentFrame, ActivatePrevious, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIParentFrame, ArrangeIcons, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIParentFrame, Cascade, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIParentFrame, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIParentFrame, GetActiveChild, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIParentFrame, GetWindowMenu, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIParentFrame, IsTDI, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIParentFrame, SetWindowMenu, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIParentFrame, Tile, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIParentFrame, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxMDIParentFrame * php_wxMDIParentFrame_fetch_object(zend_object *obj) {
    return (zo_wxMDIParentFrame *)(
        (char *)(obj) - XtOffsetOf(zo_wxMDIParentFrame, zo)
    );
}

#define Z_wxMDIParentFrame_P(zv) \
    php_wxMDIParentFrame_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMDIChildFrame_entry;
extern zend_object_handlers wxphp_wxMDIChildFrame_object_handlers;
void php_wxMDIChildFrame_destruction_handler(zend_resource*);

class wxMDIChildFrame_php: public wxMDIChildFrame{
    public:

    wxMDIChildFrame_php(wxMDIParentFrame* parent, wxWindowID id, const wxString& title, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=wxDEFAULT_FRAME_STYLE, const wxString& name=wxFrameNameStr):wxMDIChildFrame(parent, id, title, pos, size, style, name){}
    wxMDIChildFrame_php():wxMDIChildFrame(){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMDIChildFrame{
    wxMDIChildFrame_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMDIChildFrame;

void php_wxMDIChildFrame_free(void *object);
zend_object* php_wxMDIChildFrame_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMDIChildFrame_functions[] = {
    PHP_ME(php_wxMDIChildFrame, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxMDIChildFrame, Restore, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIChildFrame, Maximize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIChildFrame, IsAlwaysMaximized, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIChildFrame, GetMDIParent, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIChildFrame, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMDIChildFrame, Activate, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxMDIChildFrame * php_wxMDIChildFrame_fetch_object(zend_object *obj) {
    return (zo_wxMDIChildFrame *)(
        (char *)(obj) - XtOffsetOf(zo_wxMDIChildFrame, zo)
    );
}

#define Z_wxMDIChildFrame_P(zv) \
    php_wxMDIChildFrame_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxMiniFrame_entry;
extern zend_object_handlers wxphp_wxMiniFrame_object_handlers;
void php_wxMiniFrame_destruction_handler(zend_resource*);

class wxMiniFrame_php: public wxMiniFrame{
    public:

    wxMiniFrame_php():wxMiniFrame(){}
    wxMiniFrame_php(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=wxCAPTION|wxRESIZE_BORDER, const wxString& name=wxFrameNameStr):wxMiniFrame(parent, id, title, pos, size, style, name){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxMiniFrame{
    wxMiniFrame_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxMiniFrame;

void php_wxMiniFrame_free(void *object);
zend_object* php_wxMiniFrame_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxMiniFrame_functions[] = {
    PHP_ME(php_wxMiniFrame, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxMiniFrame, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxMiniFrame * php_wxMiniFrame_fetch_object(zend_object *obj) {
    return (zo_wxMiniFrame *)(
        (char *)(obj) - XtOffsetOf(zo_wxMiniFrame, zo)
    );
}

#define Z_wxMiniFrame_P(zv) \
    php_wxMiniFrame_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPopupWindow_entry;
extern zend_object_handlers wxphp_wxPopupWindow_object_handlers;
void php_wxPopupWindow_destruction_handler(zend_resource*);

class wxPopupWindow_php: public wxPopupWindow{
    public:

    wxPopupWindow_php(wxWindow* parent, int flags=wxBORDER_NONE):wxPopupWindow(parent, flags){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPopupWindow{
    wxPopupWindow_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPopupWindow;

void php_wxPopupWindow_free(void *object);
zend_object* php_wxPopupWindow_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPopupWindow_functions[] = {
    PHP_ME(php_wxPopupWindow, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPopupWindow, Position, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPopupWindow, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxPopupWindow * php_wxPopupWindow_fetch_object(zend_object *obj) {
    return (zo_wxPopupWindow *)(
        (char *)(obj) - XtOffsetOf(zo_wxPopupWindow, zo)
    );
}

#define Z_wxPopupWindow_P(zv) \
    php_wxPopupWindow_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPopupTransientWindow_entry;
extern zend_object_handlers wxphp_wxPopupTransientWindow_object_handlers;
void php_wxPopupTransientWindow_destruction_handler(zend_resource*);

class wxPopupTransientWindow_php: public wxPopupTransientWindow{
    public:

    wxPopupTransientWindow_php(wxWindow* parent, int flags=wxBORDER_NONE):wxPopupTransientWindow(parent, flags){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPopupTransientWindow{
    wxPopupTransientWindow_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPopupTransientWindow;

void php_wxPopupTransientWindow_free(void *object);
zend_object* php_wxPopupTransientWindow_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPopupTransientWindow_functions[] = {
    PHP_ME(php_wxPopupTransientWindow, Dismiss, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPopupTransientWindow, Popup, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPopupTransientWindow, ProcessLeftDown, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPopupTransientWindow, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxPopupTransientWindow * php_wxPopupTransientWindow_fetch_object(zend_object *obj) {
    return (zo_wxPopupTransientWindow *)(
        (char *)(obj) - XtOffsetOf(zo_wxPopupTransientWindow, zo)
    );
}

#define Z_wxPopupTransientWindow_P(zv) \
    php_wxPopupTransientWindow_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxPropertySheetDialog_entry;
extern zend_object_handlers wxphp_wxPropertySheetDialog_object_handlers;
void php_wxPropertySheetDialog_destruction_handler(zend_resource*);

class wxPropertySheetDialog_php: public wxPropertySheetDialog{
    public:

    wxPropertySheetDialog_php(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=wxDEFAULT_DIALOG_STYLE, const wxString& name=wxDialogNameStr):wxPropertySheetDialog(parent, id, title, pos, size, style, name){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxPropertySheetDialog{
    wxPropertySheetDialog_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxPropertySheetDialog;

void php_wxPropertySheetDialog_free(void *object);
zend_object* php_wxPropertySheetDialog_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxPropertySheetDialog_functions[] = {
    PHP_ME(php_wxPropertySheetDialog, AddBookCtrl, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPropertySheetDialog, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPropertySheetDialog, CreateBookCtrl, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPropertySheetDialog, CreateButtons, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPropertySheetDialog, GetBookCtrl, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPropertySheetDialog, GetInnerSizer, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPropertySheetDialog, GetSheetStyle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPropertySheetDialog, LayoutDialog, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPropertySheetDialog, SetBookCtrl, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPropertySheetDialog, SetSheetStyle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxPropertySheetDialog, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxPropertySheetDialog * php_wxPropertySheetDialog_fetch_object(zend_object *obj) {
    return (zo_wxPropertySheetDialog *)(
        (char *)(obj) - XtOffsetOf(zo_wxPropertySheetDialog, zo)
    );
}

#define Z_wxPropertySheetDialog_P(zv) \
    php_wxPropertySheetDialog_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxSplashScreen_entry;
extern zend_object_handlers wxphp_wxSplashScreen_object_handlers;
void php_wxSplashScreen_destruction_handler(zend_resource*);

class wxSplashScreen_php: public wxSplashScreen{
    public:

    wxSplashScreen_php(const wxBitmap& bitmap, long splashStyle, int milliseconds, wxWindow* parent, wxWindowID id, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=wxBORDER_SIMPLE|wxFRAME_NO_TASKBAR|wxSTAY_ON_TOP):wxSplashScreen(bitmap, splashStyle, milliseconds, parent, id, pos, size, style){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxSplashScreen{
    wxSplashScreen_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxSplashScreen;

void php_wxSplashScreen_free(void *object);
zend_object* php_wxSplashScreen_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxSplashScreen_functions[] = {
    PHP_ME(php_wxSplashScreen, GetSplashStyle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSplashScreen, GetTimeout, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxSplashScreen, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_FE_END
};
#endif


static inline zo_wxSplashScreen * php_wxSplashScreen_fetch_object(zend_object *obj) {
    return (zo_wxSplashScreen *)(
        (char *)(obj) - XtOffsetOf(zo_wxSplashScreen, zo)
    );
}

#define Z_wxSplashScreen_P(zv) \
    php_wxSplashScreen_fetch_object(Z_OBJ_P(zv))
extern zend_class_entry* php_wxTopLevelWindow_entry;
extern zend_object_handlers wxphp_wxTopLevelWindow_object_handlers;
void php_wxTopLevelWindow_destruction_handler(zend_resource*);

class wxTopLevelWindow_php: public wxTopLevelWindow{
    public:

    wxTopLevelWindow_php():wxTopLevelWindow(){}
    wxTopLevelWindow_php(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=wxDEFAULT_FRAME_STYLE, const wxString& name=wxFrameNameStr):wxTopLevelWindow(parent, id, title, pos, size, style, name){}
    
    

    zval phpObj;
    wxPHPObjectReferences references;
};

BEGIN_EXTERN_C()
typedef struct _zo_wxTopLevelWindow{
    wxTopLevelWindow_php* native_object;
    wxphp_object_type object_type;
    int is_user_initialized;
    zend_object zo;
} zo_wxTopLevelWindow;

void php_wxTopLevelWindow_free(void *object);
zend_object* php_wxTopLevelWindow_new(zend_class_entry *class_type);
END_EXTERN_C()

#ifdef WXPHP_INCLUDE_METHOD_TABLES
static zend_function_entry php_wxTopLevelWindow_functions[] = {
    PHP_ME(php_wxTopLevelWindow, __construct, arginfo_void, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
    PHP_ME(php_wxTopLevelWindow, SetTitle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, Maximize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, GetTitle, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, ShowFullScreen, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, IsFullScreen, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, SetIcon, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, CanSetTransparent, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, CentreOnScreen, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, CenterOnScreen, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, Create, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, GetDefaultItem, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, GetDefaultSize, arginfo_void, ZEND_ACC_STATIC|ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, GetIcon, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, GetIcons, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, GetTmpDefaultItem, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, Iconize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, IsActive, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, IsAlwaysMaximized, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, IsIconized, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, IsMaximized, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, Layout, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, RequestUserAttention, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, SetDefaultItem, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, SetIcons, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, SetMaxSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, SetMinSize, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, SetSizeHints, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, SetTmpDefaultItem, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, SetTransparent, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_ME(php_wxTopLevelWindow, ShouldPreventAppExit, arginfo_void, ZEND_ACC_PUBLIC)
    PHP_FE_END
};
#endif


static inline zo_wxTopLevelWindow * php_wxTopLevelWindow_fetch_object(zend_object *obj) {
    return (zo_wxTopLevelWindow *)(
        (char *)(obj) - XtOffsetOf(zo_wxTopLevelWindow, zo)
    );
}

#define Z_wxTopLevelWindow_P(zv) \
    php_wxTopLevelWindow_fetch_object(Z_OBJ_P(zv))
#endif //WXPHP_MANAGEDWND_H_GUARD
